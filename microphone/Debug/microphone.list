
microphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800984c  0800984c  0001984c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bac  08009bac  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08009bac  08009bac  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009bac  08009bac  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bac  08009bac  00019bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bb0  08009bb0  00019bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08009bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005da0  2000009c  08009c50  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005e3c  08009c50  00025e3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027c40  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004955  00000000  00000000  00047d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  0004c668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001800  00000000  00000000  0004e060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b55a  00000000  00000000  0004f860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e709  00000000  00000000  0007adba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdec9  00000000  00000000  000994c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019738c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000740c  00000000  00000000  001973e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009834 	.word	0x08009834

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08009834 	.word	0x08009834

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b0ac      	sub	sp, #176	; 0xb0
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000278:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
 8000286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000288:	f107 0314 	add.w	r3, r7, #20
 800028c:	2288      	movs	r2, #136	; 0x88
 800028e:	2100      	movs	r1, #0
 8000290:	4618      	mov	r0, r3
 8000292:	f008 fb1c 	bl	80088ce <memset>
  if(DFSDM1_Init == 0)
 8000296:	4b79      	ldr	r3, [pc, #484]	; (800047c <HAL_DFSDM_FilterMspInit+0x20c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d17d      	bne.n	800039a <HAL_DFSDM_FilterMspInit+0x12a>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 800029e:	f44f 3384 	mov.w	r3, #67584	; 0x10800
 80002a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	67bb      	str	r3, [r7, #120]	; 0x78
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80002a8:	2300      	movs	r3, #0
 80002aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002ae:	2301      	movs	r3, #1
 80002b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 80002b2:	2304      	movs	r3, #4
 80002b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 11;
 80002b6:	230b      	movs	r3, #11
 80002b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80002ba:	2307      	movs	r3, #7
 80002bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80002be:	2302      	movs	r3, #2
 80002c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80002c2:	2302      	movs	r3, #2
 80002c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80002c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4618      	mov	r0, r3
 80002d2:	f004 fb6d 	bl	80049b0 <HAL_RCCEx_PeriphCLKConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <HAL_DFSDM_FilterMspInit+0x70>
    {
      Error_Handler();
 80002dc:	f000 fb86 	bl	80009ec <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80002e0:	4b67      	ldr	r3, [pc, #412]	; (8000480 <HAL_DFSDM_FilterMspInit+0x210>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3301      	adds	r3, #1
 80002e6:	4a66      	ldr	r2, [pc, #408]	; (8000480 <HAL_DFSDM_FilterMspInit+0x210>)
 80002e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80002ea:	4b65      	ldr	r3, [pc, #404]	; (8000480 <HAL_DFSDM_FilterMspInit+0x210>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d10b      	bne.n	800030a <HAL_DFSDM_FilterMspInit+0x9a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80002f2:	4b64      	ldr	r3, [pc, #400]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 80002f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002f6:	4a63      	ldr	r2, [pc, #396]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 80002f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002fc:	6613      	str	r3, [r2, #96]	; 0x60
 80002fe:	4b61      	ldr	r3, [pc, #388]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000302:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000306:	613b      	str	r3, [r7, #16]
 8000308:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800030a:	4b5e      	ldr	r3, [pc, #376]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	4a5d      	ldr	r2, [pc, #372]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000310:	f043 0304 	orr.w	r3, r3, #4
 8000314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000316:	4b5b      	ldr	r3, [pc, #364]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031a:	f003 0304 	and.w	r3, r3, #4
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000322:	4b58      	ldr	r3, [pc, #352]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000326:	4a57      	ldr	r2, [pc, #348]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000328:	f043 0302 	orr.w	r3, r3, #2
 800032c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032e:	4b55      	ldr	r3, [pc, #340]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	f003 0302 	and.w	r3, r3, #2
 8000336:	60bb      	str	r3, [r7, #8]
 8000338:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800033a:	2304      	movs	r3, #4
 800033c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000340:	2302      	movs	r3, #2
 8000342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034c:	2300      	movs	r3, #0
 800034e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000352:	2306      	movs	r3, #6
 8000354:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000358:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800035c:	4619      	mov	r1, r3
 800035e:	484a      	ldr	r0, [pc, #296]	; (8000488 <HAL_DFSDM_FilterMspInit+0x218>)
 8000360:	f003 fa1c 	bl	800379c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800036c:	2302      	movs	r3, #2
 800036e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	2300      	movs	r3, #0
 8000374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	2300      	movs	r3, #0
 800037a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800037e:	2306      	movs	r3, #6
 8000380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000384:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000388:	4619      	mov	r1, r3
 800038a:	4840      	ldr	r0, [pc, #256]	; (800048c <HAL_DFSDM_FilterMspInit+0x21c>)
 800038c:	f003 fa06 	bl	800379c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000390:	4b3a      	ldr	r3, [pc, #232]	; (800047c <HAL_DFSDM_FilterMspInit+0x20c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	3301      	adds	r3, #1
 8000396:	4a39      	ldr	r2, [pc, #228]	; (800047c <HAL_DFSDM_FilterMspInit+0x20c>)
 8000398:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a3c      	ldr	r2, [pc, #240]	; (8000490 <HAL_DFSDM_FilterMspInit+0x220>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d130      	bne.n	8000406 <HAL_DFSDM_FilterMspInit+0x196>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80003a4:	4b3b      	ldr	r3, [pc, #236]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003a6:	4a3c      	ldr	r2, [pc, #240]	; (8000498 <HAL_DFSDM_FilterMspInit+0x228>)
 80003a8:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80003aa:	4b3a      	ldr	r3, [pc, #232]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003b0:	4b38      	ldr	r3, [pc, #224]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80003b6:	4b37      	ldr	r3, [pc, #220]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80003bc:	4b35      	ldr	r3, [pc, #212]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003be:	2280      	movs	r2, #128	; 0x80
 80003c0:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80003c2:	4b34      	ldr	r3, [pc, #208]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003c8:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80003ca:	4b32      	ldr	r3, [pc, #200]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80003d0:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80003d2:	4b30      	ldr	r3, [pc, #192]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003d4:	2220      	movs	r2, #32
 80003d6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003da:	2200      	movs	r2, #0
 80003dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80003de:	482d      	ldr	r0, [pc, #180]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003e0:	f002 ff14 	bl	800320c <HAL_DMA_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <HAL_DFSDM_FilterMspInit+0x17e>
    {
      Error_Handler();
 80003ea:	f000 faff 	bl	80009ec <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a28      	ldr	r2, [pc, #160]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80003f4:	4a27      	ldr	r2, [pc, #156]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a25      	ldr	r2, [pc, #148]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003fe:	629a      	str	r2, [r3, #40]	; 0x28
 8000400:	4a24      	ldr	r2, [pc, #144]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6293      	str	r3, [r2, #40]	; 0x28
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a24      	ldr	r2, [pc, #144]	; (800049c <HAL_DFSDM_FilterMspInit+0x22c>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d130      	bne.n	8000472 <HAL_DFSDM_FilterMspInit+0x202>
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 8000410:	4b23      	ldr	r3, [pc, #140]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000412:	4a24      	ldr	r2, [pc, #144]	; (80004a4 <HAL_DFSDM_FilterMspInit+0x234>)
 8000414:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 8000416:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000418:	2200      	movs	r2, #0
 800041a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800041c:	4b20      	ldr	r3, [pc, #128]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000424:	2200      	movs	r2, #0
 8000426:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000428:	4b1d      	ldr	r3, [pc, #116]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800042a:	2280      	movs	r2, #128	; 0x80
 800042c:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800042e:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000434:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000436:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800043c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 800043e:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000440:	2220      	movs	r2, #32
 8000442:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_LOW;
 8000444:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000446:	2200      	movs	r2, #0
 8000448:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 800044a:	4815      	ldr	r0, [pc, #84]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800044c:	f002 fede 	bl	800320c <HAL_DMA_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <HAL_DFSDM_FilterMspInit+0x1ea>
    {
      Error_Handler();
 8000456:	f000 fac9 	bl	80009ec <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a10      	ldr	r2, [pc, #64]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800045e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000460:	4a0f      	ldr	r2, [pc, #60]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a0d      	ldr	r2, [pc, #52]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800046a:	629a      	str	r2, [r3, #40]	; 0x28
 800046c:	4a0c      	ldr	r2, [pc, #48]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8000472:	bf00      	nop
 8000474:	37b0      	adds	r7, #176	; 0xb0
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	200000bc 	.word	0x200000bc
 8000480:	200000b8 	.word	0x200000b8
 8000484:	40021000 	.word	0x40021000
 8000488:	48000800 	.word	0x48000800
 800048c:	48000400 	.word	0x48000400
 8000490:	40016100 	.word	0x40016100
 8000494:	20001c78 	.word	0x20001c78
 8000498:	40020044 	.word	0x40020044
 800049c:	40016180 	.word	0x40016180
 80004a0:	20001c30 	.word	0x20001c30
 80004a4:	40020058 	.word	0x40020058

080004a8 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b0ac      	sub	sp, #176	; 0xb0
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	2288      	movs	r2, #136	; 0x88
 80004c6:	2100      	movs	r1, #0
 80004c8:	4618      	mov	r0, r3
 80004ca:	f008 fa00 	bl	80088ce <memset>
  if(DFSDM1_Init == 0)
 80004ce:	4b43      	ldr	r3, [pc, #268]	; (80005dc <HAL_DFSDM_ChannelMspInit+0x134>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d17d      	bne.n	80005d2 <HAL_DFSDM_ChannelMspInit+0x12a>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 80004d6:	f44f 3384 	mov.w	r3, #67584	; 0x10800
 80004da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80004dc:	2300      	movs	r3, #0
 80004de:	67bb      	str	r3, [r7, #120]	; 0x78
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80004e0:	2300      	movs	r3, #0
 80004e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80004e6:	2301      	movs	r3, #1
 80004e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 80004ea:	2304      	movs	r3, #4
 80004ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 11;
 80004ee:	230b      	movs	r3, #11
 80004f0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80004f2:	2307      	movs	r3, #7
 80004f4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80004f6:	2302      	movs	r3, #2
 80004f8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80004fa:	2302      	movs	r3, #2
 80004fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80004fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000502:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	4618      	mov	r0, r3
 800050a:	f004 fa51 	bl	80049b0 <HAL_RCCEx_PeriphCLKConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <HAL_DFSDM_ChannelMspInit+0x70>
    {
      Error_Handler();
 8000514:	f000 fa6a 	bl	80009ec <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000518:	4b31      	ldr	r3, [pc, #196]	; (80005e0 <HAL_DFSDM_ChannelMspInit+0x138>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	4a30      	ldr	r2, [pc, #192]	; (80005e0 <HAL_DFSDM_ChannelMspInit+0x138>)
 8000520:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000522:	4b2f      	ldr	r3, [pc, #188]	; (80005e0 <HAL_DFSDM_ChannelMspInit+0x138>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d10b      	bne.n	8000542 <HAL_DFSDM_ChannelMspInit+0x9a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800052a:	4b2e      	ldr	r3, [pc, #184]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 800052c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052e:	4a2d      	ldr	r2, [pc, #180]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000534:	6613      	str	r3, [r2, #96]	; 0x60
 8000536:	4b2b      	ldr	r3, [pc, #172]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800053a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000542:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0304 	and.w	r3, r3, #4
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000560:	f043 0302 	orr.w	r3, r3, #2
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000572:	2304      	movs	r3, #4
 8000574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000578:	2302      	movs	r3, #2
 800057a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800058a:	2306      	movs	r3, #6
 800058c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000590:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000594:	4619      	mov	r1, r3
 8000596:	4814      	ldr	r0, [pc, #80]	; (80005e8 <HAL_DFSDM_ChannelMspInit+0x140>)
 8000598:	f003 f900 	bl	800379c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80005b6:	2306      	movs	r3, #6
 80005b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005c0:	4619      	mov	r1, r3
 80005c2:	480a      	ldr	r0, [pc, #40]	; (80005ec <HAL_DFSDM_ChannelMspInit+0x144>)
 80005c4:	f003 f8ea 	bl	800379c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <HAL_DFSDM_ChannelMspInit+0x134>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	4a03      	ldr	r2, [pc, #12]	; (80005dc <HAL_DFSDM_ChannelMspInit+0x134>)
 80005d0:	6013      	str	r3, [r2, #0]
  }
}
 80005d2:	bf00      	nop
 80005d4:	37b0      	adds	r7, #176	; 0xb0
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000bc 	.word	0x200000bc
 80005e0:	200000b8 	.word	0x200000b8
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000800 	.word	0x48000800
 80005ec:	48000400 	.word	0x48000400

080005f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_DMA_Init+0x48>)
 80005f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005fa:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <MX_DMA_Init+0x48>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6493      	str	r3, [r2, #72]	; 0x48
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_DMA_Init+0x48>)
 8000604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2105      	movs	r1, #5
 8000612:	200e      	movs	r0, #14
 8000614:	f002 f8ca 	bl	80027ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000618:	200e      	movs	r0, #14
 800061a:	f002 f8e3 	bl	80027e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2105      	movs	r1, #5
 8000622:	200f      	movs	r0, #15
 8000624:	f002 f8c2 	bl	80027ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000628:	200f      	movs	r0, #15
 800062a:	f002 f8db 	bl	80027e4 <HAL_NVIC_EnableIRQ>

}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000

0800063c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of buffer_mutex */
  buffer_mutexHandle = osMutexNew(&buffer_mutex_attributes);
 8000640:	480f      	ldr	r0, [pc, #60]	; (8000680 <MX_FREERTOS_Init+0x44>)
 8000642:	f005 fa7e 	bl	8005b42 <osMutexNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <MX_FREERTOS_Init+0x48>)
 800064a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800064c:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <MX_FREERTOS_Init+0x4c>)
 800064e:	2100      	movs	r1, #0
 8000650:	480e      	ldr	r0, [pc, #56]	; (800068c <MX_FREERTOS_Init+0x50>)
 8000652:	f005 f9c9 	bl	80059e8 <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <MX_FREERTOS_Init+0x54>)
 800065a:	6013      	str	r3, [r2, #0]

  /* creation of tasktest_out */
  tasktest_outHandle = osThreadNew(test_out, NULL, &tasktest_out_attributes);
 800065c:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <MX_FREERTOS_Init+0x58>)
 800065e:	2100      	movs	r1, #0
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <MX_FREERTOS_Init+0x5c>)
 8000662:	f005 f9c1 	bl	80059e8 <osThreadNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <MX_FREERTOS_Init+0x60>)
 800066a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  tasktest_mic = osThreadNew(taskTakeMic, NULL, &tasktest_out_attributes);
 800066c:	4a09      	ldr	r2, [pc, #36]	; (8000694 <MX_FREERTOS_Init+0x58>)
 800066e:	2100      	movs	r1, #0
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <MX_FREERTOS_Init+0x64>)
 8000672:	f005 f9b9 	bl	80059e8 <osThreadNew>
 8000676:	4603      	mov	r3, r0
 8000678:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <MX_FREERTOS_Init+0x68>)
 800067a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	08009abc 	.word	0x08009abc
 8000684:	20001d80 	.word	0x20001d80
 8000688:	08009a74 	.word	0x08009a74
 800068c:	080006a9 	.word	0x080006a9
 8000690:	20001d7c 	.word	0x20001d7c
 8000694:	08009a98 	.word	0x08009a98
 8000698:	080006b9 	.word	0x080006b9
 800069c:	20001d88 	.word	0x20001d88
 80006a0:	080006c9 	.word	0x080006c9
 80006a4:	20001d84 	.word	0x20001d84

080006a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f005 fa2b 	bl	8005b0c <osDelay>
 80006b6:	e7fb      	b.n	80006b0 <StartDefaultTask+0x8>

080006b8 <test_out>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_test_out */
void test_out(void *argument)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN test_out */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f005 fa23 	bl	8005b0c <osDelay>
 80006c6:	e7fb      	b.n	80006c0 <test_out+0x8>

080006c8 <taskTakeMic>:
  /* USER CODE END test_out */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void taskTakeMic(void *pvParameters){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	while(1){
		start_recording();
 80006d0:	f000 fa98 	bl	8000c04 <start_recording>
		printf("restart\n");
 80006d4:	4801      	ldr	r0, [pc, #4]	; (80006dc <taskTakeMic+0x14>)
 80006d6:	f008 fa07 	bl	8008ae8 <puts>
		start_recording();
 80006da:	e7f9      	b.n	80006d0 <taskTakeMic+0x8>
 80006dc:	08009878 	.word	0x08009878

080006e0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	; 0x30
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f6:	4b4d      	ldr	r3, [pc, #308]	; (800082c <MX_GPIO_Init+0x14c>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a4c      	ldr	r2, [pc, #304]	; (800082c <MX_GPIO_Init+0x14c>)
 80006fc:	f043 0310 	orr.w	r3, r3, #16
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b4a      	ldr	r3, [pc, #296]	; (800082c <MX_GPIO_Init+0x14c>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0310 	and.w	r3, r3, #16
 800070a:	61bb      	str	r3, [r7, #24]
 800070c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b47      	ldr	r3, [pc, #284]	; (800082c <MX_GPIO_Init+0x14c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a46      	ldr	r2, [pc, #280]	; (800082c <MX_GPIO_Init+0x14c>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b44      	ldr	r3, [pc, #272]	; (800082c <MX_GPIO_Init+0x14c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	4b41      	ldr	r3, [pc, #260]	; (800082c <MX_GPIO_Init+0x14c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a40      	ldr	r2, [pc, #256]	; (800082c <MX_GPIO_Init+0x14c>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b3e      	ldr	r3, [pc, #248]	; (800082c <MX_GPIO_Init+0x14c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b3b      	ldr	r3, [pc, #236]	; (800082c <MX_GPIO_Init+0x14c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a3a      	ldr	r2, [pc, #232]	; (800082c <MX_GPIO_Init+0x14c>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b38      	ldr	r3, [pc, #224]	; (800082c <MX_GPIO_Init+0x14c>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	4b35      	ldr	r3, [pc, #212]	; (800082c <MX_GPIO_Init+0x14c>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a34      	ldr	r2, [pc, #208]	; (800082c <MX_GPIO_Init+0x14c>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b32      	ldr	r3, [pc, #200]	; (800082c <MX_GPIO_Init+0x14c>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076e:	4b2f      	ldr	r3, [pc, #188]	; (800082c <MX_GPIO_Init+0x14c>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a2e      	ldr	r2, [pc, #184]	; (800082c <MX_GPIO_Init+0x14c>)
 8000774:	f043 0308 	orr.w	r3, r3, #8
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b2c      	ldr	r3, [pc, #176]	; (800082c <MX_GPIO_Init+0x14c>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800078a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078c:	2303      	movs	r3, #3
 800078e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4619      	mov	r1, r3
 800079a:	4825      	ldr	r0, [pc, #148]	; (8000830 <MX_GPIO_Init+0x150>)
 800079c:	f002 fffe 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC3 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80007a0:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80007a4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a6:	2303      	movs	r3, #3
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	481f      	ldr	r0, [pc, #124]	; (8000834 <MX_GPIO_Init+0x154>)
 80007b6:	f002 fff1 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007ba:	2303      	movs	r3, #3
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007be:	2303      	movs	r3, #3
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	481a      	ldr	r0, [pc, #104]	; (8000838 <MX_GPIO_Init+0x158>)
 80007ce:	f002 ffe5 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007d2:	f649 73ff 	movw	r3, #40959	; 0x9fff
 80007d6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d8:	2303      	movs	r3, #3
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f002 ffd7 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80007ee:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80007f2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f4:	2303      	movs	r3, #3
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	480e      	ldr	r0, [pc, #56]	; (800083c <MX_GPIO_Init+0x15c>)
 8000804:	f002 ffca 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080e:	2303      	movs	r3, #3
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4808      	ldr	r0, [pc, #32]	; (8000840 <MX_GPIO_Init+0x160>)
 800081e:	f002 ffbd 	bl	800379c <HAL_GPIO_Init>

}
 8000822:	bf00      	nop
 8000824:	3730      	adds	r7, #48	; 0x30
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000
 8000830:	48001000 	.word	0x48001000
 8000834:	48000800 	.word	0x48000800
 8000838:	48001c00 	.word	0x48001c00
 800083c:	48000400 	.word	0x48000400
 8000840:	48000c00 	.word	0x48000c00

08000844 <mic_init>:
static BSP_AUDIO_Init_t MicParams;
    

static int16_t *BUFFER_RIS;

int mic_init(){
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
    
	BUFFER_RIS = (int16_t*)calloc(AUDIO_SAMPLING_FREQUENCY * 2, sizeof(int16_t));
 800084a:	2102      	movs	r1, #2
 800084c:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8000850:	f007 ff04 	bl	800865c <calloc>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <mic_init+0x88>)
 800085a:	601a      	str	r2, [r3, #0]

    if (!BUFFER_RIS) {
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <mic_init+0x88>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d105      	bne.n	8000870 <mic_init+0x2c>
            printf("Failed to allocate BUFFER_RIS buffer\n");
 8000864:	481a      	ldr	r0, [pc, #104]	; (80008d0 <mic_init+0x8c>)
 8000866:	f008 f93f 	bl	8008ae8 <puts>
            return -1;
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	e029      	b.n	80008c4 <mic_init+0x80>
        }
    
    init_buffer(BUFFER_RIS);
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <mic_init+0x88>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f000 f8bf 	bl	80009f8 <init_buffer>

    // set up the microphone
    MicParams.BitsPerSample = 16;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <mic_init+0x90>)
 800087c:	2210      	movs	r2, #16
 800087e:	609a      	str	r2, [r3, #8]
    MicParams.ChannelsNbr = AUDIO_CHANNELS;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <mic_init+0x90>)
 8000882:	2201      	movs	r2, #1
 8000884:	60da      	str	r2, [r3, #12]
    MicParams.Device = AUDIO_IN_DIGITAL_MIC1;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <mic_init+0x90>)
 8000888:	2210      	movs	r2, #16
 800088a:	601a      	str	r2, [r3, #0]
    MicParams.SampleRate = AUDIO_SAMPLING_FREQUENCY;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <mic_init+0x90>)
 800088e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000892:	605a      	str	r2, [r3, #4]
    MicParams.Volume = 32;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <mic_init+0x90>)
 8000896:	2220      	movs	r2, #32
 8000898:	611a      	str	r2, [r3, #16]

    int32_t ret = BSP_AUDIO_IN_Init(AUDIO_INSTANCE, &MicParams);
 800089a:	490e      	ldr	r1, [pc, #56]	; (80008d4 <mic_init+0x90>)
 800089c:	2000      	movs	r0, #0
 800089e:	f000 f9f7 	bl	8000c90 <BSP_AUDIO_IN_Init>
 80008a2:	6078      	str	r0, [r7, #4]

    if (ret != BSP_ERROR_NONE) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d006      	beq.n	80008b8 <mic_init+0x74>
        printf("Error Audio Init (%ld)\r\n", ret);
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <mic_init+0x94>)
 80008ae:	f008 f87f 	bl	80089b0 <iprintf>
        return -1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	e005      	b.n	80008c4 <mic_init+0x80>
    } else {
        printf("OK Audio Init\t(Audio Freq=%d)\r\n", AUDIO_SAMPLING_FREQUENCY);
 80008b8:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <mic_init+0x98>)
 80008be:	f008 f877 	bl	80089b0 <iprintf>
    }

    return 0;
 80008c2:	2300      	movs	r3, #0

}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200000d4 	.word	0x200000d4
 80008d0:	08009880 	.word	0x08009880
 80008d4:	200000c0 	.word	0x200000c0
 80008d8:	080098a8 	.word	0x080098a8
 80008dc:	080098c4 	.word	0x080098c4

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e4:	f001 fe4d 	bl	8002582 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e8:	f000 f81c 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ec:	f7ff fef8 	bl	80006e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008f0:	f7ff fe7e 	bl	80005f0 <MX_DMA_Init>
  //MX_DFSDM1_Init(); USING INIT FROM EXTERNAL LIBRARY
  /* USER CODE BEGIN 2 */
  if(mic_init() == -1){
 80008f4:	f7ff ffa6 	bl	8000844 <mic_init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008fe:	d105      	bne.n	800090c <main+0x2c>
      printf("Something goes wrong");
 8000900:	4807      	ldr	r0, [pc, #28]	; (8000920 <main+0x40>)
 8000902:	f008 f855 	bl	80089b0 <iprintf>
      return -1;
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	e006      	b.n	800091a <main+0x3a>
  //xTaskCreate(taskTakeMic, "taskMic", 115, NULL, 0, NULL);
  //printf("task create\n");
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800090c:	f005 f822 	bl	8005954 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000910:	f7ff fe94 	bl	800063c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000914:	f005 f842 	bl	800599c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000918:	e7fe      	b.n	8000918 <main+0x38>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800091a:	4618      	mov	r0, r3
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	080098e4 	.word	0x080098e4

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b096      	sub	sp, #88	; 0x58
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	2244      	movs	r2, #68	; 0x44
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f007 ffcb 	bl	80088ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	463b      	mov	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000946:	f44f 7000 	mov.w	r0, #512	; 0x200
 800094a:	f003 f9d3 	bl	8003cf4 <HAL_PWREx_ControlVoltageScaling>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000954:	f000 f84a 	bl	80009ec <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000958:	2310      	movs	r3, #16
 800095a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800095c:	2301      	movs	r3, #1
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000964:	2390      	movs	r3, #144	; 0x90
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000968:	2302      	movs	r3, #2
 800096a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800096c:	2301      	movs	r3, #1
 800096e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000970:	2304      	movs	r3, #4
 8000972:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 41;
 8000974:	2329      	movs	r3, #41	; 0x29
 8000976:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000978:	2307      	movs	r3, #7
 800097a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800097c:	2302      	movs	r3, #2
 800097e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000980:	2304      	movs	r3, #4
 8000982:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4618      	mov	r0, r3
 800098a:	f003 fa09 	bl	8003da0 <HAL_RCC_OscConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000994:	f000 f82a 	bl	80009ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000998:	230f      	movs	r3, #15
 800099a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800099c:	2303      	movs	r3, #3
 800099e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	2103      	movs	r1, #3
 80009b0:	4618      	mov	r0, r3
 80009b2:	f003 fddb 	bl	800456c <HAL_RCC_ClockConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009bc:	f000 f816 	bl	80009ec <Error_Handler>
  }
}
 80009c0:	bf00      	nop
 80009c2:	3758      	adds	r7, #88	; 0x58
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d101      	bne.n	80009de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009da:	f001 fdeb 	bl	80025b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40012c00 	.word	0x40012c00

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x8>
	...

080009f8 <init_buffer>:
static size_t transfer_complete_events = 0;


static int16_t *TARGET_AUDIO_BUFFER;

void init_buffer(int16_t *BUFFER){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
    TARGET_AUDIO_BUFFER = BUFFER;
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <init_buffer+0x1c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6013      	str	r3, [r2, #0]
    printf("target buffer inizialize\n");
 8000a06:	4804      	ldr	r0, [pc, #16]	; (8000a18 <init_buffer+0x20>)
 8000a08:	f008 f86e 	bl	8008ae8 <puts>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000124 	.word	0x20000124
 8000a18:	080098fc 	.word	0x080098fc

08000a1c <target_audio_buffer_full>:

// callback that gets invoked when TARGET_AUDIO_BUFFER is full
void target_audio_buffer_full() {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
    // pause audio stream
    int32_t ret = BSP_AUDIO_IN_Pause(AUDIO_INSTANCE);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 feae 	bl	8001784 <BSP_AUDIO_IN_Pause>
 8000a28:	60b8      	str	r0, [r7, #8]
    if (ret != BSP_ERROR_NONE) {
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d004      	beq.n	8000a3a <target_audio_buffer_full+0x1e>
        printf("Error Audio Pause (%ld)\n", ret);
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	4816      	ldr	r0, [pc, #88]	; (8000a8c <target_audio_buffer_full+0x70>)
 8000a34:	f007 ffbc 	bl	80089b0 <iprintf>
 8000a38:	e002      	b.n	8000a40 <target_audio_buffer_full+0x24>
    }
    else {
        printf("OK Audio Pause\n");
 8000a3a:	4815      	ldr	r0, [pc, #84]	; (8000a90 <target_audio_buffer_full+0x74>)
 8000a3c:	f008 f854 	bl	8008ae8 <puts>
    }

    printf("Total complete events: %u, index is %u\n", transfer_complete_events, TARGET_AUDIO_BUFFER_IX);
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <target_audio_buffer_full+0x78>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <target_audio_buffer_full+0x7c>)
 8000a46:	6812      	ldr	r2, [r2, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4814      	ldr	r0, [pc, #80]	; (8000a9c <target_audio_buffer_full+0x80>)
 8000a4c:	f007 ffb0 	bl	80089b0 <iprintf>

    uint8_t *buf = (uint8_t*)TARGET_AUDIO_BUFFER;
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <target_audio_buffer_full+0x84>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	607b      	str	r3, [r7, #4]
    for (size_t ix = 0; ix < TARGET_AUDIO_BUFFER_NB_SAMPLES * 2; ix++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	e00a      	b.n	8000a72 <target_audio_buffer_full+0x56>
        printf("%02x", buf[ix]);
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4413      	add	r3, r2
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <target_audio_buffer_full+0x88>)
 8000a68:	f007 ffa2 	bl	80089b0 <iprintf>
    for (size_t ix = 0; ix < TARGET_AUDIO_BUFFER_NB_SAMPLES * 2; ix++) {
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <target_audio_buffer_full+0x8c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d3ee      	bcc.n	8000a5c <target_audio_buffer_full+0x40>
    }
    printf("\n");
 8000a7e:	200a      	movs	r0, #10
 8000a80:	f007 ffae 	bl	80089e0 <putchar>
}
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	08009918 	.word	0x08009918
 8000a90:	08009934 	.word	0x08009934
 8000a94:	20000120 	.word	0x20000120
 8000a98:	20000118 	.word	0x20000118
 8000a9c:	08009944 	.word	0x08009944
 8000aa0:	20000124 	.word	0x20000124
 8000aa4:	0800996c 	.word	0x0800996c
 8000aa8:	20000000 	.word	0x20000000

08000aac <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
* @brief  Half Transfer user callback, called by BSP functions.
* @param  None
* @retval None
*/
void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
    half_transfer_events++;
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	4a1c      	ldr	r2, [pc, #112]	; (8000b2c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>)
 8000abc:	6013      	str	r3, [r2, #0]
    if (half_transfer_events < SKIP_FIRST_EVENTS) return;
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x84>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d329      	bcc.n	8000b1e <BSP_AUDIO_IN_HalfTransfer_CallBack+0x72>

    uint32_t buffer_size = PCM_BUFFER_LEN / 2; /* Half Transfer */
 8000aca:	2320      	movs	r3, #32
 8000acc:	60fb      	str	r3, [r7, #12]
    uint32_t nb_samples = buffer_size / sizeof(int16_t); /* Bytes to Length */
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	085b      	lsrs	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]

    if ((TARGET_AUDIO_BUFFER_IX + nb_samples) > TARGET_AUDIO_BUFFER_NB_SAMPLES) {
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x88>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	441a      	add	r2, r3
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d81e      	bhi.n	8000b22 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x76>
        return;
    }

    /* Copy first half of PCM_Buffer from Microphones onto Fill_Buffer */
    memcpy(((uint8_t*)TARGET_AUDIO_BUFFER) + (TARGET_AUDIO_BUFFER_IX * 2), PCM_Buffer, buffer_size);
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x90>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x88>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	4913      	ldr	r1, [pc, #76]	; (8000b40 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x94>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f007 fedc 	bl	80088b2 <memcpy>
    TARGET_AUDIO_BUFFER_IX += nb_samples;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x88>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x88>)
 8000b04:	6013      	str	r3, [r2, #0]

    if (TARGET_AUDIO_BUFFER_IX >= TARGET_AUDIO_BUFFER_NB_SAMPLES) {
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x88>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d308      	bcc.n	8000b24 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>
    	printf("BUFFER FULL\n");
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x98>)
 8000b14:	f007 ffe8 	bl	8008ae8 <puts>
    	target_audio_buffer_full();
 8000b18:	f7ff ff80 	bl	8000a1c <target_audio_buffer_full>
        return;
 8000b1c:	e002      	b.n	8000b24 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>
    if (half_transfer_events < SKIP_FIRST_EVENTS) return;
 8000b1e:	bf00      	nop
 8000b20:	e000      	b.n	8000b24 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>
        return;
 8000b22:	bf00      	nop
    }
}
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000011c 	.word	0x2000011c
 8000b30:	20000004 	.word	0x20000004
 8000b34:	20000118 	.word	0x20000118
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000124 	.word	0x20000124
 8000b40:	200000d8 	.word	0x200000d8
 8000b44:	08009974 	.word	0x08009974

08000b48 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
* @brief  Transfer Complete user callback, called by BSP functions.
* @param  None
* @retval None
*/
void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
    transfer_complete_events++;
 8000b50:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <BSP_AUDIO_IN_TransferComplete_CallBack+0x84>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <BSP_AUDIO_IN_TransferComplete_CallBack+0x84>)
 8000b58:	6013      	str	r3, [r2, #0]
    if (transfer_complete_events < SKIP_FIRST_EVENTS) return;
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <BSP_AUDIO_IN_TransferComplete_CallBack+0x84>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x88>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d32c      	bcc.n	8000bc0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>

    uint32_t buffer_size = PCM_BUFFER_LEN / 2; /* Half Transfer */
 8000b66:	2320      	movs	r3, #32
 8000b68:	60fb      	str	r3, [r7, #12]
    uint32_t nb_samples = buffer_size / sizeof(int16_t); /* Bytes to Length */
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	085b      	lsrs	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]

    if ((TARGET_AUDIO_BUFFER_IX + nb_samples) > TARGET_AUDIO_BUFFER_NB_SAMPLES) {
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	441a      	add	r2, r3
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x90>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d821      	bhi.n	8000bc4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>
        return;
    }

    /* Copy second half of PCM_Buffer from Microphones onto Fill_Buffer */
    memcpy(((uint8_t*)TARGET_AUDIO_BUFFER) + (TARGET_AUDIO_BUFFER_IX * 2),
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <BSP_AUDIO_IN_TransferComplete_CallBack+0x94>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	18d0      	adds	r0, r2, r3
        ((uint8_t*)PCM_Buffer) + (nb_samples * 2), buffer_size);
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	005b      	lsls	r3, r3, #1
    memcpy(((uint8_t*)TARGET_AUDIO_BUFFER) + (TARGET_AUDIO_BUFFER_IX * 2),
 8000b90:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x98>)
 8000b92:	4413      	add	r3, r2
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	4619      	mov	r1, r3
 8000b98:	f007 fe8b 	bl	80088b2 <memcpy>
    TARGET_AUDIO_BUFFER_IX += nb_samples;
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 8000ba6:	6013      	str	r3, [r2, #0]

    if (TARGET_AUDIO_BUFFER_IX >= TARGET_AUDIO_BUFFER_NB_SAMPLES) {
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x90>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d308      	bcc.n	8000bc6 <BSP_AUDIO_IN_TransferComplete_CallBack+0x7e>
    	printf("BUFFER FULL\n");
 8000bb4:	480b      	ldr	r0, [pc, #44]	; (8000be4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x9c>)
 8000bb6:	f007 ff97 	bl	8008ae8 <puts>
    	target_audio_buffer_full();
 8000bba:	f7ff ff2f 	bl	8000a1c <target_audio_buffer_full>
        return;
 8000bbe:	e002      	b.n	8000bc6 <BSP_AUDIO_IN_TransferComplete_CallBack+0x7e>
    if (transfer_complete_events < SKIP_FIRST_EVENTS) return;
 8000bc0:	bf00      	nop
 8000bc2:	e000      	b.n	8000bc6 <BSP_AUDIO_IN_TransferComplete_CallBack+0x7e>
        return;
 8000bc4:	bf00      	nop
    }
}
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000120 	.word	0x20000120
 8000bd0:	20000004 	.word	0x20000004
 8000bd4:	20000118 	.word	0x20000118
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	20000124 	.word	0x20000124
 8000be0:	200000d8 	.word	0x200000d8
 8000be4:	08009974 	.word	0x08009974

08000be8 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Manages the BSP audio in error event.
  * @param  Instance Audio in instance.
  * @retval None.
  */
void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    printf("BSP_AUDIO_IN_Error_CallBack\n");
 8000bf0:	4803      	ldr	r0, [pc, #12]	; (8000c00 <BSP_AUDIO_IN_Error_CallBack+0x18>)
 8000bf2:	f007 ff79 	bl	8008ae8 <puts>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	08009980 	.word	0x08009980

08000c04 <start_recording>:
void print_stats() {
    printf("Half %d, Complete %d, IX %d\n", half_transfer_events, transfer_complete_events,
        TARGET_AUDIO_BUFFER_IX);
}

void start_recording() {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
    int32_t ret;
    uint32_t state;

    ret = BSP_AUDIO_IN_GetState(AUDIO_INSTANCE, &state);
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 fe0e 	bl	8001830 <BSP_AUDIO_IN_GetState>
 8000c14:	6078      	str	r0, [r7, #4]
    if (ret != BSP_ERROR_NONE) {
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d004      	beq.n	8000c26 <start_recording+0x22>
        printf("Cannot start recording: Error getting audio state (%ld)\n", ret);
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	4814      	ldr	r0, [pc, #80]	; (8000c70 <start_recording+0x6c>)
 8000c20:	f007 fec6 	bl	80089b0 <iprintf>
        return;
 8000c24:	e020      	b.n	8000c68 <start_recording+0x64>
    }
    if (state == AUDIO_IN_STATE_RECORDING) {
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d103      	bne.n	8000c34 <start_recording+0x30>
        printf("Cannot start recording: Already recording\n");
 8000c2c:	4811      	ldr	r0, [pc, #68]	; (8000c74 <start_recording+0x70>)
 8000c2e:	f007 ff5b 	bl	8008ae8 <puts>
        return;
 8000c32:	e019      	b.n	8000c68 <start_recording+0x64>
    }

    // reset audio buffer location
    TARGET_AUDIO_BUFFER_IX = 0;
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <start_recording+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
    transfer_complete_events = 0;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <start_recording+0x78>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
    half_transfer_events = 0;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <start_recording+0x7c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]

    ret = BSP_AUDIO_IN_Record(AUDIO_INSTANCE, (uint8_t *) PCM_Buffer, PCM_BUFFER_LEN);
 8000c46:	2240      	movs	r2, #64	; 0x40
 8000c48:	490e      	ldr	r1, [pc, #56]	; (8000c84 <start_recording+0x80>)
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 fce6 	bl	800161c <BSP_AUDIO_IN_Record>
 8000c50:	6078      	str	r0, [r7, #4]
    if (ret != BSP_ERROR_NONE) {
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d004      	beq.n	8000c62 <start_recording+0x5e>
        printf("Error Audio Record (%ld)\n", ret);
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	480b      	ldr	r0, [pc, #44]	; (8000c88 <start_recording+0x84>)
 8000c5c:	f007 fea8 	bl	80089b0 <iprintf>
        return;
 8000c60:	e002      	b.n	8000c68 <start_recording+0x64>
    }
    else {
        printf("OK Audio Record\n");
 8000c62:	480a      	ldr	r0, [pc, #40]	; (8000c8c <start_recording+0x88>)
 8000c64:	f007 ff40 	bl	8008ae8 <puts>
    }
}
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	080099bc 	.word	0x080099bc
 8000c74:	080099f8 	.word	0x080099f8
 8000c78:	20000118 	.word	0x20000118
 8000c7c:	20000120 	.word	0x20000120
 8000c80:	2000011c 	.word	0x2000011c
 8000c84:	200000d8 	.word	0x200000d8
 8000c88:	08009a24 	.word	0x08009a24
 8000c8c:	08009a40 	.word	0x08009a40

08000c90 <BSP_AUDIO_IN_Init>:
  * @param  Instance Audio in instance.
  * @param  AudioInit Audio in init structure.
  * @retval BSP status.
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t *AudioInit)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	; 0x38
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d004      	beq.n	8000cae <BSP_AUDIO_IN_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000ca4:	f06f 0301 	mvn.w	r3, #1
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8000caa:	f000 bc9e 	b.w	80015ea <BSP_AUDIO_IN_Init+0x95a>
  }
  else if (Audio_In_Ctx[Instance].State != AUDIO_IN_STATE_RESET)
 8000cae:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <BSP_AUDIO_IN_Init+0x84>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	015b      	lsls	r3, r3, #5
 8000cb4:	4413      	add	r3, r2
 8000cb6:	331c      	adds	r3, #28
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d004      	beq.n	8000cc8 <BSP_AUDIO_IN_Init+0x38>
  {
    status = BSP_ERROR_BUSY;
 8000cbe:	f06f 0302 	mvn.w	r3, #2
 8000cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8000cc4:	f000 bc91 	b.w	80015ea <BSP_AUDIO_IN_Init+0x95a>
  }
  else if (AudioInit->BitsPerSample != AUDIO_RESOLUTION_16b)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	2b10      	cmp	r3, #16
 8000cce:	d004      	beq.n	8000cda <BSP_AUDIO_IN_Init+0x4a>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8000cd0:	f06f 030a 	mvn.w	r3, #10
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8000cd6:	f000 bc88 	b.w	80015ea <BSP_AUDIO_IN_Init+0x95a>
  }
  else if (((AudioInit->Device == AUDIO_IN_DIGITAL_MIC) && (AudioInit->ChannelsNbr != 2U)) ||
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b30      	cmp	r3, #48	; 0x30
 8000ce0:	d103      	bne.n	8000cea <BSP_AUDIO_IN_Init+0x5a>
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d10f      	bne.n	8000d0a <BSP_AUDIO_IN_Init+0x7a>
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC1) && (AudioInit->ChannelsNbr != 1U)) ||
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
  else if (((AudioInit->Device == AUDIO_IN_DIGITAL_MIC) && (AudioInit->ChannelsNbr != 2U)) ||
 8000cee:	2b10      	cmp	r3, #16
 8000cf0:	d103      	bne.n	8000cfa <BSP_AUDIO_IN_Init+0x6a>
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC1) && (AudioInit->ChannelsNbr != 1U)) ||
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d107      	bne.n	8000d0a <BSP_AUDIO_IN_Init+0x7a>
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC2) && (AudioInit->ChannelsNbr != 1U)))
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC1) && (AudioInit->ChannelsNbr != 1U)) ||
 8000cfe:	2b20      	cmp	r3, #32
 8000d00:	d10a      	bne.n	8000d18 <BSP_AUDIO_IN_Init+0x88>
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC2) && (AudioInit->ChannelsNbr != 1U)))
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d006      	beq.n	8000d18 <BSP_AUDIO_IN_Init+0x88>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8000d0a:	f06f 030a 	mvn.w	r3, #10
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8000d10:	f000 bc6b 	b.w	80015ea <BSP_AUDIO_IN_Init+0x95a>
 8000d14:	20000008 	.word	0x20000008
  }
  else
  {
    /* Fill audio in context structure */
    Audio_In_Ctx[Instance].Device         = AudioInit->Device;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	499c      	ldr	r1, [pc, #624]	; (8000f90 <BSP_AUDIO_IN_Init+0x300>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	015b      	lsls	r3, r3, #5
 8000d22:	440b      	add	r3, r1
 8000d24:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].SampleRate     = AudioInit->SampleRate;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	4999      	ldr	r1, [pc, #612]	; (8000f90 <BSP_AUDIO_IN_Init+0x300>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	015b      	lsls	r3, r3, #5
 8000d30:	440b      	add	r3, r1
 8000d32:	3304      	adds	r3, #4
 8000d34:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].BitsPerSample  = AudioInit->BitsPerSample;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	4995      	ldr	r1, [pc, #596]	; (8000f90 <BSP_AUDIO_IN_Init+0x300>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	015b      	lsls	r3, r3, #5
 8000d40:	440b      	add	r3, r1
 8000d42:	3308      	adds	r3, #8
 8000d44:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].ChannelsNbr    = AudioInit->ChannelsNbr;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	4991      	ldr	r1, [pc, #580]	; (8000f90 <BSP_AUDIO_IN_Init+0x300>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	015b      	lsls	r3, r3, #5
 8000d50:	440b      	add	r3, r1
 8000d52:	330c      	adds	r3, #12
 8000d54:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].Volume         = AudioInit->Volume;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	691a      	ldr	r2, [r3, #16]
 8000d5a:	498d      	ldr	r1, [pc, #564]	; (8000f90 <BSP_AUDIO_IN_Init+0x300>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	015b      	lsls	r3, r3, #5
 8000d60:	440b      	add	r3, r1
 8000d62:	3318      	adds	r3, #24
 8000d64:	601a      	str	r2, [r3, #0]
    haudio_in_dfsdm_channel[0].Instance = DFSDM1_Channel2;
    haudio_in_dfsdm_channel[1].Instance = DFSDM1_Channel1;
    haudio_in_dfsdm_filter[0].Instance  = DFSDM1_Filter0;
    haudio_in_dfsdm_filter[1].Instance  = DFSDM1_Filter1;*/

    hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000d66:	4b8b      	ldr	r3, [pc, #556]	; (8000f94 <BSP_AUDIO_IN_Init+0x304>)
 8000d68:	4a8b      	ldr	r2, [pc, #556]	; (8000f98 <BSP_AUDIO_IN_Init+0x308>)
 8000d6a:	601a      	str	r2, [r3, #0]
    hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000d6c:	4b89      	ldr	r3, [pc, #548]	; (8000f94 <BSP_AUDIO_IN_Init+0x304>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
    hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000d72:	4b88      	ldr	r3, [pc, #544]	; (8000f94 <BSP_AUDIO_IN_Init+0x304>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	721a      	strb	r2, [r3, #8]
    hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000d78:	4b86      	ldr	r3, [pc, #536]	; (8000f94 <BSP_AUDIO_IN_Init+0x304>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	725a      	strb	r2, [r3, #9]
    hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8000d7e:	4b85      	ldr	r3, [pc, #532]	; (8000f94 <BSP_AUDIO_IN_Init+0x304>)
 8000d80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000d84:	61da      	str	r2, [r3, #28]
    hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000d86:	4b83      	ldr	r3, [pc, #524]	; (8000f94 <BSP_AUDIO_IN_Init+0x304>)
 8000d88:	2240      	movs	r2, #64	; 0x40
 8000d8a:	621a      	str	r2, [r3, #32]
    hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000d8c:	4b81      	ldr	r3, [pc, #516]	; (8000f94 <BSP_AUDIO_IN_Init+0x304>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000d92:	4880      	ldr	r0, [pc, #512]	; (8000f94 <BSP_AUDIO_IN_Init+0x304>)
 8000d94:	f001 fe7e 	bl	8002a94 <HAL_DFSDM_FilterInit>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <BSP_AUDIO_IN_Init+0x112>
    {
      Error_Handler();
 8000d9e:	f7ff fe25 	bl	80009ec <Error_Handler>
    }
     hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000da2:	4b7e      	ldr	r3, [pc, #504]	; (8000f9c <BSP_AUDIO_IN_Init+0x30c>)
 8000da4:	4a7e      	ldr	r2, [pc, #504]	; (8000fa0 <BSP_AUDIO_IN_Init+0x310>)
 8000da6:	601a      	str	r2, [r3, #0]
     hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000da8:	4b7c      	ldr	r3, [pc, #496]	; (8000f9c <BSP_AUDIO_IN_Init+0x30c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
     hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8000dae:	4b7b      	ldr	r3, [pc, #492]	; (8000f9c <BSP_AUDIO_IN_Init+0x30c>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	721a      	strb	r2, [r3, #8]
     hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000db4:	4b79      	ldr	r3, [pc, #484]	; (8000f9c <BSP_AUDIO_IN_Init+0x30c>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	725a      	strb	r2, [r3, #9]
     hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8000dba:	4b78      	ldr	r3, [pc, #480]	; (8000f9c <BSP_AUDIO_IN_Init+0x30c>)
 8000dbc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000dc0:	61da      	str	r2, [r3, #28]
     hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
 8000dc2:	4b76      	ldr	r3, [pc, #472]	; (8000f9c <BSP_AUDIO_IN_Init+0x30c>)
 8000dc4:	2240      	movs	r2, #64	; 0x40
 8000dc6:	621a      	str	r2, [r3, #32]
     hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8000dc8:	4b74      	ldr	r3, [pc, #464]	; (8000f9c <BSP_AUDIO_IN_Init+0x30c>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
     if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 8000dce:	4873      	ldr	r0, [pc, #460]	; (8000f9c <BSP_AUDIO_IN_Init+0x30c>)
 8000dd0:	f001 fe60 	bl	8002a94 <HAL_DFSDM_FilterInit>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <BSP_AUDIO_IN_Init+0x14e>
     {
       Error_Handler();
 8000dda:	f7ff fe07 	bl	80009ec <Error_Handler>
     }
     hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000dde:	4b71      	ldr	r3, [pc, #452]	; (8000fa4 <BSP_AUDIO_IN_Init+0x314>)
 8000de0:	4a71      	ldr	r2, [pc, #452]	; (8000fa8 <BSP_AUDIO_IN_Init+0x318>)
 8000de2:	601a      	str	r2, [r3, #0]
     hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8000de4:	4b6f      	ldr	r3, [pc, #444]	; (8000fa4 <BSP_AUDIO_IN_Init+0x314>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	711a      	strb	r2, [r3, #4]
     hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000dea:	4b6e      	ldr	r3, [pc, #440]	; (8000fa4 <BSP_AUDIO_IN_Init+0x314>)
 8000dec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df0:	609a      	str	r2, [r3, #8]
     hdfsdm1_channel0.Init.OutputClock.Divider = 60;
 8000df2:	4b6c      	ldr	r3, [pc, #432]	; (8000fa4 <BSP_AUDIO_IN_Init+0x314>)
 8000df4:	223c      	movs	r2, #60	; 0x3c
 8000df6:	60da      	str	r2, [r3, #12]
     hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000df8:	4b6a      	ldr	r3, [pc, #424]	; (8000fa4 <BSP_AUDIO_IN_Init+0x314>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
     hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000dfe:	4b69      	ldr	r3, [pc, #420]	; (8000fa4 <BSP_AUDIO_IN_Init+0x314>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
     hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000e04:	4b67      	ldr	r3, [pc, #412]	; (8000fa4 <BSP_AUDIO_IN_Init+0x314>)
 8000e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0a:	619a      	str	r2, [r3, #24]
     hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8000e0c:	4b65      	ldr	r3, [pc, #404]	; (8000fa4 <BSP_AUDIO_IN_Init+0x314>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	61da      	str	r2, [r3, #28]
     hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000e12:	4b64      	ldr	r3, [pc, #400]	; (8000fa4 <BSP_AUDIO_IN_Init+0x314>)
 8000e14:	2204      	movs	r2, #4
 8000e16:	621a      	str	r2, [r3, #32]
     hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000e18:	4b62      	ldr	r3, [pc, #392]	; (8000fa4 <BSP_AUDIO_IN_Init+0x314>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24
     hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000e1e:	4b61      	ldr	r3, [pc, #388]	; (8000fa4 <BSP_AUDIO_IN_Init+0x314>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
     hdfsdm1_channel0.Init.Offset = 0;
 8000e24:	4b5f      	ldr	r3, [pc, #380]	; (8000fa4 <BSP_AUDIO_IN_Init+0x314>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	62da      	str	r2, [r3, #44]	; 0x2c
     hdfsdm1_channel0.Init.RightBitShift = 0x02;
 8000e2a:	4b5e      	ldr	r3, [pc, #376]	; (8000fa4 <BSP_AUDIO_IN_Init+0x314>)
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	631a      	str	r2, [r3, #48]	; 0x30
     if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000e30:	485c      	ldr	r0, [pc, #368]	; (8000fa4 <BSP_AUDIO_IN_Init+0x314>)
 8000e32:	f001 fcf3 	bl	800281c <HAL_DFSDM_ChannelInit>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <BSP_AUDIO_IN_Init+0x1b0>
     {
       Error_Handler();
 8000e3c:	f7ff fdd6 	bl	80009ec <Error_Handler>
     }
     hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000e40:	4b5a      	ldr	r3, [pc, #360]	; (8000fac <BSP_AUDIO_IN_Init+0x31c>)
 8000e42:	4a5b      	ldr	r2, [pc, #364]	; (8000fb0 <BSP_AUDIO_IN_Init+0x320>)
 8000e44:	601a      	str	r2, [r3, #0]
     hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000e46:	4b59      	ldr	r3, [pc, #356]	; (8000fac <BSP_AUDIO_IN_Init+0x31c>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	711a      	strb	r2, [r3, #4]
     hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000e4c:	4b57      	ldr	r3, [pc, #348]	; (8000fac <BSP_AUDIO_IN_Init+0x31c>)
 8000e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e52:	609a      	str	r2, [r3, #8]
     hdfsdm1_channel1.Init.OutputClock.Divider = 60;
 8000e54:	4b55      	ldr	r3, [pc, #340]	; (8000fac <BSP_AUDIO_IN_Init+0x31c>)
 8000e56:	223c      	movs	r2, #60	; 0x3c
 8000e58:	60da      	str	r2, [r3, #12]
     hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000e5a:	4b54      	ldr	r3, [pc, #336]	; (8000fac <BSP_AUDIO_IN_Init+0x31c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
     hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000e60:	4b52      	ldr	r3, [pc, #328]	; (8000fac <BSP_AUDIO_IN_Init+0x31c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
     hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000e66:	4b51      	ldr	r3, [pc, #324]	; (8000fac <BSP_AUDIO_IN_Init+0x31c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
     hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000e6c:	4b4f      	ldr	r3, [pc, #316]	; (8000fac <BSP_AUDIO_IN_Init+0x31c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
     hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000e72:	4b4e      	ldr	r3, [pc, #312]	; (8000fac <BSP_AUDIO_IN_Init+0x31c>)
 8000e74:	2204      	movs	r2, #4
 8000e76:	621a      	str	r2, [r3, #32]
     hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000e78:	4b4c      	ldr	r3, [pc, #304]	; (8000fac <BSP_AUDIO_IN_Init+0x31c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
     hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000e7e:	4b4b      	ldr	r3, [pc, #300]	; (8000fac <BSP_AUDIO_IN_Init+0x31c>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
     hdfsdm1_channel1.Init.Offset = 0;
 8000e84:	4b49      	ldr	r3, [pc, #292]	; (8000fac <BSP_AUDIO_IN_Init+0x31c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
     hdfsdm1_channel1.Init.RightBitShift = 0x02;
 8000e8a:	4b48      	ldr	r3, [pc, #288]	; (8000fac <BSP_AUDIO_IN_Init+0x31c>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	631a      	str	r2, [r3, #48]	; 0x30
     if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000e90:	4846      	ldr	r0, [pc, #280]	; (8000fac <BSP_AUDIO_IN_Init+0x31c>)
 8000e92:	f001 fcc3 	bl	800281c <HAL_DFSDM_ChannelInit>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <BSP_AUDIO_IN_Init+0x210>
     {
       Error_Handler();
 8000e9c:	f7ff fda6 	bl	80009ec <Error_Handler>
     }
     if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4944      	ldr	r1, [pc, #272]	; (8000fb4 <BSP_AUDIO_IN_Init+0x324>)
 8000ea4:	483b      	ldr	r0, [pc, #236]	; (8000f94 <BSP_AUDIO_IN_Init+0x304>)
 8000ea6:	f001 ff6b 	bl	8002d80 <HAL_DFSDM_FilterConfigRegChannel>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <BSP_AUDIO_IN_Init+0x224>
     {
       Error_Handler();
 8000eb0:	f7ff fd9c 	bl	80009ec <Error_Handler>
     }
     if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	4838      	ldr	r0, [pc, #224]	; (8000f9c <BSP_AUDIO_IN_Init+0x30c>)
 8000eba:	f001 ff61 	bl	8002d80 <HAL_DFSDM_FilterConfigRegChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <BSP_AUDIO_IN_Init+0x238>
     {
       Error_Handler();
 8000ec4:	f7ff fd92 	bl	80009ec <Error_Handler>
        DFSDM_ChannelMspInit(&hdfsdm1_channel1);
        DFSDM_FilterMspInit(&hdfsdm1_filter1);
      }
#else
      /* Register the DFSDM MSP Callbacks*/
      if(AudioIn_IsMspCbValid[Instance] == 0U)
 8000ec8:	4a3b      	ldr	r2, [pc, #236]	; (8000fb8 <BSP_AUDIO_IN_Init+0x328>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d108      	bne.n	8000ee6 <BSP_AUDIO_IN_Init+0x256>
      {
        if(BSP_AUDIO_IN_RegisterDefaultMspCallbacks(Instance) != BSP_ERROR_NONE)
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 fccb 	bl	8001870 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d002      	beq.n	8000ee6 <BSP_AUDIO_IN_Init+0x256>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8000ee0:	f06f 0303 	mvn.w	r3, #3
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
#endif  /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 0) */
      if (status == BSP_ERROR_NONE)
 8000ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f040 837e 	bne.w	80015ea <BSP_AUDIO_IN_Init+0x95a>
      {
        /* Prepare DFSDM peripheral initialization */
        MX_DFSDM_InitTypeDef mxDfsdmInit;
        if ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC1) == AUDIO_IN_DIGITAL_MIC1)
 8000eee:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <BSP_AUDIO_IN_Init+0x300>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	015b      	lsls	r3, r3, #5
 8000ef4:	4413      	add	r3, r2
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0310 	and.w	r3, r3, #16
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 81b0 	beq.w	8001262 <BSP_AUDIO_IN_Init+0x5d2>
        {
          mxDfsdmInit.ChannelInstance = DFSDM1_Channel2;
 8000f02:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <BSP_AUDIO_IN_Init+0x32c>)
 8000f04:	61fb      	str	r3, [r7, #28]
          mxDfsdmInit.ClockDivider    = DFSDM_CLOCK_DIVIDER(Audio_In_Ctx[Instance].SampleRate);
 8000f06:	4a22      	ldr	r2, [pc, #136]	; (8000f90 <BSP_AUDIO_IN_Init+0x300>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	015b      	lsls	r3, r3, #5
 8000f0c:	4413      	add	r3, r2
 8000f0e:	3304      	adds	r3, #4
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000f16:	d053      	beq.n	8000fc0 <BSP_AUDIO_IN_Init+0x330>
 8000f18:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <BSP_AUDIO_IN_Init+0x300>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	015b      	lsls	r3, r3, #5
 8000f1e:	4413      	add	r3, r2
 8000f20:	3304      	adds	r3, #4
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d02f      	beq.n	8000f8c <BSP_AUDIO_IN_Init+0x2fc>
 8000f2c:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <BSP_AUDIO_IN_Init+0x300>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	015b      	lsls	r3, r3, #5
 8000f32:	4413      	add	r3, r2
 8000f34:	3304      	adds	r3, #4
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000f3c:	d024      	beq.n	8000f88 <BSP_AUDIO_IN_Init+0x2f8>
 8000f3e:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <BSP_AUDIO_IN_Init+0x300>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	015b      	lsls	r3, r3, #5
 8000f44:	4413      	add	r3, r2
 8000f46:	3304      	adds	r3, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f245 6222 	movw	r2, #22050	; 0x5622
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d018      	beq.n	8000f84 <BSP_AUDIO_IN_Init+0x2f4>
 8000f52:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <BSP_AUDIO_IN_Init+0x300>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	015b      	lsls	r3, r3, #5
 8000f58:	4413      	add	r3, r2
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000f62:	d00d      	beq.n	8000f80 <BSP_AUDIO_IN_Init+0x2f0>
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <BSP_AUDIO_IN_Init+0x300>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	015b      	lsls	r3, r3, #5
 8000f6a:	4413      	add	r3, r2
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d101      	bne.n	8000f7c <BSP_AUDIO_IN_Init+0x2ec>
 8000f78:	2304      	movs	r3, #4
 8000f7a:	e022      	b.n	8000fc2 <BSP_AUDIO_IN_Init+0x332>
 8000f7c:	2320      	movs	r3, #32
 8000f7e:	e020      	b.n	8000fc2 <BSP_AUDIO_IN_Init+0x332>
 8000f80:	2318      	movs	r3, #24
 8000f82:	e01e      	b.n	8000fc2 <BSP_AUDIO_IN_Init+0x332>
 8000f84:	2304      	movs	r3, #4
 8000f86:	e01c      	b.n	8000fc2 <BSP_AUDIO_IN_Init+0x332>
 8000f88:	2318      	movs	r3, #24
 8000f8a:	e01a      	b.n	8000fc2 <BSP_AUDIO_IN_Init+0x332>
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	e018      	b.n	8000fc2 <BSP_AUDIO_IN_Init+0x332>
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20001bbc 	.word	0x20001bbc
 8000f98:	40016100 	.word	0x40016100
 8000f9c:	20001cc0 	.word	0x20001cc0
 8000fa0:	40016180 	.word	0x40016180
 8000fa4:	20001d34 	.word	0x20001d34
 8000fa8:	40016000 	.word	0x40016000
 8000fac:	20001b74 	.word	0x20001b74
 8000fb0:	40016020 	.word	0x40016020
 8000fb4:	00010002 	.word	0x00010002
 8000fb8:	200001b8 	.word	0x200001b8
 8000fbc:	40016040 	.word	0x40016040
 8000fc0:	2318      	movs	r3, #24
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
          mxDfsdmInit.DigitalMicPins  = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
          mxDfsdmInit.DigitalMicType  = DFSDM_CHANNEL_SPI_FALLING;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
          mxDfsdmInit.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[Instance].SampleRate);
 8000fcc:	4a98      	ldr	r2, [pc, #608]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	015b      	lsls	r3, r3, #5
 8000fd2:	4413      	add	r3, r2
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000fdc:	d047      	beq.n	800106e <BSP_AUDIO_IN_Init+0x3de>
 8000fde:	4a94      	ldr	r2, [pc, #592]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	015b      	lsls	r3, r3, #5
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d03b      	beq.n	800106a <BSP_AUDIO_IN_Init+0x3da>
 8000ff2:	4a8f      	ldr	r2, [pc, #572]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	015b      	lsls	r3, r3, #5
 8000ff8:	4413      	add	r3, r2
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001002:	d030      	beq.n	8001066 <BSP_AUDIO_IN_Init+0x3d6>
 8001004:	4a8a      	ldr	r2, [pc, #552]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	015b      	lsls	r3, r3, #5
 800100a:	4413      	add	r3, r2
 800100c:	3304      	adds	r3, #4
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f245 6222 	movw	r2, #22050	; 0x5622
 8001014:	4293      	cmp	r3, r2
 8001016:	d024      	beq.n	8001062 <BSP_AUDIO_IN_Init+0x3d2>
 8001018:	4a85      	ldr	r2, [pc, #532]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	015b      	lsls	r3, r3, #5
 800101e:	4413      	add	r3, r2
 8001020:	3304      	adds	r3, #4
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001028:	d019      	beq.n	800105e <BSP_AUDIO_IN_Init+0x3ce>
 800102a:	4a81      	ldr	r2, [pc, #516]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	015b      	lsls	r3, r3, #5
 8001030:	4413      	add	r3, r2
 8001032:	3304      	adds	r3, #4
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f64a 4244 	movw	r2, #44100	; 0xac44
 800103a:	4293      	cmp	r3, r2
 800103c:	d00d      	beq.n	800105a <BSP_AUDIO_IN_Init+0x3ca>
 800103e:	4a7c      	ldr	r2, [pc, #496]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	015b      	lsls	r3, r3, #5
 8001044:	4413      	add	r3, r2
 8001046:	3304      	adds	r3, #4
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800104e:	4293      	cmp	r3, r2
 8001050:	d101      	bne.n	8001056 <BSP_AUDIO_IN_Init+0x3c6>
 8001052:	2302      	movs	r3, #2
 8001054:	e00c      	b.n	8001070 <BSP_AUDIO_IN_Init+0x3e0>
 8001056:	2304      	movs	r3, #4
 8001058:	e00a      	b.n	8001070 <BSP_AUDIO_IN_Init+0x3e0>
 800105a:	2300      	movs	r3, #0
 800105c:	e008      	b.n	8001070 <BSP_AUDIO_IN_Init+0x3e0>
 800105e:	2306      	movs	r3, #6
 8001060:	e006      	b.n	8001070 <BSP_AUDIO_IN_Init+0x3e0>
 8001062:	2303      	movs	r3, #3
 8001064:	e004      	b.n	8001070 <BSP_AUDIO_IN_Init+0x3e0>
 8001066:	2303      	movs	r3, #3
 8001068:	e002      	b.n	8001070 <BSP_AUDIO_IN_Init+0x3e0>
 800106a:	2306      	movs	r3, #6
 800106c:	e000      	b.n	8001070 <BSP_AUDIO_IN_Init+0x3e0>
 800106e:	2305      	movs	r3, #5
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
          mxDfsdmInit.Channel4Filter  = DFSDM_CHANNEL_2;
 8001072:	4b70      	ldr	r3, [pc, #448]	; (8001234 <BSP_AUDIO_IN_Init+0x5a4>)
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
          mxDfsdmInit.FilterInstance  = DFSDM1_Filter0;
 8001076:	4b70      	ldr	r3, [pc, #448]	; (8001238 <BSP_AUDIO_IN_Init+0x5a8>)
 8001078:	60fb      	str	r3, [r7, #12]
          mxDfsdmInit.RegularTrigger  = DFSDM_FILTER_SW_TRIGGER;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
          mxDfsdmInit.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[Instance].SampleRate);
 800107e:	4a6c      	ldr	r2, [pc, #432]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	015b      	lsls	r3, r3, #5
 8001084:	4413      	add	r3, r2
 8001086:	3304      	adds	r3, #4
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800108e:	d04e      	beq.n	800112e <BSP_AUDIO_IN_Init+0x49e>
 8001090:	4a67      	ldr	r2, [pc, #412]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	015b      	lsls	r3, r3, #5
 8001096:	4413      	add	r3, r2
 8001098:	3304      	adds	r3, #4
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f642 3211 	movw	r2, #11025	; 0x2b11
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d041      	beq.n	8001128 <BSP_AUDIO_IN_Init+0x498>
 80010a4:	4a62      	ldr	r2, [pc, #392]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	015b      	lsls	r3, r3, #5
 80010aa:	4413      	add	r3, r2
 80010ac:	3304      	adds	r3, #4
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80010b4:	d035      	beq.n	8001122 <BSP_AUDIO_IN_Init+0x492>
 80010b6:	4a5e      	ldr	r2, [pc, #376]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	015b      	lsls	r3, r3, #5
 80010bc:	4413      	add	r3, r2
 80010be:	3304      	adds	r3, #4
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f245 6222 	movw	r2, #22050	; 0x5622
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d028      	beq.n	800111c <BSP_AUDIO_IN_Init+0x48c>
 80010ca:	4a59      	ldr	r2, [pc, #356]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	015b      	lsls	r3, r3, #5
 80010d0:	4413      	add	r3, r2
 80010d2:	3304      	adds	r3, #4
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80010da:	d01c      	beq.n	8001116 <BSP_AUDIO_IN_Init+0x486>
 80010dc:	4a54      	ldr	r2, [pc, #336]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	015b      	lsls	r3, r3, #5
 80010e2:	4413      	add	r3, r2
 80010e4:	3304      	adds	r3, #4
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d00f      	beq.n	8001110 <BSP_AUDIO_IN_Init+0x480>
 80010f0:	4a4f      	ldr	r2, [pc, #316]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	015b      	lsls	r3, r3, #5
 80010f6:	4413      	add	r3, r2
 80010f8:	3304      	adds	r3, #4
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001100:	4293      	cmp	r3, r2
 8001102:	d102      	bne.n	800110a <BSP_AUDIO_IN_Init+0x47a>
 8001104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001108:	e013      	b.n	8001132 <BSP_AUDIO_IN_Init+0x4a2>
 800110a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800110e:	e010      	b.n	8001132 <BSP_AUDIO_IN_Init+0x4a2>
 8001110:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001114:	e00d      	b.n	8001132 <BSP_AUDIO_IN_Init+0x4a2>
 8001116:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800111a:	e00a      	b.n	8001132 <BSP_AUDIO_IN_Init+0x4a2>
 800111c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001120:	e007      	b.n	8001132 <BSP_AUDIO_IN_Init+0x4a2>
 8001122:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001126:	e004      	b.n	8001132 <BSP_AUDIO_IN_Init+0x4a2>
 8001128:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800112c:	e001      	b.n	8001132 <BSP_AUDIO_IN_Init+0x4a2>
 800112e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001132:	617b      	str	r3, [r7, #20]
          mxDfsdmInit.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[Instance].SampleRate);
 8001134:	4a3e      	ldr	r2, [pc, #248]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	015b      	lsls	r3, r3, #5
 800113a:	4413      	add	r3, r2
 800113c:	3304      	adds	r3, #4
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001144:	d048      	beq.n	80011d8 <BSP_AUDIO_IN_Init+0x548>
 8001146:	4a3a      	ldr	r2, [pc, #232]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	015b      	lsls	r3, r3, #5
 800114c:	4413      	add	r3, r2
 800114e:	3304      	adds	r3, #4
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001156:	4293      	cmp	r3, r2
 8001158:	d03b      	beq.n	80011d2 <BSP_AUDIO_IN_Init+0x542>
 800115a:	4a35      	ldr	r2, [pc, #212]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	015b      	lsls	r3, r3, #5
 8001160:	4413      	add	r3, r2
 8001162:	3304      	adds	r3, #4
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800116a:	d030      	beq.n	80011ce <BSP_AUDIO_IN_Init+0x53e>
 800116c:	4a30      	ldr	r2, [pc, #192]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	015b      	lsls	r3, r3, #5
 8001172:	4413      	add	r3, r2
 8001174:	3304      	adds	r3, #4
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f245 6222 	movw	r2, #22050	; 0x5622
 800117c:	4293      	cmp	r3, r2
 800117e:	d024      	beq.n	80011ca <BSP_AUDIO_IN_Init+0x53a>
 8001180:	4a2b      	ldr	r2, [pc, #172]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	015b      	lsls	r3, r3, #5
 8001186:	4413      	add	r3, r2
 8001188:	3304      	adds	r3, #4
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001190:	d019      	beq.n	80011c6 <BSP_AUDIO_IN_Init+0x536>
 8001192:	4a27      	ldr	r2, [pc, #156]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	015b      	lsls	r3, r3, #5
 8001198:	4413      	add	r3, r2
 800119a:	3304      	adds	r3, #4
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f64a 4244 	movw	r2, #44100	; 0xac44
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <BSP_AUDIO_IN_Init+0x532>
 80011a6:	4a22      	ldr	r2, [pc, #136]	; (8001230 <BSP_AUDIO_IN_Init+0x5a0>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	015b      	lsls	r3, r3, #5
 80011ac:	4413      	add	r3, r2
 80011ae:	3304      	adds	r3, #4
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <BSP_AUDIO_IN_Init+0x52e>
 80011ba:	2320      	movs	r3, #32
 80011bc:	e00e      	b.n	80011dc <BSP_AUDIO_IN_Init+0x54c>
 80011be:	2310      	movs	r3, #16
 80011c0:	e00c      	b.n	80011dc <BSP_AUDIO_IN_Init+0x54c>
 80011c2:	2340      	movs	r3, #64	; 0x40
 80011c4:	e00a      	b.n	80011dc <BSP_AUDIO_IN_Init+0x54c>
 80011c6:	2340      	movs	r3, #64	; 0x40
 80011c8:	e008      	b.n	80011dc <BSP_AUDIO_IN_Init+0x54c>
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	e006      	b.n	80011dc <BSP_AUDIO_IN_Init+0x54c>
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	e004      	b.n	80011dc <BSP_AUDIO_IN_Init+0x54c>
 80011d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d6:	e001      	b.n	80011dc <BSP_AUDIO_IN_Init+0x54c>
 80011d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011dc:	61bb      	str	r3, [r7, #24]
          if (MX_DFSDM1_Init(&hdfsdm1_filter0, &hdfsdm1_channel0, &mxDfsdmInit) != HAL_OK)
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	461a      	mov	r2, r3
 80011e4:	4915      	ldr	r1, [pc, #84]	; (800123c <BSP_AUDIO_IN_Init+0x5ac>)
 80011e6:	4816      	ldr	r0, [pc, #88]	; (8001240 <BSP_AUDIO_IN_Init+0x5b0>)
 80011e8:	f000 fbe4 	bl	80019b4 <MX_DFSDM1_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <BSP_AUDIO_IN_Init+0x568>
          {
            status = BSP_ERROR_PERIPH_FAILURE;
 80011f2:	f06f 0303 	mvn.w	r3, #3
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
          }
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          if (status == BSP_ERROR_NONE)
 80011f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d131      	bne.n	8001262 <BSP_AUDIO_IN_Init+0x5d2>
          {
            /* Register DFSDM filter TC, HT and Error callbacks */
            if (HAL_DFSDM_Filter_RegisterCallback(&hdfsdm1_filter0, HAL_DFSDM_FILTER_REGCONV_COMPLETE_CB_ID, DFSDM_FilterRegConvCpltCallback) != HAL_OK)
 80011fe:	4a11      	ldr	r2, [pc, #68]	; (8001244 <BSP_AUDIO_IN_Init+0x5b4>)
 8001200:	2100      	movs	r1, #0
 8001202:	480f      	ldr	r0, [pc, #60]	; (8001240 <BSP_AUDIO_IN_Init+0x5b0>)
 8001204:	f001 fd48 	bl	8002c98 <HAL_DFSDM_Filter_RegisterCallback>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <BSP_AUDIO_IN_Init+0x586>
            {
              status = BSP_ERROR_PERIPH_FAILURE;
 800120e:	f06f 0303 	mvn.w	r3, #3
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
 8001214:	e025      	b.n	8001262 <BSP_AUDIO_IN_Init+0x5d2>
            }
            else if (HAL_DFSDM_Filter_RegisterCallback(&hdfsdm1_filter0, HAL_DFSDM_FILTER_REGCONV_HALFCOMPLETE_CB_ID, DFSDM_FilterRegConvHalfCpltCallback) != HAL_OK)
 8001216:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <BSP_AUDIO_IN_Init+0x5b8>)
 8001218:	2101      	movs	r1, #1
 800121a:	4809      	ldr	r0, [pc, #36]	; (8001240 <BSP_AUDIO_IN_Init+0x5b0>)
 800121c:	f001 fd3c 	bl	8002c98 <HAL_DFSDM_Filter_RegisterCallback>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d012      	beq.n	800124c <BSP_AUDIO_IN_Init+0x5bc>
            {
              status = BSP_ERROR_PERIPH_FAILURE;
 8001226:	f06f 0303 	mvn.w	r3, #3
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
 800122c:	e019      	b.n	8001262 <BSP_AUDIO_IN_Init+0x5d2>
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	00020004 	.word	0x00020004
 8001238:	40016100 	.word	0x40016100
 800123c:	20001d34 	.word	0x20001d34
 8001240:	20001bbc 	.word	0x20001bbc
 8001244:	08001d6d 	.word	0x08001d6d
 8001248:	08001fb9 	.word	0x08001fb9
            }
            else
            {
              if (HAL_DFSDM_Filter_RegisterCallback(&hdfsdm1_filter0, HAL_DFSDM_FILTER_ERROR_CB_ID, DFSDM_FilterErrorCallback) != HAL_OK)
 800124c:	4a90      	ldr	r2, [pc, #576]	; (8001490 <BSP_AUDIO_IN_Init+0x800>)
 800124e:	2104      	movs	r1, #4
 8001250:	4890      	ldr	r0, [pc, #576]	; (8001494 <BSP_AUDIO_IN_Init+0x804>)
 8001252:	f001 fd21 	bl	8002c98 <HAL_DFSDM_Filter_RegisterCallback>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <BSP_AUDIO_IN_Init+0x5d2>
              {
                status = BSP_ERROR_PERIPH_FAILURE;
 800125c:	f06f 0303 	mvn.w	r3, #3
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
              }
            }
          }
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
        }
        if (((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC2) == AUDIO_IN_DIGITAL_MIC2) && (status == BSP_ERROR_NONE))
 8001262:	4a8d      	ldr	r2, [pc, #564]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	015b      	lsls	r3, r3, #5
 8001268:	4413      	add	r3, r2
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0320 	and.w	r3, r3, #32
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 81a4 	beq.w	80015be <BSP_AUDIO_IN_Init+0x92e>
 8001276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001278:	2b00      	cmp	r3, #0
 800127a:	f040 81a0 	bne.w	80015be <BSP_AUDIO_IN_Init+0x92e>
        {
          mxDfsdmInit.ChannelInstance = DFSDM1_Channel1;
 800127e:	4b87      	ldr	r3, [pc, #540]	; (800149c <BSP_AUDIO_IN_Init+0x80c>)
 8001280:	61fb      	str	r3, [r7, #28]
          mxDfsdmInit.ClockDivider    = DFSDM_CLOCK_DIVIDER(Audio_In_Ctx[Instance].SampleRate);
 8001282:	4a85      	ldr	r2, [pc, #532]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	015b      	lsls	r3, r3, #5
 8001288:	4413      	add	r3, r2
 800128a:	3304      	adds	r3, #4
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001292:	d03b      	beq.n	800130c <BSP_AUDIO_IN_Init+0x67c>
 8001294:	4a80      	ldr	r2, [pc, #512]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	015b      	lsls	r3, r3, #5
 800129a:	4413      	add	r3, r2
 800129c:	3304      	adds	r3, #4
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f642 3211 	movw	r2, #11025	; 0x2b11
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d02f      	beq.n	8001308 <BSP_AUDIO_IN_Init+0x678>
 80012a8:	4a7b      	ldr	r2, [pc, #492]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	015b      	lsls	r3, r3, #5
 80012ae:	4413      	add	r3, r2
 80012b0:	3304      	adds	r3, #4
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80012b8:	d024      	beq.n	8001304 <BSP_AUDIO_IN_Init+0x674>
 80012ba:	4a77      	ldr	r2, [pc, #476]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	015b      	lsls	r3, r3, #5
 80012c0:	4413      	add	r3, r2
 80012c2:	3304      	adds	r3, #4
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f245 6222 	movw	r2, #22050	; 0x5622
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d018      	beq.n	8001300 <BSP_AUDIO_IN_Init+0x670>
 80012ce:	4a72      	ldr	r2, [pc, #456]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	015b      	lsls	r3, r3, #5
 80012d4:	4413      	add	r3, r2
 80012d6:	3304      	adds	r3, #4
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80012de:	d00d      	beq.n	80012fc <BSP_AUDIO_IN_Init+0x66c>
 80012e0:	4a6d      	ldr	r2, [pc, #436]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	015b      	lsls	r3, r3, #5
 80012e6:	4413      	add	r3, r2
 80012e8:	3304      	adds	r3, #4
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f64a 4244 	movw	r2, #44100	; 0xac44
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d101      	bne.n	80012f8 <BSP_AUDIO_IN_Init+0x668>
 80012f4:	2304      	movs	r3, #4
 80012f6:	e00a      	b.n	800130e <BSP_AUDIO_IN_Init+0x67e>
 80012f8:	2320      	movs	r3, #32
 80012fa:	e008      	b.n	800130e <BSP_AUDIO_IN_Init+0x67e>
 80012fc:	2318      	movs	r3, #24
 80012fe:	e006      	b.n	800130e <BSP_AUDIO_IN_Init+0x67e>
 8001300:	2304      	movs	r3, #4
 8001302:	e004      	b.n	800130e <BSP_AUDIO_IN_Init+0x67e>
 8001304:	2318      	movs	r3, #24
 8001306:	e002      	b.n	800130e <BSP_AUDIO_IN_Init+0x67e>
 8001308:	2304      	movs	r3, #4
 800130a:	e000      	b.n	800130e <BSP_AUDIO_IN_Init+0x67e>
 800130c:	2318      	movs	r3, #24
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
          mxDfsdmInit.DigitalMicPins  = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001314:	623b      	str	r3, [r7, #32]
          mxDfsdmInit.DigitalMicType  = DFSDM_CHANNEL_SPI_RISING;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
          mxDfsdmInit.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[Instance].SampleRate);
 800131a:	4a5f      	ldr	r2, [pc, #380]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	015b      	lsls	r3, r3, #5
 8001320:	4413      	add	r3, r2
 8001322:	3304      	adds	r3, #4
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800132a:	d047      	beq.n	80013bc <BSP_AUDIO_IN_Init+0x72c>
 800132c:	4a5a      	ldr	r2, [pc, #360]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	015b      	lsls	r3, r3, #5
 8001332:	4413      	add	r3, r2
 8001334:	3304      	adds	r3, #4
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f642 3211 	movw	r2, #11025	; 0x2b11
 800133c:	4293      	cmp	r3, r2
 800133e:	d03b      	beq.n	80013b8 <BSP_AUDIO_IN_Init+0x728>
 8001340:	4a55      	ldr	r2, [pc, #340]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	015b      	lsls	r3, r3, #5
 8001346:	4413      	add	r3, r2
 8001348:	3304      	adds	r3, #4
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001350:	d030      	beq.n	80013b4 <BSP_AUDIO_IN_Init+0x724>
 8001352:	4a51      	ldr	r2, [pc, #324]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	015b      	lsls	r3, r3, #5
 8001358:	4413      	add	r3, r2
 800135a:	3304      	adds	r3, #4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f245 6222 	movw	r2, #22050	; 0x5622
 8001362:	4293      	cmp	r3, r2
 8001364:	d024      	beq.n	80013b0 <BSP_AUDIO_IN_Init+0x720>
 8001366:	4a4c      	ldr	r2, [pc, #304]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	015b      	lsls	r3, r3, #5
 800136c:	4413      	add	r3, r2
 800136e:	3304      	adds	r3, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001376:	d019      	beq.n	80013ac <BSP_AUDIO_IN_Init+0x71c>
 8001378:	4a47      	ldr	r2, [pc, #284]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	015b      	lsls	r3, r3, #5
 800137e:	4413      	add	r3, r2
 8001380:	3304      	adds	r3, #4
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001388:	4293      	cmp	r3, r2
 800138a:	d00d      	beq.n	80013a8 <BSP_AUDIO_IN_Init+0x718>
 800138c:	4a42      	ldr	r2, [pc, #264]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	015b      	lsls	r3, r3, #5
 8001392:	4413      	add	r3, r2
 8001394:	3304      	adds	r3, #4
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800139c:	4293      	cmp	r3, r2
 800139e:	d101      	bne.n	80013a4 <BSP_AUDIO_IN_Init+0x714>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e00c      	b.n	80013be <BSP_AUDIO_IN_Init+0x72e>
 80013a4:	2304      	movs	r3, #4
 80013a6:	e00a      	b.n	80013be <BSP_AUDIO_IN_Init+0x72e>
 80013a8:	2300      	movs	r3, #0
 80013aa:	e008      	b.n	80013be <BSP_AUDIO_IN_Init+0x72e>
 80013ac:	2306      	movs	r3, #6
 80013ae:	e006      	b.n	80013be <BSP_AUDIO_IN_Init+0x72e>
 80013b0:	2303      	movs	r3, #3
 80013b2:	e004      	b.n	80013be <BSP_AUDIO_IN_Init+0x72e>
 80013b4:	2303      	movs	r3, #3
 80013b6:	e002      	b.n	80013be <BSP_AUDIO_IN_Init+0x72e>
 80013b8:	2306      	movs	r3, #6
 80013ba:	e000      	b.n	80013be <BSP_AUDIO_IN_Init+0x72e>
 80013bc:	2305      	movs	r3, #5
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
          mxDfsdmInit.Channel4Filter  = DFSDM_CHANNEL_1;
 80013c0:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <BSP_AUDIO_IN_Init+0x810>)
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
          mxDfsdmInit.FilterInstance  = DFSDM1_Filter1;
 80013c4:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <BSP_AUDIO_IN_Init+0x814>)
 80013c6:	60fb      	str	r3, [r7, #12]
          if (Audio_In_Ctx[Instance].Device == AUDIO_IN_DIGITAL_MIC2)
 80013c8:	4a33      	ldr	r2, [pc, #204]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	015b      	lsls	r3, r3, #5
 80013ce:	4413      	add	r3, r2
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b20      	cmp	r3, #32
 80013d4:	d102      	bne.n	80013dc <BSP_AUDIO_IN_Init+0x74c>
          {
            mxDfsdmInit.RegularTrigger  = DFSDM_FILTER_SW_TRIGGER;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	e001      	b.n	80013e0 <BSP_AUDIO_IN_Init+0x750>
          }
          else
          {
            mxDfsdmInit.RegularTrigger  = DFSDM_FILTER_SYNC_TRIGGER;
 80013dc:	2301      	movs	r3, #1
 80013de:	613b      	str	r3, [r7, #16]
          }
          mxDfsdmInit.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[Instance].SampleRate);
 80013e0:	4a2d      	ldr	r2, [pc, #180]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	015b      	lsls	r3, r3, #5
 80013e6:	4413      	add	r3, r2
 80013e8:	3304      	adds	r3, #4
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80013f0:	d05a      	beq.n	80014a8 <BSP_AUDIO_IN_Init+0x818>
 80013f2:	4a29      	ldr	r2, [pc, #164]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	015b      	lsls	r3, r3, #5
 80013f8:	4413      	add	r3, r2
 80013fa:	3304      	adds	r3, #4
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001402:	4293      	cmp	r3, r2
 8001404:	d041      	beq.n	800148a <BSP_AUDIO_IN_Init+0x7fa>
 8001406:	4a24      	ldr	r2, [pc, #144]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	015b      	lsls	r3, r3, #5
 800140c:	4413      	add	r3, r2
 800140e:	3304      	adds	r3, #4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001416:	d035      	beq.n	8001484 <BSP_AUDIO_IN_Init+0x7f4>
 8001418:	4a1f      	ldr	r2, [pc, #124]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	015b      	lsls	r3, r3, #5
 800141e:	4413      	add	r3, r2
 8001420:	3304      	adds	r3, #4
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f245 6222 	movw	r2, #22050	; 0x5622
 8001428:	4293      	cmp	r3, r2
 800142a:	d028      	beq.n	800147e <BSP_AUDIO_IN_Init+0x7ee>
 800142c:	4a1a      	ldr	r2, [pc, #104]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	015b      	lsls	r3, r3, #5
 8001432:	4413      	add	r3, r2
 8001434:	3304      	adds	r3, #4
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800143c:	d01c      	beq.n	8001478 <BSP_AUDIO_IN_Init+0x7e8>
 800143e:	4a16      	ldr	r2, [pc, #88]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	015b      	lsls	r3, r3, #5
 8001444:	4413      	add	r3, r2
 8001446:	3304      	adds	r3, #4
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800144e:	4293      	cmp	r3, r2
 8001450:	d00f      	beq.n	8001472 <BSP_AUDIO_IN_Init+0x7e2>
 8001452:	4a11      	ldr	r2, [pc, #68]	; (8001498 <BSP_AUDIO_IN_Init+0x808>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	015b      	lsls	r3, r3, #5
 8001458:	4413      	add	r3, r2
 800145a:	3304      	adds	r3, #4
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001462:	4293      	cmp	r3, r2
 8001464:	d102      	bne.n	800146c <BSP_AUDIO_IN_Init+0x7dc>
 8001466:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800146a:	e01f      	b.n	80014ac <BSP_AUDIO_IN_Init+0x81c>
 800146c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001470:	e01c      	b.n	80014ac <BSP_AUDIO_IN_Init+0x81c>
 8001472:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001476:	e019      	b.n	80014ac <BSP_AUDIO_IN_Init+0x81c>
 8001478:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800147c:	e016      	b.n	80014ac <BSP_AUDIO_IN_Init+0x81c>
 800147e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001482:	e013      	b.n	80014ac <BSP_AUDIO_IN_Init+0x81c>
 8001484:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001488:	e010      	b.n	80014ac <BSP_AUDIO_IN_Init+0x81c>
 800148a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800148e:	e00d      	b.n	80014ac <BSP_AUDIO_IN_Init+0x81c>
 8001490:	08002205 	.word	0x08002205
 8001494:	20001bbc 	.word	0x20001bbc
 8001498:	20000008 	.word	0x20000008
 800149c:	40016020 	.word	0x40016020
 80014a0:	00010002 	.word	0x00010002
 80014a4:	40016180 	.word	0x40016180
 80014a8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80014ac:	617b      	str	r3, [r7, #20]
          mxDfsdmInit.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[Instance].SampleRate);
 80014ae:	4a51      	ldr	r2, [pc, #324]	; (80015f4 <BSP_AUDIO_IN_Init+0x964>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	015b      	lsls	r3, r3, #5
 80014b4:	4413      	add	r3, r2
 80014b6:	3304      	adds	r3, #4
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80014be:	d048      	beq.n	8001552 <BSP_AUDIO_IN_Init+0x8c2>
 80014c0:	4a4c      	ldr	r2, [pc, #304]	; (80015f4 <BSP_AUDIO_IN_Init+0x964>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	015b      	lsls	r3, r3, #5
 80014c6:	4413      	add	r3, r2
 80014c8:	3304      	adds	r3, #4
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f642 3211 	movw	r2, #11025	; 0x2b11
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d03b      	beq.n	800154c <BSP_AUDIO_IN_Init+0x8bc>
 80014d4:	4a47      	ldr	r2, [pc, #284]	; (80015f4 <BSP_AUDIO_IN_Init+0x964>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	015b      	lsls	r3, r3, #5
 80014da:	4413      	add	r3, r2
 80014dc:	3304      	adds	r3, #4
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80014e4:	d030      	beq.n	8001548 <BSP_AUDIO_IN_Init+0x8b8>
 80014e6:	4a43      	ldr	r2, [pc, #268]	; (80015f4 <BSP_AUDIO_IN_Init+0x964>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	015b      	lsls	r3, r3, #5
 80014ec:	4413      	add	r3, r2
 80014ee:	3304      	adds	r3, #4
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f245 6222 	movw	r2, #22050	; 0x5622
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d024      	beq.n	8001544 <BSP_AUDIO_IN_Init+0x8b4>
 80014fa:	4a3e      	ldr	r2, [pc, #248]	; (80015f4 <BSP_AUDIO_IN_Init+0x964>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	015b      	lsls	r3, r3, #5
 8001500:	4413      	add	r3, r2
 8001502:	3304      	adds	r3, #4
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800150a:	d019      	beq.n	8001540 <BSP_AUDIO_IN_Init+0x8b0>
 800150c:	4a39      	ldr	r2, [pc, #228]	; (80015f4 <BSP_AUDIO_IN_Init+0x964>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	015b      	lsls	r3, r3, #5
 8001512:	4413      	add	r3, r2
 8001514:	3304      	adds	r3, #4
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f64a 4244 	movw	r2, #44100	; 0xac44
 800151c:	4293      	cmp	r3, r2
 800151e:	d00d      	beq.n	800153c <BSP_AUDIO_IN_Init+0x8ac>
 8001520:	4a34      	ldr	r2, [pc, #208]	; (80015f4 <BSP_AUDIO_IN_Init+0x964>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	015b      	lsls	r3, r3, #5
 8001526:	4413      	add	r3, r2
 8001528:	3304      	adds	r3, #4
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001530:	4293      	cmp	r3, r2
 8001532:	d101      	bne.n	8001538 <BSP_AUDIO_IN_Init+0x8a8>
 8001534:	2320      	movs	r3, #32
 8001536:	e00e      	b.n	8001556 <BSP_AUDIO_IN_Init+0x8c6>
 8001538:	2310      	movs	r3, #16
 800153a:	e00c      	b.n	8001556 <BSP_AUDIO_IN_Init+0x8c6>
 800153c:	2340      	movs	r3, #64	; 0x40
 800153e:	e00a      	b.n	8001556 <BSP_AUDIO_IN_Init+0x8c6>
 8001540:	2340      	movs	r3, #64	; 0x40
 8001542:	e008      	b.n	8001556 <BSP_AUDIO_IN_Init+0x8c6>
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	e006      	b.n	8001556 <BSP_AUDIO_IN_Init+0x8c6>
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	e004      	b.n	8001556 <BSP_AUDIO_IN_Init+0x8c6>
 800154c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001550:	e001      	b.n	8001556 <BSP_AUDIO_IN_Init+0x8c6>
 8001552:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001556:	61bb      	str	r3, [r7, #24]
          if (MX_DFSDM1_Init(&hdfsdm1_filter1, &hdfsdm1_channel1, &mxDfsdmInit) != HAL_OK)
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	461a      	mov	r2, r3
 800155e:	4926      	ldr	r1, [pc, #152]	; (80015f8 <BSP_AUDIO_IN_Init+0x968>)
 8001560:	4826      	ldr	r0, [pc, #152]	; (80015fc <BSP_AUDIO_IN_Init+0x96c>)
 8001562:	f000 fa27 	bl	80019b4 <MX_DFSDM1_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <BSP_AUDIO_IN_Init+0x8e2>
          {
            status = BSP_ERROR_PERIPH_FAILURE;
 800156c:	f06f 0303 	mvn.w	r3, #3
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
          }
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          if (status == BSP_ERROR_NONE)
 8001572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001574:	2b00      	cmp	r3, #0
 8001576:	d122      	bne.n	80015be <BSP_AUDIO_IN_Init+0x92e>
          {
            /* Register DFSDM filter TC, HT and Error callbacks */
            if (HAL_DFSDM_Filter_RegisterCallback(&hdfsdm1_filter1, HAL_DFSDM_FILTER_REGCONV_COMPLETE_CB_ID, DFSDM_FilterRegConvCpltCallback) != HAL_OK)
 8001578:	4a21      	ldr	r2, [pc, #132]	; (8001600 <BSP_AUDIO_IN_Init+0x970>)
 800157a:	2100      	movs	r1, #0
 800157c:	481f      	ldr	r0, [pc, #124]	; (80015fc <BSP_AUDIO_IN_Init+0x96c>)
 800157e:	f001 fb8b 	bl	8002c98 <HAL_DFSDM_Filter_RegisterCallback>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <BSP_AUDIO_IN_Init+0x900>
            {
              status = BSP_ERROR_PERIPH_FAILURE;
 8001588:	f06f 0303 	mvn.w	r3, #3
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
 800158e:	e016      	b.n	80015be <BSP_AUDIO_IN_Init+0x92e>
            }
            else if (HAL_DFSDM_Filter_RegisterCallback(&hdfsdm1_filter1, HAL_DFSDM_FILTER_REGCONV_HALFCOMPLETE_CB_ID, DFSDM_FilterRegConvHalfCpltCallback) != HAL_OK)
 8001590:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <BSP_AUDIO_IN_Init+0x974>)
 8001592:	2101      	movs	r1, #1
 8001594:	4819      	ldr	r0, [pc, #100]	; (80015fc <BSP_AUDIO_IN_Init+0x96c>)
 8001596:	f001 fb7f 	bl	8002c98 <HAL_DFSDM_Filter_RegisterCallback>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <BSP_AUDIO_IN_Init+0x918>
            {
              status = BSP_ERROR_PERIPH_FAILURE;
 80015a0:	f06f 0303 	mvn.w	r3, #3
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
 80015a6:	e00a      	b.n	80015be <BSP_AUDIO_IN_Init+0x92e>
            }
            else
            {
              if (HAL_DFSDM_Filter_RegisterCallback(&hdfsdm1_filter1, HAL_DFSDM_FILTER_ERROR_CB_ID, DFSDM_FilterErrorCallback) != HAL_OK)
 80015a8:	4a17      	ldr	r2, [pc, #92]	; (8001608 <BSP_AUDIO_IN_Init+0x978>)
 80015aa:	2104      	movs	r1, #4
 80015ac:	4813      	ldr	r0, [pc, #76]	; (80015fc <BSP_AUDIO_IN_Init+0x96c>)
 80015ae:	f001 fb73 	bl	8002c98 <HAL_DFSDM_Filter_RegisterCallback>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <BSP_AUDIO_IN_Init+0x92e>
              {
                status = BSP_ERROR_PERIPH_FAILURE;
 80015b8:	f06f 0303 	mvn.w	r3, #3
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34
              }
            }
          }
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
        }
        if (status == BSP_ERROR_NONE)
 80015be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d112      	bne.n	80015ea <BSP_AUDIO_IN_Init+0x95a>
        {
          /* Initialise transfer control flag */
          Audio_DmaDigMic1RecHalfBuffCplt = 0;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <BSP_AUDIO_IN_Init+0x97c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
          Audio_DmaDigMic1RecBuffCplt     = 0;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <BSP_AUDIO_IN_Init+0x980>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
          Audio_DmaDigMic2RecHalfBuffCplt = 0;
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <BSP_AUDIO_IN_Init+0x984>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
          Audio_DmaDigMic2RecBuffCplt     = 0;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <BSP_AUDIO_IN_Init+0x988>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

          /* Update audio in context state */
          Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 80015dc:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <BSP_AUDIO_IN_Init+0x964>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	015b      	lsls	r3, r3, #5
 80015e2:	4413      	add	r3, r2
 80015e4:	331c      	adds	r3, #28
 80015e6:	2202      	movs	r2, #2
 80015e8:	601a      	str	r2, [r3, #0]
        }
      }

  }
  return status;
 80015ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3738      	adds	r7, #56	; 0x38
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000008 	.word	0x20000008
 80015f8:	20001b74 	.word	0x20001b74
 80015fc:	20001cc0 	.word	0x20001cc0
 8001600:	08001d6d 	.word	0x08001d6d
 8001604:	08001fb9 	.word	0x08001fb9
 8001608:	08002205 	.word	0x08002205
 800160c:	20003d98 	.word	0x20003d98
 8001610:	20001d8c 	.word	0x20001d8c
 8001614:	20003d94 	.word	0x20003d94
 8001618:	20001d90 	.word	0x20001d90

0800161c <BSP_AUDIO_IN_Record>:
  * @param  pData Pointer on data buffer.
  * @param  NbrOfBytes Size of buffer in bytes. Maximum size is 65535 bytes.
  * @retval BSP status.
  */
int32_t BSP_AUDIO_IN_Record(uint32_t Instance, uint8_t* pData, uint32_t NbrOfBytes)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  int32_t  status = BSP_ERROR_NONE;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]

  if ((Instance >= AUDIO_IN_INSTANCES_NBR) || (pData == NULL) || (NbrOfBytes > 65535U))
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d106      	bne.n	8001640 <BSP_AUDIO_IN_Record+0x24>
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <BSP_AUDIO_IN_Record+0x24>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163e:	d303      	bcc.n	8001648 <BSP_AUDIO_IN_Record+0x2c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001640:	f06f 0301 	mvn.w	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e084      	b.n	8001752 <BSP_AUDIO_IN_Record+0x136>
  }
  /* Check the internal buffer size */
  else if ((NbrOfBytes / 2U) > BSP_AUDIO_IN_DEFAULT_BUFFER_SIZE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f241 0201 	movw	r2, #4097	; 0x1001
 800164e:	4293      	cmp	r3, r2
 8001650:	d903      	bls.n	800165a <BSP_AUDIO_IN_Record+0x3e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001652:	f06f 0301 	mvn.w	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	e07b      	b.n	8001752 <BSP_AUDIO_IN_Record+0x136>
  }
  /* Check audio in state */
  else if (Audio_In_Ctx[Instance].State != AUDIO_IN_STATE_STOP)
 800165a:	4a40      	ldr	r2, [pc, #256]	; (800175c <BSP_AUDIO_IN_Record+0x140>)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	015b      	lsls	r3, r3, #5
 8001660:	4413      	add	r3, r2
 8001662:	331c      	adds	r3, #28
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d003      	beq.n	8001672 <BSP_AUDIO_IN_Record+0x56>
  {
    status = BSP_ERROR_BUSY;
 800166a:	f06f 0302 	mvn.w	r3, #2
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e06f      	b.n	8001752 <BSP_AUDIO_IN_Record+0x136>
  }
  else
  {
    Audio_In_Ctx[Instance].pBuff = pData;
 8001672:	4a3a      	ldr	r2, [pc, #232]	; (800175c <BSP_AUDIO_IN_Record+0x140>)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	015b      	lsls	r3, r3, #5
 8001678:	4413      	add	r3, r2
 800167a:	3310      	adds	r3, #16
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].Size  = NbrOfBytes;
 8001680:	4a36      	ldr	r2, [pc, #216]	; (800175c <BSP_AUDIO_IN_Record+0x140>)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	015b      	lsls	r3, r3, #5
 8001686:	4413      	add	r3, r2
 8001688:	3314      	adds	r3, #20
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	601a      	str	r2, [r3, #0]

    /* Initialise transfer control flag */
    Audio_DmaDigMic1RecHalfBuffCplt = 0;
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <BSP_AUDIO_IN_Record+0x144>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
    Audio_DmaDigMic1RecBuffCplt     = 0;
 8001694:	4b33      	ldr	r3, [pc, #204]	; (8001764 <BSP_AUDIO_IN_Record+0x148>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
    Audio_DmaDigMic2RecHalfBuffCplt = 0;
 800169a:	4b33      	ldr	r3, [pc, #204]	; (8001768 <BSP_AUDIO_IN_Record+0x14c>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
    Audio_DmaDigMic2RecBuffCplt     = 0;
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <BSP_AUDIO_IN_Record+0x150>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]

    if ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC2) == AUDIO_IN_DIGITAL_MIC2)
 80016a6:	4a2d      	ldr	r2, [pc, #180]	; (800175c <BSP_AUDIO_IN_Record+0x140>)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	015b      	lsls	r3, r3, #5
 80016ac:	4413      	add	r3, r2
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0320 	and.w	r3, r3, #32
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d01c      	beq.n	80016f2 <BSP_AUDIO_IN_Record+0xd6>
    {
      printf("Set up MIC2\n");
 80016b8:	482d      	ldr	r0, [pc, #180]	; (8001770 <BSP_AUDIO_IN_Record+0x154>)
 80016ba:	f007 fa15 	bl	8008ae8 <puts>
      /* Call the Media layer start function for MIC2 channel */
      if(HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1,
                                           Audio_DigMic2RecBuff,
                                          (Audio_In_Ctx[Instance].Size / (2U * Audio_In_Ctx[Instance].ChannelsNbr))) != HAL_OK)
 80016be:	4a27      	ldr	r2, [pc, #156]	; (800175c <BSP_AUDIO_IN_Record+0x140>)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	015b      	lsls	r3, r3, #5
 80016c4:	4413      	add	r3, r2
 80016c6:	3314      	adds	r3, #20
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4924      	ldr	r1, [pc, #144]	; (800175c <BSP_AUDIO_IN_Record+0x140>)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	015b      	lsls	r3, r3, #5
 80016d0:	440b      	add	r3, r1
 80016d2:	330c      	adds	r3, #12
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	005b      	lsls	r3, r3, #1
      if(HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1,
 80016d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	4925      	ldr	r1, [pc, #148]	; (8001774 <BSP_AUDIO_IN_Record+0x158>)
 80016e0:	4825      	ldr	r0, [pc, #148]	; (8001778 <BSP_AUDIO_IN_Record+0x15c>)
 80016e2:	f001 fb93 	bl	8002e0c <HAL_DFSDM_FilterRegularStart_DMA>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <BSP_AUDIO_IN_Record+0xd6>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 80016ec:	f06f 0303 	mvn.w	r3, #3
 80016f0:	617b      	str	r3, [r7, #20]
      }
    }

    if (((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC1) == AUDIO_IN_DIGITAL_MIC1) && (status == BSP_ERROR_NONE))
 80016f2:	4a1a      	ldr	r2, [pc, #104]	; (800175c <BSP_AUDIO_IN_Record+0x140>)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	015b      	lsls	r3, r3, #5
 80016f8:	4413      	add	r3, r2
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	2b00      	cmp	r3, #0
 8001702:	d01c      	beq.n	800173e <BSP_AUDIO_IN_Record+0x122>
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d119      	bne.n	800173e <BSP_AUDIO_IN_Record+0x122>
    {
      // printf("Set up MIC1\n");
      /* Call the Media layer start function for MIC1 channel */
      if(HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0,
                                           Audio_DigMic1RecBuff,
                                          (Audio_In_Ctx[Instance].Size / (2U * Audio_In_Ctx[Instance].ChannelsNbr))) != HAL_OK)
 800170a:	4a14      	ldr	r2, [pc, #80]	; (800175c <BSP_AUDIO_IN_Record+0x140>)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	015b      	lsls	r3, r3, #5
 8001710:	4413      	add	r3, r2
 8001712:	3314      	adds	r3, #20
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4911      	ldr	r1, [pc, #68]	; (800175c <BSP_AUDIO_IN_Record+0x140>)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	015b      	lsls	r3, r3, #5
 800171c:	440b      	add	r3, r1
 800171e:	330c      	adds	r3, #12
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	005b      	lsls	r3, r3, #1
      if(HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0,
 8001724:	fbb2 f3f3 	udiv	r3, r2, r3
 8001728:	461a      	mov	r2, r3
 800172a:	4914      	ldr	r1, [pc, #80]	; (800177c <BSP_AUDIO_IN_Record+0x160>)
 800172c:	4814      	ldr	r0, [pc, #80]	; (8001780 <BSP_AUDIO_IN_Record+0x164>)
 800172e:	f001 fb6d 	bl	8002e0c <HAL_DFSDM_FilterRegularStart_DMA>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d002      	beq.n	800173e <BSP_AUDIO_IN_Record+0x122>
      {
        // printf("FAIL HAL_DFSDM_FilterRegularStart_DMA\n");
        status = BSP_ERROR_PERIPH_FAILURE;
 8001738:	f06f 0303 	mvn.w	r3, #3
 800173c:	617b      	str	r3, [r7, #20]
      }
      else {
        // printf("OK HAL_DFSDM_FilterRegularStart_DMA\n");
      }
    }
    if (status == BSP_ERROR_NONE)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d106      	bne.n	8001752 <BSP_AUDIO_IN_Record+0x136>
    {
      /* Update audio in state */
      Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_RECORDING;
 8001744:	4a05      	ldr	r2, [pc, #20]	; (800175c <BSP_AUDIO_IN_Record+0x140>)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	015b      	lsls	r3, r3, #5
 800174a:	4413      	add	r3, r2
 800174c:	331c      	adds	r3, #28
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 8001752:	697b      	ldr	r3, [r7, #20]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000008 	.word	0x20000008
 8001760:	20003d98 	.word	0x20003d98
 8001764:	20001d8c 	.word	0x20001d8c
 8001768:	20003d94 	.word	0x20003d94
 800176c:	20001d90 	.word	0x20001d90
 8001770:	08009a50 	.word	0x08009a50
 8001774:	20003d9c 	.word	0x20003d9c
 8001778:	20001cc0 	.word	0x20001cc0
 800177c:	20001d94 	.word	0x20001d94
 8001780:	20001bbc 	.word	0x20001bbc

08001784 <BSP_AUDIO_IN_Pause>:
  * @brief  Pause record of audio stream.
  * @param  Instance Audio in instance.
  * @retval BSP status.
  */
int32_t BSP_AUDIO_IN_Pause(uint32_t Instance)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <BSP_AUDIO_IN_Pause+0x1a>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001796:	f06f 0301 	mvn.w	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e03c      	b.n	8001818 <BSP_AUDIO_IN_Pause+0x94>
  }
  /* Check audio in state */
  else if (Audio_In_Ctx[Instance].State != AUDIO_IN_STATE_RECORDING)
 800179e:	4a21      	ldr	r2, [pc, #132]	; (8001824 <BSP_AUDIO_IN_Pause+0xa0>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	015b      	lsls	r3, r3, #5
 80017a4:	4413      	add	r3, r2
 80017a6:	331c      	adds	r3, #28
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d003      	beq.n	80017b6 <BSP_AUDIO_IN_Pause+0x32>
  {
    status = BSP_ERROR_BUSY;
 80017ae:	f06f 0302 	mvn.w	r3, #2
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e030      	b.n	8001818 <BSP_AUDIO_IN_Pause+0x94>
  }
  else
  {
    /* Call the Media layer stop function */
    if ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC2) == AUDIO_IN_DIGITAL_MIC2)
 80017b6:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <BSP_AUDIO_IN_Pause+0xa0>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	015b      	lsls	r3, r3, #5
 80017bc:	4413      	add	r3, r2
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <BSP_AUDIO_IN_Pause+0x56>
    {
      if(HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter1) != HAL_OK)
 80017c8:	4817      	ldr	r0, [pc, #92]	; (8001828 <BSP_AUDIO_IN_Pause+0xa4>)
 80017ca:	f001 fba1 	bl	8002f10 <HAL_DFSDM_FilterRegularStop_DMA>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <BSP_AUDIO_IN_Pause+0x56>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 80017d4:	f06f 0303 	mvn.w	r3, #3
 80017d8:	60fb      	str	r3, [r7, #12]
      }
    }
    if (((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC1) == AUDIO_IN_DIGITAL_MIC1) && (status == BSP_ERROR_NONE))
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <BSP_AUDIO_IN_Pause+0xa0>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	015b      	lsls	r3, r3, #5
 80017e0:	4413      	add	r3, r2
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00b      	beq.n	8001804 <BSP_AUDIO_IN_Pause+0x80>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d108      	bne.n	8001804 <BSP_AUDIO_IN_Pause+0x80>
    {
      if(HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0) != HAL_OK)
 80017f2:	480e      	ldr	r0, [pc, #56]	; (800182c <BSP_AUDIO_IN_Pause+0xa8>)
 80017f4:	f001 fb8c 	bl	8002f10 <HAL_DFSDM_FilterRegularStop_DMA>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <BSP_AUDIO_IN_Pause+0x80>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 80017fe:	f06f 0303 	mvn.w	r3, #3
 8001802:	60fb      	str	r3, [r7, #12]
      }
    }
    if (status == BSP_ERROR_NONE)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <BSP_AUDIO_IN_Pause+0x94>
    {
      /* Update audio in state */
      Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_PAUSE;
 800180a:	4a06      	ldr	r2, [pc, #24]	; (8001824 <BSP_AUDIO_IN_Pause+0xa0>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	015b      	lsls	r3, r3, #5
 8001810:	4413      	add	r3, r2
 8001812:	331c      	adds	r3, #28
 8001814:	2203      	movs	r2, #3
 8001816:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000008 	.word	0x20000008
 8001828:	20001cc0 	.word	0x20001cc0
 800182c:	20001bbc 	.word	0x20001bbc

08001830 <BSP_AUDIO_IN_GetState>:
  * @param  Instance Audio in instance.
  * @param  State Pointer to state of the audio in stream.
  * @retval BSP status.
  */
int32_t BSP_AUDIO_IN_GetState(uint32_t Instance, uint32_t *State)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <BSP_AUDIO_IN_GetState+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001844:	f06f 0301 	mvn.w	r3, #1
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e007      	b.n	800185c <BSP_AUDIO_IN_GetState+0x2c>
  }
  /* Get the current state of audio in stream */
  else
  {
    *State = Audio_In_Ctx[Instance].State;
 800184c:	4a07      	ldr	r2, [pc, #28]	; (800186c <BSP_AUDIO_IN_GetState+0x3c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	015b      	lsls	r3, r3, #5
 8001852:	4413      	add	r3, r2
 8001854:	331c      	adds	r3, #28
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800185c:	68fb      	ldr	r3, [r7, #12]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008

08001870 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks>:
  * @brief  Register default BSP AUDIO IN msp callbacks.
  * @param  Instance AUDIO IN Instance.
  * @retval BSP status.
  */
int32_t BSP_AUDIO_IN_RegisterDefaultMspCallbacks(uint32_t Instance)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x1a>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8001882:	f06f 0301 	mvn.w	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e07a      	b.n	8001980 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x110>
  }
  else
  {
    /* Register MspInit/MspDeInit callbacks */
    if ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC1) == AUDIO_IN_DIGITAL_MIC1)
 800188a:	4a40      	ldr	r2, [pc, #256]	; (800198c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x11c>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	015b      	lsls	r3, r3, #5
 8001890:	4413      	add	r3, r2
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	d02e      	beq.n	80018fa <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x8a>
    {
      if (HAL_DFSDM_Channel_RegisterCallback(&hdfsdm1_channel0, HAL_DFSDM_CHANNEL_MSPINIT_CB_ID, DFSDM_ChannelMspInit) != HAL_OK)
 800189c:	4a3c      	ldr	r2, [pc, #240]	; (8001990 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x120>)
 800189e:	2102      	movs	r1, #2
 80018a0:	483c      	ldr	r0, [pc, #240]	; (8001994 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x124>)
 80018a2:	f001 f88f 	bl	80029c4 <HAL_DFSDM_Channel_RegisterCallback>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x44>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 80018ac:	f06f 0303 	mvn.w	r3, #3
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e022      	b.n	80018fa <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x8a>
      }
      else if (HAL_DFSDM_Filter_RegisterCallback(&hdma_dfsdm1_flt0, HAL_DFSDM_FILTER_MSPINIT_CB_ID, DFSDM_FilterMspInit) != HAL_OK)
 80018b4:	4a38      	ldr	r2, [pc, #224]	; (8001998 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x128>)
 80018b6:	2105      	movs	r1, #5
 80018b8:	4838      	ldr	r0, [pc, #224]	; (800199c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x12c>)
 80018ba:	f001 f9ed 	bl	8002c98 <HAL_DFSDM_Filter_RegisterCallback>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x5c>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 80018c4:	f06f 0303 	mvn.w	r3, #3
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	e016      	b.n	80018fa <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x8a>
      }
      else if (HAL_DFSDM_Channel_RegisterCallback(&hdfsdm1_channel0, HAL_DFSDM_CHANNEL_MSPDEINIT_CB_ID, DFSDM_ChannelMspDeInit) != HAL_OK)
 80018cc:	4a34      	ldr	r2, [pc, #208]	; (80019a0 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x130>)
 80018ce:	2103      	movs	r1, #3
 80018d0:	4830      	ldr	r0, [pc, #192]	; (8001994 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x124>)
 80018d2:	f001 f877 	bl	80029c4 <HAL_DFSDM_Channel_RegisterCallback>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x74>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 80018dc:	f06f 0303 	mvn.w	r3, #3
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	e00a      	b.n	80018fa <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x8a>
      }
      else
      {
        if (HAL_DFSDM_Filter_RegisterCallback(&hdma_dfsdm1_flt0, HAL_DFSDM_FILTER_MSPDEINIT_CB_ID, DFSDM_FilterMspDeInit) != HAL_OK)
 80018e4:	4a2f      	ldr	r2, [pc, #188]	; (80019a4 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x134>)
 80018e6:	2106      	movs	r1, #6
 80018e8:	482c      	ldr	r0, [pc, #176]	; (800199c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x12c>)
 80018ea:	f001 f9d5 	bl	8002c98 <HAL_DFSDM_Filter_RegisterCallback>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x8a>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 80018f4:	f06f 0303 	mvn.w	r3, #3
 80018f8:	60fb      	str	r3, [r7, #12]
        }
      }
    }

    if (((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC2) == AUDIO_IN_DIGITAL_MIC2) && (status == BSP_ERROR_NONE))
 80018fa:	4a24      	ldr	r2, [pc, #144]	; (800198c <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x11c>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	015b      	lsls	r3, r3, #5
 8001900:	4413      	add	r3, r2
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0320 	and.w	r3, r3, #32
 8001908:	2b00      	cmp	r3, #0
 800190a:	d031      	beq.n	8001970 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x100>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d12e      	bne.n	8001970 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x100>
    {
      if (HAL_DFSDM_Channel_RegisterCallback(&hdfsdm1_channel1, HAL_DFSDM_CHANNEL_MSPINIT_CB_ID, DFSDM_ChannelMspInit) != HAL_OK)
 8001912:	4a1f      	ldr	r2, [pc, #124]	; (8001990 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x120>)
 8001914:	2102      	movs	r1, #2
 8001916:	4824      	ldr	r0, [pc, #144]	; (80019a8 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x138>)
 8001918:	f001 f854 	bl	80029c4 <HAL_DFSDM_Channel_RegisterCallback>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0xba>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8001922:	f06f 0303 	mvn.w	r3, #3
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	e022      	b.n	8001970 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x100>
      }
      else if (HAL_DFSDM_Filter_RegisterCallback(&hdma_dfsdm1_flt1, HAL_DFSDM_FILTER_MSPINIT_CB_ID, DFSDM_FilterMspInit) != HAL_OK)
 800192a:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x128>)
 800192c:	2105      	movs	r1, #5
 800192e:	481f      	ldr	r0, [pc, #124]	; (80019ac <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13c>)
 8001930:	f001 f9b2 	bl	8002c98 <HAL_DFSDM_Filter_RegisterCallback>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0xd2>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 800193a:	f06f 0303 	mvn.w	r3, #3
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	e016      	b.n	8001970 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x100>
      }
      else if (HAL_DFSDM_Channel_RegisterCallback(&hdfsdm1_channel1, HAL_DFSDM_CHANNEL_MSPDEINIT_CB_ID, DFSDM_ChannelMspDeInit) != HAL_OK)
 8001942:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x130>)
 8001944:	2103      	movs	r1, #3
 8001946:	4818      	ldr	r0, [pc, #96]	; (80019a8 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x138>)
 8001948:	f001 f83c 	bl	80029c4 <HAL_DFSDM_Channel_RegisterCallback>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0xea>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8001952:	f06f 0303 	mvn.w	r3, #3
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e00a      	b.n	8001970 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x100>
      }
      else
      {
        if (HAL_DFSDM_Filter_RegisterCallback(&hdma_dfsdm1_flt1, HAL_DFSDM_FILTER_MSPDEINIT_CB_ID, DFSDM_FilterMspDeInit) != HAL_OK)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x134>)
 800195c:	2106      	movs	r1, #6
 800195e:	4813      	ldr	r0, [pc, #76]	; (80019ac <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x13c>)
 8001960:	f001 f99a 	bl	8002c98 <HAL_DFSDM_Filter_RegisterCallback>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x100>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 800196a:	f06f 0303 	mvn.w	r3, #3
 800196e:	60fb      	str	r3, [r7, #12]
        }
      }
    }

    if (status == BSP_ERROR_NONE)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d104      	bne.n	8001980 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x110>
    {
      AudioIn_IsMspCbValid[Instance] = 1U;
 8001976:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <BSP_AUDIO_IN_RegisterDefaultMspCallbacks+0x140>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2101      	movs	r1, #1
 800197c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
  }
  /* Return BSP status */
  return status;
 8001980:	68fb      	ldr	r3, [r7, #12]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000008 	.word	0x20000008
 8001990:	08001abd 	.word	0x08001abd
 8001994:	20001d34 	.word	0x20001d34
 8001998:	08001bf5 	.word	0x08001bf5
 800199c:	20001c78 	.word	0x20001c78
 80019a0:	08001b89 	.word	0x08001b89
 80019a4:	08001d2d 	.word	0x08001d2d
 80019a8:	20001b74 	.word	0x20001b74
 80019ac:	20001c30 	.word	0x20001c30
 80019b0:	200001b8 	.word	0x200001b8

080019b4 <MX_DFSDM1_Init>:
  * @param  hDfsdmChannel DFSDM channel handle.
  * @param  MXInit DFSDM configuration structure.
  * @retval HAL_status.
  */
__weak HAL_StatusTypeDef MX_DFSDM1_Init(DFSDM_Filter_HandleTypeDef *hDfsdmFilter, DFSDM_Channel_HandleTypeDef *hDfsdmChannel, MX_DFSDM_InitTypeDef *MXInit)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	75fb      	strb	r3, [r7, #23]

  /* MIC channels initialization */
  hDfsdmChannel->Instance                      = MXInit->ChannelInstance;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	601a      	str	r2, [r3, #0]
  hDfsdmChannel->Init.OutputClock.Activation   = ENABLE;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2201      	movs	r2, #1
 80019d0:	711a      	strb	r2, [r3, #4]
  hDfsdmChannel->Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d8:	609a      	str	r2, [r3, #8]
  hDfsdmChannel->Init.OutputClock.Divider      = MXInit->ClockDivider;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1a      	ldr	r2, [r3, #32]
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	60da      	str	r2, [r3, #12]
  hDfsdmChannel->Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  hDfsdmChannel->Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2200      	movs	r2, #0
 80019ec:	615a      	str	r2, [r3, #20]
  hDfsdmChannel->Init.Input.Pins               = MXInit->DigitalMicPins;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	619a      	str	r2, [r3, #24]
  hDfsdmChannel->Init.SerialInterface.Type     = MXInit->DigitalMicType;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699a      	ldr	r2, [r3, #24]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	61da      	str	r2, [r3, #28]
  hDfsdmChannel->Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2204      	movs	r2, #4
 8001a02:	621a      	str	r2, [r3, #32]
  hDfsdmChannel->Init.Awd.FilterOrder          = DFSDM_CHANNEL_SINC1_ORDER;
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hDfsdmChannel->Init.Awd.Oversampling         = 10;
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	220a      	movs	r2, #10
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
  hDfsdmChannel->Init.Offset                   = 0;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2200      	movs	r2, #0
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hDfsdmChannel->Init.RightBitShift            = MXInit->RightBitShift;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	631a      	str	r2, [r3, #48]	; 0x30

  if(HAL_OK != HAL_DFSDM_ChannelInit(hDfsdmChannel))
 8001a20:	68b8      	ldr	r0, [r7, #8]
 8001a22:	f000 fefb 	bl	800281c <HAL_DFSDM_ChannelInit>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <MX_DFSDM1_Init+0x7e>
  {
    status = HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	75fb      	strb	r3, [r7, #23]
 8001a30:	e03e      	b.n	8001ab0 <MX_DFSDM1_Init+0xfc>
  }
  else
  {
    /* MIC filters  initialization */
    hDfsdmFilter->Instance                          = MXInit->FilterInstance;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	601a      	str	r2, [r3, #0]
    hDfsdmFilter->Init.RegularParam.Trigger         = MXInit->RegularTrigger;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	605a      	str	r2, [r3, #4]
    hDfsdmFilter->Init.RegularParam.FastMode        = ENABLE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2201      	movs	r2, #1
 8001a46:	721a      	strb	r2, [r3, #8]
    hDfsdmFilter->Init.RegularParam.DmaMode         = ENABLE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	725a      	strb	r2, [r3, #9]
    hDfsdmFilter->Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]
    hDfsdmFilter->Init.InjectedParam.ScanMode       = DISABLE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	741a      	strb	r2, [r3, #16]
    hDfsdmFilter->Init.InjectedParam.DmaMode        = DISABLE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	745a      	strb	r2, [r3, #17]
    hDfsdmFilter->Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM8_TRGO;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a66:	615a      	str	r2, [r3, #20]
    hDfsdmFilter->Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_BOTH_EDGES;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001a6e:	619a      	str	r2, [r3, #24]
    hDfsdmFilter->Init.FilterParam.SincOrder        = MXInit->SincOrder;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	61da      	str	r2, [r3, #28]
    hDfsdmFilter->Init.FilterParam.Oversampling     = MXInit->Oversampling;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	621a      	str	r2, [r3, #32]
    hDfsdmFilter->Init.FilterParam.IntOversampling  = 1;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2201      	movs	r2, #1
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24

    if(HAL_DFSDM_FilterInit(hDfsdmFilter) != HAL_OK)
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f001 f804 	bl	8002a94 <HAL_DFSDM_FilterInit>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <MX_DFSDM1_Init+0xe4>
    {
      status = HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	75fb      	strb	r3, [r7, #23]
 8001a96:	e00b      	b.n	8001ab0 <MX_DFSDM1_Init+0xfc>
    }
    else
    {
      /* Configure regular channel */
      if(HAL_DFSDM_FilterConfigRegChannel(hDfsdmFilter, MXInit->Channel4Filter, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f001 f96d 	bl	8002d80 <HAL_DFSDM_FilterConfigRegChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_DFSDM1_Init+0xfc>
      {
        status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return status;
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <DFSDM_ChannelMspInit>:
  * @brief  Initialize DFSDM channel MSP.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None.
  */
static void DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if (((hdfsdm_channel->Instance == DFSDM1_Channel2) && ((Audio_In_Ctx[0].Device & AUDIO_IN_DIGITAL_MIC1) != 0U)) || \
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <DFSDM_ChannelMspInit+0xb8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d105      	bne.n	8001ada <DFSDM_ChannelMspInit+0x1e>
 8001ace:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <DFSDM_ChannelMspInit+0xbc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d108      	bne.n	8001aec <DFSDM_ChannelMspInit+0x30>
      ((hdfsdm_channel->Instance == DFSDM1_Channel1) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
  if (((hdfsdm_channel->Instance == DFSDM1_Channel2) && ((Audio_In_Ctx[0].Device & AUDIO_IN_DIGITAL_MIC1) != 0U)) || \
 8001ade:	4a27      	ldr	r2, [pc, #156]	; (8001b7c <DFSDM_ChannelMspInit+0xc0>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d142      	bne.n	8001b6a <DFSDM_ChannelMspInit+0xae>
      ((hdfsdm_channel->Instance == DFSDM1_Channel1) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)))
 8001ae4:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <DFSDM_ChannelMspInit+0xbc>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b20      	cmp	r3, #32
 8001aea:	d13e      	bne.n	8001b6a <DFSDM_ChannelMspInit+0xae>
  {
    GPIO_InitTypeDef  GPIO_InitStruct;

    /* Enable DFSDM clock */
    AUDIO_DFSDM1_CLK_ENABLE();
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <DFSDM_ChannelMspInit+0xc4>)
 8001aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af0:	4a23      	ldr	r2, [pc, #140]	; (8001b80 <DFSDM_ChannelMspInit+0xc4>)
 8001af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af6:	6613      	str	r3, [r2, #96]	; 0x60
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <DFSDM_ChannelMspInit+0xc4>)
 8001afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	693b      	ldr	r3, [r7, #16]

    /* DFSDM pins configuration: DFSDM1_CKOUT, DFSDM1_DATIN2 pins */
    AUDIO_DFSDM1_CKOUT_GPIO_CLK_ENABLE();
 8001b04:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <DFSDM_ChannelMspInit+0xc4>)
 8001b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b08:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <DFSDM_ChannelMspInit+0xc4>)
 8001b0a:	f043 0310 	orr.w	r3, r3, #16
 8001b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <DFSDM_ChannelMspInit+0xc4>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = AUDIO_DFSDM1_CKOUT_GPIO_AF;
 8001b28:	2306      	movs	r3, #6
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin       = AUDIO_DFSDM1_CKOUT_GPIO_PIN;
 8001b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b30:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(AUDIO_DFSDM1_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	4812      	ldr	r0, [pc, #72]	; (8001b84 <DFSDM_ChannelMspInit+0xc8>)
 8001b3a:	f001 fe2f 	bl	800379c <HAL_GPIO_Init>

    AUDIO_DFSDM1_DATIN2_GPIO_CLK_ENABLE();
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <DFSDM_ChannelMspInit+0xc4>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <DFSDM_ChannelMspInit+0xc4>)
 8001b44:	f043 0310 	orr.w	r3, r3, #16
 8001b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <DFSDM_ChannelMspInit+0xc4>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Alternate = AUDIO_DFSDM1_DATIN2_GPIO_AF;
 8001b56:	2306      	movs	r3, #6
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin       = AUDIO_DFSDM1_DATIN2_GPIO_PIN;
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(AUDIO_DFSDM1_DATIN2_GPIO_PORT, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	4807      	ldr	r0, [pc, #28]	; (8001b84 <DFSDM_ChannelMspInit+0xc8>)
 8001b66:	f001 fe19 	bl	800379c <HAL_GPIO_Init>
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40016040 	.word	0x40016040
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	40016020 	.word	0x40016020
 8001b80:	40021000 	.word	0x40021000
 8001b84:	48001000 	.word	0x48001000

08001b88 <DFSDM_ChannelMspDeInit>:
  * @brief  DeInitialize DFSDM channel MSP.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None.
  */
static void DFSDM_ChannelMspDeInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if (((hdfsdm_channel->Instance == DFSDM1_Channel2) && ((Audio_In_Ctx[0].Device & AUDIO_IN_DIGITAL_MIC1) != 0U)) || \
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <DFSDM_ChannelMspDeInit+0x58>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d105      	bne.n	8001ba6 <DFSDM_ChannelMspDeInit+0x1e>
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <DFSDM_ChannelMspDeInit+0x5c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d108      	bne.n	8001bb8 <DFSDM_ChannelMspDeInit+0x30>
      ((hdfsdm_channel->Instance == DFSDM1_Channel1) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
  if (((hdfsdm_channel->Instance == DFSDM1_Channel2) && ((Audio_In_Ctx[0].Device & AUDIO_IN_DIGITAL_MIC1) != 0U)) || \
 8001baa:	4a0f      	ldr	r2, [pc, #60]	; (8001be8 <DFSDM_ChannelMspDeInit+0x60>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d112      	bne.n	8001bd6 <DFSDM_ChannelMspDeInit+0x4e>
      ((hdfsdm_channel->Instance == DFSDM1_Channel1) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)))
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <DFSDM_ChannelMspDeInit+0x5c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d10e      	bne.n	8001bd6 <DFSDM_ChannelMspDeInit+0x4e>
  {
    /* De-initialize DFSDM1_CKOUT, DFSDM1_DATIN2 pins */
    HAL_GPIO_DeInit(AUDIO_DFSDM1_CKOUT_GPIO_PORT, AUDIO_DFSDM1_CKOUT_GPIO_PIN);
 8001bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bbc:	480b      	ldr	r0, [pc, #44]	; (8001bec <DFSDM_ChannelMspDeInit+0x64>)
 8001bbe:	f001 ff97 	bl	8003af0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_DFSDM1_DATIN2_GPIO_PORT, AUDIO_DFSDM1_DATIN2_GPIO_PIN);
 8001bc2:	2180      	movs	r1, #128	; 0x80
 8001bc4:	4809      	ldr	r0, [pc, #36]	; (8001bec <DFSDM_ChannelMspDeInit+0x64>)
 8001bc6:	f001 ff93 	bl	8003af0 <HAL_GPIO_DeInit>

    /* Disable DFSDM1 */
    AUDIO_DFSDM1_CLK_DISABLE();
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <DFSDM_ChannelMspDeInit+0x68>)
 8001bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bce:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <DFSDM_ChannelMspDeInit+0x68>)
 8001bd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bd4:	6613      	str	r3, [r2, #96]	; 0x60
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40016040 	.word	0x40016040
 8001be4:	20000008 	.word	0x20000008
 8001be8:	40016020 	.word	0x40016020
 8001bec:	48001000 	.word	0x48001000
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <DFSDM_FilterMspInit>:
  * @brief  Initialize DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None.
  */
static void DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter->Instance == DFSDM1_Filter0)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a43      	ldr	r2, [pc, #268]	; (8001d10 <DFSDM_FilterMspInit+0x11c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d13e      	bne.n	8001c84 <DFSDM_FilterMspInit+0x90>
  {
    /* Enable the DMA clock */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001c06:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <DFSDM_FilterMspInit+0x120>)
 8001c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0a:	4a42      	ldr	r2, [pc, #264]	; (8001d14 <DFSDM_FilterMspInit+0x120>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6493      	str	r3, [r2, #72]	; 0x48
 8001c12:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <DFSDM_FilterMspInit+0x120>)
 8001c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]

    /* Configure the hDmaDfsdm[0] handle parameters */
    hDmaDfsdm[0].Init.Request             = DMA_REQUEST_0;
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]
    hDmaDfsdm[0].Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001c24:	4b3c      	ldr	r3, [pc, #240]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
    hDmaDfsdm[0].Init.PeriphInc           = DMA_PINC_DISABLE;
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
    hDmaDfsdm[0].Init.MemInc              = DMA_MINC_ENABLE;
 8001c30:	4b39      	ldr	r3, [pc, #228]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	611a      	str	r2, [r3, #16]
    hDmaDfsdm[0].Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c36:	4b38      	ldr	r3, [pc, #224]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3c:	615a      	str	r2, [r3, #20]
    hDmaDfsdm[0].Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001c3e:	4b36      	ldr	r3, [pc, #216]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001c40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c44:	619a      	str	r2, [r3, #24]
    hDmaDfsdm[0].Init.Mode                = DMA_CIRCULAR;
 8001c46:	4b34      	ldr	r3, [pc, #208]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001c48:	2220      	movs	r2, #32
 8001c4a:	61da      	str	r2, [r3, #28]
    hDmaDfsdm[0].Init.Priority            = DMA_PRIORITY_HIGH;
 8001c4c:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001c4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c52:	621a      	str	r2, [r3, #32]
    hDmaDfsdm[0].Instance                 = DMA1_Channel4;
 8001c54:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001c56:	4a31      	ldr	r2, [pc, #196]	; (8001d1c <DFSDM_FilterMspInit+0x128>)
 8001c58:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hdfsdm_filter, hdmaReg, hDmaDfsdm[0]);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a2e      	ldr	r2, [pc, #184]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c60:	4a2d      	ldr	r2, [pc, #180]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6293      	str	r3, [r2, #40]	; 0x28

    /* Deinitialize the DMA channel for new transfer */
    if (HAL_DMA_DeInit(&hDmaDfsdm[0]) != HAL_OK)
 8001c66:	482c      	ldr	r0, [pc, #176]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001c68:	f001 fb88 	bl	800337c <HAL_DMA_DeInit>
    {
      /* Nothing to do */
    }

    /* Configure the DMA Channel */
    if (HAL_DMA_Init(&hDmaDfsdm[0]) != HAL_OK)
 8001c6c:	482a      	ldr	r0, [pc, #168]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001c6e:	f001 facd 	bl	800320c <HAL_DMA_Init>
    {
      /* Nothing to do */
    }

    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	216c      	movs	r1, #108	; 0x6c
 8001c76:	200e      	movs	r0, #14
 8001c78:	f000 fd98 	bl	80027ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c7c:	200e      	movs	r0, #14
 8001c7e:	f000 fdb1 	bl	80027e4 <HAL_NVIC_EnableIRQ>

    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, BSP_AUDIO_IN_IT_PRIORITY, 0);
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
  }
}
 8001c82:	e041      	b.n	8001d08 <DFSDM_FilterMspInit+0x114>
    if (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)
 8001c84:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <DFSDM_FilterMspInit+0x12c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	d10b      	bne.n	8001ca4 <DFSDM_FilterMspInit+0xb0>
      __HAL_RCC_DMA1_CLK_ENABLE();
 8001c8c:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <DFSDM_FilterMspInit+0x120>)
 8001c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c90:	4a20      	ldr	r2, [pc, #128]	; (8001d14 <DFSDM_FilterMspInit+0x120>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6493      	str	r3, [r2, #72]	; 0x48
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <DFSDM_FilterMspInit+0x120>)
 8001c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
    hDmaDfsdm[1].Init.Request             = DMA_REQUEST_0;
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	64da      	str	r2, [r3, #76]	; 0x4c
    hDmaDfsdm[1].Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	651a      	str	r2, [r3, #80]	; 0x50
    hDmaDfsdm[1].Init.PeriphInc           = DMA_PINC_DISABLE;
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	655a      	str	r2, [r3, #84]	; 0x54
    hDmaDfsdm[1].Init.MemInc              = DMA_MINC_ENABLE;
 8001cb6:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001cb8:	2280      	movs	r2, #128	; 0x80
 8001cba:	659a      	str	r2, [r3, #88]	; 0x58
    hDmaDfsdm[1].Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc2:	65da      	str	r2, [r3, #92]	; 0x5c
    hDmaDfsdm[1].Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001cc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cca:	661a      	str	r2, [r3, #96]	; 0x60
    hDmaDfsdm[1].Init.Mode                = DMA_CIRCULAR;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001cce:	2220      	movs	r2, #32
 8001cd0:	665a      	str	r2, [r3, #100]	; 0x64
    hDmaDfsdm[1].Init.Priority            = DMA_PRIORITY_HIGH;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001cd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd8:	669a      	str	r2, [r3, #104]	; 0x68
    hDmaDfsdm[1].Instance                 = DMA1_Channel5;
 8001cda:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001cdc:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <DFSDM_FilterMspInit+0x130>)
 8001cde:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_LINKDMA(hdfsdm_filter, hdmaReg, hDmaDfsdm[1]);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <DFSDM_FilterMspInit+0x134>)
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
 8001ce6:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <DFSDM_FilterMspInit+0x124>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6713      	str	r3, [r2, #112]	; 0x70
    if (HAL_DMA_DeInit(&hDmaDfsdm[1]) != HAL_OK)
 8001cec:	480e      	ldr	r0, [pc, #56]	; (8001d28 <DFSDM_FilterMspInit+0x134>)
 8001cee:	f001 fb45 	bl	800337c <HAL_DMA_DeInit>
    if (HAL_DMA_Init(&hDmaDfsdm[1]) != HAL_OK)
 8001cf2:	480d      	ldr	r0, [pc, #52]	; (8001d28 <DFSDM_FilterMspInit+0x134>)
 8001cf4:	f001 fa8a 	bl	800320c <HAL_DMA_Init>
    HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	216c      	movs	r1, #108	; 0x6c
 8001cfc:	200f      	movs	r0, #15
 8001cfe:	f000 fd55 	bl	80027ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d02:	200f      	movs	r0, #15
 8001d04:	f000 fd6e 	bl	80027e4 <HAL_NVIC_EnableIRQ>
}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40016100 	.word	0x40016100
 8001d14:	40021000 	.word	0x40021000
 8001d18:	20000128 	.word	0x20000128
 8001d1c:	40020044 	.word	0x40020044
 8001d20:	20000008 	.word	0x20000008
 8001d24:	40020058 	.word	0x40020058
 8001d28:	20000170 	.word	0x20000170

08001d2c <DFSDM_FilterMspDeInit>:
  * @brief  DeInitialize DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None.
  */
static void DFSDM_FilterMspDeInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter->Instance == DFSDM1_Filter0)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <DFSDM_FilterMspDeInit+0x34>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d106      	bne.n	8001d4c <DFSDM_FilterMspDeInit+0x20>
  {
    /* Disable DMA  Channel IRQ */
    HAL_NVIC_DisableIRQ(DMA1_Channel4_IRQn);
 8001d3e:	200e      	movs	r0, #14
 8001d40:	f000 fd5e 	bl	8002800 <HAL_NVIC_DisableIRQ>

    /* De-initialize the DMA Channel */
    if (HAL_DMA_DeInit(&hDmaDfsdm[0]) != HAL_OK)
 8001d44:	4807      	ldr	r0, [pc, #28]	; (8001d64 <DFSDM_FilterMspDeInit+0x38>)
 8001d46:	f001 fb19 	bl	800337c <HAL_DMA_DeInit>
    if (HAL_DMA_DeInit(&hDmaDfsdm[1]) != HAL_OK)
    {
      /* Nothing to do */
    }
  }
}
 8001d4a:	e005      	b.n	8001d58 <DFSDM_FilterMspDeInit+0x2c>
    HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001d4c:	200f      	movs	r0, #15
 8001d4e:	f000 fd57 	bl	8002800 <HAL_NVIC_DisableIRQ>
    if (HAL_DMA_DeInit(&hDmaDfsdm[1]) != HAL_OK)
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <DFSDM_FilterMspDeInit+0x3c>)
 8001d54:	f001 fb12 	bl	800337c <HAL_DMA_DeInit>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40016100 	.word	0x40016100
 8001d64:	20000128 	.word	0x20000128
 8001d68:	20000170 	.word	0x20000170

08001d6c <DFSDM_FilterRegConvCpltCallback>:
  * @brief  DFSDM filter regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None.
  */
static void DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t     index;
  uint32_t     recbufsize = (Audio_In_Ctx[0].Size / (2U * Audio_In_Ctx[0].ChannelsNbr));
 8001d74:	4b89      	ldr	r3, [pc, #548]	; (8001f9c <DFSDM_FilterRegConvCpltCallback+0x230>)
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	4b88      	ldr	r3, [pc, #544]	; (8001f9c <DFSDM_FilterRegConvCpltCallback+0x230>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d82:	613b      	str	r3, [r7, #16]
  __IO int32_t tmp;

  if (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC)
 8001d84:	4b85      	ldr	r3, [pc, #532]	; (8001f9c <DFSDM_FilterRegConvCpltCallback+0x230>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b30      	cmp	r3, #48	; 0x30
 8001d8a:	d160      	bne.n	8001e4e <DFSDM_FilterRegConvCpltCallback+0xe2>
  {
    for (index = (recbufsize / 2U); index < recbufsize; index++)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	085b      	lsrs	r3, r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	e057      	b.n	8001e44 <DFSDM_FilterRegConvCpltCallback+0xd8>
    {
      tmp = Audio_DigMic1RecBuff[index] / 256;
 8001d94:	4a82      	ldr	r2, [pc, #520]	; (8001fa0 <DFSDM_FilterRegConvCpltCallback+0x234>)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	da00      	bge.n	8001da2 <DFSDM_FilterRegConvCpltCallback+0x36>
 8001da0:	33ff      	adds	r3, #255	; 0xff
 8001da2:	121b      	asrs	r3, r3, #8
 8001da4:	60fb      	str	r3, [r7, #12]
      tmp = SaturaLH(tmp, -32768, 32767);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001dac:	db08      	blt.n	8001dc0 <DFSDM_FilterRegConvCpltCallback+0x54>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db4:	da01      	bge.n	8001dba <DFSDM_FilterRegConvCpltCallback+0x4e>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	e003      	b.n	8001dc2 <DFSDM_FilterRegConvCpltCallback+0x56>
 8001dba:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001dbe:	e000      	b.n	8001dc2 <DFSDM_FilterRegConvCpltCallback+0x56>
 8001dc0:	4b78      	ldr	r3, [pc, #480]	; (8001fa4 <DFSDM_FilterRegConvCpltCallback+0x238>)
 8001dc2:	60fb      	str	r3, [r7, #12]
      Audio_In_Ctx[0].pBuff[4U * index]        = (uint8_t) tmp;
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	4b75      	ldr	r3, [pc, #468]	; (8001f9c <DFSDM_FilterRegConvCpltCallback+0x230>)
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	b2ca      	uxtb	r2, r1
 8001dd2:	701a      	strb	r2, [r3, #0]
      Audio_In_Ctx[0].pBuff[(4U * index) + 1U] = (uint8_t) ((uint32_t) tmp >> 8);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	0a19      	lsrs	r1, r3, #8
 8001dd8:	4b70      	ldr	r3, [pc, #448]	; (8001f9c <DFSDM_FilterRegConvCpltCallback+0x230>)
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	3301      	adds	r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	b2ca      	uxtb	r2, r1
 8001de6:	701a      	strb	r2, [r3, #0]
      tmp = Audio_DigMic2RecBuff[index] / 256;
 8001de8:	4a6f      	ldr	r2, [pc, #444]	; (8001fa8 <DFSDM_FilterRegConvCpltCallback+0x23c>)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	da00      	bge.n	8001df6 <DFSDM_FilterRegConvCpltCallback+0x8a>
 8001df4:	33ff      	adds	r3, #255	; 0xff
 8001df6:	121b      	asrs	r3, r3, #8
 8001df8:	60fb      	str	r3, [r7, #12]
      tmp = SaturaLH(tmp, -32768, 32767);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001e00:	db08      	blt.n	8001e14 <DFSDM_FilterRegConvCpltCallback+0xa8>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e08:	da01      	bge.n	8001e0e <DFSDM_FilterRegConvCpltCallback+0xa2>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	e003      	b.n	8001e16 <DFSDM_FilterRegConvCpltCallback+0xaa>
 8001e0e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001e12:	e000      	b.n	8001e16 <DFSDM_FilterRegConvCpltCallback+0xaa>
 8001e14:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <DFSDM_FilterRegConvCpltCallback+0x238>)
 8001e16:	60fb      	str	r3, [r7, #12]
      Audio_In_Ctx[0].pBuff[(4U * index) + 2U] = (uint8_t) tmp;
 8001e18:	68f9      	ldr	r1, [r7, #12]
 8001e1a:	4b60      	ldr	r3, [pc, #384]	; (8001f9c <DFSDM_FilterRegConvCpltCallback+0x230>)
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	b2ca      	uxtb	r2, r1
 8001e28:	701a      	strb	r2, [r3, #0]
      Audio_In_Ctx[0].pBuff[(4U * index) + 3U] = (uint8_t) ((uint32_t) tmp >> 8);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	0a19      	lsrs	r1, r3, #8
 8001e2e:	4b5b      	ldr	r3, [pc, #364]	; (8001f9c <DFSDM_FilterRegConvCpltCallback+0x230>)
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	3303      	adds	r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	b2ca      	uxtb	r2, r1
 8001e3c:	701a      	strb	r2, [r3, #0]
    for (index = (recbufsize / 2U); index < recbufsize; index++)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d3a3      	bcc.n	8001d94 <DFSDM_FilterRegConvCpltCallback+0x28>
 8001e4c:	e072      	b.n	8001f34 <DFSDM_FilterRegConvCpltCallback+0x1c8>
    }
  }
  else if (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC1)
 8001e4e:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <DFSDM_FilterRegConvCpltCallback+0x230>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b10      	cmp	r3, #16
 8001e54:	d135      	bne.n	8001ec2 <DFSDM_FilterRegConvCpltCallback+0x156>
  {
    for (index = (recbufsize / 2U); index < recbufsize; index++)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	085b      	lsrs	r3, r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	e02c      	b.n	8001eb8 <DFSDM_FilterRegConvCpltCallback+0x14c>
    {
      tmp = Audio_DigMic1RecBuff[index] / 256;
 8001e5e:	4a50      	ldr	r2, [pc, #320]	; (8001fa0 <DFSDM_FilterRegConvCpltCallback+0x234>)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	da00      	bge.n	8001e6c <DFSDM_FilterRegConvCpltCallback+0x100>
 8001e6a:	33ff      	adds	r3, #255	; 0xff
 8001e6c:	121b      	asrs	r3, r3, #8
 8001e6e:	60fb      	str	r3, [r7, #12]
      tmp = SaturaLH(tmp, -32768, 32767);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001e76:	db08      	blt.n	8001e8a <DFSDM_FilterRegConvCpltCallback+0x11e>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e7e:	da01      	bge.n	8001e84 <DFSDM_FilterRegConvCpltCallback+0x118>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	e003      	b.n	8001e8c <DFSDM_FilterRegConvCpltCallback+0x120>
 8001e84:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001e88:	e000      	b.n	8001e8c <DFSDM_FilterRegConvCpltCallback+0x120>
 8001e8a:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <DFSDM_FilterRegConvCpltCallback+0x238>)
 8001e8c:	60fb      	str	r3, [r7, #12]
      Audio_In_Ctx[0].pBuff[2U * index]        = (uint8_t) tmp;
 8001e8e:	68f9      	ldr	r1, [r7, #12]
 8001e90:	4b42      	ldr	r3, [pc, #264]	; (8001f9c <DFSDM_FilterRegConvCpltCallback+0x230>)
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	b2ca      	uxtb	r2, r1
 8001e9c:	701a      	strb	r2, [r3, #0]
      Audio_In_Ctx[0].pBuff[(2U * index) + 1U] = (uint8_t) ((uint32_t) tmp >> 8);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	0a19      	lsrs	r1, r3, #8
 8001ea2:	4b3e      	ldr	r3, [pc, #248]	; (8001f9c <DFSDM_FilterRegConvCpltCallback+0x230>)
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	3301      	adds	r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	b2ca      	uxtb	r2, r1
 8001eb0:	701a      	strb	r2, [r3, #0]
    for (index = (recbufsize / 2U); index < recbufsize; index++)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d3ce      	bcc.n	8001e5e <DFSDM_FilterRegConvCpltCallback+0xf2>
 8001ec0:	e038      	b.n	8001f34 <DFSDM_FilterRegConvCpltCallback+0x1c8>
    }
  }
  else
  {
    if (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)
 8001ec2:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <DFSDM_FilterRegConvCpltCallback+0x230>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	d134      	bne.n	8001f34 <DFSDM_FilterRegConvCpltCallback+0x1c8>
    {
      for (index = (recbufsize / 2U); index < recbufsize; index++)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	e02c      	b.n	8001f2c <DFSDM_FilterRegConvCpltCallback+0x1c0>
      {
        tmp = Audio_DigMic2RecBuff[index] / 256;
 8001ed2:	4a35      	ldr	r2, [pc, #212]	; (8001fa8 <DFSDM_FilterRegConvCpltCallback+0x23c>)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	da00      	bge.n	8001ee0 <DFSDM_FilterRegConvCpltCallback+0x174>
 8001ede:	33ff      	adds	r3, #255	; 0xff
 8001ee0:	121b      	asrs	r3, r3, #8
 8001ee2:	60fb      	str	r3, [r7, #12]
        tmp = SaturaLH(tmp, -32768, 32767);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001eea:	db08      	blt.n	8001efe <DFSDM_FilterRegConvCpltCallback+0x192>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ef2:	da01      	bge.n	8001ef8 <DFSDM_FilterRegConvCpltCallback+0x18c>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	e003      	b.n	8001f00 <DFSDM_FilterRegConvCpltCallback+0x194>
 8001ef8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001efc:	e000      	b.n	8001f00 <DFSDM_FilterRegConvCpltCallback+0x194>
 8001efe:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <DFSDM_FilterRegConvCpltCallback+0x238>)
 8001f00:	60fb      	str	r3, [r7, #12]
        Audio_In_Ctx[0].pBuff[2U * index]        = (uint8_t) tmp;
 8001f02:	68f9      	ldr	r1, [r7, #12]
 8001f04:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <DFSDM_FilterRegConvCpltCallback+0x230>)
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b2ca      	uxtb	r2, r1
 8001f10:	701a      	strb	r2, [r3, #0]
        Audio_In_Ctx[0].pBuff[(2U * index) + 1U] = (uint8_t) ((uint32_t) tmp >> 8);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	0a19      	lsrs	r1, r3, #8
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <DFSDM_FilterRegConvCpltCallback+0x230>)
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	3301      	adds	r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	b2ca      	uxtb	r2, r1
 8001f24:	701a      	strb	r2, [r3, #0]
      for (index = (recbufsize / 2U); index < recbufsize; index++)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d3ce      	bcc.n	8001ed2 <DFSDM_FilterRegConvCpltCallback+0x166>
      }
    }
  }

  /* Invoke 'TransferCompete' callback function */
  if(hdfsdm_filter == &hdfsdm1_filter0)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <DFSDM_FilterRegConvCpltCallback+0x240>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d103      	bne.n	8001f44 <DFSDM_FilterRegConvCpltCallback+0x1d8>
  {
    Audio_DmaDigMic1RecBuffCplt = 1;
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <DFSDM_FilterRegConvCpltCallback+0x244>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e002      	b.n	8001f4a <DFSDM_FilterRegConvCpltCallback+0x1de>
  }
  else
  {
    Audio_DmaDigMic2RecBuffCplt = 1;
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <DFSDM_FilterRegConvCpltCallback+0x248>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
  }

  if (((Audio_DmaDigMic1RecBuffCplt != 0U) && (Audio_DmaDigMic2RecBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC)) ||
 8001f4a:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <DFSDM_FilterRegConvCpltCallback+0x244>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <DFSDM_FilterRegConvCpltCallback+0x1f6>
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <DFSDM_FilterRegConvCpltCallback+0x248>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <DFSDM_FilterRegConvCpltCallback+0x1f6>
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <DFSDM_FilterRegConvCpltCallback+0x230>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b30      	cmp	r3, #48	; 0x30
 8001f60:	d00f      	beq.n	8001f82 <DFSDM_FilterRegConvCpltCallback+0x216>
      ((Audio_DmaDigMic1RecBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC1)) ||
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <DFSDM_FilterRegConvCpltCallback+0x244>)
 8001f64:	681b      	ldr	r3, [r3, #0]
  if (((Audio_DmaDigMic1RecBuffCplt != 0U) && (Audio_DmaDigMic2RecBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC)) ||
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <DFSDM_FilterRegConvCpltCallback+0x206>
      ((Audio_DmaDigMic1RecBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC1)) ||
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <DFSDM_FilterRegConvCpltCallback+0x230>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b10      	cmp	r3, #16
 8001f70:	d007      	beq.n	8001f82 <DFSDM_FilterRegConvCpltCallback+0x216>
      ((Audio_DmaDigMic2RecBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)))
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <DFSDM_FilterRegConvCpltCallback+0x248>)
 8001f74:	681b      	ldr	r3, [r3, #0]
      ((Audio_DmaDigMic1RecBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC1)) ||
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00c      	beq.n	8001f94 <DFSDM_FilterRegConvCpltCallback+0x228>
      ((Audio_DmaDigMic2RecBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)))
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <DFSDM_FilterRegConvCpltCallback+0x230>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d108      	bne.n	8001f94 <DFSDM_FilterRegConvCpltCallback+0x228>
  {
    BSP_AUDIO_IN_TransferComplete_CallBack(0);
 8001f82:	2000      	movs	r0, #0
 8001f84:	f7fe fde0 	bl	8000b48 <BSP_AUDIO_IN_TransferComplete_CallBack>
    Audio_DmaDigMic1RecBuffCplt = 0;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <DFSDM_FilterRegConvCpltCallback+0x244>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
    Audio_DmaDigMic2RecBuffCplt = 0;
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <DFSDM_FilterRegConvCpltCallback+0x248>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
  }
}
 8001f94:	bf00      	nop
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	20001d94 	.word	0x20001d94
 8001fa4:	ffff8000 	.word	0xffff8000
 8001fa8:	20003d9c 	.word	0x20003d9c
 8001fac:	20001bbc 	.word	0x20001bbc
 8001fb0:	20001d8c 	.word	0x20001d8c
 8001fb4:	20001d90 	.word	0x20001d90

08001fb8 <DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  DFSDM filter regular conversion half complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None.
  */
static void DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t     index;
  uint32_t     recbufsize = (Audio_In_Ctx[0].Size / (2U * Audio_In_Ctx[0].ChannelsNbr));
 8001fc0:	4b89      	ldr	r3, [pc, #548]	; (80021e8 <DFSDM_FilterRegConvHalfCpltCallback+0x230>)
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	4b88      	ldr	r3, [pc, #544]	; (80021e8 <DFSDM_FilterRegConvHalfCpltCallback+0x230>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fce:	613b      	str	r3, [r7, #16]
  __IO int32_t tmp;

  if (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC)
 8001fd0:	4b85      	ldr	r3, [pc, #532]	; (80021e8 <DFSDM_FilterRegConvHalfCpltCallback+0x230>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b30      	cmp	r3, #48	; 0x30
 8001fd6:	d160      	bne.n	800209a <DFSDM_FilterRegConvHalfCpltCallback+0xe2>
  {
    for (index = 0; index < (recbufsize / 2U); index++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	e057      	b.n	800208e <DFSDM_FilterRegConvHalfCpltCallback+0xd6>
    {
      tmp = Audio_DigMic1RecBuff[index] / 256;
 8001fde:	4a83      	ldr	r2, [pc, #524]	; (80021ec <DFSDM_FilterRegConvHalfCpltCallback+0x234>)
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	da00      	bge.n	8001fec <DFSDM_FilterRegConvHalfCpltCallback+0x34>
 8001fea:	33ff      	adds	r3, #255	; 0xff
 8001fec:	121b      	asrs	r3, r3, #8
 8001fee:	60fb      	str	r3, [r7, #12]
      tmp = SaturaLH(tmp, -32768, 32767);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001ff6:	db08      	blt.n	800200a <DFSDM_FilterRegConvHalfCpltCallback+0x52>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ffe:	da01      	bge.n	8002004 <DFSDM_FilterRegConvHalfCpltCallback+0x4c>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	e003      	b.n	800200c <DFSDM_FilterRegConvHalfCpltCallback+0x54>
 8002004:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002008:	e000      	b.n	800200c <DFSDM_FilterRegConvHalfCpltCallback+0x54>
 800200a:	4b79      	ldr	r3, [pc, #484]	; (80021f0 <DFSDM_FilterRegConvHalfCpltCallback+0x238>)
 800200c:	60fb      	str	r3, [r7, #12]
      Audio_In_Ctx[0].pBuff[4U * index]        = (uint8_t) tmp;
 800200e:	68f9      	ldr	r1, [r7, #12]
 8002010:	4b75      	ldr	r3, [pc, #468]	; (80021e8 <DFSDM_FilterRegConvHalfCpltCallback+0x230>)
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	b2ca      	uxtb	r2, r1
 800201c:	701a      	strb	r2, [r3, #0]
      Audio_In_Ctx[0].pBuff[(4U * index) + 1U] = (uint8_t) ((uint32_t) tmp >> 8);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	0a19      	lsrs	r1, r3, #8
 8002022:	4b71      	ldr	r3, [pc, #452]	; (80021e8 <DFSDM_FilterRegConvHalfCpltCallback+0x230>)
 8002024:	691a      	ldr	r2, [r3, #16]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	3301      	adds	r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	b2ca      	uxtb	r2, r1
 8002030:	701a      	strb	r2, [r3, #0]
      tmp = Audio_DigMic2RecBuff[index] / 256;
 8002032:	4a70      	ldr	r2, [pc, #448]	; (80021f4 <DFSDM_FilterRegConvHalfCpltCallback+0x23c>)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203a:	2b00      	cmp	r3, #0
 800203c:	da00      	bge.n	8002040 <DFSDM_FilterRegConvHalfCpltCallback+0x88>
 800203e:	33ff      	adds	r3, #255	; 0xff
 8002040:	121b      	asrs	r3, r3, #8
 8002042:	60fb      	str	r3, [r7, #12]
      tmp = SaturaLH(tmp, -32768, 32767);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800204a:	db08      	blt.n	800205e <DFSDM_FilterRegConvHalfCpltCallback+0xa6>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002052:	da01      	bge.n	8002058 <DFSDM_FilterRegConvHalfCpltCallback+0xa0>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	e003      	b.n	8002060 <DFSDM_FilterRegConvHalfCpltCallback+0xa8>
 8002058:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800205c:	e000      	b.n	8002060 <DFSDM_FilterRegConvHalfCpltCallback+0xa8>
 800205e:	4b64      	ldr	r3, [pc, #400]	; (80021f0 <DFSDM_FilterRegConvHalfCpltCallback+0x238>)
 8002060:	60fb      	str	r3, [r7, #12]
      Audio_In_Ctx[0].pBuff[(4U * index) + 2U] = (uint8_t) tmp;
 8002062:	68f9      	ldr	r1, [r7, #12]
 8002064:	4b60      	ldr	r3, [pc, #384]	; (80021e8 <DFSDM_FilterRegConvHalfCpltCallback+0x230>)
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	b2ca      	uxtb	r2, r1
 8002072:	701a      	strb	r2, [r3, #0]
      Audio_In_Ctx[0].pBuff[(4U * index) + 3U] = (uint8_t) ((uint32_t) tmp >> 8);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	0a19      	lsrs	r1, r3, #8
 8002078:	4b5b      	ldr	r3, [pc, #364]	; (80021e8 <DFSDM_FilterRegConvHalfCpltCallback+0x230>)
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	3303      	adds	r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	b2ca      	uxtb	r2, r1
 8002086:	701a      	strb	r2, [r3, #0]
    for (index = 0; index < (recbufsize / 2U); index++)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	3301      	adds	r3, #1
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	429a      	cmp	r2, r3
 8002096:	d3a2      	bcc.n	8001fde <DFSDM_FilterRegConvHalfCpltCallback+0x26>
 8002098:	e072      	b.n	8002180 <DFSDM_FilterRegConvHalfCpltCallback+0x1c8>
    }
  }
  else if (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC1)
 800209a:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <DFSDM_FilterRegConvHalfCpltCallback+0x230>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d135      	bne.n	800210e <DFSDM_FilterRegConvHalfCpltCallback+0x156>
  {
    for (index = 0; index < (recbufsize / 2U); index++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e02c      	b.n	8002102 <DFSDM_FilterRegConvHalfCpltCallback+0x14a>
    {
      tmp = Audio_DigMic1RecBuff[index] / 256;
 80020a8:	4a50      	ldr	r2, [pc, #320]	; (80021ec <DFSDM_FilterRegConvHalfCpltCallback+0x234>)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	da00      	bge.n	80020b6 <DFSDM_FilterRegConvHalfCpltCallback+0xfe>
 80020b4:	33ff      	adds	r3, #255	; 0xff
 80020b6:	121b      	asrs	r3, r3, #8
 80020b8:	60fb      	str	r3, [r7, #12]
      tmp = SaturaLH(tmp, -32768, 32767);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80020c0:	db08      	blt.n	80020d4 <DFSDM_FilterRegConvHalfCpltCallback+0x11c>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c8:	da01      	bge.n	80020ce <DFSDM_FilterRegConvHalfCpltCallback+0x116>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	e003      	b.n	80020d6 <DFSDM_FilterRegConvHalfCpltCallback+0x11e>
 80020ce:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80020d2:	e000      	b.n	80020d6 <DFSDM_FilterRegConvHalfCpltCallback+0x11e>
 80020d4:	4b46      	ldr	r3, [pc, #280]	; (80021f0 <DFSDM_FilterRegConvHalfCpltCallback+0x238>)
 80020d6:	60fb      	str	r3, [r7, #12]
      Audio_In_Ctx[0].pBuff[2U * index]        = (uint8_t) tmp;
 80020d8:	68f9      	ldr	r1, [r7, #12]
 80020da:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <DFSDM_FilterRegConvHalfCpltCallback+0x230>)
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	b2ca      	uxtb	r2, r1
 80020e6:	701a      	strb	r2, [r3, #0]
      Audio_In_Ctx[0].pBuff[(2U * index) + 1U] = (uint8_t) ((uint32_t) tmp >> 8);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	0a19      	lsrs	r1, r3, #8
 80020ec:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <DFSDM_FilterRegConvHalfCpltCallback+0x230>)
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	3301      	adds	r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	b2ca      	uxtb	r2, r1
 80020fa:	701a      	strb	r2, [r3, #0]
    for (index = 0; index < (recbufsize / 2U); index++)
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3301      	adds	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	429a      	cmp	r2, r3
 800210a:	d3cd      	bcc.n	80020a8 <DFSDM_FilterRegConvHalfCpltCallback+0xf0>
 800210c:	e038      	b.n	8002180 <DFSDM_FilterRegConvHalfCpltCallback+0x1c8>
    }
  }
  else
  {
    if (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)
 800210e:	4b36      	ldr	r3, [pc, #216]	; (80021e8 <DFSDM_FilterRegConvHalfCpltCallback+0x230>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b20      	cmp	r3, #32
 8002114:	d134      	bne.n	8002180 <DFSDM_FilterRegConvHalfCpltCallback+0x1c8>
    {
      for (index = 0; index < (recbufsize / 2U); index++)
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e02c      	b.n	8002176 <DFSDM_FilterRegConvHalfCpltCallback+0x1be>
      {
        tmp = Audio_DigMic2RecBuff[index] / 256;
 800211c:	4a35      	ldr	r2, [pc, #212]	; (80021f4 <DFSDM_FilterRegConvHalfCpltCallback+0x23c>)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002124:	2b00      	cmp	r3, #0
 8002126:	da00      	bge.n	800212a <DFSDM_FilterRegConvHalfCpltCallback+0x172>
 8002128:	33ff      	adds	r3, #255	; 0xff
 800212a:	121b      	asrs	r3, r3, #8
 800212c:	60fb      	str	r3, [r7, #12]
        tmp = SaturaLH(tmp, -32768, 32767);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002134:	db08      	blt.n	8002148 <DFSDM_FilterRegConvHalfCpltCallback+0x190>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800213c:	da01      	bge.n	8002142 <DFSDM_FilterRegConvHalfCpltCallback+0x18a>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	e003      	b.n	800214a <DFSDM_FilterRegConvHalfCpltCallback+0x192>
 8002142:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002146:	e000      	b.n	800214a <DFSDM_FilterRegConvHalfCpltCallback+0x192>
 8002148:	4b29      	ldr	r3, [pc, #164]	; (80021f0 <DFSDM_FilterRegConvHalfCpltCallback+0x238>)
 800214a:	60fb      	str	r3, [r7, #12]
        Audio_In_Ctx[0].pBuff[2U * index]        = (uint8_t) tmp;
 800214c:	68f9      	ldr	r1, [r7, #12]
 800214e:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <DFSDM_FilterRegConvHalfCpltCallback+0x230>)
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	b2ca      	uxtb	r2, r1
 800215a:	701a      	strb	r2, [r3, #0]
        Audio_In_Ctx[0].pBuff[(2U * index) + 1U] = (uint8_t) ((uint32_t) tmp >> 8);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	0a19      	lsrs	r1, r3, #8
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <DFSDM_FilterRegConvHalfCpltCallback+0x230>)
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	3301      	adds	r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	b2ca      	uxtb	r2, r1
 800216e:	701a      	strb	r2, [r3, #0]
      for (index = 0; index < (recbufsize / 2U); index++)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3301      	adds	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	429a      	cmp	r2, r3
 800217e:	d3cd      	bcc.n	800211c <DFSDM_FilterRegConvHalfCpltCallback+0x164>
      }
    }
  }

  /* Invoke the 'HalfTransfer' callback function */
  if(hdfsdm_filter == &hdfsdm1_filter0)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a1d      	ldr	r2, [pc, #116]	; (80021f8 <DFSDM_FilterRegConvHalfCpltCallback+0x240>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d103      	bne.n	8002190 <DFSDM_FilterRegConvHalfCpltCallback+0x1d8>
  {
    Audio_DmaDigMic1RecHalfBuffCplt = 1;
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <DFSDM_FilterRegConvHalfCpltCallback+0x244>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e002      	b.n	8002196 <DFSDM_FilterRegConvHalfCpltCallback+0x1de>
  }
  else
  {
    Audio_DmaDigMic2RecHalfBuffCplt = 1;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <DFSDM_FilterRegConvHalfCpltCallback+0x248>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]
  }

  if (((Audio_DmaDigMic1RecHalfBuffCplt != 0U) && (Audio_DmaDigMic2RecHalfBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC)) ||
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <DFSDM_FilterRegConvHalfCpltCallback+0x244>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d007      	beq.n	80021ae <DFSDM_FilterRegConvHalfCpltCallback+0x1f6>
 800219e:	4b18      	ldr	r3, [pc, #96]	; (8002200 <DFSDM_FilterRegConvHalfCpltCallback+0x248>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <DFSDM_FilterRegConvHalfCpltCallback+0x1f6>
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <DFSDM_FilterRegConvHalfCpltCallback+0x230>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b30      	cmp	r3, #48	; 0x30
 80021ac:	d00f      	beq.n	80021ce <DFSDM_FilterRegConvHalfCpltCallback+0x216>
      ((Audio_DmaDigMic1RecHalfBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC1)) ||
 80021ae:	4b13      	ldr	r3, [pc, #76]	; (80021fc <DFSDM_FilterRegConvHalfCpltCallback+0x244>)
 80021b0:	681b      	ldr	r3, [r3, #0]
  if (((Audio_DmaDigMic1RecHalfBuffCplt != 0U) && (Audio_DmaDigMic2RecHalfBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC)) ||
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <DFSDM_FilterRegConvHalfCpltCallback+0x206>
      ((Audio_DmaDigMic1RecHalfBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC1)) ||
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <DFSDM_FilterRegConvHalfCpltCallback+0x230>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b10      	cmp	r3, #16
 80021bc:	d007      	beq.n	80021ce <DFSDM_FilterRegConvHalfCpltCallback+0x216>
      ((Audio_DmaDigMic2RecHalfBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)))
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <DFSDM_FilterRegConvHalfCpltCallback+0x248>)
 80021c0:	681b      	ldr	r3, [r3, #0]
      ((Audio_DmaDigMic1RecHalfBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC1)) ||
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00c      	beq.n	80021e0 <DFSDM_FilterRegConvHalfCpltCallback+0x228>
      ((Audio_DmaDigMic2RecHalfBuffCplt != 0U) && (Audio_In_Ctx[0].Device == AUDIO_IN_DIGITAL_MIC2)))
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <DFSDM_FilterRegConvHalfCpltCallback+0x230>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	d108      	bne.n	80021e0 <DFSDM_FilterRegConvHalfCpltCallback+0x228>
  {
    BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 80021ce:	2000      	movs	r0, #0
 80021d0:	f7fe fc6c 	bl	8000aac <BSP_AUDIO_IN_HalfTransfer_CallBack>
    Audio_DmaDigMic1RecHalfBuffCplt = 0;
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <DFSDM_FilterRegConvHalfCpltCallback+0x244>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
    Audio_DmaDigMic2RecHalfBuffCplt = 0;
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <DFSDM_FilterRegConvHalfCpltCallback+0x248>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
  }
}
 80021e0:	bf00      	nop
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000008 	.word	0x20000008
 80021ec:	20001d94 	.word	0x20001d94
 80021f0:	ffff8000 	.word	0xffff8000
 80021f4:	20003d9c 	.word	0x20003d9c
 80021f8:	20001bbc 	.word	0x20001bbc
 80021fc:	20003d98 	.word	0x20003d98
 8002200:	20003d94 	.word	0x20003d94

08002204 <DFSDM_FilterErrorCallback>:
  * @brief  DFSDM filter error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None.
  */
static void DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  BSP_AUDIO_IN_Error_CallBack(0);
 800220c:	2000      	movs	r0, #0
 800220e:	f7fe fceb 	bl	8000be8 <BSP_AUDIO_IN_Error_CallBack>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <DMA1_Channel4_IRQHandler>:
/**
  * @brief This function handles DFSDM Left DMA interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_DFSDM_DMAx_MIC1_IRQHandler(void) {
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(hdfsdm1_filter0.hdmaReg);
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <DMA1_Channel4_IRQHandler+0x14>)
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	4618      	mov	r0, r3
 8002226:	f001 f9d9 	bl	80035dc <HAL_DMA_IRQHandler>
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20001bbc 	.word	0x20001bbc

08002234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_MspInit+0x4c>)
 800223c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223e:	4a10      	ldr	r2, [pc, #64]	; (8002280 <HAL_MspInit+0x4c>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6613      	str	r3, [r2, #96]	; 0x60
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <HAL_MspInit+0x4c>)
 8002248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_MspInit+0x4c>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <HAL_MspInit+0x4c>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	6593      	str	r3, [r2, #88]	; 0x58
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HAL_MspInit+0x4c>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	210f      	movs	r1, #15
 800226e:	f06f 0001 	mvn.w	r0, #1
 8002272:	f000 fa9b 	bl	80027ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000

08002284 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08c      	sub	sp, #48	; 0x30
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8002294:	2200      	movs	r2, #0
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	2019      	movs	r0, #25
 800229a:	f000 fa87 	bl	80027ac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800229e:	2019      	movs	r0, #25
 80022a0:	f000 faa0 	bl	80027e4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022a4:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_InitTick+0x9c>)
 80022a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a8:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <HAL_InitTick+0x9c>)
 80022aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022ae:	6613      	str	r3, [r2, #96]	; 0x60
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_InitTick+0x9c>)
 80022b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022bc:	f107 0210 	add.w	r2, r7, #16
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f002 fae0 	bl	800488c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022cc:	f002 fac8 	bl	8004860 <HAL_RCC_GetPCLK2Freq>
 80022d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d4:	4a13      	ldr	r2, [pc, #76]	; (8002324 <HAL_InitTick+0xa0>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	0c9b      	lsrs	r3, r3, #18
 80022dc:	3b01      	subs	r3, #1
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_InitTick+0xa4>)
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <HAL_InitTick+0xa8>)
 80022e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_InitTick+0xa4>)
 80022e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80022ee:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <HAL_InitTick+0xa4>)
 80022f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <HAL_InitTick+0xa4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_InitTick+0xa4>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002300:	4809      	ldr	r0, [pc, #36]	; (8002328 <HAL_InitTick+0xa4>)
 8002302:	f003 f811 	bl	8005328 <HAL_TIM_Base_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d104      	bne.n	8002316 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800230c:	4806      	ldr	r0, [pc, #24]	; (8002328 <HAL_InitTick+0xa4>)
 800230e:	f003 f86d 	bl	80053ec <HAL_TIM_Base_Start_IT>
 8002312:	4603      	mov	r3, r0
 8002314:	e000      	b.n	8002318 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
}
 8002318:	4618      	mov	r0, r3
 800231a:	3730      	adds	r7, #48	; 0x30
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	431bde83 	.word	0x431bde83
 8002328:	20005d9c 	.word	0x20005d9c
 800232c:	40012c00 	.word	0x40012c00

08002330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <NMI_Handler+0x4>

08002336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233a:	e7fe      	b.n	800233a <HardFault_Handler+0x4>

0800233c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <MemManage_Handler+0x4>

08002342 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002346:	e7fe      	b.n	8002346 <BusFault_Handler+0x4>

08002348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800234c:	e7fe      	b.n	800234c <UsageFault_Handler+0x4>

0800234e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <DMA1_Channel5_IRQHandler+0x10>)
 8002362:	f001 f93b 	bl	80035dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20001c30 	.word	0x20001c30

08002370 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002376:	f003 f8a9 	bl	80054cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20005d9c 	.word	0x20005d9c

08002384 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	e00a      	b.n	80023ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002396:	f3af 8000 	nop.w
 800239a:	4601      	mov	r1, r0
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	60ba      	str	r2, [r7, #8]
 80023a2:	b2ca      	uxtb	r2, r1
 80023a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3301      	adds	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dbf0      	blt.n	8002396 <_read+0x12>
	}

return len;
 80023b4:	687b      	ldr	r3, [r7, #4]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	e009      	b.n	80023e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	60ba      	str	r2, [r7, #8]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3301      	adds	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	dbf1      	blt.n	80023d0 <_write+0x12>
	}
	return len;
 80023ec:	687b      	ldr	r3, [r7, #4]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <_close>:

int _close(int file)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
	return -1;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800241e:	605a      	str	r2, [r3, #4]
	return 0;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <_isatty>:

int _isatty(int file)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
	return 1;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
	return 0;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002468:	4a14      	ldr	r2, [pc, #80]	; (80024bc <_sbrk+0x5c>)
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <_sbrk+0x60>)
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <_sbrk+0x64>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d102      	bne.n	8002482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <_sbrk+0x64>)
 800247e:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <_sbrk+0x68>)
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <_sbrk+0x64>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	429a      	cmp	r2, r3
 800248e:	d207      	bcs.n	80024a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002490:	f006 f8ec 	bl	800866c <__errno>
 8002494:	4603      	mov	r3, r0
 8002496:	220c      	movs	r2, #12
 8002498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
 800249e:	e009      	b.n	80024b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <_sbrk+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <_sbrk+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	4a05      	ldr	r2, [pc, #20]	; (80024c4 <_sbrk+0x64>)
 80024b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024b2:	68fb      	ldr	r3, [r7, #12]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20018000 	.word	0x20018000
 80024c0:	00000400 	.word	0x00000400
 80024c4:	200001bc 	.word	0x200001bc
 80024c8:	20005e40 	.word	0x20005e40

080024cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <SystemInit+0x5c>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	4a14      	ldr	r2, [pc, #80]	; (8002528 <SystemInit+0x5c>)
 80024d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <SystemInit+0x60>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a11      	ldr	r2, [pc, #68]	; (800252c <SystemInit+0x60>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <SystemInit+0x60>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <SystemInit+0x60>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a0d      	ldr	r2, [pc, #52]	; (800252c <SystemInit+0x60>)
 80024f8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80024fc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002500:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <SystemInit+0x60>)
 8002504:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002508:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800250a:	4b08      	ldr	r3, [pc, #32]	; (800252c <SystemInit+0x60>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a07      	ldr	r2, [pc, #28]	; (800252c <SystemInit+0x60>)
 8002510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002514:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <SystemInit+0x60>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000ed00 	.word	0xe000ed00
 800252c:	40021000 	.word	0x40021000

08002530 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002568 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002534:	f7ff ffca 	bl	80024cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002538:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800253a:	e003      	b.n	8002544 <LoopCopyDataInit>

0800253c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800253e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002540:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002542:	3104      	adds	r1, #4

08002544 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002544:	480a      	ldr	r0, [pc, #40]	; (8002570 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002548:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800254a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800254c:	d3f6      	bcc.n	800253c <CopyDataInit>
	ldr	r2, =_sbss
 800254e:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002550:	e002      	b.n	8002558 <LoopFillZerobss>

08002552 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002552:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002554:	f842 3b04 	str.w	r3, [r2], #4

08002558 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <LoopForever+0x16>)
	cmp	r2, r3
 800255a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800255c:	d3f9      	bcc.n	8002552 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800255e:	f006 f981 	bl	8008864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002562:	f7fe f9bd 	bl	80008e0 <main>

08002566 <LoopForever>:

LoopForever:
    b LoopForever
 8002566:	e7fe      	b.n	8002566 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002568:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800256c:	08009bb4 	.word	0x08009bb4
	ldr	r0, =_sdata
 8002570:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002574:	2000009c 	.word	0x2000009c
	ldr	r2, =_sbss
 8002578:	2000009c 	.word	0x2000009c
	ldr	r3, = _ebss
 800257c:	20005e3c 	.word	0x20005e3c

08002580 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002580:	e7fe      	b.n	8002580 <ADC1_2_IRQHandler>

08002582 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800258c:	2003      	movs	r0, #3
 800258e:	f000 f902 	bl	8002796 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002592:	200f      	movs	r0, #15
 8002594:	f7ff fe76 	bl	8002284 <HAL_InitTick>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d002      	beq.n	80025a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	71fb      	strb	r3, [r7, #7]
 80025a2:	e001      	b.n	80025a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025a4:	f7ff fe46 	bl	8002234 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025a8:	79fb      	ldrb	r3, [r7, #7]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_IncTick+0x20>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_IncTick+0x24>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <HAL_IncTick+0x24>)
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000030 	.word	0x20000030
 80025d8:	20005de8 	.word	0x20005de8

080025dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return uwTick;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_GetTick+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20005de8 	.word	0x20005de8

080025f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002610:	4013      	ands	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800261c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	60d3      	str	r3, [r2, #12]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <__NVIC_GetPriorityGrouping+0x18>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	f003 0307 	and.w	r3, r3, #7
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	db0b      	blt.n	8002682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	4907      	ldr	r1, [pc, #28]	; (8002690 <__NVIC_EnableIRQ+0x38>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2001      	movs	r0, #1
 800267a:	fa00 f202 	lsl.w	r2, r0, r2
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000e100 	.word	0xe000e100

08002694 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	db12      	blt.n	80026cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	490a      	ldr	r1, [pc, #40]	; (80026d8 <__NVIC_DisableIRQ+0x44>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2001      	movs	r0, #1
 80026b6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ba:	3320      	adds	r3, #32
 80026bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80026c0:	f3bf 8f4f 	dsb	sy
}
 80026c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026c6:	f3bf 8f6f 	isb	sy
}
 80026ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100

080026dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db0a      	blt.n	8002706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	490c      	ldr	r1, [pc, #48]	; (8002728 <__NVIC_SetPriority+0x4c>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	440b      	add	r3, r1
 8002700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002704:	e00a      	b.n	800271c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4908      	ldr	r1, [pc, #32]	; (800272c <__NVIC_SetPriority+0x50>)
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	3b04      	subs	r3, #4
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	440b      	add	r3, r1
 800271a:	761a      	strb	r2, [r3, #24]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f1c3 0307 	rsb	r3, r3, #7
 800274a:	2b04      	cmp	r3, #4
 800274c:	bf28      	it	cs
 800274e:	2304      	movcs	r3, #4
 8002750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3304      	adds	r3, #4
 8002756:	2b06      	cmp	r3, #6
 8002758:	d902      	bls.n	8002760 <NVIC_EncodePriority+0x30>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3b03      	subs	r3, #3
 800275e:	e000      	b.n	8002762 <NVIC_EncodePriority+0x32>
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	f04f 32ff 	mov.w	r2, #4294967295
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	401a      	ands	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002778:	f04f 31ff 	mov.w	r1, #4294967295
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43d9      	mvns	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	4313      	orrs	r3, r2
         );
}
 800278a:	4618      	mov	r0, r3
 800278c:	3724      	adds	r7, #36	; 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ff28 	bl	80025f4 <__NVIC_SetPriorityGrouping>
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027be:	f7ff ff3d 	bl	800263c <__NVIC_GetPriorityGrouping>
 80027c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	68b9      	ldr	r1, [r7, #8]
 80027c8:	6978      	ldr	r0, [r7, #20]
 80027ca:	f7ff ffb1 	bl	8002730 <NVIC_EncodePriority>
 80027ce:	4602      	mov	r2, r0
 80027d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff ff80 	bl	80026dc <__NVIC_SetPriority>
}
 80027dc:	bf00      	nop
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff ff30 	bl	8002658 <__NVIC_EnableIRQ>
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff40 	bl	8002694 <__NVIC_DisableIRQ>
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0ba      	b.n	80029a4 <HAL_DFSDM_ChannelInit+0x188>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f000 fbfa 	bl	800302c <DFSDM_GetChannelFromInstance>
 8002838:	4603      	mov	r3, r0
 800283a:	4a5c      	ldr	r2, [pc, #368]	; (80029ac <HAL_DFSDM_ChannelInit+0x190>)
 800283c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0ad      	b.n	80029a4 <HAL_DFSDM_ChannelInit+0x188>
  }

#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  /* Reset callback pointers to the weak predefined callbacks */
  hdfsdm_channel->CkabCallback = HAL_DFSDM_ChannelCkabCallback;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a59      	ldr	r2, [pc, #356]	; (80029b0 <HAL_DFSDM_ChannelInit+0x194>)
 800284c:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_channel->ScdCallback  = HAL_DFSDM_ChannelScdCallback;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a58      	ldr	r2, [pc, #352]	; (80029b4 <HAL_DFSDM_ChannelInit+0x198>)
 8002852:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Call MSP init function */
  if (hdfsdm_channel->MspInitCallback == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <HAL_DFSDM_ChannelInit+0x46>
  {
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a56      	ldr	r2, [pc, #344]	; (80029b8 <HAL_DFSDM_ChannelInit+0x19c>)
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800286a:	4b54      	ldr	r3, [pc, #336]	; (80029bc <HAL_DFSDM_ChannelInit+0x1a0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_DFSDM_ChannelInit+0x1a0>)
 8002872:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002874:	4b51      	ldr	r3, [pc, #324]	; (80029bc <HAL_DFSDM_ChannelInit+0x1a0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d125      	bne.n	80028c8 <HAL_DFSDM_ChannelInit+0xac>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800287c:	4b50      	ldr	r3, [pc, #320]	; (80029c0 <HAL_DFSDM_ChannelInit+0x1a4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a4f      	ldr	r2, [pc, #316]	; (80029c0 <HAL_DFSDM_ChannelInit+0x1a4>)
 8002882:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002886:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002888:	4b4d      	ldr	r3, [pc, #308]	; (80029c0 <HAL_DFSDM_ChannelInit+0x1a4>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	494b      	ldr	r1, [pc, #300]	; (80029c0 <HAL_DFSDM_ChannelInit+0x1a4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002896:	4b4a      	ldr	r3, [pc, #296]	; (80029c0 <HAL_DFSDM_ChannelInit+0x1a4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a49      	ldr	r2, [pc, #292]	; (80029c0 <HAL_DFSDM_ChannelInit+0x1a4>)
 800289c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80028a0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	791b      	ldrb	r3, [r3, #4]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d108      	bne.n	80028bc <HAL_DFSDM_ChannelInit+0xa0>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80028aa:	4b45      	ldr	r3, [pc, #276]	; (80029c0 <HAL_DFSDM_ChannelInit+0x1a4>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	041b      	lsls	r3, r3, #16
 80028b6:	4942      	ldr	r1, [pc, #264]	; (80029c0 <HAL_DFSDM_ChannelInit+0x1a4>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80028bc:	4b40      	ldr	r3, [pc, #256]	; (80029c0 <HAL_DFSDM_ChannelInit+0x1a4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a3f      	ldr	r2, [pc, #252]	; (80029c0 <HAL_DFSDM_ChannelInit+0x1a4>)
 80028c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028c6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80028d6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6819      	ldr	r1, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80028e6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80028ec:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 020f 	bic.w	r2, r2, #15
 8002904:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6819      	ldr	r1, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800292c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6899      	ldr	r1, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	3b01      	subs	r3, #1
 800293e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f002 0207 	and.w	r2, r2, #7
 8002958:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002984:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fb4a 	bl	800302c <DFSDM_GetChannelFromInstance>
 8002998:	4602      	mov	r2, r0
 800299a:	4904      	ldr	r1, [pc, #16]	; (80029ac <HAL_DFSDM_ChannelInit+0x190>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	200001c4 	.word	0x200001c4
 80029b0:	08002a6d 	.word	0x08002a6d
 80029b4:	08002a81 	.word	0x08002a81
 80029b8:	080004a9 	.word	0x080004a9
 80029bc:	200001c0 	.word	0x200001c0
 80029c0:	40016000 	.word	0x40016000

080029c4 <HAL_DFSDM_Channel_RegisterCallback>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_Channel_RegisterCallback(DFSDM_Channel_HandleTypeDef        *hdfsdm_channel,
                                                     HAL_DFSDM_Channel_CallbackIDTypeDef CallbackID,
                                                     pDFSDM_Channel_CallbackTypeDef      pCallback)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	460b      	mov	r3, r1
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <HAL_DFSDM_Channel_RegisterCallback+0x1e>
  {
    /* update return status */
    status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	75fb      	strb	r3, [r7, #23]
 80029e0:	e03d      	b.n	8002a5e <HAL_DFSDM_Channel_RegisterCallback+0x9a>
  }
  else
  {
    if (HAL_DFSDM_CHANNEL_STATE_READY == hdfsdm_channel->State)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d120      	bne.n	8002a2e <HAL_DFSDM_Channel_RegisterCallback+0x6a>
    {
      switch (CallbackID)
 80029ec:	7afb      	ldrb	r3, [r7, #11]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d81a      	bhi.n	8002a28 <HAL_DFSDM_Channel_RegisterCallback+0x64>
 80029f2:	a201      	add	r2, pc, #4	; (adr r2, 80029f8 <HAL_DFSDM_Channel_RegisterCallback+0x34>)
 80029f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f8:	08002a09 	.word	0x08002a09
 80029fc:	08002a11 	.word	0x08002a11
 8002a00:	08002a19 	.word	0x08002a19
 8002a04:	08002a21 	.word	0x08002a21
      {
        case HAL_DFSDM_CHANNEL_CKAB_CB_ID :
          hdfsdm_channel->CkabCallback = pCallback;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
          break;
 8002a0e:	e026      	b.n	8002a5e <HAL_DFSDM_Channel_RegisterCallback+0x9a>
        case HAL_DFSDM_CHANNEL_SCD_CB_ID :
          hdfsdm_channel->ScdCallback = pCallback;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8002a16:	e022      	b.n	8002a5e <HAL_DFSDM_Channel_RegisterCallback+0x9a>
        case HAL_DFSDM_CHANNEL_MSPINIT_CB_ID :
          hdfsdm_channel->MspInitCallback = pCallback;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8002a1e:	e01e      	b.n	8002a5e <HAL_DFSDM_Channel_RegisterCallback+0x9a>
        case HAL_DFSDM_CHANNEL_MSPDEINIT_CB_ID :
          hdfsdm_channel->MspDeInitCallback = pCallback;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8002a26:	e01a      	b.n	8002a5e <HAL_DFSDM_Channel_RegisterCallback+0x9a>
        default :
          /* update return status */
          status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	75fb      	strb	r3, [r7, #23]
          break;
 8002a2c:	e017      	b.n	8002a5e <HAL_DFSDM_Channel_RegisterCallback+0x9a>
      }
    }
    else if (HAL_DFSDM_CHANNEL_STATE_RESET == hdfsdm_channel->State)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d110      	bne.n	8002a5a <HAL_DFSDM_Channel_RegisterCallback+0x96>
    {
      switch (CallbackID)
 8002a38:	7afb      	ldrb	r3, [r7, #11]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d002      	beq.n	8002a44 <HAL_DFSDM_Channel_RegisterCallback+0x80>
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d004      	beq.n	8002a4c <HAL_DFSDM_Channel_RegisterCallback+0x88>
 8002a42:	e007      	b.n	8002a54 <HAL_DFSDM_Channel_RegisterCallback+0x90>
      {
        case HAL_DFSDM_CHANNEL_MSPINIT_CB_ID :
          hdfsdm_channel->MspInitCallback = pCallback;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8002a4a:	e008      	b.n	8002a5e <HAL_DFSDM_Channel_RegisterCallback+0x9a>
        case HAL_DFSDM_CHANNEL_MSPDEINIT_CB_ID :
          hdfsdm_channel->MspDeInitCallback = pCallback;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8002a52:	e004      	b.n	8002a5e <HAL_DFSDM_Channel_RegisterCallback+0x9a>
        default :
          /* update return status */
          status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	75fb      	strb	r3, [r7, #23]
          break;
 8002a58:	e001      	b.n	8002a5e <HAL_DFSDM_Channel_RegisterCallback+0x9a>
      }
    }
    else
    {
      /* update return status */
      status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8002a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0e4      	b.n	8002c70 <HAL_DFSDM_FilterInit+0x1dc>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a73      	ldr	r2, [pc, #460]	; (8002c78 <HAL_DFSDM_FilterInit+0x1e4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d109      	bne.n	8002ac4 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d003      	beq.n	8002ac0 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0d5      	b.n	8002c70 <HAL_DFSDM_FilterInit+0x1dc>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  /* Reset callback pointers to the weak predefined callbacks */
  hdfsdm_filter->AwdCallback             = HAL_DFSDM_FilterAwdCallback;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a67      	ldr	r2, [pc, #412]	; (8002c7c <HAL_DFSDM_FilterInit+0x1e8>)
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54
  hdfsdm_filter->RegConvCpltCallback     = HAL_DFSDM_FilterRegConvCpltCallback;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a66      	ldr	r2, [pc, #408]	; (8002c80 <HAL_DFSDM_FilterInit+0x1ec>)
 8002ae6:	659a      	str	r2, [r3, #88]	; 0x58
  hdfsdm_filter->RegConvHalfCpltCallback = HAL_DFSDM_FilterRegConvHalfCpltCallback;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a66      	ldr	r2, [pc, #408]	; (8002c84 <HAL_DFSDM_FilterInit+0x1f0>)
 8002aec:	65da      	str	r2, [r3, #92]	; 0x5c
  hdfsdm_filter->InjConvCpltCallback     = HAL_DFSDM_FilterInjConvCpltCallback;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a65      	ldr	r2, [pc, #404]	; (8002c88 <HAL_DFSDM_FilterInit+0x1f4>)
 8002af2:	661a      	str	r2, [r3, #96]	; 0x60
  hdfsdm_filter->InjConvHalfCpltCallback = HAL_DFSDM_FilterInjConvHalfCpltCallback;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a65      	ldr	r2, [pc, #404]	; (8002c8c <HAL_DFSDM_FilterInit+0x1f8>)
 8002af8:	665a      	str	r2, [r3, #100]	; 0x64
  hdfsdm_filter->ErrorCallback           = HAL_DFSDM_FilterErrorCallback;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a64      	ldr	r2, [pc, #400]	; (8002c90 <HAL_DFSDM_FilterInit+0x1fc>)
 8002afe:	669a      	str	r2, [r3, #104]	; 0x68

  /* Call MSP init function */
  if (hdfsdm_filter->MspInitCallback == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <HAL_DFSDM_FilterInit+0x7a>
  {
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a62      	ldr	r2, [pc, #392]	; (8002c94 <HAL_DFSDM_FilterInit+0x200>)
 8002b0c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4798      	blx	r3
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002b24:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	7a1b      	ldrb	r3, [r3, #8]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d108      	bne.n	8002b40 <HAL_DFSDM_FilterInit+0xac>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e007      	b.n	8002b50 <HAL_DFSDM_FilterInit+0xbc>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002b4e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	7a5b      	ldrb	r3, [r3, #9]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d108      	bne.n	8002b6a <HAL_DFSDM_FilterInit+0xd6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	e007      	b.n	8002b7a <HAL_DFSDM_FilterInit+0xe6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002b78:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8002b88:	f023 0308 	bic.w	r3, r3, #8
 8002b8c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d108      	bne.n	8002ba8 <HAL_DFSDM_FilterInit+0x114>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6819      	ldr	r1, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7c1b      	ldrb	r3, [r3, #16]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d108      	bne.n	8002bc2 <HAL_DFSDM_FilterInit+0x12e>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0210 	orr.w	r2, r2, #16
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	e007      	b.n	8002bd2 <HAL_DFSDM_FilterInit+0x13e>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0210 	bic.w	r2, r2, #16
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7c5b      	ldrb	r3, [r3, #17]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d108      	bne.n	8002bec <HAL_DFSDM_FilterInit+0x158>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0220 	orr.w	r2, r2, #32
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e007      	b.n	8002bfc <HAL_DFSDM_FilterInit+0x168>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0220 	bic.w	r2, r2, #32
 8002bfa:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8002c0a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002c0e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6959      	ldr	r1, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002c22:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002c2a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	7c1a      	ldrb	r2, [r3, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0201 	orr.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40016100 	.word	0x40016100
 8002c7c:	08002fa1 	.word	0x08002fa1
 8002c80:	08002f51 	.word	0x08002f51
 8002c84:	08002f65 	.word	0x08002f65
 8002c88:	08002f79 	.word	0x08002f79
 8002c8c:	08002f8d 	.word	0x08002f8d
 8002c90:	08002fb9 	.word	0x08002fb9
 8002c94:	08000271 	.word	0x08000271

08002c98 <HAL_DFSDM_Filter_RegisterCallback>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_Filter_RegisterCallback(DFSDM_Filter_HandleTypeDef        *hdfsdm_filter,
                                                    HAL_DFSDM_Filter_CallbackIDTypeDef CallbackID,
                                                    pDFSDM_Filter_CallbackTypeDef      pCallback)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d105      	bne.n	8002cbc <HAL_DFSDM_Filter_RegisterCallback+0x24>
  {
    /* update the error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INVALID_CALLBACK;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	651a      	str	r2, [r3, #80]	; 0x50
    /* update return status */
    status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	75fb      	strb	r3, [r7, #23]
 8002cba:	e059      	b.n	8002d70 <HAL_DFSDM_Filter_RegisterCallback+0xd8>
  }
  else
  {
    if (HAL_DFSDM_FILTER_STATE_READY == hdfsdm_filter->State)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d136      	bne.n	8002d34 <HAL_DFSDM_Filter_RegisterCallback+0x9c>
    {
      switch (CallbackID)
 8002cc6:	7afb      	ldrb	r3, [r7, #11]
 8002cc8:	2b06      	cmp	r3, #6
 8002cca:	d82d      	bhi.n	8002d28 <HAL_DFSDM_Filter_RegisterCallback+0x90>
 8002ccc:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <HAL_DFSDM_Filter_RegisterCallback+0x3c>)
 8002cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd2:	bf00      	nop
 8002cd4:	08002cf1 	.word	0x08002cf1
 8002cd8:	08002cf9 	.word	0x08002cf9
 8002cdc:	08002d01 	.word	0x08002d01
 8002ce0:	08002d09 	.word	0x08002d09
 8002ce4:	08002d11 	.word	0x08002d11
 8002ce8:	08002d19 	.word	0x08002d19
 8002cec:	08002d21 	.word	0x08002d21
      {
        case HAL_DFSDM_FILTER_REGCONV_COMPLETE_CB_ID :
          hdfsdm_filter->RegConvCpltCallback = pCallback;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	659a      	str	r2, [r3, #88]	; 0x58
          break;
 8002cf6:	e03b      	b.n	8002d70 <HAL_DFSDM_Filter_RegisterCallback+0xd8>
        case HAL_DFSDM_FILTER_REGCONV_HALFCOMPLETE_CB_ID :
          hdfsdm_filter->RegConvHalfCpltCallback = pCallback;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	65da      	str	r2, [r3, #92]	; 0x5c
          break;
 8002cfe:	e037      	b.n	8002d70 <HAL_DFSDM_Filter_RegisterCallback+0xd8>
        case HAL_DFSDM_FILTER_INJCONV_COMPLETE_CB_ID :
          hdfsdm_filter->InjConvCpltCallback = pCallback;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	661a      	str	r2, [r3, #96]	; 0x60
          break;
 8002d06:	e033      	b.n	8002d70 <HAL_DFSDM_Filter_RegisterCallback+0xd8>
        case HAL_DFSDM_FILTER_INJCONV_HALFCOMPLETE_CB_ID :
          hdfsdm_filter->InjConvHalfCpltCallback = pCallback;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	665a      	str	r2, [r3, #100]	; 0x64
          break;
 8002d0e:	e02f      	b.n	8002d70 <HAL_DFSDM_Filter_RegisterCallback+0xd8>
        case HAL_DFSDM_FILTER_ERROR_CB_ID :
          hdfsdm_filter->ErrorCallback = pCallback;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	669a      	str	r2, [r3, #104]	; 0x68
          break;
 8002d16:	e02b      	b.n	8002d70 <HAL_DFSDM_Filter_RegisterCallback+0xd8>
        case HAL_DFSDM_FILTER_MSPINIT_CB_ID :
          hdfsdm_filter->MspInitCallback = pCallback;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	66da      	str	r2, [r3, #108]	; 0x6c
          break;
 8002d1e:	e027      	b.n	8002d70 <HAL_DFSDM_Filter_RegisterCallback+0xd8>
        case HAL_DFSDM_FILTER_MSPDEINIT_CB_ID :
          hdfsdm_filter->MspDeInitCallback = pCallback;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	671a      	str	r2, [r3, #112]	; 0x70
          break;
 8002d26:	e023      	b.n	8002d70 <HAL_DFSDM_Filter_RegisterCallback+0xd8>
        default :
          /* update the error code */
          hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INVALID_CALLBACK;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	651a      	str	r2, [r3, #80]	; 0x50
          /* update return status */
          status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	75fb      	strb	r3, [r7, #23]
          break;
 8002d32:	e01d      	b.n	8002d70 <HAL_DFSDM_Filter_RegisterCallback+0xd8>
      }
    }
    else if (HAL_DFSDM_FILTER_STATE_RESET == hdfsdm_filter->State)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d113      	bne.n	8002d66 <HAL_DFSDM_Filter_RegisterCallback+0xce>
    {
      switch (CallbackID)
 8002d3e:	7afb      	ldrb	r3, [r7, #11]
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d002      	beq.n	8002d4a <HAL_DFSDM_Filter_RegisterCallback+0xb2>
 8002d44:	2b06      	cmp	r3, #6
 8002d46:	d004      	beq.n	8002d52 <HAL_DFSDM_Filter_RegisterCallback+0xba>
 8002d48:	e007      	b.n	8002d5a <HAL_DFSDM_Filter_RegisterCallback+0xc2>
      {
        case HAL_DFSDM_FILTER_MSPINIT_CB_ID :
          hdfsdm_filter->MspInitCallback = pCallback;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	66da      	str	r2, [r3, #108]	; 0x6c
          break;
 8002d50:	e00e      	b.n	8002d70 <HAL_DFSDM_Filter_RegisterCallback+0xd8>
        case HAL_DFSDM_FILTER_MSPDEINIT_CB_ID :
          hdfsdm_filter->MspDeInitCallback = pCallback;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	671a      	str	r2, [r3, #112]	; 0x70
          break;
 8002d58:	e00a      	b.n	8002d70 <HAL_DFSDM_Filter_RegisterCallback+0xd8>
        default :
          /* update the error code */
          hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INVALID_CALLBACK;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	651a      	str	r2, [r3, #80]	; 0x50
          /* update return status */
          status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	75fb      	strb	r3, [r7, #23]
          break;
 8002d64:	e004      	b.n	8002d70 <HAL_DFSDM_Filter_RegisterCallback+0xd8>
      }
    }
    else
    {
      /* update the error code */
      hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INVALID_CALLBACK;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2204      	movs	r2, #4
 8002d6a:	651a      	str	r2, [r3, #80]	; 0x50
      /* update return status */
      status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop

08002d80 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d02e      	beq.n	8002df8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002da0:	2bff      	cmp	r3, #255	; 0xff
 8002da2:	d029      	beq.n	8002df8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db6:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d10d      	bne.n	8002dda <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e00a      	b.n	8002df0 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6819      	ldr	r1, [r3, #0]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30
 8002df6:	e001      	b.n	8002dfc <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d102      	bne.n	8002e2e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	75fb      	strb	r3, [r7, #23]
 8002e2c:	e064      	b.n	8002ef8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e3c:	d002      	beq.n	8002e44 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	75fb      	strb	r3, [r7, #23]
 8002e42:	e059      	b.n	8002ef8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10e      	bne.n	8002e6a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10a      	bne.n	8002e6a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d105      	bne.n	8002e6a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d002      	beq.n	8002e6a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	75fb      	strb	r3, [r7, #23]
 8002e68:	e046      	b.n	8002ef8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10b      	bne.n	8002e8a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d107      	bne.n	8002e8a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d102      	bne.n	8002e8a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	75fb      	strb	r3, [r7, #23]
 8002e88:	e036      	b.n	8002ef8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d004      	beq.n	8002e9e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d12a      	bne.n	8002ef4 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8002ea4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	4a17      	ldr	r2, [pc, #92]	; (8002f08 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002eac:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d101      	bne.n	8002ebc <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8002eb8:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8002eba:	e000      	b.n	8002ebe <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8002ebc:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	331c      	adds	r3, #28
 8002ece:	4619      	mov	r1, r3
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f000 fae4 	bl	80034a0 <HAL_DMA_Start_IT>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	22ff      	movs	r2, #255	; 0xff
 8002ee2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002eea:	e005      	b.n	8002ef8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f8e9 	bl	80030c4 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002ef2:	e001      	b.n	8002ef8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	08002feb 	.word	0x08002feb
 8002f08:	08003009 	.word	0x08003009
 8002f0c:	08002fcd 	.word	0x08002fcd

08002f10 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d007      	beq.n	8002f36 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d002      	beq.n	8002f36 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	e007      	b.n	8002f46 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fb10 	bl	8003560 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f915 	bl	8003170 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_DFSDM_FilterInjConvHalfCpltCallback>:
  * @brief  Half injected conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvHalfCpltCallback could be implemented in the user file.
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	4798      	blx	r3
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
#endif
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	4798      	blx	r3
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
#endif
}
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2203      	movs	r2, #3
 800301a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	4798      	blx	r3
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
#endif
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a1c      	ldr	r2, [pc, #112]	; (80030a8 <DFSDM_GetChannelFromInstance+0x7c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d102      	bne.n	8003042 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e02b      	b.n	800309a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a19      	ldr	r2, [pc, #100]	; (80030ac <DFSDM_GetChannelFromInstance+0x80>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d102      	bne.n	8003050 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800304a:	2301      	movs	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	e024      	b.n	800309a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a17      	ldr	r2, [pc, #92]	; (80030b0 <DFSDM_GetChannelFromInstance+0x84>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d102      	bne.n	800305e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003058:	2302      	movs	r3, #2
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	e01d      	b.n	800309a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a14      	ldr	r2, [pc, #80]	; (80030b4 <DFSDM_GetChannelFromInstance+0x88>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d102      	bne.n	800306c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003066:	2304      	movs	r3, #4
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	e016      	b.n	800309a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a12      	ldr	r2, [pc, #72]	; (80030b8 <DFSDM_GetChannelFromInstance+0x8c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d102      	bne.n	800307a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003074:	2305      	movs	r3, #5
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	e00f      	b.n	800309a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a0f      	ldr	r2, [pc, #60]	; (80030bc <DFSDM_GetChannelFromInstance+0x90>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d102      	bne.n	8003088 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003082:	2306      	movs	r3, #6
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	e008      	b.n	800309a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a0d      	ldr	r2, [pc, #52]	; (80030c0 <DFSDM_GetChannelFromInstance+0x94>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d102      	bne.n	8003096 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003090:	2307      	movs	r3, #7
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	e001      	b.n	800309a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003096:	2303      	movs	r3, #3
 8003098:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800309a:	68fb      	ldr	r3, [r7, #12]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40016000 	.word	0x40016000
 80030ac:	40016020 	.word	0x40016020
 80030b0:	40016040 	.word	0x40016040
 80030b4:	40016080 	.word	0x40016080
 80030b8:	400160a0 	.word	0x400160a0
 80030bc:	400160c0 	.word	0x400160c0
 80030c0:	400160e0 	.word	0x400160e0

080030c4 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d108      	bne.n	80030e6 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	e033      	b.n	800314e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003104:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800311c:	2b03      	cmp	r3, #3
 800311e:	d116      	bne.n	800314e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0202 	orr.w	r2, r2, #2
 8003136:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800313e:	2b01      	cmp	r3, #1
 8003140:	d102      	bne.n	8003148 <DFSDM_RegConvStart+0x84>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	e000      	b.n	800314a <DFSDM_RegConvStart+0x86>
 8003148:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <DFSDM_RegConvStart+0x98>
 8003158:	2202      	movs	r2, #2
 800315a:	e000      	b.n	800315e <DFSDM_RegConvStart+0x9a>
 800315c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318c:	2b01      	cmp	r3, #1
 800318e:	d107      	bne.n	80031a0 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800319e:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d116      	bne.n	80031e8 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d107      	bne.n	80031d2 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0202 	orr.w	r2, r2, #2
 80031d0:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d102      	bne.n	80031e2 <DFSDM_RegConvStop+0x72>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e0:	e000      	b.n	80031e4 <DFSDM_RegConvStop+0x74>
 80031e2:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d101      	bne.n	80031f6 <DFSDM_RegConvStop+0x86>
 80031f2:	2201      	movs	r2, #1
 80031f4:	e000      	b.n	80031f8 <DFSDM_RegConvStop+0x88>
 80031f6:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e098      	b.n	8003350 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	4b4d      	ldr	r3, [pc, #308]	; (800335c <HAL_DMA_Init+0x150>)
 8003226:	429a      	cmp	r2, r3
 8003228:	d80f      	bhi.n	800324a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	4b4b      	ldr	r3, [pc, #300]	; (8003360 <HAL_DMA_Init+0x154>)
 8003232:	4413      	add	r3, r2
 8003234:	4a4b      	ldr	r2, [pc, #300]	; (8003364 <HAL_DMA_Init+0x158>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	009a      	lsls	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a48      	ldr	r2, [pc, #288]	; (8003368 <HAL_DMA_Init+0x15c>)
 8003246:	641a      	str	r2, [r3, #64]	; 0x40
 8003248:	e00e      	b.n	8003268 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	4b46      	ldr	r3, [pc, #280]	; (800336c <HAL_DMA_Init+0x160>)
 8003252:	4413      	add	r3, r2
 8003254:	4a43      	ldr	r2, [pc, #268]	; (8003364 <HAL_DMA_Init+0x158>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	009a      	lsls	r2, r3, #2
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a42      	ldr	r2, [pc, #264]	; (8003370 <HAL_DMA_Init+0x164>)
 8003266:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800327e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003282:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800328c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032c2:	d039      	beq.n	8003338 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	4a27      	ldr	r2, [pc, #156]	; (8003368 <HAL_DMA_Init+0x15c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d11a      	bne.n	8003304 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80032ce:	4b29      	ldr	r3, [pc, #164]	; (8003374 <HAL_DMA_Init+0x168>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	f003 031c 	and.w	r3, r3, #28
 80032da:	210f      	movs	r1, #15
 80032dc:	fa01 f303 	lsl.w	r3, r1, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	4924      	ldr	r1, [pc, #144]	; (8003374 <HAL_DMA_Init+0x168>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80032e8:	4b22      	ldr	r3, [pc, #136]	; (8003374 <HAL_DMA_Init+0x168>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	f003 031c 	and.w	r3, r3, #28
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	491d      	ldr	r1, [pc, #116]	; (8003374 <HAL_DMA_Init+0x168>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]
 8003302:	e019      	b.n	8003338 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003304:	4b1c      	ldr	r3, [pc, #112]	; (8003378 <HAL_DMA_Init+0x16c>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330c:	f003 031c 	and.w	r3, r3, #28
 8003310:	210f      	movs	r1, #15
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	4917      	ldr	r1, [pc, #92]	; (8003378 <HAL_DMA_Init+0x16c>)
 800331a:	4013      	ands	r3, r2
 800331c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800331e:	4b16      	ldr	r3, [pc, #88]	; (8003378 <HAL_DMA_Init+0x16c>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6859      	ldr	r1, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	f003 031c 	and.w	r3, r3, #28
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	4911      	ldr	r1, [pc, #68]	; (8003378 <HAL_DMA_Init+0x16c>)
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	40020407 	.word	0x40020407
 8003360:	bffdfff8 	.word	0xbffdfff8
 8003364:	cccccccd 	.word	0xcccccccd
 8003368:	40020000 	.word	0x40020000
 800336c:	bffdfbf8 	.word	0xbffdfbf8
 8003370:	40020400 	.word	0x40020400
 8003374:	400200a8 	.word	0x400200a8
 8003378:	400204a8 	.word	0x400204a8

0800337c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e072      	b.n	8003474 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	4b36      	ldr	r3, [pc, #216]	; (8003480 <HAL_DMA_DeInit+0x104>)
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d80f      	bhi.n	80033ca <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	4b34      	ldr	r3, [pc, #208]	; (8003484 <HAL_DMA_DeInit+0x108>)
 80033b2:	4413      	add	r3, r2
 80033b4:	4a34      	ldr	r2, [pc, #208]	; (8003488 <HAL_DMA_DeInit+0x10c>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	091b      	lsrs	r3, r3, #4
 80033bc:	009a      	lsls	r2, r3, #2
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a31      	ldr	r2, [pc, #196]	; (800348c <HAL_DMA_DeInit+0x110>)
 80033c6:	641a      	str	r2, [r3, #64]	; 0x40
 80033c8:	e00e      	b.n	80033e8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	4b2f      	ldr	r3, [pc, #188]	; (8003490 <HAL_DMA_DeInit+0x114>)
 80033d2:	4413      	add	r3, r2
 80033d4:	4a2c      	ldr	r2, [pc, #176]	; (8003488 <HAL_DMA_DeInit+0x10c>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	009a      	lsls	r2, r3, #2
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2b      	ldr	r2, [pc, #172]	; (8003494 <HAL_DMA_DeInit+0x118>)
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	f003 021c 	and.w	r2, r3, #28
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	2101      	movs	r1, #1
 80033fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003402:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	4a20      	ldr	r2, [pc, #128]	; (800348c <HAL_DMA_DeInit+0x110>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d10d      	bne.n	800342a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800340e:	4b22      	ldr	r3, [pc, #136]	; (8003498 <HAL_DMA_DeInit+0x11c>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	f003 031c 	and.w	r3, r3, #28
 800341a:	210f      	movs	r1, #15
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	491d      	ldr	r1, [pc, #116]	; (8003498 <HAL_DMA_DeInit+0x11c>)
 8003424:	4013      	ands	r3, r2
 8003426:	600b      	str	r3, [r1, #0]
 8003428:	e00c      	b.n	8003444 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800342a:	4b1c      	ldr	r3, [pc, #112]	; (800349c <HAL_DMA_DeInit+0x120>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f003 031c 	and.w	r3, r3, #28
 8003436:	210f      	movs	r1, #15
 8003438:	fa01 f303 	lsl.w	r3, r1, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	4917      	ldr	r1, [pc, #92]	; (800349c <HAL_DMA_DeInit+0x120>)
 8003440:	4013      	ands	r3, r2
 8003442:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	40020407 	.word	0x40020407
 8003484:	bffdfff8 	.word	0xbffdfff8
 8003488:	cccccccd 	.word	0xcccccccd
 800348c:	40020000 	.word	0x40020000
 8003490:	bffdfbf8 	.word	0xbffdfbf8
 8003494:	40020400 	.word	0x40020400
 8003498:	400200a8 	.word	0x400200a8
 800349c:	400204a8 	.word	0x400204a8

080034a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_DMA_Start_IT+0x20>
 80034bc:	2302      	movs	r3, #2
 80034be:	e04b      	b.n	8003558 <HAL_DMA_Start_IT+0xb8>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d13a      	bne.n	800354a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f91e 	bl	800373a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 020e 	orr.w	r2, r2, #14
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e00f      	b.n	8003538 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0204 	bic.w	r2, r2, #4
 8003526:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 020a 	orr.w	r2, r2, #10
 8003536:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	e005      	b.n	8003556 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003552:	2302      	movs	r3, #2
 8003554:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003556:	7dfb      	ldrb	r3, [r7, #23]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d008      	beq.n	800358a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2204      	movs	r2, #4
 800357c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e022      	b.n	80035d0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 020e 	bic.w	r2, r2, #14
 8003598:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f003 021c 	and.w	r2, r3, #28
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2101      	movs	r1, #1
 80035b8:	fa01 f202 	lsl.w	r2, r1, r2
 80035bc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80035ce:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f8:	f003 031c 	and.w	r3, r3, #28
 80035fc:	2204      	movs	r2, #4
 80035fe:	409a      	lsls	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4013      	ands	r3, r2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d026      	beq.n	8003656 <HAL_DMA_IRQHandler+0x7a>
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	d021      	beq.n	8003656 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d107      	bne.n	8003630 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0204 	bic.w	r2, r2, #4
 800362e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	f003 021c 	and.w	r2, r3, #28
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	2104      	movs	r1, #4
 800363e:	fa01 f202 	lsl.w	r2, r1, r2
 8003642:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	2b00      	cmp	r3, #0
 800364a:	d071      	beq.n	8003730 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003654:	e06c      	b.n	8003730 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f003 031c 	and.w	r3, r3, #28
 800365e:	2202      	movs	r2, #2
 8003660:	409a      	lsls	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4013      	ands	r3, r2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d02e      	beq.n	80036c8 <HAL_DMA_IRQHandler+0xec>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d029      	beq.n	80036c8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10b      	bne.n	800369a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 020a 	bic.w	r2, r2, #10
 8003690:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	f003 021c 	and.w	r2, r3, #28
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	2102      	movs	r1, #2
 80036a8:	fa01 f202 	lsl.w	r2, r1, r2
 80036ac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d038      	beq.n	8003730 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80036c6:	e033      	b.n	8003730 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036cc:	f003 031c 	and.w	r3, r3, #28
 80036d0:	2208      	movs	r2, #8
 80036d2:	409a      	lsls	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d02a      	beq.n	8003732 <HAL_DMA_IRQHandler+0x156>
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d025      	beq.n	8003732 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 020e 	bic.w	r2, r2, #14
 80036f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f003 021c 	and.w	r2, r3, #28
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	2101      	movs	r1, #1
 8003704:	fa01 f202 	lsl.w	r2, r1, r2
 8003708:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003724:	2b00      	cmp	r3, #0
 8003726:	d004      	beq.n	8003732 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003730:	bf00      	nop
 8003732:	bf00      	nop
}
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	f003 021c 	and.w	r2, r3, #28
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	2101      	movs	r1, #1
 8003756:	fa01 f202 	lsl.w	r2, r1, r2
 800375a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b10      	cmp	r3, #16
 800376a:	d108      	bne.n	800377e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800377c:	e007      	b.n	800378e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	60da      	str	r2, [r3, #12]
}
 800378e:	bf00      	nop
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037aa:	e17f      	b.n	8003aac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	2101      	movs	r1, #1
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	fa01 f303 	lsl.w	r3, r1, r3
 80037b8:	4013      	ands	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 8171 	beq.w	8003aa6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d00b      	beq.n	80037e4 <HAL_GPIO_Init+0x48>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d007      	beq.n	80037e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037d8:	2b11      	cmp	r3, #17
 80037da:	d003      	beq.n	80037e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b12      	cmp	r3, #18
 80037e2:	d130      	bne.n	8003846 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	2203      	movs	r2, #3
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4013      	ands	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4313      	orrs	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800381a:	2201      	movs	r2, #1
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4013      	ands	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	f003 0201 	and.w	r2, r3, #1
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b03      	cmp	r3, #3
 8003850:	d118      	bne.n	8003884 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003858:	2201      	movs	r2, #1
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4013      	ands	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	08db      	lsrs	r3, r3, #3
 800386e:	f003 0201 	and.w	r2, r3, #1
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4013      	ands	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x128>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b12      	cmp	r3, #18
 80038c2:	d123      	bne.n	800390c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	08da      	lsrs	r2, r3, #3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3208      	adds	r2, #8
 80038cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	220f      	movs	r2, #15
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43db      	mvns	r3, r3
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4013      	ands	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	08da      	lsrs	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3208      	adds	r2, #8
 8003906:	6939      	ldr	r1, [r7, #16]
 8003908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2203      	movs	r2, #3
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 0203 	and.w	r2, r3, #3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80ac 	beq.w	8003aa6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394e:	4b5f      	ldr	r3, [pc, #380]	; (8003acc <HAL_GPIO_Init+0x330>)
 8003950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003952:	4a5e      	ldr	r2, [pc, #376]	; (8003acc <HAL_GPIO_Init+0x330>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6613      	str	r3, [r2, #96]	; 0x60
 800395a:	4b5c      	ldr	r3, [pc, #368]	; (8003acc <HAL_GPIO_Init+0x330>)
 800395c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003966:	4a5a      	ldr	r2, [pc, #360]	; (8003ad0 <HAL_GPIO_Init+0x334>)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	3302      	adds	r3, #2
 800396e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003972:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	220f      	movs	r2, #15
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4013      	ands	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003990:	d025      	beq.n	80039de <HAL_GPIO_Init+0x242>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a4f      	ldr	r2, [pc, #316]	; (8003ad4 <HAL_GPIO_Init+0x338>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d01f      	beq.n	80039da <HAL_GPIO_Init+0x23e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a4e      	ldr	r2, [pc, #312]	; (8003ad8 <HAL_GPIO_Init+0x33c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d019      	beq.n	80039d6 <HAL_GPIO_Init+0x23a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a4d      	ldr	r2, [pc, #308]	; (8003adc <HAL_GPIO_Init+0x340>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_GPIO_Init+0x236>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a4c      	ldr	r2, [pc, #304]	; (8003ae0 <HAL_GPIO_Init+0x344>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00d      	beq.n	80039ce <HAL_GPIO_Init+0x232>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a4b      	ldr	r2, [pc, #300]	; (8003ae4 <HAL_GPIO_Init+0x348>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <HAL_GPIO_Init+0x22e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a4a      	ldr	r2, [pc, #296]	; (8003ae8 <HAL_GPIO_Init+0x34c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <HAL_GPIO_Init+0x22a>
 80039c2:	2306      	movs	r3, #6
 80039c4:	e00c      	b.n	80039e0 <HAL_GPIO_Init+0x244>
 80039c6:	2307      	movs	r3, #7
 80039c8:	e00a      	b.n	80039e0 <HAL_GPIO_Init+0x244>
 80039ca:	2305      	movs	r3, #5
 80039cc:	e008      	b.n	80039e0 <HAL_GPIO_Init+0x244>
 80039ce:	2304      	movs	r3, #4
 80039d0:	e006      	b.n	80039e0 <HAL_GPIO_Init+0x244>
 80039d2:	2303      	movs	r3, #3
 80039d4:	e004      	b.n	80039e0 <HAL_GPIO_Init+0x244>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e002      	b.n	80039e0 <HAL_GPIO_Init+0x244>
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_GPIO_Init+0x244>
 80039de:	2300      	movs	r3, #0
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	f002 0203 	and.w	r2, r2, #3
 80039e6:	0092      	lsls	r2, r2, #2
 80039e8:	4093      	lsls	r3, r2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039f0:	4937      	ldr	r1, [pc, #220]	; (8003ad0 <HAL_GPIO_Init+0x334>)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	089b      	lsrs	r3, r3, #2
 80039f6:	3302      	adds	r3, #2
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80039fe:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <HAL_GPIO_Init+0x350>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a22:	4a32      	ldr	r2, [pc, #200]	; (8003aec <HAL_GPIO_Init+0x350>)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003a28:	4b30      	ldr	r3, [pc, #192]	; (8003aec <HAL_GPIO_Init+0x350>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4013      	ands	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a4c:	4a27      	ldr	r2, [pc, #156]	; (8003aec <HAL_GPIO_Init+0x350>)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <HAL_GPIO_Init+0x350>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a76:	4a1d      	ldr	r2, [pc, #116]	; (8003aec <HAL_GPIO_Init+0x350>)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <HAL_GPIO_Init+0x350>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003aa0:	4a12      	ldr	r2, [pc, #72]	; (8003aec <HAL_GPIO_Init+0x350>)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f47f ae78 	bne.w	80037ac <HAL_GPIO_Init+0x10>
  }
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40010000 	.word	0x40010000
 8003ad4:	48000400 	.word	0x48000400
 8003ad8:	48000800 	.word	0x48000800
 8003adc:	48000c00 	.word	0x48000c00
 8003ae0:	48001000 	.word	0x48001000
 8003ae4:	48001400 	.word	0x48001400
 8003ae8:	48001800 	.word	0x48001800
 8003aec:	40010400 	.word	0x40010400

08003af0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003afe:	e0cd      	b.n	8003c9c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003b00:	2201      	movs	r2, #1
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80c0 	beq.w	8003c96 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003b16:	4a68      	ldr	r2, [pc, #416]	; (8003cb8 <HAL_GPIO_DeInit+0x1c8>)
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	089b      	lsrs	r3, r3, #2
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b22:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	220f      	movs	r2, #15
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4013      	ands	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b3e:	d025      	beq.n	8003b8c <HAL_GPIO_DeInit+0x9c>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a5e      	ldr	r2, [pc, #376]	; (8003cbc <HAL_GPIO_DeInit+0x1cc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d01f      	beq.n	8003b88 <HAL_GPIO_DeInit+0x98>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a5d      	ldr	r2, [pc, #372]	; (8003cc0 <HAL_GPIO_DeInit+0x1d0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d019      	beq.n	8003b84 <HAL_GPIO_DeInit+0x94>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a5c      	ldr	r2, [pc, #368]	; (8003cc4 <HAL_GPIO_DeInit+0x1d4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d013      	beq.n	8003b80 <HAL_GPIO_DeInit+0x90>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a5b      	ldr	r2, [pc, #364]	; (8003cc8 <HAL_GPIO_DeInit+0x1d8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00d      	beq.n	8003b7c <HAL_GPIO_DeInit+0x8c>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a5a      	ldr	r2, [pc, #360]	; (8003ccc <HAL_GPIO_DeInit+0x1dc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d007      	beq.n	8003b78 <HAL_GPIO_DeInit+0x88>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a59      	ldr	r2, [pc, #356]	; (8003cd0 <HAL_GPIO_DeInit+0x1e0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d101      	bne.n	8003b74 <HAL_GPIO_DeInit+0x84>
 8003b70:	2306      	movs	r3, #6
 8003b72:	e00c      	b.n	8003b8e <HAL_GPIO_DeInit+0x9e>
 8003b74:	2307      	movs	r3, #7
 8003b76:	e00a      	b.n	8003b8e <HAL_GPIO_DeInit+0x9e>
 8003b78:	2305      	movs	r3, #5
 8003b7a:	e008      	b.n	8003b8e <HAL_GPIO_DeInit+0x9e>
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	e006      	b.n	8003b8e <HAL_GPIO_DeInit+0x9e>
 8003b80:	2303      	movs	r3, #3
 8003b82:	e004      	b.n	8003b8e <HAL_GPIO_DeInit+0x9e>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e002      	b.n	8003b8e <HAL_GPIO_DeInit+0x9e>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <HAL_GPIO_DeInit+0x9e>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	f002 0203 	and.w	r2, r2, #3
 8003b94:	0092      	lsls	r2, r2, #2
 8003b96:	4093      	lsls	r3, r2
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d132      	bne.n	8003c04 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003b9e:	4b4d      	ldr	r3, [pc, #308]	; (8003cd4 <HAL_GPIO_DeInit+0x1e4>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	494b      	ldr	r1, [pc, #300]	; (8003cd4 <HAL_GPIO_DeInit+0x1e4>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003bac:	4b49      	ldr	r3, [pc, #292]	; (8003cd4 <HAL_GPIO_DeInit+0x1e4>)
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	4947      	ldr	r1, [pc, #284]	; (8003cd4 <HAL_GPIO_DeInit+0x1e4>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003bba:	4b46      	ldr	r3, [pc, #280]	; (8003cd4 <HAL_GPIO_DeInit+0x1e4>)
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	4944      	ldr	r1, [pc, #272]	; (8003cd4 <HAL_GPIO_DeInit+0x1e4>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003bc8:	4b42      	ldr	r3, [pc, #264]	; (8003cd4 <HAL_GPIO_DeInit+0x1e4>)
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	4940      	ldr	r1, [pc, #256]	; (8003cd4 <HAL_GPIO_DeInit+0x1e4>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f003 0303 	and.w	r3, r3, #3
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	220f      	movs	r2, #15
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003be6:	4a34      	ldr	r2, [pc, #208]	; (8003cb8 <HAL_GPIO_DeInit+0x1c8>)
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	3302      	adds	r3, #2
 8003bee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	43da      	mvns	r2, r3
 8003bf6:	4830      	ldr	r0, [pc, #192]	; (8003cb8 <HAL_GPIO_DeInit+0x1c8>)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	089b      	lsrs	r3, r3, #2
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	3302      	adds	r3, #2
 8003c00:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	2103      	movs	r1, #3
 8003c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	08da      	lsrs	r2, r3, #3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3208      	adds	r2, #8
 8003c20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	220f      	movs	r2, #15
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	08d2      	lsrs	r2, r2, #3
 8003c38:	4019      	ands	r1, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3208      	adds	r2, #8
 8003c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	2103      	movs	r1, #3
 8003c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	401a      	ands	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	401a      	ands	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	2103      	movs	r1, #3
 8003c76:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	401a      	ands	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c86:	2101      	movs	r1, #1
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	401a      	ands	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f47f af2b 	bne.w	8003b00 <HAL_GPIO_DeInit+0x10>
  }
}
 8003caa:	bf00      	nop
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	48000400 	.word	0x48000400
 8003cc0:	48000800 	.word	0x48000800
 8003cc4:	48000c00 	.word	0x48000c00
 8003cc8:	48001000 	.word	0x48001000
 8003ccc:	48001400 	.word	0x48001400
 8003cd0:	48001800 	.word	0x48001800
 8003cd4:	40010400 	.word	0x40010400

08003cd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cdc:	4b04      	ldr	r3, [pc, #16]	; (8003cf0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40007000 	.word	0x40007000

08003cf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d02:	d130      	bne.n	8003d66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d04:	4b23      	ldr	r3, [pc, #140]	; (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d10:	d038      	beq.n	8003d84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d12:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d1a:	4a1e      	ldr	r2, [pc, #120]	; (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d22:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2232      	movs	r2, #50	; 0x32
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	4a1b      	ldr	r2, [pc, #108]	; (8003d9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	0c9b      	lsrs	r3, r3, #18
 8003d34:	3301      	adds	r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d38:	e002      	b.n	8003d40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d40:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4c:	d102      	bne.n	8003d54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f2      	bne.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d54:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d60:	d110      	bne.n	8003d84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e00f      	b.n	8003d86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d66:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d72:	d007      	beq.n	8003d84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d74:	4b07      	ldr	r3, [pc, #28]	; (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d7c:	4a05      	ldr	r2, [pc, #20]	; (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40007000 	.word	0x40007000
 8003d98:	20000028 	.word	0x20000028
 8003d9c:	431bde83 	.word	0x431bde83

08003da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e3d4      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003db2:	4ba1      	ldr	r3, [pc, #644]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
 8003dba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dbc:	4b9e      	ldr	r3, [pc, #632]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 80e4 	beq.w	8003f9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d007      	beq.n	8003dea <HAL_RCC_OscConfig+0x4a>
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2b0c      	cmp	r3, #12
 8003dde:	f040 808b 	bne.w	8003ef8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	f040 8087 	bne.w	8003ef8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dea:	4b93      	ldr	r3, [pc, #588]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_RCC_OscConfig+0x62>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e3ac      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1a      	ldr	r2, [r3, #32]
 8003e06:	4b8c      	ldr	r3, [pc, #560]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <HAL_RCC_OscConfig+0x7c>
 8003e12:	4b89      	ldr	r3, [pc, #548]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e1a:	e005      	b.n	8003e28 <HAL_RCC_OscConfig+0x88>
 8003e1c:	4b86      	ldr	r3, [pc, #536]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e22:	091b      	lsrs	r3, r3, #4
 8003e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d223      	bcs.n	8003e74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fd5d 	bl	80048f0 <RCC_SetFlashLatencyFromMSIRange>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e38d      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e40:	4b7d      	ldr	r3, [pc, #500]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a7c      	ldr	r2, [pc, #496]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003e46:	f043 0308 	orr.w	r3, r3, #8
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	4b7a      	ldr	r3, [pc, #488]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	4977      	ldr	r1, [pc, #476]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e5e:	4b76      	ldr	r3, [pc, #472]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	021b      	lsls	r3, r3, #8
 8003e6c:	4972      	ldr	r1, [pc, #456]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	604b      	str	r3, [r1, #4]
 8003e72:	e025      	b.n	8003ec0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e74:	4b70      	ldr	r3, [pc, #448]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a6f      	ldr	r2, [pc, #444]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003e7a:	f043 0308 	orr.w	r3, r3, #8
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	4b6d      	ldr	r3, [pc, #436]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	496a      	ldr	r1, [pc, #424]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e92:	4b69      	ldr	r3, [pc, #420]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	4965      	ldr	r1, [pc, #404]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d109      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fd1d 	bl	80048f0 <RCC_SetFlashLatencyFromMSIRange>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e34d      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ec0:	f000 fc36 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b5c      	ldr	r3, [pc, #368]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	495a      	ldr	r1, [pc, #360]	; (800403c <HAL_RCC_OscConfig+0x29c>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8003edc:	4a58      	ldr	r2, [pc, #352]	; (8004040 <HAL_RCC_OscConfig+0x2a0>)
 8003ede:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ee0:	4b58      	ldr	r3, [pc, #352]	; (8004044 <HAL_RCC_OscConfig+0x2a4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe f9cd 	bl	8002284 <HAL_InitTick>
 8003eea:	4603      	mov	r3, r0
 8003eec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d052      	beq.n	8003f9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	e331      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d032      	beq.n	8003f66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f00:	4b4d      	ldr	r3, [pc, #308]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a4c      	ldr	r2, [pc, #304]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f0c:	f7fe fb66 	bl	80025dc <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f14:	f7fe fb62 	bl	80025dc <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e31a      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f26:	4b44      	ldr	r3, [pc, #272]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f32:	4b41      	ldr	r3, [pc, #260]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a40      	ldr	r2, [pc, #256]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003f38:	f043 0308 	orr.w	r3, r3, #8
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	4b3e      	ldr	r3, [pc, #248]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	493b      	ldr	r1, [pc, #236]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f50:	4b39      	ldr	r3, [pc, #228]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	4936      	ldr	r1, [pc, #216]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]
 8003f64:	e01a      	b.n	8003f9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f66:	4b34      	ldr	r3, [pc, #208]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a33      	ldr	r2, [pc, #204]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f72:	f7fe fb33 	bl	80025dc <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f7a:	f7fe fb2f 	bl	80025dc <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e2e7      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f8c:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f0      	bne.n	8003f7a <HAL_RCC_OscConfig+0x1da>
 8003f98:	e000      	b.n	8003f9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d074      	beq.n	8004092 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d005      	beq.n	8003fba <HAL_RCC_OscConfig+0x21a>
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	2b0c      	cmp	r3, #12
 8003fb2:	d10e      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d10b      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fba:	4b1f      	ldr	r3, [pc, #124]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d064      	beq.n	8004090 <HAL_RCC_OscConfig+0x2f0>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d160      	bne.n	8004090 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e2c4      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fda:	d106      	bne.n	8003fea <HAL_RCC_OscConfig+0x24a>
 8003fdc:	4b16      	ldr	r3, [pc, #88]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a15      	ldr	r2, [pc, #84]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	e01d      	b.n	8004026 <HAL_RCC_OscConfig+0x286>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ff2:	d10c      	bne.n	800400e <HAL_RCC_OscConfig+0x26e>
 8003ff4:	4b10      	ldr	r3, [pc, #64]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a0f      	ldr	r2, [pc, #60]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8003ffa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a0c      	ldr	r2, [pc, #48]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8004006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	e00b      	b.n	8004026 <HAL_RCC_OscConfig+0x286>
 800400e:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a09      	ldr	r2, [pc, #36]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8004014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	4b07      	ldr	r3, [pc, #28]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a06      	ldr	r2, [pc, #24]	; (8004038 <HAL_RCC_OscConfig+0x298>)
 8004020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004024:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01c      	beq.n	8004068 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fe fad5 	bl	80025dc <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004034:	e011      	b.n	800405a <HAL_RCC_OscConfig+0x2ba>
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000
 800403c:	08009acc 	.word	0x08009acc
 8004040:	20000028 	.word	0x20000028
 8004044:	2000002c 	.word	0x2000002c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004048:	f7fe fac8 	bl	80025dc <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	; 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e280      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800405a:	4baf      	ldr	r3, [pc, #700]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x2a8>
 8004066:	e014      	b.n	8004092 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fe fab8 	bl	80025dc <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004070:	f7fe fab4 	bl	80025dc <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e26c      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004082:	4ba5      	ldr	r3, [pc, #660]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x2d0>
 800408e:	e000      	b.n	8004092 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d060      	beq.n	8004160 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_OscConfig+0x310>
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b0c      	cmp	r3, #12
 80040a8:	d119      	bne.n	80040de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d116      	bne.n	80040de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040b0:	4b99      	ldr	r3, [pc, #612]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_OscConfig+0x328>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e249      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c8:	4b93      	ldr	r3, [pc, #588]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	061b      	lsls	r3, r3, #24
 80040d6:	4990      	ldr	r1, [pc, #576]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040dc:	e040      	b.n	8004160 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d023      	beq.n	800412e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e6:	4b8c      	ldr	r3, [pc, #560]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a8b      	ldr	r2, [pc, #556]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 80040ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fe fa73 	bl	80025dc <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040fa:	f7fe fa6f 	bl	80025dc <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e227      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800410c:	4b82      	ldr	r3, [pc, #520]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004118:	4b7f      	ldr	r3, [pc, #508]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	061b      	lsls	r3, r3, #24
 8004126:	497c      	ldr	r1, [pc, #496]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
 800412c:	e018      	b.n	8004160 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412e:	4b7a      	ldr	r3, [pc, #488]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a79      	ldr	r2, [pc, #484]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 8004134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413a:	f7fe fa4f 	bl	80025dc <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004142:	f7fe fa4b 	bl	80025dc <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e203      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004154:	4b70      	ldr	r3, [pc, #448]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1f0      	bne.n	8004142 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d03c      	beq.n	80041e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01c      	beq.n	80041ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004174:	4b68      	ldr	r3, [pc, #416]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 8004176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800417a:	4a67      	ldr	r2, [pc, #412]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 800417c:	f043 0301 	orr.w	r3, r3, #1
 8004180:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004184:	f7fe fa2a 	bl	80025dc <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800418c:	f7fe fa26 	bl	80025dc <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e1de      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800419e:	4b5e      	ldr	r3, [pc, #376]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 80041a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0ef      	beq.n	800418c <HAL_RCC_OscConfig+0x3ec>
 80041ac:	e01b      	b.n	80041e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ae:	4b5a      	ldr	r3, [pc, #360]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 80041b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b4:	4a58      	ldr	r2, [pc, #352]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041be:	f7fe fa0d 	bl	80025dc <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c6:	f7fe fa09 	bl	80025dc <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e1c1      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041d8:	4b4f      	ldr	r3, [pc, #316]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 80041da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1ef      	bne.n	80041c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 80a6 	beq.w	8004340 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f4:	2300      	movs	r3, #0
 80041f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041f8:	4b47      	ldr	r3, [pc, #284]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10d      	bne.n	8004220 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004204:	4b44      	ldr	r3, [pc, #272]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 8004206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004208:	4a43      	ldr	r2, [pc, #268]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420e:	6593      	str	r3, [r2, #88]	; 0x58
 8004210:	4b41      	ldr	r3, [pc, #260]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 8004212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421c:	2301      	movs	r3, #1
 800421e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004220:	4b3e      	ldr	r3, [pc, #248]	; (800431c <HAL_RCC_OscConfig+0x57c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d118      	bne.n	800425e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800422c:	4b3b      	ldr	r3, [pc, #236]	; (800431c <HAL_RCC_OscConfig+0x57c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a3a      	ldr	r2, [pc, #232]	; (800431c <HAL_RCC_OscConfig+0x57c>)
 8004232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004236:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004238:	f7fe f9d0 	bl	80025dc <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004240:	f7fe f9cc 	bl	80025dc <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e184      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004252:	4b32      	ldr	r3, [pc, #200]	; (800431c <HAL_RCC_OscConfig+0x57c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d108      	bne.n	8004278 <HAL_RCC_OscConfig+0x4d8>
 8004266:	4b2c      	ldr	r3, [pc, #176]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	4a2a      	ldr	r2, [pc, #168]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004276:	e024      	b.n	80042c2 <HAL_RCC_OscConfig+0x522>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b05      	cmp	r3, #5
 800427e:	d110      	bne.n	80042a2 <HAL_RCC_OscConfig+0x502>
 8004280:	4b25      	ldr	r3, [pc, #148]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	4a24      	ldr	r2, [pc, #144]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 8004288:	f043 0304 	orr.w	r3, r3, #4
 800428c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004290:	4b21      	ldr	r3, [pc, #132]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	4a20      	ldr	r2, [pc, #128]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042a0:	e00f      	b.n	80042c2 <HAL_RCC_OscConfig+0x522>
 80042a2:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a8:	4a1b      	ldr	r2, [pc, #108]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042b2:	4b19      	ldr	r3, [pc, #100]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	4a17      	ldr	r2, [pc, #92]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 80042ba:	f023 0304 	bic.w	r3, r3, #4
 80042be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d016      	beq.n	80042f8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ca:	f7fe f987 	bl	80025dc <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d0:	e00a      	b.n	80042e8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fe f983 	bl	80025dc <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e139      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e8:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <HAL_RCC_OscConfig+0x578>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0ed      	beq.n	80042d2 <HAL_RCC_OscConfig+0x532>
 80042f6:	e01a      	b.n	800432e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f8:	f7fe f970 	bl	80025dc <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042fe:	e00f      	b.n	8004320 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004300:	f7fe f96c 	bl	80025dc <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	; 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d906      	bls.n	8004320 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e122      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
 8004316:	bf00      	nop
 8004318:	40021000 	.word	0x40021000
 800431c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004320:	4b90      	ldr	r3, [pc, #576]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e8      	bne.n	8004300 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800432e:	7ffb      	ldrb	r3, [r7, #31]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d105      	bne.n	8004340 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004334:	4b8b      	ldr	r3, [pc, #556]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 8004336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004338:	4a8a      	ldr	r2, [pc, #552]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 800433a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8108 	beq.w	800455a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434e:	2b02      	cmp	r3, #2
 8004350:	f040 80d0 	bne.w	80044f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004354:	4b83      	ldr	r3, [pc, #524]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f003 0203 	and.w	r2, r3, #3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	429a      	cmp	r2, r3
 8004366:	d130      	bne.n	80043ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004372:	3b01      	subs	r3, #1
 8004374:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004376:	429a      	cmp	r2, r3
 8004378:	d127      	bne.n	80043ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004384:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004386:	429a      	cmp	r2, r3
 8004388:	d11f      	bne.n	80043ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004394:	2a07      	cmp	r2, #7
 8004396:	bf14      	ite	ne
 8004398:	2201      	movne	r2, #1
 800439a:	2200      	moveq	r2, #0
 800439c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800439e:	4293      	cmp	r3, r2
 80043a0:	d113      	bne.n	80043ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ac:	085b      	lsrs	r3, r3, #1
 80043ae:	3b01      	subs	r3, #1
 80043b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d109      	bne.n	80043ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	085b      	lsrs	r3, r3, #1
 80043c2:	3b01      	subs	r3, #1
 80043c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d06e      	beq.n	80044a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b0c      	cmp	r3, #12
 80043ce:	d069      	beq.n	80044a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043d0:	4b64      	ldr	r3, [pc, #400]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d105      	bne.n	80043e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043dc:	4b61      	ldr	r3, [pc, #388]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0b7      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043ec:	4b5d      	ldr	r3, [pc, #372]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a5c      	ldr	r2, [pc, #368]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 80043f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043f8:	f7fe f8f0 	bl	80025dc <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004400:	f7fe f8ec 	bl	80025dc <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e0a4      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004412:	4b54      	ldr	r3, [pc, #336]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800441e:	4b51      	ldr	r3, [pc, #324]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	4b51      	ldr	r3, [pc, #324]	; (8004568 <HAL_RCC_OscConfig+0x7c8>)
 8004424:	4013      	ands	r3, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800442e:	3a01      	subs	r2, #1
 8004430:	0112      	lsls	r2, r2, #4
 8004432:	4311      	orrs	r1, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004438:	0212      	lsls	r2, r2, #8
 800443a:	4311      	orrs	r1, r2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004440:	0852      	lsrs	r2, r2, #1
 8004442:	3a01      	subs	r2, #1
 8004444:	0552      	lsls	r2, r2, #21
 8004446:	4311      	orrs	r1, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800444c:	0852      	lsrs	r2, r2, #1
 800444e:	3a01      	subs	r2, #1
 8004450:	0652      	lsls	r2, r2, #25
 8004452:	4311      	orrs	r1, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004458:	0912      	lsrs	r2, r2, #4
 800445a:	0452      	lsls	r2, r2, #17
 800445c:	430a      	orrs	r2, r1
 800445e:	4941      	ldr	r1, [pc, #260]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 8004460:	4313      	orrs	r3, r2
 8004462:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004464:	4b3f      	ldr	r3, [pc, #252]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a3e      	ldr	r2, [pc, #248]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 800446a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800446e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004470:	4b3c      	ldr	r3, [pc, #240]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a3b      	ldr	r2, [pc, #236]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 8004476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800447c:	f7fe f8ae 	bl	80025dc <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004484:	f7fe f8aa 	bl	80025dc <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e062      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004496:	4b33      	ldr	r3, [pc, #204]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044a2:	e05a      	b.n	800455a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e059      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a8:	4b2e      	ldr	r3, [pc, #184]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d152      	bne.n	800455a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044b4:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a2a      	ldr	r2, [pc, #168]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 80044ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044c0:	4b28      	ldr	r3, [pc, #160]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	4a27      	ldr	r2, [pc, #156]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 80044c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044cc:	f7fe f886 	bl	80025dc <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d4:	f7fe f882 	bl	80025dc <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e03a      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e6:	4b1f      	ldr	r3, [pc, #124]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0f0      	beq.n	80044d4 <HAL_RCC_OscConfig+0x734>
 80044f2:	e032      	b.n	800455a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2b0c      	cmp	r3, #12
 80044f8:	d02d      	beq.n	8004556 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fa:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a19      	ldr	r2, [pc, #100]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 8004500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004504:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004506:	4b17      	ldr	r3, [pc, #92]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d105      	bne.n	800451e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004512:	4b14      	ldr	r3, [pc, #80]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	4a13      	ldr	r2, [pc, #76]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 8004518:	f023 0303 	bic.w	r3, r3, #3
 800451c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800451e:	4b11      	ldr	r3, [pc, #68]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	4a10      	ldr	r2, [pc, #64]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 8004524:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452e:	f7fe f855 	bl	80025dc <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004536:	f7fe f851 	bl	80025dc <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e009      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004548:	4b06      	ldr	r3, [pc, #24]	; (8004564 <HAL_RCC_OscConfig+0x7c4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f0      	bne.n	8004536 <HAL_RCC_OscConfig+0x796>
 8004554:	e001      	b.n	800455a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3720      	adds	r7, #32
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40021000 	.word	0x40021000
 8004568:	f99d808c 	.word	0xf99d808c

0800456c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0c8      	b.n	8004712 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004580:	4b66      	ldr	r3, [pc, #408]	; (800471c <HAL_RCC_ClockConfig+0x1b0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d910      	bls.n	80045b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458e:	4b63      	ldr	r3, [pc, #396]	; (800471c <HAL_RCC_ClockConfig+0x1b0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f023 0207 	bic.w	r2, r3, #7
 8004596:	4961      	ldr	r1, [pc, #388]	; (800471c <HAL_RCC_ClockConfig+0x1b0>)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	4313      	orrs	r3, r2
 800459c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459e:	4b5f      	ldr	r3, [pc, #380]	; (800471c <HAL_RCC_ClockConfig+0x1b0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e0b0      	b.n	8004712 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d04c      	beq.n	8004656 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d107      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c4:	4b56      	ldr	r3, [pc, #344]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d121      	bne.n	8004614 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e09e      	b.n	8004712 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d107      	bne.n	80045ec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045dc:	4b50      	ldr	r3, [pc, #320]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d115      	bne.n	8004614 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e092      	b.n	8004712 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d107      	bne.n	8004604 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045f4:	4b4a      	ldr	r3, [pc, #296]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d109      	bne.n	8004614 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e086      	b.n	8004712 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004604:	4b46      	ldr	r3, [pc, #280]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e07e      	b.n	8004712 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004614:	4b42      	ldr	r3, [pc, #264]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f023 0203 	bic.w	r2, r3, #3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	493f      	ldr	r1, [pc, #252]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 8004622:	4313      	orrs	r3, r2
 8004624:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004626:	f7fd ffd9 	bl	80025dc <HAL_GetTick>
 800462a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462c:	e00a      	b.n	8004644 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800462e:	f7fd ffd5 	bl	80025dc <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	f241 3288 	movw	r2, #5000	; 0x1388
 800463c:	4293      	cmp	r3, r2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e066      	b.n	8004712 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004644:	4b36      	ldr	r3, [pc, #216]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 020c 	and.w	r2, r3, #12
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	429a      	cmp	r2, r3
 8004654:	d1eb      	bne.n	800462e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d008      	beq.n	8004674 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004662:	4b2f      	ldr	r3, [pc, #188]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	492c      	ldr	r1, [pc, #176]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 8004670:	4313      	orrs	r3, r2
 8004672:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004674:	4b29      	ldr	r3, [pc, #164]	; (800471c <HAL_RCC_ClockConfig+0x1b0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d210      	bcs.n	80046a4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004682:	4b26      	ldr	r3, [pc, #152]	; (800471c <HAL_RCC_ClockConfig+0x1b0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 0207 	bic.w	r2, r3, #7
 800468a:	4924      	ldr	r1, [pc, #144]	; (800471c <HAL_RCC_ClockConfig+0x1b0>)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	4313      	orrs	r3, r2
 8004690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004692:	4b22      	ldr	r3, [pc, #136]	; (800471c <HAL_RCC_ClockConfig+0x1b0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e036      	b.n	8004712 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b0:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4918      	ldr	r1, [pc, #96]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ce:	4b14      	ldr	r3, [pc, #80]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4910      	ldr	r1, [pc, #64]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046e2:	f000 f825 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 80046e6:	4602      	mov	r2, r0
 80046e8:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <HAL_RCC_ClockConfig+0x1b4>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	490c      	ldr	r1, [pc, #48]	; (8004724 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	5ccb      	ldrb	r3, [r1, r3]
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	fa22 f303 	lsr.w	r3, r2, r3
 80046fe:	4a0a      	ldr	r2, [pc, #40]	; (8004728 <HAL_RCC_ClockConfig+0x1bc>)
 8004700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <HAL_RCC_ClockConfig+0x1c0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7fd fdbc 	bl	8002284 <HAL_InitTick>
 800470c:	4603      	mov	r3, r0
 800470e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004710:	7afb      	ldrb	r3, [r7, #11]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40022000 	.word	0x40022000
 8004720:	40021000 	.word	0x40021000
 8004724:	08009acc 	.word	0x08009acc
 8004728:	20000028 	.word	0x20000028
 800472c:	2000002c 	.word	0x2000002c

08004730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004730:	b480      	push	{r7}
 8004732:	b089      	sub	sp, #36	; 0x24
 8004734:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	61fb      	str	r3, [r7, #28]
 800473a:	2300      	movs	r3, #0
 800473c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800473e:	4b3e      	ldr	r3, [pc, #248]	; (8004838 <HAL_RCC_GetSysClockFreq+0x108>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
 8004746:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004748:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <HAL_RCC_GetSysClockFreq+0x108>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0x34>
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b0c      	cmp	r3, #12
 800475c:	d121      	bne.n	80047a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d11e      	bne.n	80047a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004764:	4b34      	ldr	r3, [pc, #208]	; (8004838 <HAL_RCC_GetSysClockFreq+0x108>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b00      	cmp	r3, #0
 800476e:	d107      	bne.n	8004780 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004770:	4b31      	ldr	r3, [pc, #196]	; (8004838 <HAL_RCC_GetSysClockFreq+0x108>)
 8004772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004776:	0a1b      	lsrs	r3, r3, #8
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	e005      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004780:	4b2d      	ldr	r3, [pc, #180]	; (8004838 <HAL_RCC_GetSysClockFreq+0x108>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800478c:	4a2b      	ldr	r2, [pc, #172]	; (800483c <HAL_RCC_GetSysClockFreq+0x10c>)
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004794:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10d      	bne.n	80047b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047a0:	e00a      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d102      	bne.n	80047ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047a8:	4b25      	ldr	r3, [pc, #148]	; (8004840 <HAL_RCC_GetSysClockFreq+0x110>)
 80047aa:	61bb      	str	r3, [r7, #24]
 80047ac:	e004      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047b4:	4b23      	ldr	r3, [pc, #140]	; (8004844 <HAL_RCC_GetSysClockFreq+0x114>)
 80047b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b0c      	cmp	r3, #12
 80047bc:	d134      	bne.n	8004828 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047be:	4b1e      	ldr	r3, [pc, #120]	; (8004838 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d003      	beq.n	80047d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d003      	beq.n	80047dc <HAL_RCC_GetSysClockFreq+0xac>
 80047d4:	e005      	b.n	80047e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047d6:	4b1a      	ldr	r3, [pc, #104]	; (8004840 <HAL_RCC_GetSysClockFreq+0x110>)
 80047d8:	617b      	str	r3, [r7, #20]
      break;
 80047da:	e005      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047dc:	4b19      	ldr	r3, [pc, #100]	; (8004844 <HAL_RCC_GetSysClockFreq+0x114>)
 80047de:	617b      	str	r3, [r7, #20]
      break;
 80047e0:	e002      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	617b      	str	r3, [r7, #20]
      break;
 80047e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047e8:	4b13      	ldr	r3, [pc, #76]	; (8004838 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	091b      	lsrs	r3, r3, #4
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	3301      	adds	r3, #1
 80047f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047f6:	4b10      	ldr	r3, [pc, #64]	; (8004838 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	0a1b      	lsrs	r3, r3, #8
 80047fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	fb02 f203 	mul.w	r2, r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	fbb2 f3f3 	udiv	r3, r2, r3
 800480c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800480e:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <HAL_RCC_GetSysClockFreq+0x108>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	0e5b      	lsrs	r3, r3, #25
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	3301      	adds	r3, #1
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	fbb2 f3f3 	udiv	r3, r2, r3
 8004826:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004828:	69bb      	ldr	r3, [r7, #24]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3724      	adds	r7, #36	; 0x24
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000
 800483c:	08009ae4 	.word	0x08009ae4
 8004840:	00f42400 	.word	0x00f42400
 8004844:	007a1200 	.word	0x007a1200

08004848 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800484c:	4b03      	ldr	r3, [pc, #12]	; (800485c <HAL_RCC_GetHCLKFreq+0x14>)
 800484e:	681b      	ldr	r3, [r3, #0]
}
 8004850:	4618      	mov	r0, r3
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	20000028 	.word	0x20000028

08004860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004864:	f7ff fff0 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 8004868:	4602      	mov	r2, r0
 800486a:	4b06      	ldr	r3, [pc, #24]	; (8004884 <HAL_RCC_GetPCLK2Freq+0x24>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	0adb      	lsrs	r3, r3, #11
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	4904      	ldr	r1, [pc, #16]	; (8004888 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004876:	5ccb      	ldrb	r3, [r1, r3]
 8004878:	f003 031f 	and.w	r3, r3, #31
 800487c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004880:	4618      	mov	r0, r3
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40021000 	.word	0x40021000
 8004888:	08009adc 	.word	0x08009adc

0800488c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	220f      	movs	r2, #15
 800489a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800489c:	4b12      	ldr	r3, [pc, #72]	; (80048e8 <HAL_RCC_GetClockConfig+0x5c>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 0203 	and.w	r2, r3, #3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80048a8:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <HAL_RCC_GetClockConfig+0x5c>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <HAL_RCC_GetClockConfig+0x5c>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80048c0:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_RCC_GetClockConfig+0x5c>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	08db      	lsrs	r3, r3, #3
 80048c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80048ce:	4b07      	ldr	r3, [pc, #28]	; (80048ec <HAL_RCC_GetClockConfig+0x60>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0207 	and.w	r2, r3, #7
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	601a      	str	r2, [r3, #0]
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40022000 	.word	0x40022000

080048f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048f8:	2300      	movs	r3, #0
 80048fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048fc:	4b2a      	ldr	r3, [pc, #168]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004908:	f7ff f9e6 	bl	8003cd8 <HAL_PWREx_GetVoltageRange>
 800490c:	6178      	str	r0, [r7, #20]
 800490e:	e014      	b.n	800493a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004910:	4b25      	ldr	r3, [pc, #148]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004914:	4a24      	ldr	r2, [pc, #144]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491a:	6593      	str	r3, [r2, #88]	; 0x58
 800491c:	4b22      	ldr	r3, [pc, #136]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800491e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004928:	f7ff f9d6 	bl	8003cd8 <HAL_PWREx_GetVoltageRange>
 800492c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800492e:	4b1e      	ldr	r3, [pc, #120]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004932:	4a1d      	ldr	r2, [pc, #116]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004938:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004940:	d10b      	bne.n	800495a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b80      	cmp	r3, #128	; 0x80
 8004946:	d919      	bls.n	800497c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2ba0      	cmp	r3, #160	; 0xa0
 800494c:	d902      	bls.n	8004954 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800494e:	2302      	movs	r3, #2
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	e013      	b.n	800497c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004954:	2301      	movs	r3, #1
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	e010      	b.n	800497c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b80      	cmp	r3, #128	; 0x80
 800495e:	d902      	bls.n	8004966 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004960:	2303      	movs	r3, #3
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	e00a      	b.n	800497c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b80      	cmp	r3, #128	; 0x80
 800496a:	d102      	bne.n	8004972 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800496c:	2302      	movs	r3, #2
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	e004      	b.n	800497c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b70      	cmp	r3, #112	; 0x70
 8004976:	d101      	bne.n	800497c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004978:	2301      	movs	r3, #1
 800497a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f023 0207 	bic.w	r2, r3, #7
 8004984:	4909      	ldr	r1, [pc, #36]	; (80049ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800498c:	4b07      	ldr	r3, [pc, #28]	; (80049ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	429a      	cmp	r2, r3
 8004998:	d001      	beq.n	800499e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40022000 	.word	0x40022000

080049b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049b8:	2300      	movs	r3, #0
 80049ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049bc:	2300      	movs	r3, #0
 80049be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d041      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049d4:	d02a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049da:	d824      	bhi.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049e0:	d008      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049e6:	d81e      	bhi.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f0:	d010      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049f2:	e018      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049f4:	4b86      	ldr	r3, [pc, #536]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4a85      	ldr	r2, [pc, #532]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a00:	e015      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	3304      	adds	r3, #4
 8004a06:	2100      	movs	r1, #0
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fabb 	bl	8004f84 <RCCEx_PLLSAI1_Config>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a12:	e00c      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3320      	adds	r3, #32
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fba6 	bl	800516c <RCCEx_PLLSAI2_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a24:	e003      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	74fb      	strb	r3, [r7, #19]
      break;
 8004a2a:	e000      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a2e:	7cfb      	ldrb	r3, [r7, #19]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a34:	4b76      	ldr	r3, [pc, #472]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a42:	4973      	ldr	r1, [pc, #460]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a4a:	e001      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d041      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a64:	d02a      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a6a:	d824      	bhi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a70:	d008      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a76:	d81e      	bhi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a80:	d010      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a82:	e018      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a84:	4b62      	ldr	r3, [pc, #392]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4a61      	ldr	r2, [pc, #388]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a90:	e015      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3304      	adds	r3, #4
 8004a96:	2100      	movs	r1, #0
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 fa73 	bl	8004f84 <RCCEx_PLLSAI1_Config>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aa2:	e00c      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3320      	adds	r3, #32
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fb5e 	bl	800516c <RCCEx_PLLSAI2_Config>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ab4:	e003      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	74fb      	strb	r3, [r7, #19]
      break;
 8004aba:	e000      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004abe:	7cfb      	ldrb	r3, [r7, #19]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10b      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ac4:	4b52      	ldr	r3, [pc, #328]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ad2:	494f      	ldr	r1, [pc, #316]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ada:	e001      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80a0 	beq.w	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aee:	2300      	movs	r3, #0
 8004af0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004af2:	4b47      	ldr	r3, [pc, #284]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b02:	2300      	movs	r3, #0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00d      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b08:	4b41      	ldr	r3, [pc, #260]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0c:	4a40      	ldr	r2, [pc, #256]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b12:	6593      	str	r3, [r2, #88]	; 0x58
 8004b14:	4b3e      	ldr	r3, [pc, #248]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b20:	2301      	movs	r3, #1
 8004b22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b24:	4b3b      	ldr	r3, [pc, #236]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a3a      	ldr	r2, [pc, #232]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b30:	f7fd fd54 	bl	80025dc <HAL_GetTick>
 8004b34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b36:	e009      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b38:	f7fd fd50 	bl	80025dc <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d902      	bls.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	74fb      	strb	r3, [r7, #19]
        break;
 8004b4a:	e005      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b4c:	4b31      	ldr	r3, [pc, #196]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0ef      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b58:	7cfb      	ldrb	r3, [r7, #19]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d15c      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b5e:	4b2c      	ldr	r3, [pc, #176]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01f      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d019      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b7c:	4b24      	ldr	r3, [pc, #144]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b88:	4b21      	ldr	r3, [pc, #132]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8e:	4a20      	ldr	r2, [pc, #128]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b98:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9e:	4a1c      	ldr	r2, [pc, #112]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ba8:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d016      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bba:	f7fd fd0f 	bl	80025dc <HAL_GetTick>
 8004bbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bc0:	e00b      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc2:	f7fd fd0b 	bl	80025dc <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d902      	bls.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	74fb      	strb	r3, [r7, #19]
            break;
 8004bd8:	e006      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bda:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0ec      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004be8:	7cfb      	ldrb	r3, [r7, #19]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bee:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bfe:	4904      	ldr	r1, [pc, #16]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c06:	e009      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c08:	7cfb      	ldrb	r3, [r7, #19]
 8004c0a:	74bb      	strb	r3, [r7, #18]
 8004c0c:	e006      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c0e:	bf00      	nop
 8004c10:	40021000 	.word	0x40021000
 8004c14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c18:	7cfb      	ldrb	r3, [r7, #19]
 8004c1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c1c:	7c7b      	ldrb	r3, [r7, #17]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d105      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c22:	4b9e      	ldr	r3, [pc, #632]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c26:	4a9d      	ldr	r2, [pc, #628]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c3a:	4b98      	ldr	r3, [pc, #608]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	f023 0203 	bic.w	r2, r3, #3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	4994      	ldr	r1, [pc, #592]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c5c:	4b8f      	ldr	r3, [pc, #572]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c62:	f023 020c 	bic.w	r2, r3, #12
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	498c      	ldr	r1, [pc, #560]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0304 	and.w	r3, r3, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c7e:	4b87      	ldr	r3, [pc, #540]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	4983      	ldr	r1, [pc, #524]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ca0:	4b7e      	ldr	r3, [pc, #504]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	497b      	ldr	r1, [pc, #492]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cc2:	4b76      	ldr	r3, [pc, #472]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd0:	4972      	ldr	r1, [pc, #456]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ce4:	4b6d      	ldr	r3, [pc, #436]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf2:	496a      	ldr	r1, [pc, #424]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d06:	4b65      	ldr	r3, [pc, #404]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d14:	4961      	ldr	r1, [pc, #388]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d28:	4b5c      	ldr	r3, [pc, #368]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d36:	4959      	ldr	r1, [pc, #356]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d4a:	4b54      	ldr	r3, [pc, #336]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d58:	4950      	ldr	r1, [pc, #320]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d6c:	4b4b      	ldr	r3, [pc, #300]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	4948      	ldr	r1, [pc, #288]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d8e:	4b43      	ldr	r3, [pc, #268]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9c:	493f      	ldr	r1, [pc, #252]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d028      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004db0:	4b3a      	ldr	r3, [pc, #232]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dbe:	4937      	ldr	r1, [pc, #220]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dce:	d106      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd0:	4b32      	ldr	r3, [pc, #200]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	4a31      	ldr	r2, [pc, #196]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dda:	60d3      	str	r3, [r2, #12]
 8004ddc:	e011      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004de6:	d10c      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3304      	adds	r3, #4
 8004dec:	2101      	movs	r1, #1
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 f8c8 	bl	8004f84 <RCCEx_PLLSAI1_Config>
 8004df4:	4603      	mov	r3, r0
 8004df6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d028      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e0e:	4b23      	ldr	r3, [pc, #140]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	491f      	ldr	r1, [pc, #124]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e2c:	d106      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e2e:	4b1b      	ldr	r3, [pc, #108]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	4a1a      	ldr	r2, [pc, #104]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e38:	60d3      	str	r3, [r2, #12]
 8004e3a:	e011      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e44:	d10c      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 f899 	bl	8004f84 <RCCEx_PLLSAI1_Config>
 8004e52:	4603      	mov	r3, r0
 8004e54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e56:	7cfb      	ldrb	r3, [r7, #19]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e5c:	7cfb      	ldrb	r3, [r7, #19]
 8004e5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d02b      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7a:	4908      	ldr	r1, [pc, #32]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e8a:	d109      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e8c:	4b03      	ldr	r3, [pc, #12]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	4a02      	ldr	r2, [pc, #8]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e96:	60d3      	str	r3, [r2, #12]
 8004e98:	e014      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3304      	adds	r3, #4
 8004eae:	2101      	movs	r1, #1
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 f867 	bl	8004f84 <RCCEx_PLLSAI1_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eba:	7cfb      	ldrb	r3, [r7, #19]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ec0:	7cfb      	ldrb	r3, [r7, #19]
 8004ec2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d02f      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ed0:	4b2b      	ldr	r3, [pc, #172]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ede:	4928      	ldr	r1, [pc, #160]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eee:	d10d      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	2102      	movs	r1, #2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 f844 	bl	8004f84 <RCCEx_PLLSAI1_Config>
 8004efc:	4603      	mov	r3, r0
 8004efe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f00:	7cfb      	ldrb	r3, [r7, #19]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d014      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f06:	7cfb      	ldrb	r3, [r7, #19]
 8004f08:	74bb      	strb	r3, [r7, #18]
 8004f0a:	e011      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f14:	d10c      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3320      	adds	r3, #32
 8004f1a:	2102      	movs	r1, #2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 f925 	bl	800516c <RCCEx_PLLSAI2_Config>
 8004f22:	4603      	mov	r3, r0
 8004f24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f26:	7cfb      	ldrb	r3, [r7, #19]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f2c:	7cfb      	ldrb	r3, [r7, #19]
 8004f2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f3c:	4b10      	ldr	r3, [pc, #64]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4a:	490d      	ldr	r1, [pc, #52]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00b      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f5e:	4b08      	ldr	r3, [pc, #32]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f6e:	4904      	ldr	r1, [pc, #16]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f76:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40021000 	.word	0x40021000

08004f84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f92:	4b75      	ldr	r3, [pc, #468]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d018      	beq.n	8004fd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f9e:	4b72      	ldr	r3, [pc, #456]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f003 0203 	and.w	r2, r3, #3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d10d      	bne.n	8004fca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
       ||
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d009      	beq.n	8004fca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004fb6:	4b6c      	ldr	r3, [pc, #432]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	091b      	lsrs	r3, r3, #4
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
       ||
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d047      	beq.n	800505a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
 8004fce:	e044      	b.n	800505a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d018      	beq.n	800500a <RCCEx_PLLSAI1_Config+0x86>
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d825      	bhi.n	8005028 <RCCEx_PLLSAI1_Config+0xa4>
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d002      	beq.n	8004fe6 <RCCEx_PLLSAI1_Config+0x62>
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d009      	beq.n	8004ff8 <RCCEx_PLLSAI1_Config+0x74>
 8004fe4:	e020      	b.n	8005028 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fe6:	4b60      	ldr	r3, [pc, #384]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d11d      	bne.n	800502e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ff6:	e01a      	b.n	800502e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ff8:	4b5b      	ldr	r3, [pc, #364]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005000:	2b00      	cmp	r3, #0
 8005002:	d116      	bne.n	8005032 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005008:	e013      	b.n	8005032 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800500a:	4b57      	ldr	r3, [pc, #348]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10f      	bne.n	8005036 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005016:	4b54      	ldr	r3, [pc, #336]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005026:	e006      	b.n	8005036 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
      break;
 800502c:	e004      	b.n	8005038 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800502e:	bf00      	nop
 8005030:	e002      	b.n	8005038 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005032:	bf00      	nop
 8005034:	e000      	b.n	8005038 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005036:	bf00      	nop
    }

    if(status == HAL_OK)
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10d      	bne.n	800505a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800503e:	4b4a      	ldr	r3, [pc, #296]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6819      	ldr	r1, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	3b01      	subs	r3, #1
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	430b      	orrs	r3, r1
 8005054:	4944      	ldr	r1, [pc, #272]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005056:	4313      	orrs	r3, r2
 8005058:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800505a:	7bfb      	ldrb	r3, [r7, #15]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d17d      	bne.n	800515c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005060:	4b41      	ldr	r3, [pc, #260]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a40      	ldr	r2, [pc, #256]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005066:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800506a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800506c:	f7fd fab6 	bl	80025dc <HAL_GetTick>
 8005070:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005072:	e009      	b.n	8005088 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005074:	f7fd fab2 	bl	80025dc <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d902      	bls.n	8005088 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	73fb      	strb	r3, [r7, #15]
        break;
 8005086:	e005      	b.n	8005094 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005088:	4b37      	ldr	r3, [pc, #220]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1ef      	bne.n	8005074 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d160      	bne.n	800515c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d111      	bne.n	80050c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050a0:	4b31      	ldr	r3, [pc, #196]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6892      	ldr	r2, [r2, #8]
 80050b0:	0211      	lsls	r1, r2, #8
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	68d2      	ldr	r2, [r2, #12]
 80050b6:	0912      	lsrs	r2, r2, #4
 80050b8:	0452      	lsls	r2, r2, #17
 80050ba:	430a      	orrs	r2, r1
 80050bc:	492a      	ldr	r1, [pc, #168]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	610b      	str	r3, [r1, #16]
 80050c2:	e027      	b.n	8005114 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d112      	bne.n	80050f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050ca:	4b27      	ldr	r3, [pc, #156]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6892      	ldr	r2, [r2, #8]
 80050da:	0211      	lsls	r1, r2, #8
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6912      	ldr	r2, [r2, #16]
 80050e0:	0852      	lsrs	r2, r2, #1
 80050e2:	3a01      	subs	r2, #1
 80050e4:	0552      	lsls	r2, r2, #21
 80050e6:	430a      	orrs	r2, r1
 80050e8:	491f      	ldr	r1, [pc, #124]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	610b      	str	r3, [r1, #16]
 80050ee:	e011      	b.n	8005114 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050f0:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6892      	ldr	r2, [r2, #8]
 8005100:	0211      	lsls	r1, r2, #8
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6952      	ldr	r2, [r2, #20]
 8005106:	0852      	lsrs	r2, r2, #1
 8005108:	3a01      	subs	r2, #1
 800510a:	0652      	lsls	r2, r2, #25
 800510c:	430a      	orrs	r2, r1
 800510e:	4916      	ldr	r1, [pc, #88]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005110:	4313      	orrs	r3, r2
 8005112:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005114:	4b14      	ldr	r3, [pc, #80]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a13      	ldr	r2, [pc, #76]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 800511a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800511e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005120:	f7fd fa5c 	bl	80025dc <HAL_GetTick>
 8005124:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005126:	e009      	b.n	800513c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005128:	f7fd fa58 	bl	80025dc <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d902      	bls.n	800513c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	73fb      	strb	r3, [r7, #15]
          break;
 800513a:	e005      	b.n	8005148 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800513c:	4b0a      	ldr	r3, [pc, #40]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0ef      	beq.n	8005128 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	4904      	ldr	r1, [pc, #16]	; (8005168 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005158:	4313      	orrs	r3, r2
 800515a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40021000 	.word	0x40021000

0800516c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800517a:	4b6a      	ldr	r3, [pc, #424]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d018      	beq.n	80051b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005186:	4b67      	ldr	r3, [pc, #412]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f003 0203 	and.w	r2, r3, #3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d10d      	bne.n	80051b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
       ||
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800519e:	4b61      	ldr	r3, [pc, #388]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	091b      	lsrs	r3, r3, #4
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
       ||
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d047      	beq.n	8005242 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	73fb      	strb	r3, [r7, #15]
 80051b6:	e044      	b.n	8005242 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d018      	beq.n	80051f2 <RCCEx_PLLSAI2_Config+0x86>
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d825      	bhi.n	8005210 <RCCEx_PLLSAI2_Config+0xa4>
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d002      	beq.n	80051ce <RCCEx_PLLSAI2_Config+0x62>
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d009      	beq.n	80051e0 <RCCEx_PLLSAI2_Config+0x74>
 80051cc:	e020      	b.n	8005210 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051ce:	4b55      	ldr	r3, [pc, #340]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d11d      	bne.n	8005216 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051de:	e01a      	b.n	8005216 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051e0:	4b50      	ldr	r3, [pc, #320]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d116      	bne.n	800521a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051f0:	e013      	b.n	800521a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051f2:	4b4c      	ldr	r3, [pc, #304]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10f      	bne.n	800521e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051fe:	4b49      	ldr	r3, [pc, #292]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d109      	bne.n	800521e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800520e:	e006      	b.n	800521e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	73fb      	strb	r3, [r7, #15]
      break;
 8005214:	e004      	b.n	8005220 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005216:	bf00      	nop
 8005218:	e002      	b.n	8005220 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800521a:	bf00      	nop
 800521c:	e000      	b.n	8005220 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800521e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10d      	bne.n	8005242 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005226:	4b3f      	ldr	r3, [pc, #252]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6819      	ldr	r1, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	3b01      	subs	r3, #1
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	430b      	orrs	r3, r1
 800523c:	4939      	ldr	r1, [pc, #228]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800523e:	4313      	orrs	r3, r2
 8005240:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d167      	bne.n	8005318 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005248:	4b36      	ldr	r3, [pc, #216]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a35      	ldr	r2, [pc, #212]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800524e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005254:	f7fd f9c2 	bl	80025dc <HAL_GetTick>
 8005258:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800525a:	e009      	b.n	8005270 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800525c:	f7fd f9be 	bl	80025dc <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d902      	bls.n	8005270 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	73fb      	strb	r3, [r7, #15]
        break;
 800526e:	e005      	b.n	800527c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005270:	4b2c      	ldr	r3, [pc, #176]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1ef      	bne.n	800525c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d14a      	bne.n	8005318 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d111      	bne.n	80052ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005288:	4b26      	ldr	r3, [pc, #152]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6892      	ldr	r2, [r2, #8]
 8005298:	0211      	lsls	r1, r2, #8
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	68d2      	ldr	r2, [r2, #12]
 800529e:	0912      	lsrs	r2, r2, #4
 80052a0:	0452      	lsls	r2, r2, #17
 80052a2:	430a      	orrs	r2, r1
 80052a4:	491f      	ldr	r1, [pc, #124]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	614b      	str	r3, [r1, #20]
 80052aa:	e011      	b.n	80052d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052ac:	4b1d      	ldr	r3, [pc, #116]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6892      	ldr	r2, [r2, #8]
 80052bc:	0211      	lsls	r1, r2, #8
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6912      	ldr	r2, [r2, #16]
 80052c2:	0852      	lsrs	r2, r2, #1
 80052c4:	3a01      	subs	r2, #1
 80052c6:	0652      	lsls	r2, r2, #25
 80052c8:	430a      	orrs	r2, r1
 80052ca:	4916      	ldr	r1, [pc, #88]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052d0:	4b14      	ldr	r3, [pc, #80]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a13      	ldr	r2, [pc, #76]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052dc:	f7fd f97e 	bl	80025dc <HAL_GetTick>
 80052e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052e2:	e009      	b.n	80052f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052e4:	f7fd f97a 	bl	80025dc <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d902      	bls.n	80052f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	73fb      	strb	r3, [r7, #15]
          break;
 80052f6:	e005      	b.n	8005304 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052f8:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0ef      	beq.n	80052e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 800530c:	695a      	ldr	r2, [r3, #20]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	4904      	ldr	r1, [pc, #16]	; (8005324 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005314:	4313      	orrs	r3, r2
 8005316:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005318:	7bfb      	ldrb	r3, [r7, #15]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40021000 	.word	0x40021000

08005328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e049      	b.n	80053ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f841 	bl	80053d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3304      	adds	r3, #4
 8005364:	4619      	mov	r1, r3
 8005366:	4610      	mov	r0, r2
 8005368:	f000 f9f8 	bl	800575c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d001      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e04f      	b.n	80054a4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a23      	ldr	r2, [pc, #140]	; (80054b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d01d      	beq.n	8005462 <HAL_TIM_Base_Start_IT+0x76>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542e:	d018      	beq.n	8005462 <HAL_TIM_Base_Start_IT+0x76>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1f      	ldr	r2, [pc, #124]	; (80054b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <HAL_TIM_Base_Start_IT+0x76>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1e      	ldr	r2, [pc, #120]	; (80054b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00e      	beq.n	8005462 <HAL_TIM_Base_Start_IT+0x76>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <HAL_TIM_Base_Start_IT+0xd0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d009      	beq.n	8005462 <HAL_TIM_Base_Start_IT+0x76>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1b      	ldr	r2, [pc, #108]	; (80054c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d004      	beq.n	8005462 <HAL_TIM_Base_Start_IT+0x76>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a19      	ldr	r2, [pc, #100]	; (80054c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d115      	bne.n	800548e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	4b17      	ldr	r3, [pc, #92]	; (80054c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800546a:	4013      	ands	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b06      	cmp	r3, #6
 8005472:	d015      	beq.n	80054a0 <HAL_TIM_Base_Start_IT+0xb4>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547a:	d011      	beq.n	80054a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800548c:	e008      	b.n	80054a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0201 	orr.w	r2, r2, #1
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	e000      	b.n	80054a2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800
 80054bc:	40000c00 	.word	0x40000c00
 80054c0:	40013400 	.word	0x40013400
 80054c4:	40014000 	.word	0x40014000
 80054c8:	00010007 	.word	0x00010007

080054cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d122      	bne.n	8005528 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d11b      	bne.n	8005528 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0202 	mvn.w	r2, #2
 80054f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f905 	bl	800571e <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f8f7 	bl	800570a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f908 	bl	8005732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b04      	cmp	r3, #4
 8005534:	d122      	bne.n	800557c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b04      	cmp	r3, #4
 8005542:	d11b      	bne.n	800557c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0204 	mvn.w	r2, #4
 800554c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f8db 	bl	800571e <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f8cd 	bl	800570a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f8de 	bl	8005732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b08      	cmp	r3, #8
 8005588:	d122      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b08      	cmp	r3, #8
 8005596:	d11b      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0208 	mvn.w	r2, #8
 80055a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2204      	movs	r2, #4
 80055a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f8b1 	bl	800571e <HAL_TIM_IC_CaptureCallback>
 80055bc:	e005      	b.n	80055ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f8a3 	bl	800570a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f8b4 	bl	8005732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0310 	and.w	r3, r3, #16
 80055da:	2b10      	cmp	r3, #16
 80055dc:	d122      	bne.n	8005624 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d11b      	bne.n	8005624 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0210 	mvn.w	r2, #16
 80055f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2208      	movs	r2, #8
 80055fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f887 	bl	800571e <HAL_TIM_IC_CaptureCallback>
 8005610:	e005      	b.n	800561e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f879 	bl	800570a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f88a 	bl	8005732 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b01      	cmp	r3, #1
 8005630:	d10e      	bne.n	8005650 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b01      	cmp	r3, #1
 800563e:	d107      	bne.n	8005650 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0201 	mvn.w	r2, #1
 8005648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7fb f9bc 	bl	80009c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565a:	2b80      	cmp	r3, #128	; 0x80
 800565c:	d10e      	bne.n	800567c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005668:	2b80      	cmp	r3, #128	; 0x80
 800566a:	d107      	bne.n	800567c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f914 	bl	80058a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800568a:	d10e      	bne.n	80056aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005696:	2b80      	cmp	r3, #128	; 0x80
 8005698:	d107      	bne.n	80056aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f907 	bl	80058b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b4:	2b40      	cmp	r3, #64	; 0x40
 80056b6:	d10e      	bne.n	80056d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c2:	2b40      	cmp	r3, #64	; 0x40
 80056c4:	d107      	bne.n	80056d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f838 	bl	8005746 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d10e      	bne.n	8005702 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	d107      	bne.n	8005702 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f06f 0220 	mvn.w	r2, #32
 80056fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f8c7 	bl	8005890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005702:	bf00      	nop
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
	...

0800575c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a40      	ldr	r2, [pc, #256]	; (8005870 <TIM_Base_SetConfig+0x114>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d013      	beq.n	800579c <TIM_Base_SetConfig+0x40>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577a:	d00f      	beq.n	800579c <TIM_Base_SetConfig+0x40>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a3d      	ldr	r2, [pc, #244]	; (8005874 <TIM_Base_SetConfig+0x118>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00b      	beq.n	800579c <TIM_Base_SetConfig+0x40>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a3c      	ldr	r2, [pc, #240]	; (8005878 <TIM_Base_SetConfig+0x11c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d007      	beq.n	800579c <TIM_Base_SetConfig+0x40>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a3b      	ldr	r2, [pc, #236]	; (800587c <TIM_Base_SetConfig+0x120>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_Base_SetConfig+0x40>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a3a      	ldr	r2, [pc, #232]	; (8005880 <TIM_Base_SetConfig+0x124>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d108      	bne.n	80057ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a2f      	ldr	r2, [pc, #188]	; (8005870 <TIM_Base_SetConfig+0x114>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d01f      	beq.n	80057f6 <TIM_Base_SetConfig+0x9a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057bc:	d01b      	beq.n	80057f6 <TIM_Base_SetConfig+0x9a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a2c      	ldr	r2, [pc, #176]	; (8005874 <TIM_Base_SetConfig+0x118>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d017      	beq.n	80057f6 <TIM_Base_SetConfig+0x9a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a2b      	ldr	r2, [pc, #172]	; (8005878 <TIM_Base_SetConfig+0x11c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d013      	beq.n	80057f6 <TIM_Base_SetConfig+0x9a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a2a      	ldr	r2, [pc, #168]	; (800587c <TIM_Base_SetConfig+0x120>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00f      	beq.n	80057f6 <TIM_Base_SetConfig+0x9a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a29      	ldr	r2, [pc, #164]	; (8005880 <TIM_Base_SetConfig+0x124>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00b      	beq.n	80057f6 <TIM_Base_SetConfig+0x9a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a28      	ldr	r2, [pc, #160]	; (8005884 <TIM_Base_SetConfig+0x128>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d007      	beq.n	80057f6 <TIM_Base_SetConfig+0x9a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a27      	ldr	r2, [pc, #156]	; (8005888 <TIM_Base_SetConfig+0x12c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d003      	beq.n	80057f6 <TIM_Base_SetConfig+0x9a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a26      	ldr	r2, [pc, #152]	; (800588c <TIM_Base_SetConfig+0x130>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d108      	bne.n	8005808 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a10      	ldr	r2, [pc, #64]	; (8005870 <TIM_Base_SetConfig+0x114>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00f      	beq.n	8005854 <TIM_Base_SetConfig+0xf8>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a12      	ldr	r2, [pc, #72]	; (8005880 <TIM_Base_SetConfig+0x124>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00b      	beq.n	8005854 <TIM_Base_SetConfig+0xf8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a11      	ldr	r2, [pc, #68]	; (8005884 <TIM_Base_SetConfig+0x128>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d007      	beq.n	8005854 <TIM_Base_SetConfig+0xf8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a10      	ldr	r2, [pc, #64]	; (8005888 <TIM_Base_SetConfig+0x12c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_Base_SetConfig+0xf8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a0f      	ldr	r2, [pc, #60]	; (800588c <TIM_Base_SetConfig+0x130>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d103      	bne.n	800585c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	615a      	str	r2, [r3, #20]
}
 8005862:	bf00      	nop
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	40012c00 	.word	0x40012c00
 8005874:	40000400 	.word	0x40000400
 8005878:	40000800 	.word	0x40000800
 800587c:	40000c00 	.word	0x40000c00
 8005880:	40013400 	.word	0x40013400
 8005884:	40014000 	.word	0x40014000
 8005888:	40014400 	.word	0x40014400
 800588c:	40014800 	.word	0x40014800

08005890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <__NVIC_SetPriority>:
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	4603      	mov	r3, r0
 80058d4:	6039      	str	r1, [r7, #0]
 80058d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	db0a      	blt.n	80058f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	490c      	ldr	r1, [pc, #48]	; (8005918 <__NVIC_SetPriority+0x4c>)
 80058e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ea:	0112      	lsls	r2, r2, #4
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	440b      	add	r3, r1
 80058f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058f4:	e00a      	b.n	800590c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	4908      	ldr	r1, [pc, #32]	; (800591c <__NVIC_SetPriority+0x50>)
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	3b04      	subs	r3, #4
 8005904:	0112      	lsls	r2, r2, #4
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	440b      	add	r3, r1
 800590a:	761a      	strb	r2, [r3, #24]
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	e000e100 	.word	0xe000e100
 800591c:	e000ed00 	.word	0xe000ed00

08005920 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005924:	4b05      	ldr	r3, [pc, #20]	; (800593c <SysTick_Handler+0x1c>)
 8005926:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005928:	f001 fe34 	bl	8007594 <xTaskGetSchedulerState>
 800592c:	4603      	mov	r3, r0
 800592e:	2b01      	cmp	r3, #1
 8005930:	d001      	beq.n	8005936 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005932:	f002 fc19 	bl	8008168 <xPortSysTickHandler>
  }
}
 8005936:	bf00      	nop
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	e000e010 	.word	0xe000e010

08005940 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005944:	2100      	movs	r1, #0
 8005946:	f06f 0004 	mvn.w	r0, #4
 800594a:	f7ff ffbf 	bl	80058cc <__NVIC_SetPriority>
#endif
}
 800594e:	bf00      	nop
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800595a:	f3ef 8305 	mrs	r3, IPSR
 800595e:	603b      	str	r3, [r7, #0]
  return(result);
 8005960:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005966:	f06f 0305 	mvn.w	r3, #5
 800596a:	607b      	str	r3, [r7, #4]
 800596c:	e00c      	b.n	8005988 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800596e:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <osKernelInitialize+0x44>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d105      	bne.n	8005982 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005976:	4b08      	ldr	r3, [pc, #32]	; (8005998 <osKernelInitialize+0x44>)
 8005978:	2201      	movs	r2, #1
 800597a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800597c:	2300      	movs	r3, #0
 800597e:	607b      	str	r3, [r7, #4]
 8005980:	e002      	b.n	8005988 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005982:	f04f 33ff 	mov.w	r3, #4294967295
 8005986:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005988:	687b      	ldr	r3, [r7, #4]
}
 800598a:	4618      	mov	r0, r3
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	200001e4 	.word	0x200001e4

0800599c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059a2:	f3ef 8305 	mrs	r3, IPSR
 80059a6:	603b      	str	r3, [r7, #0]
  return(result);
 80059a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80059ae:	f06f 0305 	mvn.w	r3, #5
 80059b2:	607b      	str	r3, [r7, #4]
 80059b4:	e010      	b.n	80059d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80059b6:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <osKernelStart+0x48>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d109      	bne.n	80059d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80059be:	f7ff ffbf 	bl	8005940 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80059c2:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <osKernelStart+0x48>)
 80059c4:	2202      	movs	r2, #2
 80059c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80059c8:	f001 f988 	bl	8006cdc <vTaskStartScheduler>
      stat = osOK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	607b      	str	r3, [r7, #4]
 80059d0:	e002      	b.n	80059d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80059d2:	f04f 33ff 	mov.w	r3, #4294967295
 80059d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80059d8:	687b      	ldr	r3, [r7, #4]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	200001e4 	.word	0x200001e4

080059e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08e      	sub	sp, #56	; 0x38
 80059ec:	af04      	add	r7, sp, #16
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059f8:	f3ef 8305 	mrs	r3, IPSR
 80059fc:	617b      	str	r3, [r7, #20]
  return(result);
 80059fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d17e      	bne.n	8005b02 <osThreadNew+0x11a>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d07b      	beq.n	8005b02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005a0a:	2380      	movs	r3, #128	; 0x80
 8005a0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005a0e:	2318      	movs	r3, #24
 8005a10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005a16:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d045      	beq.n	8005aae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <osThreadNew+0x48>
        name = attr->name;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <osThreadNew+0x6e>
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	2b38      	cmp	r3, #56	; 0x38
 8005a48:	d805      	bhi.n	8005a56 <osThreadNew+0x6e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <osThreadNew+0x72>
        return (NULL);
 8005a56:	2300      	movs	r3, #0
 8005a58:	e054      	b.n	8005b04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	089b      	lsrs	r3, r3, #2
 8005a68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00e      	beq.n	8005a90 <osThreadNew+0xa8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	2bbb      	cmp	r3, #187	; 0xbb
 8005a78:	d90a      	bls.n	8005a90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d006      	beq.n	8005a90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <osThreadNew+0xa8>
        mem = 1;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	e010      	b.n	8005ab2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10c      	bne.n	8005ab2 <osThreadNew+0xca>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d108      	bne.n	8005ab2 <osThreadNew+0xca>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d104      	bne.n	8005ab2 <osThreadNew+0xca>
          mem = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61bb      	str	r3, [r7, #24]
 8005aac:	e001      	b.n	8005ab2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d110      	bne.n	8005ada <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ac0:	9202      	str	r2, [sp, #8]
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	6a3a      	ldr	r2, [r7, #32]
 8005acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 ff18 	bl	8006904 <xTaskCreateStatic>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	613b      	str	r3, [r7, #16]
 8005ad8:	e013      	b.n	8005b02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d110      	bne.n	8005b02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	f107 0310 	add.w	r3, r7, #16
 8005ae8:	9301      	str	r3, [sp, #4]
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 ff63 	bl	80069be <xTaskCreate>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d001      	beq.n	8005b02 <osThreadNew+0x11a>
            hTask = NULL;
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b02:	693b      	ldr	r3, [r7, #16]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3728      	adds	r7, #40	; 0x28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b14:	f3ef 8305 	mrs	r3, IPSR
 8005b18:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <osDelay+0x1c>
    stat = osErrorISR;
 8005b20:	f06f 0305 	mvn.w	r3, #5
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	e007      	b.n	8005b38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f001 f89e 	bl	8006c74 <vTaskDelay>
    }
  }

  return (stat);
 8005b38:	68fb      	ldr	r3, [r7, #12]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b088      	sub	sp, #32
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b4e:	f3ef 8305 	mrs	r3, IPSR
 8005b52:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b54:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d174      	bne.n	8005c44 <osMutexNew+0x102>
    if (attr != NULL) {
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	e001      	b.n	8005b6c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <osMutexNew+0x3a>
      rmtx = 1U;
 8005b76:	2301      	movs	r3, #1
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	e001      	b.n	8005b80 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d15c      	bne.n	8005c44 <osMutexNew+0x102>
      mem = -1;
 8005b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d015      	beq.n	8005bc2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d006      	beq.n	8005bac <osMutexNew+0x6a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	2b4f      	cmp	r3, #79	; 0x4f
 8005ba4:	d902      	bls.n	8005bac <osMutexNew+0x6a>
          mem = 1;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	613b      	str	r3, [r7, #16]
 8005baa:	e00c      	b.n	8005bc6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d108      	bne.n	8005bc6 <osMutexNew+0x84>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d104      	bne.n	8005bc6 <osMutexNew+0x84>
            mem = 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	613b      	str	r3, [r7, #16]
 8005bc0:	e001      	b.n	8005bc6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d112      	bne.n	8005bf2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	2004      	movs	r0, #4
 8005bda:	f000 fa90 	bl	80060fe <xQueueCreateMutexStatic>
 8005bde:	61f8      	str	r0, [r7, #28]
 8005be0:	e016      	b.n	8005c10 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	4619      	mov	r1, r3
 8005be8:	2001      	movs	r0, #1
 8005bea:	f000 fa88 	bl	80060fe <xQueueCreateMutexStatic>
 8005bee:	61f8      	str	r0, [r7, #28]
 8005bf0:	e00e      	b.n	8005c10 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10b      	bne.n	8005c10 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d004      	beq.n	8005c08 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005bfe:	2004      	movs	r0, #4
 8005c00:	f000 fa65 	bl	80060ce <xQueueCreateMutex>
 8005c04:	61f8      	str	r0, [r7, #28]
 8005c06:	e003      	b.n	8005c10 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005c08:	2001      	movs	r0, #1
 8005c0a:	f000 fa60 	bl	80060ce <xQueueCreateMutex>
 8005c0e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00c      	beq.n	8005c30 <osMutexNew+0xee>
        if (attr != NULL) {
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <osMutexNew+0xe2>
          name = attr->name;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e001      	b.n	8005c28 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005c28:	68f9      	ldr	r1, [r7, #12]
 8005c2a:	69f8      	ldr	r0, [r7, #28]
 8005c2c:	f000 fe0c 	bl	8006848 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d006      	beq.n	8005c44 <osMutexNew+0x102>
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	f043 0301 	orr.w	r3, r3, #1
 8005c42:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005c44:	69fb      	ldr	r3, [r7, #28]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3720      	adds	r7, #32
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4a07      	ldr	r2, [pc, #28]	; (8005c7c <vApplicationGetIdleTaskMemory+0x2c>)
 8005c60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	4a06      	ldr	r2, [pc, #24]	; (8005c80 <vApplicationGetIdleTaskMemory+0x30>)
 8005c66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2280      	movs	r2, #128	; 0x80
 8005c6c:	601a      	str	r2, [r3, #0]
}
 8005c6e:	bf00      	nop
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	200001e8 	.word	0x200001e8
 8005c80:	200002a4 	.word	0x200002a4

08005c84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4a07      	ldr	r2, [pc, #28]	; (8005cb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4a06      	ldr	r2, [pc, #24]	; (8005cb4 <vApplicationGetTimerTaskMemory+0x30>)
 8005c9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ca2:	601a      	str	r2, [r3, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	200004a4 	.word	0x200004a4
 8005cb4:	20000560 	.word	0x20000560

08005cb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f103 0208 	add.w	r2, r3, #8
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f103 0208 	add.w	r2, r3, #8
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f103 0208 	add.w	r2, r3, #8
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	601a      	str	r2, [r3, #0]
}
 8005d4e:	bf00      	nop
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d70:	d103      	bne.n	8005d7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	e00c      	b.n	8005d94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e002      	b.n	8005d88 <vListInsert+0x2e>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d2f6      	bcs.n	8005d82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	601a      	str	r2, [r3, #0]
}
 8005dc0:	bf00      	nop
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6892      	ldr	r2, [r2, #8]
 8005de2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6852      	ldr	r2, [r2, #4]
 8005dec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d103      	bne.n	8005e00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	1e5a      	subs	r2, r3, #1
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e46:	bf00      	nop
 8005e48:	e7fe      	b.n	8005e48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e4a:	f002 f8fb 	bl	8008044 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e5a:	fb01 f303 	mul.w	r3, r1, r3
 8005e5e:	441a      	add	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	68f9      	ldr	r1, [r7, #12]
 8005e7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e80:	fb01 f303 	mul.w	r3, r1, r3
 8005e84:	441a      	add	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	22ff      	movs	r2, #255	; 0xff
 8005e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	22ff      	movs	r2, #255	; 0xff
 8005e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d114      	bne.n	8005eca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01a      	beq.n	8005ede <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3310      	adds	r3, #16
 8005eac:	4618      	mov	r0, r3
 8005eae:	f001 f9af 	bl	8007210 <xTaskRemoveFromEventList>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d012      	beq.n	8005ede <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005eb8:	4b0c      	ldr	r3, [pc, #48]	; (8005eec <xQueueGenericReset+0xcc>)
 8005eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	e009      	b.n	8005ede <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3310      	adds	r3, #16
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7ff fef2 	bl	8005cb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3324      	adds	r3, #36	; 0x24
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff feed 	bl	8005cb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ede:	f002 f8e1 	bl	80080a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ee2:	2301      	movs	r3, #1
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	e000ed04 	.word	0xe000ed04

08005ef0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08e      	sub	sp, #56	; 0x38
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10a      	bne.n	8005f1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f16:	bf00      	nop
 8005f18:	e7fe      	b.n	8005f18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f32:	bf00      	nop
 8005f34:	e7fe      	b.n	8005f34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <xQueueGenericCreateStatic+0x52>
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <xQueueGenericCreateStatic+0x56>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e000      	b.n	8005f48 <xQueueGenericCreateStatic+0x58>
 8005f46:	2300      	movs	r3, #0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10a      	bne.n	8005f62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	623b      	str	r3, [r7, #32]
}
 8005f5e:	bf00      	nop
 8005f60:	e7fe      	b.n	8005f60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d102      	bne.n	8005f6e <xQueueGenericCreateStatic+0x7e>
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <xQueueGenericCreateStatic+0x82>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <xQueueGenericCreateStatic+0x84>
 8005f72:	2300      	movs	r3, #0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10a      	bne.n	8005f8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	61fb      	str	r3, [r7, #28]
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f8e:	2350      	movs	r3, #80	; 0x50
 8005f90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2b50      	cmp	r3, #80	; 0x50
 8005f96:	d00a      	beq.n	8005fae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9c:	f383 8811 	msr	BASEPRI, r3
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	61bb      	str	r3, [r7, #24]
}
 8005faa:	bf00      	nop
 8005fac:	e7fe      	b.n	8005fac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00d      	beq.n	8005fd6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	68b9      	ldr	r1, [r7, #8]
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 f83f 	bl	8006054 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3730      	adds	r7, #48	; 0x30
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08a      	sub	sp, #40	; 0x28
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	4613      	mov	r3, r2
 8005fec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10a      	bne.n	800600a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	613b      	str	r3, [r7, #16]
}
 8006006:	bf00      	nop
 8006008:	e7fe      	b.n	8006008 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	fb02 f303 	mul.w	r3, r2, r3
 8006012:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	3350      	adds	r3, #80	; 0x50
 8006018:	4618      	mov	r0, r3
 800601a:	f002 f935 	bl	8008288 <pvPortMalloc>
 800601e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d011      	beq.n	800604a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	3350      	adds	r3, #80	; 0x50
 800602e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006038:	79fa      	ldrb	r2, [r7, #7]
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	4613      	mov	r3, r2
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 f805 	bl	8006054 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800604a:	69bb      	ldr	r3, [r7, #24]
	}
 800604c:	4618      	mov	r0, r3
 800604e:	3720      	adds	r7, #32
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d103      	bne.n	8006070 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	e002      	b.n	8006076 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006082:	2101      	movs	r1, #1
 8006084:	69b8      	ldr	r0, [r7, #24]
 8006086:	f7ff fecb 	bl	8005e20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	78fa      	ldrb	r2, [r7, #3]
 800608e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800609a:	b580      	push	{r7, lr}
 800609c:	b082      	sub	sp, #8
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00e      	beq.n	80060c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80060ba:	2300      	movs	r3, #0
 80060bc:	2200      	movs	r2, #0
 80060be:	2100      	movs	r1, #0
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f837 	bl	8006134 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80060c6:	bf00      	nop
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b086      	sub	sp, #24
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	4603      	mov	r3, r0
 80060d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80060d8:	2301      	movs	r3, #1
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80060e0:	79fb      	ldrb	r3, [r7, #7]
 80060e2:	461a      	mov	r2, r3
 80060e4:	6939      	ldr	r1, [r7, #16]
 80060e6:	6978      	ldr	r0, [r7, #20]
 80060e8:	f7ff ff7a 	bl	8005fe0 <xQueueGenericCreate>
 80060ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f7ff ffd3 	bl	800609a <prvInitialiseMutex>

		return xNewQueue;
 80060f4:	68fb      	ldr	r3, [r7, #12]
	}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b088      	sub	sp, #32
 8006102:	af02      	add	r7, sp, #8
 8006104:	4603      	mov	r3, r0
 8006106:	6039      	str	r1, [r7, #0]
 8006108:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800610a:	2301      	movs	r3, #1
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	2300      	movs	r3, #0
 8006110:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006112:	79fb      	ldrb	r3, [r7, #7]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2200      	movs	r2, #0
 800611a:	6939      	ldr	r1, [r7, #16]
 800611c:	6978      	ldr	r0, [r7, #20]
 800611e:	f7ff fee7 	bl	8005ef0 <xQueueGenericCreateStatic>
 8006122:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f7ff ffb8 	bl	800609a <prvInitialiseMutex>

		return xNewQueue;
 800612a:	68fb      	ldr	r3, [r7, #12]
	}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08e      	sub	sp, #56	; 0x38
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006142:	2300      	movs	r3, #0
 8006144:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <xQueueGenericSend+0x32>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006162:	bf00      	nop
 8006164:	e7fe      	b.n	8006164 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <xQueueGenericSend+0x40>
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <xQueueGenericSend+0x44>
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <xQueueGenericSend+0x46>
 8006178:	2300      	movs	r3, #0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <xQueueGenericSend+0x60>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d103      	bne.n	80061a2 <xQueueGenericSend+0x6e>
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <xQueueGenericSend+0x72>
 80061a2:	2301      	movs	r3, #1
 80061a4:	e000      	b.n	80061a8 <xQueueGenericSend+0x74>
 80061a6:	2300      	movs	r3, #0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10a      	bne.n	80061c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	623b      	str	r3, [r7, #32]
}
 80061be:	bf00      	nop
 80061c0:	e7fe      	b.n	80061c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061c2:	f001 f9e7 	bl	8007594 <xTaskGetSchedulerState>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d102      	bne.n	80061d2 <xQueueGenericSend+0x9e>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <xQueueGenericSend+0xa2>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <xQueueGenericSend+0xa4>
 80061d6:	2300      	movs	r3, #0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10a      	bne.n	80061f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	61fb      	str	r3, [r7, #28]
}
 80061ee:	bf00      	nop
 80061f0:	e7fe      	b.n	80061f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061f2:	f001 ff27 	bl	8008044 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fe:	429a      	cmp	r2, r3
 8006200:	d302      	bcc.n	8006208 <xQueueGenericSend+0xd4>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d129      	bne.n	800625c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	68b9      	ldr	r1, [r7, #8]
 800620c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800620e:	f000 fa0b 	bl	8006628 <prvCopyDataToQueue>
 8006212:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	2b00      	cmp	r3, #0
 800621a:	d010      	beq.n	800623e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	3324      	adds	r3, #36	; 0x24
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fff5 	bl	8007210 <xTaskRemoveFromEventList>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d013      	beq.n	8006254 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800622c:	4b3f      	ldr	r3, [pc, #252]	; (800632c <xQueueGenericSend+0x1f8>)
 800622e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	e00a      	b.n	8006254 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800623e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006240:	2b00      	cmp	r3, #0
 8006242:	d007      	beq.n	8006254 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006244:	4b39      	ldr	r3, [pc, #228]	; (800632c <xQueueGenericSend+0x1f8>)
 8006246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006254:	f001 ff26 	bl	80080a4 <vPortExitCritical>
				return pdPASS;
 8006258:	2301      	movs	r3, #1
 800625a:	e063      	b.n	8006324 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d103      	bne.n	800626a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006262:	f001 ff1f 	bl	80080a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006266:	2300      	movs	r3, #0
 8006268:	e05c      	b.n	8006324 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800626a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626c:	2b00      	cmp	r3, #0
 800626e:	d106      	bne.n	800627e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006270:	f107 0314 	add.w	r3, r7, #20
 8006274:	4618      	mov	r0, r3
 8006276:	f001 f82f 	bl	80072d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800627a:	2301      	movs	r3, #1
 800627c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800627e:	f001 ff11 	bl	80080a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006282:	f000 fd9b 	bl	8006dbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006286:	f001 fedd 	bl	8008044 <vPortEnterCritical>
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006290:	b25b      	sxtb	r3, r3
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d103      	bne.n	80062a0 <xQueueGenericSend+0x16c>
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062a6:	b25b      	sxtb	r3, r3
 80062a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ac:	d103      	bne.n	80062b6 <xQueueGenericSend+0x182>
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062b6:	f001 fef5 	bl	80080a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062ba:	1d3a      	adds	r2, r7, #4
 80062bc:	f107 0314 	add.w	r3, r7, #20
 80062c0:	4611      	mov	r1, r2
 80062c2:	4618      	mov	r0, r3
 80062c4:	f001 f81e 	bl	8007304 <xTaskCheckForTimeOut>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d124      	bne.n	8006318 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062d0:	f000 faa2 	bl	8006818 <prvIsQueueFull>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d018      	beq.n	800630c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	3310      	adds	r3, #16
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	4611      	mov	r1, r2
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 ff44 	bl	8007170 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062ea:	f000 fa2d 	bl	8006748 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062ee:	f000 fd73 	bl	8006dd8 <xTaskResumeAll>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f47f af7c 	bne.w	80061f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80062fa:	4b0c      	ldr	r3, [pc, #48]	; (800632c <xQueueGenericSend+0x1f8>)
 80062fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	e772      	b.n	80061f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800630c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800630e:	f000 fa1b 	bl	8006748 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006312:	f000 fd61 	bl	8006dd8 <xTaskResumeAll>
 8006316:	e76c      	b.n	80061f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800631a:	f000 fa15 	bl	8006748 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800631e:	f000 fd5b 	bl	8006dd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006322:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006324:	4618      	mov	r0, r3
 8006326:	3738      	adds	r7, #56	; 0x38
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	e000ed04 	.word	0xe000ed04

08006330 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b090      	sub	sp, #64	; 0x40
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10a      	bne.n	800635e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800635a:	bf00      	nop
 800635c:	e7fe      	b.n	800635c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d103      	bne.n	800636c <xQueueGenericSendFromISR+0x3c>
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <xQueueGenericSendFromISR+0x40>
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <xQueueGenericSendFromISR+0x42>
 8006370:	2300      	movs	r3, #0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006388:	bf00      	nop
 800638a:	e7fe      	b.n	800638a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b02      	cmp	r3, #2
 8006390:	d103      	bne.n	800639a <xQueueGenericSendFromISR+0x6a>
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <xQueueGenericSendFromISR+0x6e>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <xQueueGenericSendFromISR+0x70>
 800639e:	2300      	movs	r3, #0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10a      	bne.n	80063ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	623b      	str	r3, [r7, #32]
}
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063ba:	f001 ff25 	bl	8008208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063be:	f3ef 8211 	mrs	r2, BASEPRI
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	61fa      	str	r2, [r7, #28]
 80063d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d302      	bcc.n	80063ec <xQueueGenericSendFromISR+0xbc>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d12f      	bne.n	800644c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006402:	f000 f911 	bl	8006628 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006406:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800640a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640e:	d112      	bne.n	8006436 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	2b00      	cmp	r3, #0
 8006416:	d016      	beq.n	8006446 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641a:	3324      	adds	r3, #36	; 0x24
 800641c:	4618      	mov	r0, r3
 800641e:	f000 fef7 	bl	8007210 <xTaskRemoveFromEventList>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00e      	beq.n	8006446 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00b      	beq.n	8006446 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	e007      	b.n	8006446 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006436:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800643a:	3301      	adds	r3, #1
 800643c:	b2db      	uxtb	r3, r3
 800643e:	b25a      	sxtb	r2, r3
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006446:	2301      	movs	r3, #1
 8006448:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800644a:	e001      	b.n	8006450 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800644c:	2300      	movs	r3, #0
 800644e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006452:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800645a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800645c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800645e:	4618      	mov	r0, r3
 8006460:	3740      	adds	r7, #64	; 0x40
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08c      	sub	sp, #48	; 0x30
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006474:	2300      	movs	r3, #0
 8006476:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10a      	bne.n	8006498 <xQueueReceive+0x30>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	623b      	str	r3, [r7, #32]
}
 8006494:	bf00      	nop
 8006496:	e7fe      	b.n	8006496 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d103      	bne.n	80064a6 <xQueueReceive+0x3e>
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <xQueueReceive+0x42>
 80064a6:	2301      	movs	r3, #1
 80064a8:	e000      	b.n	80064ac <xQueueReceive+0x44>
 80064aa:	2300      	movs	r3, #0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10a      	bne.n	80064c6 <xQueueReceive+0x5e>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	61fb      	str	r3, [r7, #28]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064c6:	f001 f865 	bl	8007594 <xTaskGetSchedulerState>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d102      	bne.n	80064d6 <xQueueReceive+0x6e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <xQueueReceive+0x72>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <xQueueReceive+0x74>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <xQueueReceive+0x8e>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	61bb      	str	r3, [r7, #24]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064f6:	f001 fda5 	bl	8008044 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	2b00      	cmp	r3, #0
 8006504:	d01f      	beq.n	8006546 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006506:	68b9      	ldr	r1, [r7, #8]
 8006508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800650a:	f000 f8f7 	bl	80066fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	1e5a      	subs	r2, r3, #1
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00f      	beq.n	800653e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	3310      	adds	r3, #16
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fe74 	bl	8007210 <xTaskRemoveFromEventList>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d007      	beq.n	800653e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800652e:	4b3d      	ldr	r3, [pc, #244]	; (8006624 <xQueueReceive+0x1bc>)
 8006530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800653e:	f001 fdb1 	bl	80080a4 <vPortExitCritical>
				return pdPASS;
 8006542:	2301      	movs	r3, #1
 8006544:	e069      	b.n	800661a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d103      	bne.n	8006554 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800654c:	f001 fdaa 	bl	80080a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006550:	2300      	movs	r3, #0
 8006552:	e062      	b.n	800661a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800655a:	f107 0310 	add.w	r3, r7, #16
 800655e:	4618      	mov	r0, r3
 8006560:	f000 feba 	bl	80072d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006564:	2301      	movs	r3, #1
 8006566:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006568:	f001 fd9c 	bl	80080a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800656c:	f000 fc26 	bl	8006dbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006570:	f001 fd68 	bl	8008044 <vPortEnterCritical>
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800657a:	b25b      	sxtb	r3, r3
 800657c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006580:	d103      	bne.n	800658a <xQueueReceive+0x122>
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006590:	b25b      	sxtb	r3, r3
 8006592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006596:	d103      	bne.n	80065a0 <xQueueReceive+0x138>
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065a0:	f001 fd80 	bl	80080a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065a4:	1d3a      	adds	r2, r7, #4
 80065a6:	f107 0310 	add.w	r3, r7, #16
 80065aa:	4611      	mov	r1, r2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 fea9 	bl	8007304 <xTaskCheckForTimeOut>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d123      	bne.n	8006600 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ba:	f000 f917 	bl	80067ec <prvIsQueueEmpty>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d017      	beq.n	80065f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	3324      	adds	r3, #36	; 0x24
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	4611      	mov	r1, r2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fdcf 	bl	8007170 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d4:	f000 f8b8 	bl	8006748 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065d8:	f000 fbfe 	bl	8006dd8 <xTaskResumeAll>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d189      	bne.n	80064f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80065e2:	4b10      	ldr	r3, [pc, #64]	; (8006624 <xQueueReceive+0x1bc>)
 80065e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	e780      	b.n	80064f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f6:	f000 f8a7 	bl	8006748 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065fa:	f000 fbed 	bl	8006dd8 <xTaskResumeAll>
 80065fe:	e77a      	b.n	80064f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006600:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006602:	f000 f8a1 	bl	8006748 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006606:	f000 fbe7 	bl	8006dd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800660a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800660c:	f000 f8ee 	bl	80067ec <prvIsQueueEmpty>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	f43f af6f 	beq.w	80064f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006618:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800661a:	4618      	mov	r0, r3
 800661c:	3730      	adds	r7, #48	; 0x30
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	e000ed04 	.word	0xe000ed04

08006628 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10d      	bne.n	8006662 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d14d      	bne.n	80066ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	4618      	mov	r0, r3
 8006654:	f000 ffbc 	bl	80075d0 <xTaskPriorityDisinherit>
 8006658:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	609a      	str	r2, [r3, #8]
 8006660:	e043      	b.n	80066ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d119      	bne.n	800669c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6858      	ldr	r0, [r3, #4]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006670:	461a      	mov	r2, r3
 8006672:	68b9      	ldr	r1, [r7, #8]
 8006674:	f002 f91d 	bl	80088b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006680:	441a      	add	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	429a      	cmp	r2, r3
 8006690:	d32b      	bcc.n	80066ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	605a      	str	r2, [r3, #4]
 800669a:	e026      	b.n	80066ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	68d8      	ldr	r0, [r3, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a4:	461a      	mov	r2, r3
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	f002 f903 	bl	80088b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	425b      	negs	r3, r3
 80066b6:	441a      	add	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d207      	bcs.n	80066d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	425b      	negs	r3, r3
 80066d2:	441a      	add	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d105      	bne.n	80066ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066f2:	697b      	ldr	r3, [r7, #20]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	2b00      	cmp	r3, #0
 800670c:	d018      	beq.n	8006740 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	441a      	add	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	429a      	cmp	r2, r3
 8006726:	d303      	bcc.n	8006730 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68d9      	ldr	r1, [r3, #12]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	461a      	mov	r2, r3
 800673a:	6838      	ldr	r0, [r7, #0]
 800673c:	f002 f8b9 	bl	80088b2 <memcpy>
	}
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006750:	f001 fc78 	bl	8008044 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800675a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800675c:	e011      	b.n	8006782 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	2b00      	cmp	r3, #0
 8006764:	d012      	beq.n	800678c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3324      	adds	r3, #36	; 0x24
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fd50 	bl	8007210 <xTaskRemoveFromEventList>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006776:	f000 fe27 	bl	80073c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	3b01      	subs	r3, #1
 800677e:	b2db      	uxtb	r3, r3
 8006780:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006786:	2b00      	cmp	r3, #0
 8006788:	dce9      	bgt.n	800675e <prvUnlockQueue+0x16>
 800678a:	e000      	b.n	800678e <prvUnlockQueue+0x46>
					break;
 800678c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	22ff      	movs	r2, #255	; 0xff
 8006792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006796:	f001 fc85 	bl	80080a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800679a:	f001 fc53 	bl	8008044 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067a6:	e011      	b.n	80067cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d012      	beq.n	80067d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3310      	adds	r3, #16
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fd2b 	bl	8007210 <xTaskRemoveFromEventList>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067c0:	f000 fe02 	bl	80073c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067c4:	7bbb      	ldrb	r3, [r7, #14]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	dce9      	bgt.n	80067a8 <prvUnlockQueue+0x60>
 80067d4:	e000      	b.n	80067d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	22ff      	movs	r2, #255	; 0xff
 80067dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067e0:	f001 fc60 	bl	80080a4 <vPortExitCritical>
}
 80067e4:	bf00      	nop
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067f4:	f001 fc26 	bl	8008044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d102      	bne.n	8006806 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006800:	2301      	movs	r3, #1
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	e001      	b.n	800680a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006806:	2300      	movs	r3, #0
 8006808:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800680a:	f001 fc4b 	bl	80080a4 <vPortExitCritical>

	return xReturn;
 800680e:	68fb      	ldr	r3, [r7, #12]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006820:	f001 fc10 	bl	8008044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682c:	429a      	cmp	r2, r3
 800682e:	d102      	bne.n	8006836 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006830:	2301      	movs	r3, #1
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	e001      	b.n	800683a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800683a:	f001 fc33 	bl	80080a4 <vPortExitCritical>

	return xReturn;
 800683e:	68fb      	ldr	r3, [r7, #12]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006852:	2300      	movs	r3, #0
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	e014      	b.n	8006882 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006858:	4a0f      	ldr	r2, [pc, #60]	; (8006898 <vQueueAddToRegistry+0x50>)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10b      	bne.n	800687c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006864:	490c      	ldr	r1, [pc, #48]	; (8006898 <vQueueAddToRegistry+0x50>)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800686e:	4a0a      	ldr	r2, [pc, #40]	; (8006898 <vQueueAddToRegistry+0x50>)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	4413      	add	r3, r2
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800687a:	e006      	b.n	800688a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3301      	adds	r3, #1
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b07      	cmp	r3, #7
 8006886:	d9e7      	bls.n	8006858 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006888:	bf00      	nop
 800688a:	bf00      	nop
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	20005dec 	.word	0x20005dec

0800689c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068ac:	f001 fbca 	bl	8008044 <vPortEnterCritical>
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068b6:	b25b      	sxtb	r3, r3
 80068b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068bc:	d103      	bne.n	80068c6 <vQueueWaitForMessageRestricted+0x2a>
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068cc:	b25b      	sxtb	r3, r3
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d2:	d103      	bne.n	80068dc <vQueueWaitForMessageRestricted+0x40>
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068dc:	f001 fbe2 	bl	80080a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	3324      	adds	r3, #36	; 0x24
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	68b9      	ldr	r1, [r7, #8]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 fc61 	bl	80071b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80068f6:	6978      	ldr	r0, [r7, #20]
 80068f8:	f7ff ff26 	bl	8006748 <prvUnlockQueue>
	}
 80068fc:	bf00      	nop
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08e      	sub	sp, #56	; 0x38
 8006908:	af04      	add	r7, sp, #16
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10a      	bne.n	800692e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	623b      	str	r3, [r7, #32]
}
 800692a:	bf00      	nop
 800692c:	e7fe      	b.n	800692c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <xTaskCreateStatic+0x46>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	61fb      	str	r3, [r7, #28]
}
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800694a:	23bc      	movs	r3, #188	; 0xbc
 800694c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2bbc      	cmp	r3, #188	; 0xbc
 8006952:	d00a      	beq.n	800696a <xTaskCreateStatic+0x66>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	61bb      	str	r3, [r7, #24]
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800696a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	2b00      	cmp	r3, #0
 8006970:	d01e      	beq.n	80069b0 <xTaskCreateStatic+0xac>
 8006972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01b      	beq.n	80069b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006980:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	2202      	movs	r2, #2
 8006986:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800698a:	2300      	movs	r3, #0
 800698c:	9303      	str	r3, [sp, #12]
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	9302      	str	r3, [sp, #8]
 8006992:	f107 0314 	add.w	r3, r7, #20
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	68b9      	ldr	r1, [r7, #8]
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 f850 	bl	8006a48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069aa:	f000 f8f3 	bl	8006b94 <prvAddNewTaskToReadyList>
 80069ae:	e001      	b.n	80069b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069b4:	697b      	ldr	r3, [r7, #20]
	}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3728      	adds	r7, #40	; 0x28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b08c      	sub	sp, #48	; 0x30
 80069c2:	af04      	add	r7, sp, #16
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	603b      	str	r3, [r7, #0]
 80069ca:	4613      	mov	r3, r2
 80069cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f001 fc58 	bl	8008288 <pvPortMalloc>
 80069d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00e      	beq.n	80069fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069e0:	20bc      	movs	r0, #188	; 0xbc
 80069e2:	f001 fc51 	bl	8008288 <pvPortMalloc>
 80069e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30
 80069f4:	e005      	b.n	8006a02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069f6:	6978      	ldr	r0, [r7, #20]
 80069f8:	f001 fd12 	bl	8008420 <vPortFree>
 80069fc:	e001      	b.n	8006a02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d017      	beq.n	8006a38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a10:	88fa      	ldrh	r2, [r7, #6]
 8006a12:	2300      	movs	r3, #0
 8006a14:	9303      	str	r3, [sp, #12]
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	9302      	str	r3, [sp, #8]
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 f80e 	bl	8006a48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a2c:	69f8      	ldr	r0, [r7, #28]
 8006a2e:	f000 f8b1 	bl	8006b94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a32:	2301      	movs	r3, #1
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	e002      	b.n	8006a3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a38:	f04f 33ff 	mov.w	r3, #4294967295
 8006a3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
	}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3720      	adds	r7, #32
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	461a      	mov	r2, r3
 8006a60:	21a5      	movs	r1, #165	; 0xa5
 8006a62:	f001 ff34 	bl	80088ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a70:	3b01      	subs	r3, #1
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	f023 0307 	bic.w	r3, r3, #7
 8006a7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	617b      	str	r3, [r7, #20]
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d01f      	beq.n	8006ae6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61fb      	str	r3, [r7, #28]
 8006aaa:	e012      	b.n	8006ad2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	7819      	ldrb	r1, [r3, #0]
 8006ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	4413      	add	r3, r2
 8006aba:	3334      	adds	r3, #52	; 0x34
 8006abc:	460a      	mov	r2, r1
 8006abe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d006      	beq.n	8006ada <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	61fb      	str	r3, [r7, #28]
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	2b0f      	cmp	r3, #15
 8006ad6:	d9e9      	bls.n	8006aac <prvInitialiseNewTask+0x64>
 8006ad8:	e000      	b.n	8006adc <prvInitialiseNewTask+0x94>
			{
				break;
 8006ada:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ae4:	e003      	b.n	8006aee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	2b37      	cmp	r3, #55	; 0x37
 8006af2:	d901      	bls.n	8006af8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006af4:	2337      	movs	r3, #55	; 0x37
 8006af6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006afc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	2200      	movs	r2, #0
 8006b08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff f8f2 	bl	8005cf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b16:	3318      	adds	r3, #24
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff f8ed 	bl	8005cf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	3354      	adds	r3, #84	; 0x54
 8006b48:	2260      	movs	r2, #96	; 0x60
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f001 febe 	bl	80088ce <memset>
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	4a0c      	ldr	r2, [pc, #48]	; (8006b88 <prvInitialiseNewTask+0x140>)
 8006b56:	659a      	str	r2, [r3, #88]	; 0x58
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	4a0c      	ldr	r2, [pc, #48]	; (8006b8c <prvInitialiseNewTask+0x144>)
 8006b5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	4a0b      	ldr	r2, [pc, #44]	; (8006b90 <prvInitialiseNewTask+0x148>)
 8006b62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	68f9      	ldr	r1, [r7, #12]
 8006b68:	69b8      	ldr	r0, [r7, #24]
 8006b6a:	f001 f941 	bl	8007df0 <pxPortInitialiseStack>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b80:	bf00      	nop
 8006b82:	3720      	adds	r7, #32
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	08009b34 	.word	0x08009b34
 8006b8c:	08009b54 	.word	0x08009b54
 8006b90:	08009b14 	.word	0x08009b14

08006b94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b9c:	f001 fa52 	bl	8008044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ba0:	4b2d      	ldr	r3, [pc, #180]	; (8006c58 <prvAddNewTaskToReadyList+0xc4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	4a2c      	ldr	r2, [pc, #176]	; (8006c58 <prvAddNewTaskToReadyList+0xc4>)
 8006ba8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006baa:	4b2c      	ldr	r3, [pc, #176]	; (8006c5c <prvAddNewTaskToReadyList+0xc8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d109      	bne.n	8006bc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bb2:	4a2a      	ldr	r2, [pc, #168]	; (8006c5c <prvAddNewTaskToReadyList+0xc8>)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bb8:	4b27      	ldr	r3, [pc, #156]	; (8006c58 <prvAddNewTaskToReadyList+0xc4>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d110      	bne.n	8006be2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bc0:	f000 fc26 	bl	8007410 <prvInitialiseTaskLists>
 8006bc4:	e00d      	b.n	8006be2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bc6:	4b26      	ldr	r3, [pc, #152]	; (8006c60 <prvAddNewTaskToReadyList+0xcc>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d109      	bne.n	8006be2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bce:	4b23      	ldr	r3, [pc, #140]	; (8006c5c <prvAddNewTaskToReadyList+0xc8>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d802      	bhi.n	8006be2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bdc:	4a1f      	ldr	r2, [pc, #124]	; (8006c5c <prvAddNewTaskToReadyList+0xc8>)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006be2:	4b20      	ldr	r3, [pc, #128]	; (8006c64 <prvAddNewTaskToReadyList+0xd0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3301      	adds	r3, #1
 8006be8:	4a1e      	ldr	r2, [pc, #120]	; (8006c64 <prvAddNewTaskToReadyList+0xd0>)
 8006bea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006bec:	4b1d      	ldr	r3, [pc, #116]	; (8006c64 <prvAddNewTaskToReadyList+0xd0>)
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf8:	4b1b      	ldr	r3, [pc, #108]	; (8006c68 <prvAddNewTaskToReadyList+0xd4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d903      	bls.n	8006c08 <prvAddNewTaskToReadyList+0x74>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c04:	4a18      	ldr	r2, [pc, #96]	; (8006c68 <prvAddNewTaskToReadyList+0xd4>)
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4a15      	ldr	r2, [pc, #84]	; (8006c6c <prvAddNewTaskToReadyList+0xd8>)
 8006c16:	441a      	add	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	f7ff f877 	bl	8005d12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c24:	f001 fa3e 	bl	80080a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c28:	4b0d      	ldr	r3, [pc, #52]	; (8006c60 <prvAddNewTaskToReadyList+0xcc>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00e      	beq.n	8006c4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c30:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <prvAddNewTaskToReadyList+0xc8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d207      	bcs.n	8006c4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c3e:	4b0c      	ldr	r3, [pc, #48]	; (8006c70 <prvAddNewTaskToReadyList+0xdc>)
 8006c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c4e:	bf00      	nop
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20000e34 	.word	0x20000e34
 8006c5c:	20000960 	.word	0x20000960
 8006c60:	20000e40 	.word	0x20000e40
 8006c64:	20000e50 	.word	0x20000e50
 8006c68:	20000e3c 	.word	0x20000e3c
 8006c6c:	20000964 	.word	0x20000964
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d017      	beq.n	8006cb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c86:	4b13      	ldr	r3, [pc, #76]	; (8006cd4 <vTaskDelay+0x60>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <vTaskDelay+0x30>
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	60bb      	str	r3, [r7, #8]
}
 8006ca0:	bf00      	nop
 8006ca2:	e7fe      	b.n	8006ca2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ca4:	f000 f88a 	bl	8006dbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ca8:	2100      	movs	r1, #0
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fcfe 	bl	80076ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006cb0:	f000 f892 	bl	8006dd8 <xTaskResumeAll>
 8006cb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d107      	bne.n	8006ccc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006cbc:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <vTaskDelay+0x64>)
 8006cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ccc:	bf00      	nop
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20000e5c 	.word	0x20000e5c
 8006cd8:	e000ed04 	.word	0xe000ed04

08006cdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08a      	sub	sp, #40	; 0x28
 8006ce0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cea:	463a      	mov	r2, r7
 8006cec:	1d39      	adds	r1, r7, #4
 8006cee:	f107 0308 	add.w	r3, r7, #8
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe ffac 	bl	8005c50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	9202      	str	r2, [sp, #8]
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	2300      	movs	r3, #0
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	2300      	movs	r3, #0
 8006d08:	460a      	mov	r2, r1
 8006d0a:	4924      	ldr	r1, [pc, #144]	; (8006d9c <vTaskStartScheduler+0xc0>)
 8006d0c:	4824      	ldr	r0, [pc, #144]	; (8006da0 <vTaskStartScheduler+0xc4>)
 8006d0e:	f7ff fdf9 	bl	8006904 <xTaskCreateStatic>
 8006d12:	4603      	mov	r3, r0
 8006d14:	4a23      	ldr	r2, [pc, #140]	; (8006da4 <vTaskStartScheduler+0xc8>)
 8006d16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d18:	4b22      	ldr	r3, [pc, #136]	; (8006da4 <vTaskStartScheduler+0xc8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d20:	2301      	movs	r3, #1
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	e001      	b.n	8006d2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d102      	bne.n	8006d36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d30:	f000 fd10 	bl	8007754 <xTimerCreateTimerTask>
 8006d34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d11b      	bne.n	8006d74 <vTaskStartScheduler+0x98>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	613b      	str	r3, [r7, #16]
}
 8006d4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d50:	4b15      	ldr	r3, [pc, #84]	; (8006da8 <vTaskStartScheduler+0xcc>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3354      	adds	r3, #84	; 0x54
 8006d56:	4a15      	ldr	r2, [pc, #84]	; (8006dac <vTaskStartScheduler+0xd0>)
 8006d58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d5a:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <vTaskStartScheduler+0xd4>)
 8006d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d62:	4b14      	ldr	r3, [pc, #80]	; (8006db4 <vTaskStartScheduler+0xd8>)
 8006d64:	2201      	movs	r2, #1
 8006d66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d68:	4b13      	ldr	r3, [pc, #76]	; (8006db8 <vTaskStartScheduler+0xdc>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d6e:	f001 f8c7 	bl	8007f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d72:	e00e      	b.n	8006d92 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7a:	d10a      	bne.n	8006d92 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	60fb      	str	r3, [r7, #12]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <vTaskStartScheduler+0xb4>
}
 8006d92:	bf00      	nop
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	08009a5c 	.word	0x08009a5c
 8006da0:	080073e1 	.word	0x080073e1
 8006da4:	20000e58 	.word	0x20000e58
 8006da8:	20000960 	.word	0x20000960
 8006dac:	20000038 	.word	0x20000038
 8006db0:	20000e54 	.word	0x20000e54
 8006db4:	20000e40 	.word	0x20000e40
 8006db8:	20000e38 	.word	0x20000e38

08006dbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006dc0:	4b04      	ldr	r3, [pc, #16]	; (8006dd4 <vTaskSuspendAll+0x18>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	4a03      	ldr	r2, [pc, #12]	; (8006dd4 <vTaskSuspendAll+0x18>)
 8006dc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006dca:	bf00      	nop
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	20000e5c 	.word	0x20000e5c

08006dd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006de6:	4b42      	ldr	r3, [pc, #264]	; (8006ef0 <xTaskResumeAll+0x118>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <xTaskResumeAll+0x2c>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	603b      	str	r3, [r7, #0]
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e04:	f001 f91e 	bl	8008044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e08:	4b39      	ldr	r3, [pc, #228]	; (8006ef0 <xTaskResumeAll+0x118>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	4a38      	ldr	r2, [pc, #224]	; (8006ef0 <xTaskResumeAll+0x118>)
 8006e10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e12:	4b37      	ldr	r3, [pc, #220]	; (8006ef0 <xTaskResumeAll+0x118>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d162      	bne.n	8006ee0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e1a:	4b36      	ldr	r3, [pc, #216]	; (8006ef4 <xTaskResumeAll+0x11c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d05e      	beq.n	8006ee0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e22:	e02f      	b.n	8006e84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e24:	4b34      	ldr	r3, [pc, #208]	; (8006ef8 <xTaskResumeAll+0x120>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3318      	adds	r3, #24
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fe ffcb 	bl	8005dcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe ffc6 	bl	8005dcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e44:	4b2d      	ldr	r3, [pc, #180]	; (8006efc <xTaskResumeAll+0x124>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d903      	bls.n	8006e54 <xTaskResumeAll+0x7c>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	4a2a      	ldr	r2, [pc, #168]	; (8006efc <xTaskResumeAll+0x124>)
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4a27      	ldr	r2, [pc, #156]	; (8006f00 <xTaskResumeAll+0x128>)
 8006e62:	441a      	add	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	f7fe ff51 	bl	8005d12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e74:	4b23      	ldr	r3, [pc, #140]	; (8006f04 <xTaskResumeAll+0x12c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d302      	bcc.n	8006e84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006e7e:	4b22      	ldr	r3, [pc, #136]	; (8006f08 <xTaskResumeAll+0x130>)
 8006e80:	2201      	movs	r2, #1
 8006e82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e84:	4b1c      	ldr	r3, [pc, #112]	; (8006ef8 <xTaskResumeAll+0x120>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1cb      	bne.n	8006e24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e92:	f000 fb5f 	bl	8007554 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e96:	4b1d      	ldr	r3, [pc, #116]	; (8006f0c <xTaskResumeAll+0x134>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d010      	beq.n	8006ec4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ea2:	f000 f847 	bl	8006f34 <xTaskIncrementTick>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006eac:	4b16      	ldr	r3, [pc, #88]	; (8006f08 <xTaskResumeAll+0x130>)
 8006eae:	2201      	movs	r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1f1      	bne.n	8006ea2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006ebe:	4b13      	ldr	r3, [pc, #76]	; (8006f0c <xTaskResumeAll+0x134>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ec4:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <xTaskResumeAll+0x130>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d009      	beq.n	8006ee0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ed0:	4b0f      	ldr	r3, [pc, #60]	; (8006f10 <xTaskResumeAll+0x138>)
 8006ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ee0:	f001 f8e0 	bl	80080a4 <vPortExitCritical>

	return xAlreadyYielded;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000e5c 	.word	0x20000e5c
 8006ef4:	20000e34 	.word	0x20000e34
 8006ef8:	20000df4 	.word	0x20000df4
 8006efc:	20000e3c 	.word	0x20000e3c
 8006f00:	20000964 	.word	0x20000964
 8006f04:	20000960 	.word	0x20000960
 8006f08:	20000e48 	.word	0x20000e48
 8006f0c:	20000e44 	.word	0x20000e44
 8006f10:	e000ed04 	.word	0xe000ed04

08006f14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f1a:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <xTaskGetTickCount+0x1c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f20:	687b      	ldr	r3, [r7, #4]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	20000e38 	.word	0x20000e38

08006f34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f3e:	4b4f      	ldr	r3, [pc, #316]	; (800707c <xTaskIncrementTick+0x148>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f040 808f 	bne.w	8007066 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f48:	4b4d      	ldr	r3, [pc, #308]	; (8007080 <xTaskIncrementTick+0x14c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f50:	4a4b      	ldr	r2, [pc, #300]	; (8007080 <xTaskIncrementTick+0x14c>)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d120      	bne.n	8006f9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f5c:	4b49      	ldr	r3, [pc, #292]	; (8007084 <xTaskIncrementTick+0x150>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00a      	beq.n	8006f7c <xTaskIncrementTick+0x48>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	603b      	str	r3, [r7, #0]
}
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <xTaskIncrementTick+0x46>
 8006f7c:	4b41      	ldr	r3, [pc, #260]	; (8007084 <xTaskIncrementTick+0x150>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	4b41      	ldr	r3, [pc, #260]	; (8007088 <xTaskIncrementTick+0x154>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a3f      	ldr	r2, [pc, #252]	; (8007084 <xTaskIncrementTick+0x150>)
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	4a3f      	ldr	r2, [pc, #252]	; (8007088 <xTaskIncrementTick+0x154>)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	4b3e      	ldr	r3, [pc, #248]	; (800708c <xTaskIncrementTick+0x158>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3301      	adds	r3, #1
 8006f96:	4a3d      	ldr	r2, [pc, #244]	; (800708c <xTaskIncrementTick+0x158>)
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	f000 fadb 	bl	8007554 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f9e:	4b3c      	ldr	r3, [pc, #240]	; (8007090 <xTaskIncrementTick+0x15c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d349      	bcc.n	800703c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fa8:	4b36      	ldr	r3, [pc, #216]	; (8007084 <xTaskIncrementTick+0x150>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d104      	bne.n	8006fbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fb2:	4b37      	ldr	r3, [pc, #220]	; (8007090 <xTaskIncrementTick+0x15c>)
 8006fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb8:	601a      	str	r2, [r3, #0]
					break;
 8006fba:	e03f      	b.n	800703c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fbc:	4b31      	ldr	r3, [pc, #196]	; (8007084 <xTaskIncrementTick+0x150>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d203      	bcs.n	8006fdc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fd4:	4a2e      	ldr	r2, [pc, #184]	; (8007090 <xTaskIncrementTick+0x15c>)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006fda:	e02f      	b.n	800703c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fe fef3 	bl	8005dcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d004      	beq.n	8006ff8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	3318      	adds	r3, #24
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe feea 	bl	8005dcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffc:	4b25      	ldr	r3, [pc, #148]	; (8007094 <xTaskIncrementTick+0x160>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d903      	bls.n	800700c <xTaskIncrementTick+0xd8>
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	4a22      	ldr	r2, [pc, #136]	; (8007094 <xTaskIncrementTick+0x160>)
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007010:	4613      	mov	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4a1f      	ldr	r2, [pc, #124]	; (8007098 <xTaskIncrementTick+0x164>)
 800701a:	441a      	add	r2, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	3304      	adds	r3, #4
 8007020:	4619      	mov	r1, r3
 8007022:	4610      	mov	r0, r2
 8007024:	f7fe fe75 	bl	8005d12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702c:	4b1b      	ldr	r3, [pc, #108]	; (800709c <xTaskIncrementTick+0x168>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007032:	429a      	cmp	r2, r3
 8007034:	d3b8      	bcc.n	8006fa8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007036:	2301      	movs	r3, #1
 8007038:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800703a:	e7b5      	b.n	8006fa8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800703c:	4b17      	ldr	r3, [pc, #92]	; (800709c <xTaskIncrementTick+0x168>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007042:	4915      	ldr	r1, [pc, #84]	; (8007098 <xTaskIncrementTick+0x164>)
 8007044:	4613      	mov	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d901      	bls.n	8007058 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007054:	2301      	movs	r3, #1
 8007056:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007058:	4b11      	ldr	r3, [pc, #68]	; (80070a0 <xTaskIncrementTick+0x16c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d007      	beq.n	8007070 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007060:	2301      	movs	r3, #1
 8007062:	617b      	str	r3, [r7, #20]
 8007064:	e004      	b.n	8007070 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007066:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <xTaskIncrementTick+0x170>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3301      	adds	r3, #1
 800706c:	4a0d      	ldr	r2, [pc, #52]	; (80070a4 <xTaskIncrementTick+0x170>)
 800706e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007070:	697b      	ldr	r3, [r7, #20]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20000e5c 	.word	0x20000e5c
 8007080:	20000e38 	.word	0x20000e38
 8007084:	20000dec 	.word	0x20000dec
 8007088:	20000df0 	.word	0x20000df0
 800708c:	20000e4c 	.word	0x20000e4c
 8007090:	20000e54 	.word	0x20000e54
 8007094:	20000e3c 	.word	0x20000e3c
 8007098:	20000964 	.word	0x20000964
 800709c:	20000960 	.word	0x20000960
 80070a0:	20000e48 	.word	0x20000e48
 80070a4:	20000e44 	.word	0x20000e44

080070a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070ae:	4b2a      	ldr	r3, [pc, #168]	; (8007158 <vTaskSwitchContext+0xb0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070b6:	4b29      	ldr	r3, [pc, #164]	; (800715c <vTaskSwitchContext+0xb4>)
 80070b8:	2201      	movs	r2, #1
 80070ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070bc:	e046      	b.n	800714c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80070be:	4b27      	ldr	r3, [pc, #156]	; (800715c <vTaskSwitchContext+0xb4>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070c4:	4b26      	ldr	r3, [pc, #152]	; (8007160 <vTaskSwitchContext+0xb8>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	e010      	b.n	80070ee <vTaskSwitchContext+0x46>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	607b      	str	r3, [r7, #4]
}
 80070e4:	bf00      	nop
 80070e6:	e7fe      	b.n	80070e6 <vTaskSwitchContext+0x3e>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	491d      	ldr	r1, [pc, #116]	; (8007164 <vTaskSwitchContext+0xbc>)
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	4613      	mov	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	440b      	add	r3, r1
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0e4      	beq.n	80070cc <vTaskSwitchContext+0x24>
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4a15      	ldr	r2, [pc, #84]	; (8007164 <vTaskSwitchContext+0xbc>)
 800710e:	4413      	add	r3, r2
 8007110:	60bb      	str	r3, [r7, #8]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	605a      	str	r2, [r3, #4]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	3308      	adds	r3, #8
 8007124:	429a      	cmp	r2, r3
 8007126:	d104      	bne.n	8007132 <vTaskSwitchContext+0x8a>
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	4a0b      	ldr	r2, [pc, #44]	; (8007168 <vTaskSwitchContext+0xc0>)
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	4a08      	ldr	r2, [pc, #32]	; (8007160 <vTaskSwitchContext+0xb8>)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007142:	4b09      	ldr	r3, [pc, #36]	; (8007168 <vTaskSwitchContext+0xc0>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3354      	adds	r3, #84	; 0x54
 8007148:	4a08      	ldr	r2, [pc, #32]	; (800716c <vTaskSwitchContext+0xc4>)
 800714a:	6013      	str	r3, [r2, #0]
}
 800714c:	bf00      	nop
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	20000e5c 	.word	0x20000e5c
 800715c:	20000e48 	.word	0x20000e48
 8007160:	20000e3c 	.word	0x20000e3c
 8007164:	20000964 	.word	0x20000964
 8007168:	20000960 	.word	0x20000960
 800716c:	20000038 	.word	0x20000038

08007170 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	60fb      	str	r3, [r7, #12]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007196:	4b07      	ldr	r3, [pc, #28]	; (80071b4 <vTaskPlaceOnEventList+0x44>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3318      	adds	r3, #24
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7fe fddb 	bl	8005d5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071a4:	2101      	movs	r1, #1
 80071a6:	6838      	ldr	r0, [r7, #0]
 80071a8:	f000 fa80 	bl	80076ac <prvAddCurrentTaskToDelayedList>
}
 80071ac:	bf00      	nop
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20000960 	.word	0x20000960

080071b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	617b      	str	r3, [r7, #20]
}
 80071dc:	bf00      	nop
 80071de:	e7fe      	b.n	80071de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071e0:	4b0a      	ldr	r3, [pc, #40]	; (800720c <vTaskPlaceOnEventListRestricted+0x54>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3318      	adds	r3, #24
 80071e6:	4619      	mov	r1, r3
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f7fe fd92 	bl	8005d12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d002      	beq.n	80071fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80071f4:	f04f 33ff 	mov.w	r3, #4294967295
 80071f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	68b8      	ldr	r0, [r7, #8]
 80071fe:	f000 fa55 	bl	80076ac <prvAddCurrentTaskToDelayedList>
	}
 8007202:	bf00      	nop
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20000960 	.word	0x20000960

08007210 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10a      	bne.n	800723c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	60fb      	str	r3, [r7, #12]
}
 8007238:	bf00      	nop
 800723a:	e7fe      	b.n	800723a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	3318      	adds	r3, #24
 8007240:	4618      	mov	r0, r3
 8007242:	f7fe fdc3 	bl	8005dcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007246:	4b1e      	ldr	r3, [pc, #120]	; (80072c0 <xTaskRemoveFromEventList+0xb0>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d11d      	bne.n	800728a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	3304      	adds	r3, #4
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe fdba 	bl	8005dcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725c:	4b19      	ldr	r3, [pc, #100]	; (80072c4 <xTaskRemoveFromEventList+0xb4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	429a      	cmp	r2, r3
 8007262:	d903      	bls.n	800726c <xTaskRemoveFromEventList+0x5c>
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007268:	4a16      	ldr	r2, [pc, #88]	; (80072c4 <xTaskRemoveFromEventList+0xb4>)
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007270:	4613      	mov	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4a13      	ldr	r2, [pc, #76]	; (80072c8 <xTaskRemoveFromEventList+0xb8>)
 800727a:	441a      	add	r2, r3
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	3304      	adds	r3, #4
 8007280:	4619      	mov	r1, r3
 8007282:	4610      	mov	r0, r2
 8007284:	f7fe fd45 	bl	8005d12 <vListInsertEnd>
 8007288:	e005      	b.n	8007296 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	3318      	adds	r3, #24
 800728e:	4619      	mov	r1, r3
 8007290:	480e      	ldr	r0, [pc, #56]	; (80072cc <xTaskRemoveFromEventList+0xbc>)
 8007292:	f7fe fd3e 	bl	8005d12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800729a:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <xTaskRemoveFromEventList+0xc0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d905      	bls.n	80072b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072a4:	2301      	movs	r3, #1
 80072a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072a8:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <xTaskRemoveFromEventList+0xc4>)
 80072aa:	2201      	movs	r2, #1
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	e001      	b.n	80072b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80072b0:	2300      	movs	r3, #0
 80072b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072b4:	697b      	ldr	r3, [r7, #20]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	20000e5c 	.word	0x20000e5c
 80072c4:	20000e3c 	.word	0x20000e3c
 80072c8:	20000964 	.word	0x20000964
 80072cc:	20000df4 	.word	0x20000df4
 80072d0:	20000960 	.word	0x20000960
 80072d4:	20000e48 	.word	0x20000e48

080072d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072e0:	4b06      	ldr	r3, [pc, #24]	; (80072fc <vTaskInternalSetTimeOutState+0x24>)
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072e8:	4b05      	ldr	r3, [pc, #20]	; (8007300 <vTaskInternalSetTimeOutState+0x28>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	605a      	str	r2, [r3, #4]
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	20000e4c 	.word	0x20000e4c
 8007300:	20000e38 	.word	0x20000e38

08007304 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b088      	sub	sp, #32
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10a      	bne.n	800732a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	613b      	str	r3, [r7, #16]
}
 8007326:	bf00      	nop
 8007328:	e7fe      	b.n	8007328 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	60fb      	str	r3, [r7, #12]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007346:	f000 fe7d 	bl	8008044 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800734a:	4b1d      	ldr	r3, [pc, #116]	; (80073c0 <xTaskCheckForTimeOut+0xbc>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007362:	d102      	bne.n	800736a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007364:	2300      	movs	r3, #0
 8007366:	61fb      	str	r3, [r7, #28]
 8007368:	e023      	b.n	80073b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	4b15      	ldr	r3, [pc, #84]	; (80073c4 <xTaskCheckForTimeOut+0xc0>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	429a      	cmp	r2, r3
 8007374:	d007      	beq.n	8007386 <xTaskCheckForTimeOut+0x82>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	429a      	cmp	r2, r3
 800737e:	d302      	bcc.n	8007386 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007380:	2301      	movs	r3, #1
 8007382:	61fb      	str	r3, [r7, #28]
 8007384:	e015      	b.n	80073b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	429a      	cmp	r2, r3
 800738e:	d20b      	bcs.n	80073a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	1ad2      	subs	r2, r2, r3
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7ff ff9b 	bl	80072d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073a2:	2300      	movs	r3, #0
 80073a4:	61fb      	str	r3, [r7, #28]
 80073a6:	e004      	b.n	80073b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2200      	movs	r2, #0
 80073ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073ae:	2301      	movs	r3, #1
 80073b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073b2:	f000 fe77 	bl	80080a4 <vPortExitCritical>

	return xReturn;
 80073b6:	69fb      	ldr	r3, [r7, #28]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3720      	adds	r7, #32
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	20000e38 	.word	0x20000e38
 80073c4:	20000e4c 	.word	0x20000e4c

080073c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073cc:	4b03      	ldr	r3, [pc, #12]	; (80073dc <vTaskMissedYield+0x14>)
 80073ce:	2201      	movs	r2, #1
 80073d0:	601a      	str	r2, [r3, #0]
}
 80073d2:	bf00      	nop
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	20000e48 	.word	0x20000e48

080073e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073e8:	f000 f852 	bl	8007490 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073ec:	4b06      	ldr	r3, [pc, #24]	; (8007408 <prvIdleTask+0x28>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d9f9      	bls.n	80073e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80073f4:	4b05      	ldr	r3, [pc, #20]	; (800740c <prvIdleTask+0x2c>)
 80073f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007404:	e7f0      	b.n	80073e8 <prvIdleTask+0x8>
 8007406:	bf00      	nop
 8007408:	20000964 	.word	0x20000964
 800740c:	e000ed04 	.word	0xe000ed04

08007410 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007416:	2300      	movs	r3, #0
 8007418:	607b      	str	r3, [r7, #4]
 800741a:	e00c      	b.n	8007436 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4a12      	ldr	r2, [pc, #72]	; (8007470 <prvInitialiseTaskLists+0x60>)
 8007428:	4413      	add	r3, r2
 800742a:	4618      	mov	r0, r3
 800742c:	f7fe fc44 	bl	8005cb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3301      	adds	r3, #1
 8007434:	607b      	str	r3, [r7, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b37      	cmp	r3, #55	; 0x37
 800743a:	d9ef      	bls.n	800741c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800743c:	480d      	ldr	r0, [pc, #52]	; (8007474 <prvInitialiseTaskLists+0x64>)
 800743e:	f7fe fc3b 	bl	8005cb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007442:	480d      	ldr	r0, [pc, #52]	; (8007478 <prvInitialiseTaskLists+0x68>)
 8007444:	f7fe fc38 	bl	8005cb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007448:	480c      	ldr	r0, [pc, #48]	; (800747c <prvInitialiseTaskLists+0x6c>)
 800744a:	f7fe fc35 	bl	8005cb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800744e:	480c      	ldr	r0, [pc, #48]	; (8007480 <prvInitialiseTaskLists+0x70>)
 8007450:	f7fe fc32 	bl	8005cb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007454:	480b      	ldr	r0, [pc, #44]	; (8007484 <prvInitialiseTaskLists+0x74>)
 8007456:	f7fe fc2f 	bl	8005cb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800745a:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <prvInitialiseTaskLists+0x78>)
 800745c:	4a05      	ldr	r2, [pc, #20]	; (8007474 <prvInitialiseTaskLists+0x64>)
 800745e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007460:	4b0a      	ldr	r3, [pc, #40]	; (800748c <prvInitialiseTaskLists+0x7c>)
 8007462:	4a05      	ldr	r2, [pc, #20]	; (8007478 <prvInitialiseTaskLists+0x68>)
 8007464:	601a      	str	r2, [r3, #0]
}
 8007466:	bf00      	nop
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	20000964 	.word	0x20000964
 8007474:	20000dc4 	.word	0x20000dc4
 8007478:	20000dd8 	.word	0x20000dd8
 800747c:	20000df4 	.word	0x20000df4
 8007480:	20000e08 	.word	0x20000e08
 8007484:	20000e20 	.word	0x20000e20
 8007488:	20000dec 	.word	0x20000dec
 800748c:	20000df0 	.word	0x20000df0

08007490 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007496:	e019      	b.n	80074cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007498:	f000 fdd4 	bl	8008044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800749c:	4b10      	ldr	r3, [pc, #64]	; (80074e0 <prvCheckTasksWaitingTermination+0x50>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3304      	adds	r3, #4
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fe fc8f 	bl	8005dcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074ae:	4b0d      	ldr	r3, [pc, #52]	; (80074e4 <prvCheckTasksWaitingTermination+0x54>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3b01      	subs	r3, #1
 80074b4:	4a0b      	ldr	r2, [pc, #44]	; (80074e4 <prvCheckTasksWaitingTermination+0x54>)
 80074b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074b8:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <prvCheckTasksWaitingTermination+0x58>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3b01      	subs	r3, #1
 80074be:	4a0a      	ldr	r2, [pc, #40]	; (80074e8 <prvCheckTasksWaitingTermination+0x58>)
 80074c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074c2:	f000 fdef 	bl	80080a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f810 	bl	80074ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074cc:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <prvCheckTasksWaitingTermination+0x58>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e1      	bne.n	8007498 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	20000e08 	.word	0x20000e08
 80074e4:	20000e34 	.word	0x20000e34
 80074e8:	20000e1c 	.word	0x20000e1c

080074ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3354      	adds	r3, #84	; 0x54
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 fb0b 	bl	8008b14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007504:	2b00      	cmp	r3, #0
 8007506:	d108      	bne.n	800751a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	4618      	mov	r0, r3
 800750e:	f000 ff87 	bl	8008420 <vPortFree>
				vPortFree( pxTCB );
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 ff84 	bl	8008420 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007518:	e018      	b.n	800754c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007520:	2b01      	cmp	r3, #1
 8007522:	d103      	bne.n	800752c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 ff7b 	bl	8008420 <vPortFree>
	}
 800752a:	e00f      	b.n	800754c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007532:	2b02      	cmp	r3, #2
 8007534:	d00a      	beq.n	800754c <prvDeleteTCB+0x60>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	60fb      	str	r3, [r7, #12]
}
 8007548:	bf00      	nop
 800754a:	e7fe      	b.n	800754a <prvDeleteTCB+0x5e>
	}
 800754c:	bf00      	nop
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800755a:	4b0c      	ldr	r3, [pc, #48]	; (800758c <prvResetNextTaskUnblockTime+0x38>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d104      	bne.n	800756e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007564:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <prvResetNextTaskUnblockTime+0x3c>)
 8007566:	f04f 32ff 	mov.w	r2, #4294967295
 800756a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800756c:	e008      	b.n	8007580 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800756e:	4b07      	ldr	r3, [pc, #28]	; (800758c <prvResetNextTaskUnblockTime+0x38>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	4a04      	ldr	r2, [pc, #16]	; (8007590 <prvResetNextTaskUnblockTime+0x3c>)
 800757e:	6013      	str	r3, [r2, #0]
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	20000dec 	.word	0x20000dec
 8007590:	20000e54 	.word	0x20000e54

08007594 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800759a:	4b0b      	ldr	r3, [pc, #44]	; (80075c8 <xTaskGetSchedulerState+0x34>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d102      	bne.n	80075a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075a2:	2301      	movs	r3, #1
 80075a4:	607b      	str	r3, [r7, #4]
 80075a6:	e008      	b.n	80075ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075a8:	4b08      	ldr	r3, [pc, #32]	; (80075cc <xTaskGetSchedulerState+0x38>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d102      	bne.n	80075b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075b0:	2302      	movs	r3, #2
 80075b2:	607b      	str	r3, [r7, #4]
 80075b4:	e001      	b.n	80075ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075b6:	2300      	movs	r3, #0
 80075b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075ba:	687b      	ldr	r3, [r7, #4]
	}
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	20000e40 	.word	0x20000e40
 80075cc:	20000e5c 	.word	0x20000e5c

080075d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d056      	beq.n	8007694 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075e6:	4b2e      	ldr	r3, [pc, #184]	; (80076a0 <xTaskPriorityDisinherit+0xd0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d00a      	beq.n	8007606 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	60fb      	str	r3, [r7, #12]
}
 8007602:	bf00      	nop
 8007604:	e7fe      	b.n	8007604 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10a      	bne.n	8007624 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	60bb      	str	r3, [r7, #8]
}
 8007620:	bf00      	nop
 8007622:	e7fe      	b.n	8007622 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007628:	1e5a      	subs	r2, r3, #1
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007636:	429a      	cmp	r2, r3
 8007638:	d02c      	beq.n	8007694 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800763e:	2b00      	cmp	r3, #0
 8007640:	d128      	bne.n	8007694 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	3304      	adds	r3, #4
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe fbc0 	bl	8005dcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007664:	4b0f      	ldr	r3, [pc, #60]	; (80076a4 <xTaskPriorityDisinherit+0xd4>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	429a      	cmp	r2, r3
 800766a:	d903      	bls.n	8007674 <xTaskPriorityDisinherit+0xa4>
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007670:	4a0c      	ldr	r2, [pc, #48]	; (80076a4 <xTaskPriorityDisinherit+0xd4>)
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007678:	4613      	mov	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4a09      	ldr	r2, [pc, #36]	; (80076a8 <xTaskPriorityDisinherit+0xd8>)
 8007682:	441a      	add	r2, r3
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	3304      	adds	r3, #4
 8007688:	4619      	mov	r1, r3
 800768a:	4610      	mov	r0, r2
 800768c:	f7fe fb41 	bl	8005d12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007690:	2301      	movs	r3, #1
 8007692:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007694:	697b      	ldr	r3, [r7, #20]
	}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	20000960 	.word	0x20000960
 80076a4:	20000e3c 	.word	0x20000e3c
 80076a8:	20000964 	.word	0x20000964

080076ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076b6:	4b21      	ldr	r3, [pc, #132]	; (800773c <prvAddCurrentTaskToDelayedList+0x90>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076bc:	4b20      	ldr	r3, [pc, #128]	; (8007740 <prvAddCurrentTaskToDelayedList+0x94>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3304      	adds	r3, #4
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe fb82 	bl	8005dcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ce:	d10a      	bne.n	80076e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d007      	beq.n	80076e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076d6:	4b1a      	ldr	r3, [pc, #104]	; (8007740 <prvAddCurrentTaskToDelayedList+0x94>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3304      	adds	r3, #4
 80076dc:	4619      	mov	r1, r3
 80076de:	4819      	ldr	r0, [pc, #100]	; (8007744 <prvAddCurrentTaskToDelayedList+0x98>)
 80076e0:	f7fe fb17 	bl	8005d12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076e4:	e026      	b.n	8007734 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4413      	add	r3, r2
 80076ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076ee:	4b14      	ldr	r3, [pc, #80]	; (8007740 <prvAddCurrentTaskToDelayedList+0x94>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d209      	bcs.n	8007712 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076fe:	4b12      	ldr	r3, [pc, #72]	; (8007748 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <prvAddCurrentTaskToDelayedList+0x94>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3304      	adds	r3, #4
 8007708:	4619      	mov	r1, r3
 800770a:	4610      	mov	r0, r2
 800770c:	f7fe fb25 	bl	8005d5a <vListInsert>
}
 8007710:	e010      	b.n	8007734 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007712:	4b0e      	ldr	r3, [pc, #56]	; (800774c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <prvAddCurrentTaskToDelayedList+0x94>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3304      	adds	r3, #4
 800771c:	4619      	mov	r1, r3
 800771e:	4610      	mov	r0, r2
 8007720:	f7fe fb1b 	bl	8005d5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007724:	4b0a      	ldr	r3, [pc, #40]	; (8007750 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	429a      	cmp	r2, r3
 800772c:	d202      	bcs.n	8007734 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800772e:	4a08      	ldr	r2, [pc, #32]	; (8007750 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	6013      	str	r3, [r2, #0]
}
 8007734:	bf00      	nop
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	20000e38 	.word	0x20000e38
 8007740:	20000960 	.word	0x20000960
 8007744:	20000e20 	.word	0x20000e20
 8007748:	20000df0 	.word	0x20000df0
 800774c:	20000dec 	.word	0x20000dec
 8007750:	20000e54 	.word	0x20000e54

08007754 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08a      	sub	sp, #40	; 0x28
 8007758:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800775a:	2300      	movs	r3, #0
 800775c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800775e:	f000 fb07 	bl	8007d70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007762:	4b1c      	ldr	r3, [pc, #112]	; (80077d4 <xTimerCreateTimerTask+0x80>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d021      	beq.n	80077ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800776e:	2300      	movs	r3, #0
 8007770:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007772:	1d3a      	adds	r2, r7, #4
 8007774:	f107 0108 	add.w	r1, r7, #8
 8007778:	f107 030c 	add.w	r3, r7, #12
 800777c:	4618      	mov	r0, r3
 800777e:	f7fe fa81 	bl	8005c84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	9202      	str	r2, [sp, #8]
 800778a:	9301      	str	r3, [sp, #4]
 800778c:	2302      	movs	r3, #2
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	2300      	movs	r3, #0
 8007792:	460a      	mov	r2, r1
 8007794:	4910      	ldr	r1, [pc, #64]	; (80077d8 <xTimerCreateTimerTask+0x84>)
 8007796:	4811      	ldr	r0, [pc, #68]	; (80077dc <xTimerCreateTimerTask+0x88>)
 8007798:	f7ff f8b4 	bl	8006904 <xTaskCreateStatic>
 800779c:	4603      	mov	r3, r0
 800779e:	4a10      	ldr	r2, [pc, #64]	; (80077e0 <xTimerCreateTimerTask+0x8c>)
 80077a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077a2:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <xTimerCreateTimerTask+0x8c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077aa:	2301      	movs	r3, #1
 80077ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10a      	bne.n	80077ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	613b      	str	r3, [r7, #16]
}
 80077c6:	bf00      	nop
 80077c8:	e7fe      	b.n	80077c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80077ca:	697b      	ldr	r3, [r7, #20]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3718      	adds	r7, #24
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	20000e90 	.word	0x20000e90
 80077d8:	08009a64 	.word	0x08009a64
 80077dc:	08007919 	.word	0x08007919
 80077e0:	20000e94 	.word	0x20000e94

080077e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08a      	sub	sp, #40	; 0x28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10a      	bne.n	8007812 <xTimerGenericCommand+0x2e>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	623b      	str	r3, [r7, #32]
}
 800780e:	bf00      	nop
 8007810:	e7fe      	b.n	8007810 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007812:	4b1a      	ldr	r3, [pc, #104]	; (800787c <xTimerGenericCommand+0x98>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d02a      	beq.n	8007870 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b05      	cmp	r3, #5
 800782a:	dc18      	bgt.n	800785e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800782c:	f7ff feb2 	bl	8007594 <xTaskGetSchedulerState>
 8007830:	4603      	mov	r3, r0
 8007832:	2b02      	cmp	r3, #2
 8007834:	d109      	bne.n	800784a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007836:	4b11      	ldr	r3, [pc, #68]	; (800787c <xTimerGenericCommand+0x98>)
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	f107 0110 	add.w	r1, r7, #16
 800783e:	2300      	movs	r3, #0
 8007840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007842:	f7fe fc77 	bl	8006134 <xQueueGenericSend>
 8007846:	6278      	str	r0, [r7, #36]	; 0x24
 8007848:	e012      	b.n	8007870 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800784a:	4b0c      	ldr	r3, [pc, #48]	; (800787c <xTimerGenericCommand+0x98>)
 800784c:	6818      	ldr	r0, [r3, #0]
 800784e:	f107 0110 	add.w	r1, r7, #16
 8007852:	2300      	movs	r3, #0
 8007854:	2200      	movs	r2, #0
 8007856:	f7fe fc6d 	bl	8006134 <xQueueGenericSend>
 800785a:	6278      	str	r0, [r7, #36]	; 0x24
 800785c:	e008      	b.n	8007870 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800785e:	4b07      	ldr	r3, [pc, #28]	; (800787c <xTimerGenericCommand+0x98>)
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	f107 0110 	add.w	r1, r7, #16
 8007866:	2300      	movs	r3, #0
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	f7fe fd61 	bl	8006330 <xQueueGenericSendFromISR>
 800786e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007872:	4618      	mov	r0, r3
 8007874:	3728      	adds	r7, #40	; 0x28
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20000e90 	.word	0x20000e90

08007880 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af02      	add	r7, sp, #8
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800788a:	4b22      	ldr	r3, [pc, #136]	; (8007914 <prvProcessExpiredTimer+0x94>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	3304      	adds	r3, #4
 8007898:	4618      	mov	r0, r3
 800789a:	f7fe fa97 	bl	8005dcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d022      	beq.n	80078f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	699a      	ldr	r2, [r3, #24]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	18d1      	adds	r1, r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	6978      	ldr	r0, [r7, #20]
 80078ba:	f000 f8d1 	bl	8007a60 <prvInsertTimerInActiveList>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d01f      	beq.n	8007904 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078c4:	2300      	movs	r3, #0
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	2300      	movs	r3, #0
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	2100      	movs	r1, #0
 80078ce:	6978      	ldr	r0, [r7, #20]
 80078d0:	f7ff ff88 	bl	80077e4 <xTimerGenericCommand>
 80078d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d113      	bne.n	8007904 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	f383 8811 	msr	BASEPRI, r3
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	60fb      	str	r3, [r7, #12]
}
 80078ee:	bf00      	nop
 80078f0:	e7fe      	b.n	80078f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078f8:	f023 0301 	bic.w	r3, r3, #1
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	6978      	ldr	r0, [r7, #20]
 800790a:	4798      	blx	r3
}
 800790c:	bf00      	nop
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	20000e88 	.word	0x20000e88

08007918 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007920:	f107 0308 	add.w	r3, r7, #8
 8007924:	4618      	mov	r0, r3
 8007926:	f000 f857 	bl	80079d8 <prvGetNextExpireTime>
 800792a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	4619      	mov	r1, r3
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 f803 	bl	800793c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007936:	f000 f8d5 	bl	8007ae4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800793a:	e7f1      	b.n	8007920 <prvTimerTask+0x8>

0800793c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007946:	f7ff fa39 	bl	8006dbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800794a:	f107 0308 	add.w	r3, r7, #8
 800794e:	4618      	mov	r0, r3
 8007950:	f000 f866 	bl	8007a20 <prvSampleTimeNow>
 8007954:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d130      	bne.n	80079be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10a      	bne.n	8007978 <prvProcessTimerOrBlockTask+0x3c>
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	429a      	cmp	r2, r3
 8007968:	d806      	bhi.n	8007978 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800796a:	f7ff fa35 	bl	8006dd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800796e:	68f9      	ldr	r1, [r7, #12]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff ff85 	bl	8007880 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007976:	e024      	b.n	80079c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d008      	beq.n	8007990 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800797e:	4b13      	ldr	r3, [pc, #76]	; (80079cc <prvProcessTimerOrBlockTask+0x90>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <prvProcessTimerOrBlockTask+0x50>
 8007988:	2301      	movs	r3, #1
 800798a:	e000      	b.n	800798e <prvProcessTimerOrBlockTask+0x52>
 800798c:	2300      	movs	r3, #0
 800798e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007990:	4b0f      	ldr	r3, [pc, #60]	; (80079d0 <prvProcessTimerOrBlockTask+0x94>)
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	4619      	mov	r1, r3
 800799e:	f7fe ff7d 	bl	800689c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079a2:	f7ff fa19 	bl	8006dd8 <xTaskResumeAll>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80079ac:	4b09      	ldr	r3, [pc, #36]	; (80079d4 <prvProcessTimerOrBlockTask+0x98>)
 80079ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	f3bf 8f6f 	isb	sy
}
 80079bc:	e001      	b.n	80079c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80079be:	f7ff fa0b 	bl	8006dd8 <xTaskResumeAll>
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20000e8c 	.word	0x20000e8c
 80079d0:	20000e90 	.word	0x20000e90
 80079d4:	e000ed04 	.word	0xe000ed04

080079d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079e0:	4b0e      	ldr	r3, [pc, #56]	; (8007a1c <prvGetNextExpireTime+0x44>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <prvGetNextExpireTime+0x16>
 80079ea:	2201      	movs	r2, #1
 80079ec:	e000      	b.n	80079f0 <prvGetNextExpireTime+0x18>
 80079ee:	2200      	movs	r2, #0
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d105      	bne.n	8007a08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079fc:	4b07      	ldr	r3, [pc, #28]	; (8007a1c <prvGetNextExpireTime+0x44>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	e001      	b.n	8007a0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	20000e88 	.word	0x20000e88

08007a20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a28:	f7ff fa74 	bl	8006f14 <xTaskGetTickCount>
 8007a2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a2e:	4b0b      	ldr	r3, [pc, #44]	; (8007a5c <prvSampleTimeNow+0x3c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d205      	bcs.n	8007a44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a38:	f000 f936 	bl	8007ca8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	e002      	b.n	8007a4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a4a:	4a04      	ldr	r2, [pc, #16]	; (8007a5c <prvSampleTimeNow+0x3c>)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a50:	68fb      	ldr	r3, [r7, #12]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20000e98 	.word	0x20000e98

08007a60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
 8007a6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d812      	bhi.n	8007aac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	1ad2      	subs	r2, r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d302      	bcc.n	8007a9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a94:	2301      	movs	r3, #1
 8007a96:	617b      	str	r3, [r7, #20]
 8007a98:	e01b      	b.n	8007ad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a9a:	4b10      	ldr	r3, [pc, #64]	; (8007adc <prvInsertTimerInActiveList+0x7c>)
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	f7fe f958 	bl	8005d5a <vListInsert>
 8007aaa:	e012      	b.n	8007ad2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d206      	bcs.n	8007ac2 <prvInsertTimerInActiveList+0x62>
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d302      	bcc.n	8007ac2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007abc:	2301      	movs	r3, #1
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	e007      	b.n	8007ad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ac2:	4b07      	ldr	r3, [pc, #28]	; (8007ae0 <prvInsertTimerInActiveList+0x80>)
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f7fe f944 	bl	8005d5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ad2:	697b      	ldr	r3, [r7, #20]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	20000e8c 	.word	0x20000e8c
 8007ae0:	20000e88 	.word	0x20000e88

08007ae4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08e      	sub	sp, #56	; 0x38
 8007ae8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aea:	e0ca      	b.n	8007c82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	da18      	bge.n	8007b24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007af2:	1d3b      	adds	r3, r7, #4
 8007af4:	3304      	adds	r3, #4
 8007af6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10a      	bne.n	8007b14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	61fb      	str	r3, [r7, #28]
}
 8007b10:	bf00      	nop
 8007b12:	e7fe      	b.n	8007b12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b1a:	6850      	ldr	r0, [r2, #4]
 8007b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b1e:	6892      	ldr	r2, [r2, #8]
 8007b20:	4611      	mov	r1, r2
 8007b22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f2c0 80aa 	blt.w	8007c80 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe f945 	bl	8005dcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b42:	463b      	mov	r3, r7
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7ff ff6b 	bl	8007a20 <prvSampleTimeNow>
 8007b4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b09      	cmp	r3, #9
 8007b50:	f200 8097 	bhi.w	8007c82 <prvProcessReceivedCommands+0x19e>
 8007b54:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <prvProcessReceivedCommands+0x78>)
 8007b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5a:	bf00      	nop
 8007b5c:	08007b85 	.word	0x08007b85
 8007b60:	08007b85 	.word	0x08007b85
 8007b64:	08007b85 	.word	0x08007b85
 8007b68:	08007bf9 	.word	0x08007bf9
 8007b6c:	08007c0d 	.word	0x08007c0d
 8007b70:	08007c57 	.word	0x08007c57
 8007b74:	08007b85 	.word	0x08007b85
 8007b78:	08007b85 	.word	0x08007b85
 8007b7c:	08007bf9 	.word	0x08007bf9
 8007b80:	08007c0d 	.word	0x08007c0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b8a:	f043 0301 	orr.w	r3, r3, #1
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	18d1      	adds	r1, r2, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ba4:	f7ff ff5c 	bl	8007a60 <prvInsertTimerInActiveList>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d069      	beq.n	8007c82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d05e      	beq.n	8007c82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	441a      	add	r2, r3
 8007bcc:	2300      	movs	r3, #0
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bd6:	f7ff fe05 	bl	80077e4 <xTimerGenericCommand>
 8007bda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d14f      	bne.n	8007c82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	61bb      	str	r3, [r7, #24]
}
 8007bf4:	bf00      	nop
 8007bf6:	e7fe      	b.n	8007bf6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bfe:	f023 0301 	bic.w	r3, r3, #1
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007c0a:	e03a      	b.n	8007c82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c12:	f043 0301 	orr.w	r3, r3, #1
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10a      	bne.n	8007c42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	617b      	str	r3, [r7, #20]
}
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c44:	699a      	ldr	r2, [r3, #24]
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	18d1      	adds	r1, r2, r3
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c50:	f7ff ff06 	bl	8007a60 <prvInsertTimerInActiveList>
					break;
 8007c54:	e015      	b.n	8007c82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c5c:	f003 0302 	and.w	r3, r3, #2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d103      	bne.n	8007c6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c66:	f000 fbdb 	bl	8008420 <vPortFree>
 8007c6a:	e00a      	b.n	8007c82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c72:	f023 0301 	bic.w	r3, r3, #1
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c7e:	e000      	b.n	8007c82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007c80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c82:	4b08      	ldr	r3, [pc, #32]	; (8007ca4 <prvProcessReceivedCommands+0x1c0>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	1d39      	adds	r1, r7, #4
 8007c88:	2200      	movs	r2, #0
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fbec 	bl	8006468 <xQueueReceive>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f47f af2a 	bne.w	8007aec <prvProcessReceivedCommands+0x8>
	}
}
 8007c98:	bf00      	nop
 8007c9a:	bf00      	nop
 8007c9c:	3730      	adds	r7, #48	; 0x30
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20000e90 	.word	0x20000e90

08007ca8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cae:	e048      	b.n	8007d42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cb0:	4b2d      	ldr	r3, [pc, #180]	; (8007d68 <prvSwitchTimerLists+0xc0>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cba:	4b2b      	ldr	r3, [pc, #172]	; (8007d68 <prvSwitchTimerLists+0xc0>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fe f87f 	bl	8005dcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cdc:	f003 0304 	and.w	r3, r3, #4
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d02e      	beq.n	8007d42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	4413      	add	r3, r2
 8007cec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d90e      	bls.n	8007d14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d02:	4b19      	ldr	r3, [pc, #100]	; (8007d68 <prvSwitchTimerLists+0xc0>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	f7fe f824 	bl	8005d5a <vListInsert>
 8007d12:	e016      	b.n	8007d42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d14:	2300      	movs	r3, #0
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff fd60 	bl	80077e4 <xTimerGenericCommand>
 8007d24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10a      	bne.n	8007d42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	603b      	str	r3, [r7, #0]
}
 8007d3e:	bf00      	nop
 8007d40:	e7fe      	b.n	8007d40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d42:	4b09      	ldr	r3, [pc, #36]	; (8007d68 <prvSwitchTimerLists+0xc0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1b1      	bne.n	8007cb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d4c:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <prvSwitchTimerLists+0xc0>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d52:	4b06      	ldr	r3, [pc, #24]	; (8007d6c <prvSwitchTimerLists+0xc4>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a04      	ldr	r2, [pc, #16]	; (8007d68 <prvSwitchTimerLists+0xc0>)
 8007d58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d5a:	4a04      	ldr	r2, [pc, #16]	; (8007d6c <prvSwitchTimerLists+0xc4>)
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	6013      	str	r3, [r2, #0]
}
 8007d60:	bf00      	nop
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	20000e88 	.word	0x20000e88
 8007d6c:	20000e8c 	.word	0x20000e8c

08007d70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d76:	f000 f965 	bl	8008044 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d7a:	4b15      	ldr	r3, [pc, #84]	; (8007dd0 <prvCheckForValidListAndQueue+0x60>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d120      	bne.n	8007dc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d82:	4814      	ldr	r0, [pc, #80]	; (8007dd4 <prvCheckForValidListAndQueue+0x64>)
 8007d84:	f7fd ff98 	bl	8005cb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d88:	4813      	ldr	r0, [pc, #76]	; (8007dd8 <prvCheckForValidListAndQueue+0x68>)
 8007d8a:	f7fd ff95 	bl	8005cb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d8e:	4b13      	ldr	r3, [pc, #76]	; (8007ddc <prvCheckForValidListAndQueue+0x6c>)
 8007d90:	4a10      	ldr	r2, [pc, #64]	; (8007dd4 <prvCheckForValidListAndQueue+0x64>)
 8007d92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d94:	4b12      	ldr	r3, [pc, #72]	; (8007de0 <prvCheckForValidListAndQueue+0x70>)
 8007d96:	4a10      	ldr	r2, [pc, #64]	; (8007dd8 <prvCheckForValidListAndQueue+0x68>)
 8007d98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	4b11      	ldr	r3, [pc, #68]	; (8007de4 <prvCheckForValidListAndQueue+0x74>)
 8007da0:	4a11      	ldr	r2, [pc, #68]	; (8007de8 <prvCheckForValidListAndQueue+0x78>)
 8007da2:	2110      	movs	r1, #16
 8007da4:	200a      	movs	r0, #10
 8007da6:	f7fe f8a3 	bl	8005ef0 <xQueueGenericCreateStatic>
 8007daa:	4603      	mov	r3, r0
 8007dac:	4a08      	ldr	r2, [pc, #32]	; (8007dd0 <prvCheckForValidListAndQueue+0x60>)
 8007dae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007db0:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <prvCheckForValidListAndQueue+0x60>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d005      	beq.n	8007dc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007db8:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <prvCheckForValidListAndQueue+0x60>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	490b      	ldr	r1, [pc, #44]	; (8007dec <prvCheckForValidListAndQueue+0x7c>)
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe fd42 	bl	8006848 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dc4:	f000 f96e 	bl	80080a4 <vPortExitCritical>
}
 8007dc8:	bf00      	nop
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000e90 	.word	0x20000e90
 8007dd4:	20000e60 	.word	0x20000e60
 8007dd8:	20000e74 	.word	0x20000e74
 8007ddc:	20000e88 	.word	0x20000e88
 8007de0:	20000e8c 	.word	0x20000e8c
 8007de4:	20000f3c 	.word	0x20000f3c
 8007de8:	20000e9c 	.word	0x20000e9c
 8007dec:	08009a6c 	.word	0x08009a6c

08007df0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	3b04      	subs	r3, #4
 8007e00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3b04      	subs	r3, #4
 8007e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	f023 0201 	bic.w	r2, r3, #1
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3b04      	subs	r3, #4
 8007e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e20:	4a0c      	ldr	r2, [pc, #48]	; (8007e54 <pxPortInitialiseStack+0x64>)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3b14      	subs	r3, #20
 8007e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	3b04      	subs	r3, #4
 8007e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f06f 0202 	mvn.w	r2, #2
 8007e3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3b20      	subs	r3, #32
 8007e44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e46:	68fb      	ldr	r3, [r7, #12]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr
 8007e54:	08007e59 	.word	0x08007e59

08007e58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e62:	4b12      	ldr	r3, [pc, #72]	; (8007eac <prvTaskExitError+0x54>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6a:	d00a      	beq.n	8007e82 <prvTaskExitError+0x2a>
	__asm volatile
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	60fb      	str	r3, [r7, #12]
}
 8007e7e:	bf00      	nop
 8007e80:	e7fe      	b.n	8007e80 <prvTaskExitError+0x28>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	60bb      	str	r3, [r7, #8]
}
 8007e94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e96:	bf00      	nop
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0fc      	beq.n	8007e98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e9e:	bf00      	nop
 8007ea0:	bf00      	nop
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	20000034 	.word	0x20000034

08007eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007eb0:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <pxCurrentTCBConst2>)
 8007eb2:	6819      	ldr	r1, [r3, #0]
 8007eb4:	6808      	ldr	r0, [r1, #0]
 8007eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eba:	f380 8809 	msr	PSP, r0
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f04f 0000 	mov.w	r0, #0
 8007ec6:	f380 8811 	msr	BASEPRI, r0
 8007eca:	4770      	bx	lr
 8007ecc:	f3af 8000 	nop.w

08007ed0 <pxCurrentTCBConst2>:
 8007ed0:	20000960 	.word	0x20000960
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop

08007ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ed8:	4808      	ldr	r0, [pc, #32]	; (8007efc <prvPortStartFirstTask+0x24>)
 8007eda:	6800      	ldr	r0, [r0, #0]
 8007edc:	6800      	ldr	r0, [r0, #0]
 8007ede:	f380 8808 	msr	MSP, r0
 8007ee2:	f04f 0000 	mov.w	r0, #0
 8007ee6:	f380 8814 	msr	CONTROL, r0
 8007eea:	b662      	cpsie	i
 8007eec:	b661      	cpsie	f
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	df00      	svc	0
 8007ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007efa:	bf00      	nop
 8007efc:	e000ed08 	.word	0xe000ed08

08007f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f06:	4b46      	ldr	r3, [pc, #280]	; (8008020 <xPortStartScheduler+0x120>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a46      	ldr	r2, [pc, #280]	; (8008024 <xPortStartScheduler+0x124>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d10a      	bne.n	8007f26 <xPortStartScheduler+0x26>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	613b      	str	r3, [r7, #16]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f26:	4b3e      	ldr	r3, [pc, #248]	; (8008020 <xPortStartScheduler+0x120>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a3f      	ldr	r2, [pc, #252]	; (8008028 <xPortStartScheduler+0x128>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d10a      	bne.n	8007f46 <xPortStartScheduler+0x46>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	60fb      	str	r3, [r7, #12]
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f46:	4b39      	ldr	r3, [pc, #228]	; (800802c <xPortStartScheduler+0x12c>)
 8007f48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	22ff      	movs	r2, #255	; 0xff
 8007f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	4b31      	ldr	r3, [pc, #196]	; (8008030 <xPortStartScheduler+0x130>)
 8007f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f6e:	4b31      	ldr	r3, [pc, #196]	; (8008034 <xPortStartScheduler+0x134>)
 8007f70:	2207      	movs	r2, #7
 8007f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f74:	e009      	b.n	8007f8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007f76:	4b2f      	ldr	r3, [pc, #188]	; (8008034 <xPortStartScheduler+0x134>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	4a2d      	ldr	r2, [pc, #180]	; (8008034 <xPortStartScheduler+0x134>)
 8007f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f92:	2b80      	cmp	r3, #128	; 0x80
 8007f94:	d0ef      	beq.n	8007f76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f96:	4b27      	ldr	r3, [pc, #156]	; (8008034 <xPortStartScheduler+0x134>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f1c3 0307 	rsb	r3, r3, #7
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	d00a      	beq.n	8007fb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	60bb      	str	r3, [r7, #8]
}
 8007fb4:	bf00      	nop
 8007fb6:	e7fe      	b.n	8007fb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fb8:	4b1e      	ldr	r3, [pc, #120]	; (8008034 <xPortStartScheduler+0x134>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	021b      	lsls	r3, r3, #8
 8007fbe:	4a1d      	ldr	r2, [pc, #116]	; (8008034 <xPortStartScheduler+0x134>)
 8007fc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fc2:	4b1c      	ldr	r3, [pc, #112]	; (8008034 <xPortStartScheduler+0x134>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fca:	4a1a      	ldr	r2, [pc, #104]	; (8008034 <xPortStartScheduler+0x134>)
 8007fcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fd6:	4b18      	ldr	r3, [pc, #96]	; (8008038 <xPortStartScheduler+0x138>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a17      	ldr	r2, [pc, #92]	; (8008038 <xPortStartScheduler+0x138>)
 8007fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fe2:	4b15      	ldr	r3, [pc, #84]	; (8008038 <xPortStartScheduler+0x138>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a14      	ldr	r2, [pc, #80]	; (8008038 <xPortStartScheduler+0x138>)
 8007fe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007fec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fee:	f000 f8dd 	bl	80081ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ff2:	4b12      	ldr	r3, [pc, #72]	; (800803c <xPortStartScheduler+0x13c>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ff8:	f000 f8fc 	bl	80081f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ffc:	4b10      	ldr	r3, [pc, #64]	; (8008040 <xPortStartScheduler+0x140>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a0f      	ldr	r2, [pc, #60]	; (8008040 <xPortStartScheduler+0x140>)
 8008002:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008006:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008008:	f7ff ff66 	bl	8007ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800800c:	f7ff f84c 	bl	80070a8 <vTaskSwitchContext>
	prvTaskExitError();
 8008010:	f7ff ff22 	bl	8007e58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3718      	adds	r7, #24
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	e000ed00 	.word	0xe000ed00
 8008024:	410fc271 	.word	0x410fc271
 8008028:	410fc270 	.word	0x410fc270
 800802c:	e000e400 	.word	0xe000e400
 8008030:	20000f8c 	.word	0x20000f8c
 8008034:	20000f90 	.word	0x20000f90
 8008038:	e000ed20 	.word	0xe000ed20
 800803c:	20000034 	.word	0x20000034
 8008040:	e000ef34 	.word	0xe000ef34

08008044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	607b      	str	r3, [r7, #4]
}
 800805c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800805e:	4b0f      	ldr	r3, [pc, #60]	; (800809c <vPortEnterCritical+0x58>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3301      	adds	r3, #1
 8008064:	4a0d      	ldr	r2, [pc, #52]	; (800809c <vPortEnterCritical+0x58>)
 8008066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008068:	4b0c      	ldr	r3, [pc, #48]	; (800809c <vPortEnterCritical+0x58>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d10f      	bne.n	8008090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008070:	4b0b      	ldr	r3, [pc, #44]	; (80080a0 <vPortEnterCritical+0x5c>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00a      	beq.n	8008090 <vPortEnterCritical+0x4c>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	603b      	str	r3, [r7, #0]
}
 800808c:	bf00      	nop
 800808e:	e7fe      	b.n	800808e <vPortEnterCritical+0x4a>
	}
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	20000034 	.word	0x20000034
 80080a0:	e000ed04 	.word	0xe000ed04

080080a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080aa:	4b12      	ldr	r3, [pc, #72]	; (80080f4 <vPortExitCritical+0x50>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10a      	bne.n	80080c8 <vPortExitCritical+0x24>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	607b      	str	r3, [r7, #4]
}
 80080c4:	bf00      	nop
 80080c6:	e7fe      	b.n	80080c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080c8:	4b0a      	ldr	r3, [pc, #40]	; (80080f4 <vPortExitCritical+0x50>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3b01      	subs	r3, #1
 80080ce:	4a09      	ldr	r2, [pc, #36]	; (80080f4 <vPortExitCritical+0x50>)
 80080d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080d2:	4b08      	ldr	r3, [pc, #32]	; (80080f4 <vPortExitCritical+0x50>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d105      	bne.n	80080e6 <vPortExitCritical+0x42>
 80080da:	2300      	movs	r3, #0
 80080dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	f383 8811 	msr	BASEPRI, r3
}
 80080e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080e6:	bf00      	nop
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	20000034 	.word	0x20000034
	...

08008100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008100:	f3ef 8009 	mrs	r0, PSP
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	4b15      	ldr	r3, [pc, #84]	; (8008160 <pxCurrentTCBConst>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	f01e 0f10 	tst.w	lr, #16
 8008110:	bf08      	it	eq
 8008112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811a:	6010      	str	r0, [r2, #0]
 800811c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008124:	f380 8811 	msr	BASEPRI, r0
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f7fe ffba 	bl	80070a8 <vTaskSwitchContext>
 8008134:	f04f 0000 	mov.w	r0, #0
 8008138:	f380 8811 	msr	BASEPRI, r0
 800813c:	bc09      	pop	{r0, r3}
 800813e:	6819      	ldr	r1, [r3, #0]
 8008140:	6808      	ldr	r0, [r1, #0]
 8008142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008146:	f01e 0f10 	tst.w	lr, #16
 800814a:	bf08      	it	eq
 800814c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008150:	f380 8809 	msr	PSP, r0
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	f3af 8000 	nop.w

08008160 <pxCurrentTCBConst>:
 8008160:	20000960 	.word	0x20000960
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008164:	bf00      	nop
 8008166:	bf00      	nop

08008168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
	__asm volatile
 800816e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008172:	f383 8811 	msr	BASEPRI, r3
 8008176:	f3bf 8f6f 	isb	sy
 800817a:	f3bf 8f4f 	dsb	sy
 800817e:	607b      	str	r3, [r7, #4]
}
 8008180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008182:	f7fe fed7 	bl	8006f34 <xTaskIncrementTick>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d003      	beq.n	8008194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800818c:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <xPortSysTickHandler+0x40>)
 800818e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	2300      	movs	r3, #0
 8008196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	f383 8811 	msr	BASEPRI, r3
}
 800819e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	e000ed04 	.word	0xe000ed04

080081ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081ac:	b480      	push	{r7}
 80081ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081b0:	4b0b      	ldr	r3, [pc, #44]	; (80081e0 <vPortSetupTimerInterrupt+0x34>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081b6:	4b0b      	ldr	r3, [pc, #44]	; (80081e4 <vPortSetupTimerInterrupt+0x38>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <vPortSetupTimerInterrupt+0x3c>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a0a      	ldr	r2, [pc, #40]	; (80081ec <vPortSetupTimerInterrupt+0x40>)
 80081c2:	fba2 2303 	umull	r2, r3, r2, r3
 80081c6:	099b      	lsrs	r3, r3, #6
 80081c8:	4a09      	ldr	r2, [pc, #36]	; (80081f0 <vPortSetupTimerInterrupt+0x44>)
 80081ca:	3b01      	subs	r3, #1
 80081cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081ce:	4b04      	ldr	r3, [pc, #16]	; (80081e0 <vPortSetupTimerInterrupt+0x34>)
 80081d0:	2207      	movs	r2, #7
 80081d2:	601a      	str	r2, [r3, #0]
}
 80081d4:	bf00      	nop
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	e000e010 	.word	0xe000e010
 80081e4:	e000e018 	.word	0xe000e018
 80081e8:	20000028 	.word	0x20000028
 80081ec:	10624dd3 	.word	0x10624dd3
 80081f0:	e000e014 	.word	0xe000e014

080081f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008204 <vPortEnableVFP+0x10>
 80081f8:	6801      	ldr	r1, [r0, #0]
 80081fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081fe:	6001      	str	r1, [r0, #0]
 8008200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008202:	bf00      	nop
 8008204:	e000ed88 	.word	0xe000ed88

08008208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800820e:	f3ef 8305 	mrs	r3, IPSR
 8008212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2b0f      	cmp	r3, #15
 8008218:	d914      	bls.n	8008244 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800821a:	4a17      	ldr	r2, [pc, #92]	; (8008278 <vPortValidateInterruptPriority+0x70>)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4413      	add	r3, r2
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008224:	4b15      	ldr	r3, [pc, #84]	; (800827c <vPortValidateInterruptPriority+0x74>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	7afa      	ldrb	r2, [r7, #11]
 800822a:	429a      	cmp	r2, r3
 800822c:	d20a      	bcs.n	8008244 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	607b      	str	r3, [r7, #4]
}
 8008240:	bf00      	nop
 8008242:	e7fe      	b.n	8008242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008244:	4b0e      	ldr	r3, [pc, #56]	; (8008280 <vPortValidateInterruptPriority+0x78>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800824c:	4b0d      	ldr	r3, [pc, #52]	; (8008284 <vPortValidateInterruptPriority+0x7c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	429a      	cmp	r2, r3
 8008252:	d90a      	bls.n	800826a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	603b      	str	r3, [r7, #0]
}
 8008266:	bf00      	nop
 8008268:	e7fe      	b.n	8008268 <vPortValidateInterruptPriority+0x60>
	}
 800826a:	bf00      	nop
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	e000e3f0 	.word	0xe000e3f0
 800827c:	20000f8c 	.word	0x20000f8c
 8008280:	e000ed0c 	.word	0xe000ed0c
 8008284:	20000f90 	.word	0x20000f90

08008288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08a      	sub	sp, #40	; 0x28
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008290:	2300      	movs	r3, #0
 8008292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008294:	f7fe fd92 	bl	8006dbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008298:	4b5b      	ldr	r3, [pc, #364]	; (8008408 <pvPortMalloc+0x180>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d101      	bne.n	80082a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082a0:	f000 f920 	bl	80084e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082a4:	4b59      	ldr	r3, [pc, #356]	; (800840c <pvPortMalloc+0x184>)
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4013      	ands	r3, r2
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f040 8093 	bne.w	80083d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d01d      	beq.n	80082f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80082b8:	2208      	movs	r2, #8
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4413      	add	r3, r2
 80082be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d014      	beq.n	80082f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f023 0307 	bic.w	r3, r3, #7
 80082d0:	3308      	adds	r3, #8
 80082d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f003 0307 	and.w	r3, r3, #7
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <pvPortMalloc+0x6c>
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	617b      	str	r3, [r7, #20]
}
 80082f0:	bf00      	nop
 80082f2:	e7fe      	b.n	80082f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d06e      	beq.n	80083d8 <pvPortMalloc+0x150>
 80082fa:	4b45      	ldr	r3, [pc, #276]	; (8008410 <pvPortMalloc+0x188>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	429a      	cmp	r2, r3
 8008302:	d869      	bhi.n	80083d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008304:	4b43      	ldr	r3, [pc, #268]	; (8008414 <pvPortMalloc+0x18c>)
 8008306:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008308:	4b42      	ldr	r3, [pc, #264]	; (8008414 <pvPortMalloc+0x18c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800830e:	e004      	b.n	800831a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	429a      	cmp	r2, r3
 8008322:	d903      	bls.n	800832c <pvPortMalloc+0xa4>
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1f1      	bne.n	8008310 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800832c:	4b36      	ldr	r3, [pc, #216]	; (8008408 <pvPortMalloc+0x180>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008332:	429a      	cmp	r2, r3
 8008334:	d050      	beq.n	80083d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2208      	movs	r2, #8
 800833c:	4413      	add	r3, r2
 800833e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	1ad2      	subs	r2, r2, r3
 8008350:	2308      	movs	r3, #8
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	429a      	cmp	r2, r3
 8008356:	d91f      	bls.n	8008398 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4413      	add	r3, r2
 800835e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	f003 0307 	and.w	r3, r3, #7
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <pvPortMalloc+0xf8>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	613b      	str	r3, [r7, #16]
}
 800837c:	bf00      	nop
 800837e:	e7fe      	b.n	800837e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	685a      	ldr	r2, [r3, #4]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	1ad2      	subs	r2, r2, r3
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008392:	69b8      	ldr	r0, [r7, #24]
 8008394:	f000 f908 	bl	80085a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008398:	4b1d      	ldr	r3, [pc, #116]	; (8008410 <pvPortMalloc+0x188>)
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	4a1b      	ldr	r2, [pc, #108]	; (8008410 <pvPortMalloc+0x188>)
 80083a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083a6:	4b1a      	ldr	r3, [pc, #104]	; (8008410 <pvPortMalloc+0x188>)
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	4b1b      	ldr	r3, [pc, #108]	; (8008418 <pvPortMalloc+0x190>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d203      	bcs.n	80083ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083b2:	4b17      	ldr	r3, [pc, #92]	; (8008410 <pvPortMalloc+0x188>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a18      	ldr	r2, [pc, #96]	; (8008418 <pvPortMalloc+0x190>)
 80083b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	4b13      	ldr	r3, [pc, #76]	; (800840c <pvPortMalloc+0x184>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	431a      	orrs	r2, r3
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	2200      	movs	r2, #0
 80083cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083ce:	4b13      	ldr	r3, [pc, #76]	; (800841c <pvPortMalloc+0x194>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3301      	adds	r3, #1
 80083d4:	4a11      	ldr	r2, [pc, #68]	; (800841c <pvPortMalloc+0x194>)
 80083d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083d8:	f7fe fcfe 	bl	8006dd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	f003 0307 	and.w	r3, r3, #7
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00a      	beq.n	80083fc <pvPortMalloc+0x174>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	60fb      	str	r3, [r7, #12]
}
 80083f8:	bf00      	nop
 80083fa:	e7fe      	b.n	80083fa <pvPortMalloc+0x172>
	return pvReturn;
 80083fc:	69fb      	ldr	r3, [r7, #28]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3728      	adds	r7, #40	; 0x28
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20001b54 	.word	0x20001b54
 800840c:	20001b68 	.word	0x20001b68
 8008410:	20001b58 	.word	0x20001b58
 8008414:	20001b4c 	.word	0x20001b4c
 8008418:	20001b5c 	.word	0x20001b5c
 800841c:	20001b60 	.word	0x20001b60

08008420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d04d      	beq.n	80084ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008432:	2308      	movs	r3, #8
 8008434:	425b      	negs	r3, r3
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	4413      	add	r3, r2
 800843a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	685a      	ldr	r2, [r3, #4]
 8008444:	4b24      	ldr	r3, [pc, #144]	; (80084d8 <vPortFree+0xb8>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4013      	ands	r3, r2
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10a      	bne.n	8008464 <vPortFree+0x44>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	60fb      	str	r3, [r7, #12]
}
 8008460:	bf00      	nop
 8008462:	e7fe      	b.n	8008462 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00a      	beq.n	8008482 <vPortFree+0x62>
	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	60bb      	str	r3, [r7, #8]
}
 800847e:	bf00      	nop
 8008480:	e7fe      	b.n	8008480 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	4b14      	ldr	r3, [pc, #80]	; (80084d8 <vPortFree+0xb8>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4013      	ands	r3, r2
 800848c:	2b00      	cmp	r3, #0
 800848e:	d01e      	beq.n	80084ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d11a      	bne.n	80084ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	4b0e      	ldr	r3, [pc, #56]	; (80084d8 <vPortFree+0xb8>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	43db      	mvns	r3, r3
 80084a2:	401a      	ands	r2, r3
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084a8:	f7fe fc88 	bl	8006dbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <vPortFree+0xbc>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4413      	add	r3, r2
 80084b6:	4a09      	ldr	r2, [pc, #36]	; (80084dc <vPortFree+0xbc>)
 80084b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084ba:	6938      	ldr	r0, [r7, #16]
 80084bc:	f000 f874 	bl	80085a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084c0:	4b07      	ldr	r3, [pc, #28]	; (80084e0 <vPortFree+0xc0>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3301      	adds	r3, #1
 80084c6:	4a06      	ldr	r2, [pc, #24]	; (80084e0 <vPortFree+0xc0>)
 80084c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084ca:	f7fe fc85 	bl	8006dd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084ce:	bf00      	nop
 80084d0:	3718      	adds	r7, #24
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20001b68 	.word	0x20001b68
 80084dc:	20001b58 	.word	0x20001b58
 80084e0:	20001b64 	.word	0x20001b64

080084e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80084ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084f0:	4b27      	ldr	r3, [pc, #156]	; (8008590 <prvHeapInit+0xac>)
 80084f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00c      	beq.n	8008518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3307      	adds	r3, #7
 8008502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f023 0307 	bic.w	r3, r3, #7
 800850a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	4a1f      	ldr	r2, [pc, #124]	; (8008590 <prvHeapInit+0xac>)
 8008514:	4413      	add	r3, r2
 8008516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800851c:	4a1d      	ldr	r2, [pc, #116]	; (8008594 <prvHeapInit+0xb0>)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008522:	4b1c      	ldr	r3, [pc, #112]	; (8008594 <prvHeapInit+0xb0>)
 8008524:	2200      	movs	r2, #0
 8008526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	4413      	add	r3, r2
 800852e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008530:	2208      	movs	r2, #8
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	1a9b      	subs	r3, r3, r2
 8008536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f023 0307 	bic.w	r3, r3, #7
 800853e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	4a15      	ldr	r2, [pc, #84]	; (8008598 <prvHeapInit+0xb4>)
 8008544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008546:	4b14      	ldr	r3, [pc, #80]	; (8008598 <prvHeapInit+0xb4>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2200      	movs	r2, #0
 800854c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800854e:	4b12      	ldr	r3, [pc, #72]	; (8008598 <prvHeapInit+0xb4>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2200      	movs	r2, #0
 8008554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	1ad2      	subs	r2, r2, r3
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008564:	4b0c      	ldr	r3, [pc, #48]	; (8008598 <prvHeapInit+0xb4>)
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	4a0a      	ldr	r2, [pc, #40]	; (800859c <prvHeapInit+0xb8>)
 8008572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	4a09      	ldr	r2, [pc, #36]	; (80085a0 <prvHeapInit+0xbc>)
 800857a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800857c:	4b09      	ldr	r3, [pc, #36]	; (80085a4 <prvHeapInit+0xc0>)
 800857e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008582:	601a      	str	r2, [r3, #0]
}
 8008584:	bf00      	nop
 8008586:	3714      	adds	r7, #20
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	20000f94 	.word	0x20000f94
 8008594:	20001b4c 	.word	0x20001b4c
 8008598:	20001b54 	.word	0x20001b54
 800859c:	20001b5c 	.word	0x20001b5c
 80085a0:	20001b58 	.word	0x20001b58
 80085a4:	20001b68 	.word	0x20001b68

080085a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085b0:	4b28      	ldr	r3, [pc, #160]	; (8008654 <prvInsertBlockIntoFreeList+0xac>)
 80085b2:	60fb      	str	r3, [r7, #12]
 80085b4:	e002      	b.n	80085bc <prvInsertBlockIntoFreeList+0x14>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	60fb      	str	r3, [r7, #12]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d8f7      	bhi.n	80085b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	4413      	add	r3, r2
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d108      	bne.n	80085ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	441a      	add	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	441a      	add	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d118      	bne.n	8008630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	4b15      	ldr	r3, [pc, #84]	; (8008658 <prvInsertBlockIntoFreeList+0xb0>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	429a      	cmp	r2, r3
 8008608:	d00d      	beq.n	8008626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	441a      	add	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	e008      	b.n	8008638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008626:	4b0c      	ldr	r3, [pc, #48]	; (8008658 <prvInsertBlockIntoFreeList+0xb0>)
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	e003      	b.n	8008638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	429a      	cmp	r2, r3
 800863e:	d002      	beq.n	8008646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008646:	bf00      	nop
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	20001b4c 	.word	0x20001b4c
 8008658:	20001b54 	.word	0x20001b54

0800865c <calloc>:
 800865c:	4b02      	ldr	r3, [pc, #8]	; (8008668 <calloc+0xc>)
 800865e:	460a      	mov	r2, r1
 8008660:	4601      	mov	r1, r0
 8008662:	6818      	ldr	r0, [r3, #0]
 8008664:	f000 b93b 	b.w	80088de <_calloc_r>
 8008668:	20000038 	.word	0x20000038

0800866c <__errno>:
 800866c:	4b01      	ldr	r3, [pc, #4]	; (8008674 <__errno+0x8>)
 800866e:	6818      	ldr	r0, [r3, #0]
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	20000038 	.word	0x20000038

08008678 <std>:
 8008678:	2300      	movs	r3, #0
 800867a:	b510      	push	{r4, lr}
 800867c:	4604      	mov	r4, r0
 800867e:	e9c0 3300 	strd	r3, r3, [r0]
 8008682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008686:	6083      	str	r3, [r0, #8]
 8008688:	8181      	strh	r1, [r0, #12]
 800868a:	6643      	str	r3, [r0, #100]	; 0x64
 800868c:	81c2      	strh	r2, [r0, #14]
 800868e:	6183      	str	r3, [r0, #24]
 8008690:	4619      	mov	r1, r3
 8008692:	2208      	movs	r2, #8
 8008694:	305c      	adds	r0, #92	; 0x5c
 8008696:	f000 f91a 	bl	80088ce <memset>
 800869a:	4b05      	ldr	r3, [pc, #20]	; (80086b0 <std+0x38>)
 800869c:	6263      	str	r3, [r4, #36]	; 0x24
 800869e:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <std+0x3c>)
 80086a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80086a2:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <std+0x40>)
 80086a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086a6:	4b05      	ldr	r3, [pc, #20]	; (80086bc <std+0x44>)
 80086a8:	6224      	str	r4, [r4, #32]
 80086aa:	6323      	str	r3, [r4, #48]	; 0x30
 80086ac:	bd10      	pop	{r4, pc}
 80086ae:	bf00      	nop
 80086b0:	08008bed 	.word	0x08008bed
 80086b4:	08008c0f 	.word	0x08008c0f
 80086b8:	08008c47 	.word	0x08008c47
 80086bc:	08008c6b 	.word	0x08008c6b

080086c0 <_cleanup_r>:
 80086c0:	4901      	ldr	r1, [pc, #4]	; (80086c8 <_cleanup_r+0x8>)
 80086c2:	f000 b8af 	b.w	8008824 <_fwalk_reent>
 80086c6:	bf00      	nop
 80086c8:	08008f45 	.word	0x08008f45

080086cc <__sfmoreglue>:
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	1e4a      	subs	r2, r1, #1
 80086d0:	2568      	movs	r5, #104	; 0x68
 80086d2:	4355      	muls	r5, r2
 80086d4:	460e      	mov	r6, r1
 80086d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086da:	f000 f90f 	bl	80088fc <_malloc_r>
 80086de:	4604      	mov	r4, r0
 80086e0:	b140      	cbz	r0, 80086f4 <__sfmoreglue+0x28>
 80086e2:	2100      	movs	r1, #0
 80086e4:	e9c0 1600 	strd	r1, r6, [r0]
 80086e8:	300c      	adds	r0, #12
 80086ea:	60a0      	str	r0, [r4, #8]
 80086ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086f0:	f000 f8ed 	bl	80088ce <memset>
 80086f4:	4620      	mov	r0, r4
 80086f6:	bd70      	pop	{r4, r5, r6, pc}

080086f8 <__sfp_lock_acquire>:
 80086f8:	4801      	ldr	r0, [pc, #4]	; (8008700 <__sfp_lock_acquire+0x8>)
 80086fa:	f000 b8d8 	b.w	80088ae <__retarget_lock_acquire_recursive>
 80086fe:	bf00      	nop
 8008700:	20005e34 	.word	0x20005e34

08008704 <__sfp_lock_release>:
 8008704:	4801      	ldr	r0, [pc, #4]	; (800870c <__sfp_lock_release+0x8>)
 8008706:	f000 b8d3 	b.w	80088b0 <__retarget_lock_release_recursive>
 800870a:	bf00      	nop
 800870c:	20005e34 	.word	0x20005e34

08008710 <__sinit_lock_acquire>:
 8008710:	4801      	ldr	r0, [pc, #4]	; (8008718 <__sinit_lock_acquire+0x8>)
 8008712:	f000 b8cc 	b.w	80088ae <__retarget_lock_acquire_recursive>
 8008716:	bf00      	nop
 8008718:	20005e2f 	.word	0x20005e2f

0800871c <__sinit_lock_release>:
 800871c:	4801      	ldr	r0, [pc, #4]	; (8008724 <__sinit_lock_release+0x8>)
 800871e:	f000 b8c7 	b.w	80088b0 <__retarget_lock_release_recursive>
 8008722:	bf00      	nop
 8008724:	20005e2f 	.word	0x20005e2f

08008728 <__sinit>:
 8008728:	b510      	push	{r4, lr}
 800872a:	4604      	mov	r4, r0
 800872c:	f7ff fff0 	bl	8008710 <__sinit_lock_acquire>
 8008730:	69a3      	ldr	r3, [r4, #24]
 8008732:	b11b      	cbz	r3, 800873c <__sinit+0x14>
 8008734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008738:	f7ff bff0 	b.w	800871c <__sinit_lock_release>
 800873c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008740:	6523      	str	r3, [r4, #80]	; 0x50
 8008742:	4b13      	ldr	r3, [pc, #76]	; (8008790 <__sinit+0x68>)
 8008744:	4a13      	ldr	r2, [pc, #76]	; (8008794 <__sinit+0x6c>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	62a2      	str	r2, [r4, #40]	; 0x28
 800874a:	42a3      	cmp	r3, r4
 800874c:	bf04      	itt	eq
 800874e:	2301      	moveq	r3, #1
 8008750:	61a3      	streq	r3, [r4, #24]
 8008752:	4620      	mov	r0, r4
 8008754:	f000 f820 	bl	8008798 <__sfp>
 8008758:	6060      	str	r0, [r4, #4]
 800875a:	4620      	mov	r0, r4
 800875c:	f000 f81c 	bl	8008798 <__sfp>
 8008760:	60a0      	str	r0, [r4, #8]
 8008762:	4620      	mov	r0, r4
 8008764:	f000 f818 	bl	8008798 <__sfp>
 8008768:	2200      	movs	r2, #0
 800876a:	60e0      	str	r0, [r4, #12]
 800876c:	2104      	movs	r1, #4
 800876e:	6860      	ldr	r0, [r4, #4]
 8008770:	f7ff ff82 	bl	8008678 <std>
 8008774:	68a0      	ldr	r0, [r4, #8]
 8008776:	2201      	movs	r2, #1
 8008778:	2109      	movs	r1, #9
 800877a:	f7ff ff7d 	bl	8008678 <std>
 800877e:	68e0      	ldr	r0, [r4, #12]
 8008780:	2202      	movs	r2, #2
 8008782:	2112      	movs	r1, #18
 8008784:	f7ff ff78 	bl	8008678 <std>
 8008788:	2301      	movs	r3, #1
 800878a:	61a3      	str	r3, [r4, #24]
 800878c:	e7d2      	b.n	8008734 <__sinit+0xc>
 800878e:	bf00      	nop
 8008790:	08009b74 	.word	0x08009b74
 8008794:	080086c1 	.word	0x080086c1

08008798 <__sfp>:
 8008798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879a:	4607      	mov	r7, r0
 800879c:	f7ff ffac 	bl	80086f8 <__sfp_lock_acquire>
 80087a0:	4b1e      	ldr	r3, [pc, #120]	; (800881c <__sfp+0x84>)
 80087a2:	681e      	ldr	r6, [r3, #0]
 80087a4:	69b3      	ldr	r3, [r6, #24]
 80087a6:	b913      	cbnz	r3, 80087ae <__sfp+0x16>
 80087a8:	4630      	mov	r0, r6
 80087aa:	f7ff ffbd 	bl	8008728 <__sinit>
 80087ae:	3648      	adds	r6, #72	; 0x48
 80087b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80087b4:	3b01      	subs	r3, #1
 80087b6:	d503      	bpl.n	80087c0 <__sfp+0x28>
 80087b8:	6833      	ldr	r3, [r6, #0]
 80087ba:	b30b      	cbz	r3, 8008800 <__sfp+0x68>
 80087bc:	6836      	ldr	r6, [r6, #0]
 80087be:	e7f7      	b.n	80087b0 <__sfp+0x18>
 80087c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087c4:	b9d5      	cbnz	r5, 80087fc <__sfp+0x64>
 80087c6:	4b16      	ldr	r3, [pc, #88]	; (8008820 <__sfp+0x88>)
 80087c8:	60e3      	str	r3, [r4, #12]
 80087ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087ce:	6665      	str	r5, [r4, #100]	; 0x64
 80087d0:	f000 f86c 	bl	80088ac <__retarget_lock_init_recursive>
 80087d4:	f7ff ff96 	bl	8008704 <__sfp_lock_release>
 80087d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80087dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087e0:	6025      	str	r5, [r4, #0]
 80087e2:	61a5      	str	r5, [r4, #24]
 80087e4:	2208      	movs	r2, #8
 80087e6:	4629      	mov	r1, r5
 80087e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087ec:	f000 f86f 	bl	80088ce <memset>
 80087f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087f8:	4620      	mov	r0, r4
 80087fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087fc:	3468      	adds	r4, #104	; 0x68
 80087fe:	e7d9      	b.n	80087b4 <__sfp+0x1c>
 8008800:	2104      	movs	r1, #4
 8008802:	4638      	mov	r0, r7
 8008804:	f7ff ff62 	bl	80086cc <__sfmoreglue>
 8008808:	4604      	mov	r4, r0
 800880a:	6030      	str	r0, [r6, #0]
 800880c:	2800      	cmp	r0, #0
 800880e:	d1d5      	bne.n	80087bc <__sfp+0x24>
 8008810:	f7ff ff78 	bl	8008704 <__sfp_lock_release>
 8008814:	230c      	movs	r3, #12
 8008816:	603b      	str	r3, [r7, #0]
 8008818:	e7ee      	b.n	80087f8 <__sfp+0x60>
 800881a:	bf00      	nop
 800881c:	08009b74 	.word	0x08009b74
 8008820:	ffff0001 	.word	0xffff0001

08008824 <_fwalk_reent>:
 8008824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008828:	4606      	mov	r6, r0
 800882a:	4688      	mov	r8, r1
 800882c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008830:	2700      	movs	r7, #0
 8008832:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008836:	f1b9 0901 	subs.w	r9, r9, #1
 800883a:	d505      	bpl.n	8008848 <_fwalk_reent+0x24>
 800883c:	6824      	ldr	r4, [r4, #0]
 800883e:	2c00      	cmp	r4, #0
 8008840:	d1f7      	bne.n	8008832 <_fwalk_reent+0xe>
 8008842:	4638      	mov	r0, r7
 8008844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008848:	89ab      	ldrh	r3, [r5, #12]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d907      	bls.n	800885e <_fwalk_reent+0x3a>
 800884e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008852:	3301      	adds	r3, #1
 8008854:	d003      	beq.n	800885e <_fwalk_reent+0x3a>
 8008856:	4629      	mov	r1, r5
 8008858:	4630      	mov	r0, r6
 800885a:	47c0      	blx	r8
 800885c:	4307      	orrs	r7, r0
 800885e:	3568      	adds	r5, #104	; 0x68
 8008860:	e7e9      	b.n	8008836 <_fwalk_reent+0x12>
	...

08008864 <__libc_init_array>:
 8008864:	b570      	push	{r4, r5, r6, lr}
 8008866:	4d0d      	ldr	r5, [pc, #52]	; (800889c <__libc_init_array+0x38>)
 8008868:	4c0d      	ldr	r4, [pc, #52]	; (80088a0 <__libc_init_array+0x3c>)
 800886a:	1b64      	subs	r4, r4, r5
 800886c:	10a4      	asrs	r4, r4, #2
 800886e:	2600      	movs	r6, #0
 8008870:	42a6      	cmp	r6, r4
 8008872:	d109      	bne.n	8008888 <__libc_init_array+0x24>
 8008874:	4d0b      	ldr	r5, [pc, #44]	; (80088a4 <__libc_init_array+0x40>)
 8008876:	4c0c      	ldr	r4, [pc, #48]	; (80088a8 <__libc_init_array+0x44>)
 8008878:	f000 ffdc 	bl	8009834 <_init>
 800887c:	1b64      	subs	r4, r4, r5
 800887e:	10a4      	asrs	r4, r4, #2
 8008880:	2600      	movs	r6, #0
 8008882:	42a6      	cmp	r6, r4
 8008884:	d105      	bne.n	8008892 <__libc_init_array+0x2e>
 8008886:	bd70      	pop	{r4, r5, r6, pc}
 8008888:	f855 3b04 	ldr.w	r3, [r5], #4
 800888c:	4798      	blx	r3
 800888e:	3601      	adds	r6, #1
 8008890:	e7ee      	b.n	8008870 <__libc_init_array+0xc>
 8008892:	f855 3b04 	ldr.w	r3, [r5], #4
 8008896:	4798      	blx	r3
 8008898:	3601      	adds	r6, #1
 800889a:	e7f2      	b.n	8008882 <__libc_init_array+0x1e>
 800889c:	08009bac 	.word	0x08009bac
 80088a0:	08009bac 	.word	0x08009bac
 80088a4:	08009bac 	.word	0x08009bac
 80088a8:	08009bb0 	.word	0x08009bb0

080088ac <__retarget_lock_init_recursive>:
 80088ac:	4770      	bx	lr

080088ae <__retarget_lock_acquire_recursive>:
 80088ae:	4770      	bx	lr

080088b0 <__retarget_lock_release_recursive>:
 80088b0:	4770      	bx	lr

080088b2 <memcpy>:
 80088b2:	440a      	add	r2, r1
 80088b4:	4291      	cmp	r1, r2
 80088b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80088ba:	d100      	bne.n	80088be <memcpy+0xc>
 80088bc:	4770      	bx	lr
 80088be:	b510      	push	{r4, lr}
 80088c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088c8:	4291      	cmp	r1, r2
 80088ca:	d1f9      	bne.n	80088c0 <memcpy+0xe>
 80088cc:	bd10      	pop	{r4, pc}

080088ce <memset>:
 80088ce:	4402      	add	r2, r0
 80088d0:	4603      	mov	r3, r0
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d100      	bne.n	80088d8 <memset+0xa>
 80088d6:	4770      	bx	lr
 80088d8:	f803 1b01 	strb.w	r1, [r3], #1
 80088dc:	e7f9      	b.n	80088d2 <memset+0x4>

080088de <_calloc_r>:
 80088de:	b513      	push	{r0, r1, r4, lr}
 80088e0:	434a      	muls	r2, r1
 80088e2:	4611      	mov	r1, r2
 80088e4:	9201      	str	r2, [sp, #4]
 80088e6:	f000 f809 	bl	80088fc <_malloc_r>
 80088ea:	4604      	mov	r4, r0
 80088ec:	b118      	cbz	r0, 80088f6 <_calloc_r+0x18>
 80088ee:	9a01      	ldr	r2, [sp, #4]
 80088f0:	2100      	movs	r1, #0
 80088f2:	f7ff ffec 	bl	80088ce <memset>
 80088f6:	4620      	mov	r0, r4
 80088f8:	b002      	add	sp, #8
 80088fa:	bd10      	pop	{r4, pc}

080088fc <_malloc_r>:
 80088fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fe:	1ccd      	adds	r5, r1, #3
 8008900:	f025 0503 	bic.w	r5, r5, #3
 8008904:	3508      	adds	r5, #8
 8008906:	2d0c      	cmp	r5, #12
 8008908:	bf38      	it	cc
 800890a:	250c      	movcc	r5, #12
 800890c:	2d00      	cmp	r5, #0
 800890e:	4606      	mov	r6, r0
 8008910:	db01      	blt.n	8008916 <_malloc_r+0x1a>
 8008912:	42a9      	cmp	r1, r5
 8008914:	d903      	bls.n	800891e <_malloc_r+0x22>
 8008916:	230c      	movs	r3, #12
 8008918:	6033      	str	r3, [r6, #0]
 800891a:	2000      	movs	r0, #0
 800891c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800891e:	f000 fbc3 	bl	80090a8 <__malloc_lock>
 8008922:	4921      	ldr	r1, [pc, #132]	; (80089a8 <_malloc_r+0xac>)
 8008924:	680a      	ldr	r2, [r1, #0]
 8008926:	4614      	mov	r4, r2
 8008928:	b99c      	cbnz	r4, 8008952 <_malloc_r+0x56>
 800892a:	4f20      	ldr	r7, [pc, #128]	; (80089ac <_malloc_r+0xb0>)
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	b923      	cbnz	r3, 800893a <_malloc_r+0x3e>
 8008930:	4621      	mov	r1, r4
 8008932:	4630      	mov	r0, r6
 8008934:	f000 f94a 	bl	8008bcc <_sbrk_r>
 8008938:	6038      	str	r0, [r7, #0]
 800893a:	4629      	mov	r1, r5
 800893c:	4630      	mov	r0, r6
 800893e:	f000 f945 	bl	8008bcc <_sbrk_r>
 8008942:	1c43      	adds	r3, r0, #1
 8008944:	d123      	bne.n	800898e <_malloc_r+0x92>
 8008946:	230c      	movs	r3, #12
 8008948:	6033      	str	r3, [r6, #0]
 800894a:	4630      	mov	r0, r6
 800894c:	f000 fbb2 	bl	80090b4 <__malloc_unlock>
 8008950:	e7e3      	b.n	800891a <_malloc_r+0x1e>
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	1b5b      	subs	r3, r3, r5
 8008956:	d417      	bmi.n	8008988 <_malloc_r+0x8c>
 8008958:	2b0b      	cmp	r3, #11
 800895a:	d903      	bls.n	8008964 <_malloc_r+0x68>
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	441c      	add	r4, r3
 8008960:	6025      	str	r5, [r4, #0]
 8008962:	e004      	b.n	800896e <_malloc_r+0x72>
 8008964:	6863      	ldr	r3, [r4, #4]
 8008966:	42a2      	cmp	r2, r4
 8008968:	bf0c      	ite	eq
 800896a:	600b      	streq	r3, [r1, #0]
 800896c:	6053      	strne	r3, [r2, #4]
 800896e:	4630      	mov	r0, r6
 8008970:	f000 fba0 	bl	80090b4 <__malloc_unlock>
 8008974:	f104 000b 	add.w	r0, r4, #11
 8008978:	1d23      	adds	r3, r4, #4
 800897a:	f020 0007 	bic.w	r0, r0, #7
 800897e:	1ac2      	subs	r2, r0, r3
 8008980:	d0cc      	beq.n	800891c <_malloc_r+0x20>
 8008982:	1a1b      	subs	r3, r3, r0
 8008984:	50a3      	str	r3, [r4, r2]
 8008986:	e7c9      	b.n	800891c <_malloc_r+0x20>
 8008988:	4622      	mov	r2, r4
 800898a:	6864      	ldr	r4, [r4, #4]
 800898c:	e7cc      	b.n	8008928 <_malloc_r+0x2c>
 800898e:	1cc4      	adds	r4, r0, #3
 8008990:	f024 0403 	bic.w	r4, r4, #3
 8008994:	42a0      	cmp	r0, r4
 8008996:	d0e3      	beq.n	8008960 <_malloc_r+0x64>
 8008998:	1a21      	subs	r1, r4, r0
 800899a:	4630      	mov	r0, r6
 800899c:	f000 f916 	bl	8008bcc <_sbrk_r>
 80089a0:	3001      	adds	r0, #1
 80089a2:	d1dd      	bne.n	8008960 <_malloc_r+0x64>
 80089a4:	e7cf      	b.n	8008946 <_malloc_r+0x4a>
 80089a6:	bf00      	nop
 80089a8:	20001b6c 	.word	0x20001b6c
 80089ac:	20001b70 	.word	0x20001b70

080089b0 <iprintf>:
 80089b0:	b40f      	push	{r0, r1, r2, r3}
 80089b2:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <iprintf+0x2c>)
 80089b4:	b513      	push	{r0, r1, r4, lr}
 80089b6:	681c      	ldr	r4, [r3, #0]
 80089b8:	b124      	cbz	r4, 80089c4 <iprintf+0x14>
 80089ba:	69a3      	ldr	r3, [r4, #24]
 80089bc:	b913      	cbnz	r3, 80089c4 <iprintf+0x14>
 80089be:	4620      	mov	r0, r4
 80089c0:	f7ff feb2 	bl	8008728 <__sinit>
 80089c4:	ab05      	add	r3, sp, #20
 80089c6:	9a04      	ldr	r2, [sp, #16]
 80089c8:	68a1      	ldr	r1, [r4, #8]
 80089ca:	9301      	str	r3, [sp, #4]
 80089cc:	4620      	mov	r0, r4
 80089ce:	f000 fbf1 	bl	80091b4 <_vfiprintf_r>
 80089d2:	b002      	add	sp, #8
 80089d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d8:	b004      	add	sp, #16
 80089da:	4770      	bx	lr
 80089dc:	20000038 	.word	0x20000038

080089e0 <putchar>:
 80089e0:	4b09      	ldr	r3, [pc, #36]	; (8008a08 <putchar+0x28>)
 80089e2:	b513      	push	{r0, r1, r4, lr}
 80089e4:	681c      	ldr	r4, [r3, #0]
 80089e6:	4601      	mov	r1, r0
 80089e8:	b134      	cbz	r4, 80089f8 <putchar+0x18>
 80089ea:	69a3      	ldr	r3, [r4, #24]
 80089ec:	b923      	cbnz	r3, 80089f8 <putchar+0x18>
 80089ee:	9001      	str	r0, [sp, #4]
 80089f0:	4620      	mov	r0, r4
 80089f2:	f7ff fe99 	bl	8008728 <__sinit>
 80089f6:	9901      	ldr	r1, [sp, #4]
 80089f8:	68a2      	ldr	r2, [r4, #8]
 80089fa:	4620      	mov	r0, r4
 80089fc:	b002      	add	sp, #8
 80089fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a02:	f000 be9b 	b.w	800973c <_putc_r>
 8008a06:	bf00      	nop
 8008a08:	20000038 	.word	0x20000038

08008a0c <_puts_r>:
 8008a0c:	b570      	push	{r4, r5, r6, lr}
 8008a0e:	460e      	mov	r6, r1
 8008a10:	4605      	mov	r5, r0
 8008a12:	b118      	cbz	r0, 8008a1c <_puts_r+0x10>
 8008a14:	6983      	ldr	r3, [r0, #24]
 8008a16:	b90b      	cbnz	r3, 8008a1c <_puts_r+0x10>
 8008a18:	f7ff fe86 	bl	8008728 <__sinit>
 8008a1c:	69ab      	ldr	r3, [r5, #24]
 8008a1e:	68ac      	ldr	r4, [r5, #8]
 8008a20:	b913      	cbnz	r3, 8008a28 <_puts_r+0x1c>
 8008a22:	4628      	mov	r0, r5
 8008a24:	f7ff fe80 	bl	8008728 <__sinit>
 8008a28:	4b2c      	ldr	r3, [pc, #176]	; (8008adc <_puts_r+0xd0>)
 8008a2a:	429c      	cmp	r4, r3
 8008a2c:	d120      	bne.n	8008a70 <_puts_r+0x64>
 8008a2e:	686c      	ldr	r4, [r5, #4]
 8008a30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a32:	07db      	lsls	r3, r3, #31
 8008a34:	d405      	bmi.n	8008a42 <_puts_r+0x36>
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	0598      	lsls	r0, r3, #22
 8008a3a:	d402      	bmi.n	8008a42 <_puts_r+0x36>
 8008a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a3e:	f7ff ff36 	bl	80088ae <__retarget_lock_acquire_recursive>
 8008a42:	89a3      	ldrh	r3, [r4, #12]
 8008a44:	0719      	lsls	r1, r3, #28
 8008a46:	d51d      	bpl.n	8008a84 <_puts_r+0x78>
 8008a48:	6923      	ldr	r3, [r4, #16]
 8008a4a:	b1db      	cbz	r3, 8008a84 <_puts_r+0x78>
 8008a4c:	3e01      	subs	r6, #1
 8008a4e:	68a3      	ldr	r3, [r4, #8]
 8008a50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008a54:	3b01      	subs	r3, #1
 8008a56:	60a3      	str	r3, [r4, #8]
 8008a58:	bb39      	cbnz	r1, 8008aaa <_puts_r+0x9e>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	da38      	bge.n	8008ad0 <_puts_r+0xc4>
 8008a5e:	4622      	mov	r2, r4
 8008a60:	210a      	movs	r1, #10
 8008a62:	4628      	mov	r0, r5
 8008a64:	f000 f906 	bl	8008c74 <__swbuf_r>
 8008a68:	3001      	adds	r0, #1
 8008a6a:	d011      	beq.n	8008a90 <_puts_r+0x84>
 8008a6c:	250a      	movs	r5, #10
 8008a6e:	e011      	b.n	8008a94 <_puts_r+0x88>
 8008a70:	4b1b      	ldr	r3, [pc, #108]	; (8008ae0 <_puts_r+0xd4>)
 8008a72:	429c      	cmp	r4, r3
 8008a74:	d101      	bne.n	8008a7a <_puts_r+0x6e>
 8008a76:	68ac      	ldr	r4, [r5, #8]
 8008a78:	e7da      	b.n	8008a30 <_puts_r+0x24>
 8008a7a:	4b1a      	ldr	r3, [pc, #104]	; (8008ae4 <_puts_r+0xd8>)
 8008a7c:	429c      	cmp	r4, r3
 8008a7e:	bf08      	it	eq
 8008a80:	68ec      	ldreq	r4, [r5, #12]
 8008a82:	e7d5      	b.n	8008a30 <_puts_r+0x24>
 8008a84:	4621      	mov	r1, r4
 8008a86:	4628      	mov	r0, r5
 8008a88:	f000 f958 	bl	8008d3c <__swsetup_r>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d0dd      	beq.n	8008a4c <_puts_r+0x40>
 8008a90:	f04f 35ff 	mov.w	r5, #4294967295
 8008a94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a96:	07da      	lsls	r2, r3, #31
 8008a98:	d405      	bmi.n	8008aa6 <_puts_r+0x9a>
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	059b      	lsls	r3, r3, #22
 8008a9e:	d402      	bmi.n	8008aa6 <_puts_r+0x9a>
 8008aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aa2:	f7ff ff05 	bl	80088b0 <__retarget_lock_release_recursive>
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	bd70      	pop	{r4, r5, r6, pc}
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	da04      	bge.n	8008ab8 <_puts_r+0xac>
 8008aae:	69a2      	ldr	r2, [r4, #24]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	dc06      	bgt.n	8008ac2 <_puts_r+0xb6>
 8008ab4:	290a      	cmp	r1, #10
 8008ab6:	d004      	beq.n	8008ac2 <_puts_r+0xb6>
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	1c5a      	adds	r2, r3, #1
 8008abc:	6022      	str	r2, [r4, #0]
 8008abe:	7019      	strb	r1, [r3, #0]
 8008ac0:	e7c5      	b.n	8008a4e <_puts_r+0x42>
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	f000 f8d5 	bl	8008c74 <__swbuf_r>
 8008aca:	3001      	adds	r0, #1
 8008acc:	d1bf      	bne.n	8008a4e <_puts_r+0x42>
 8008ace:	e7df      	b.n	8008a90 <_puts_r+0x84>
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	250a      	movs	r5, #10
 8008ad4:	1c5a      	adds	r2, r3, #1
 8008ad6:	6022      	str	r2, [r4, #0]
 8008ad8:	701d      	strb	r5, [r3, #0]
 8008ada:	e7db      	b.n	8008a94 <_puts_r+0x88>
 8008adc:	08009b34 	.word	0x08009b34
 8008ae0:	08009b54 	.word	0x08009b54
 8008ae4:	08009b14 	.word	0x08009b14

08008ae8 <puts>:
 8008ae8:	4b02      	ldr	r3, [pc, #8]	; (8008af4 <puts+0xc>)
 8008aea:	4601      	mov	r1, r0
 8008aec:	6818      	ldr	r0, [r3, #0]
 8008aee:	f7ff bf8d 	b.w	8008a0c <_puts_r>
 8008af2:	bf00      	nop
 8008af4:	20000038 	.word	0x20000038

08008af8 <cleanup_glue>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	460c      	mov	r4, r1
 8008afc:	6809      	ldr	r1, [r1, #0]
 8008afe:	4605      	mov	r5, r0
 8008b00:	b109      	cbz	r1, 8008b06 <cleanup_glue+0xe>
 8008b02:	f7ff fff9 	bl	8008af8 <cleanup_glue>
 8008b06:	4621      	mov	r1, r4
 8008b08:	4628      	mov	r0, r5
 8008b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b0e:	f000 bad7 	b.w	80090c0 <_free_r>
	...

08008b14 <_reclaim_reent>:
 8008b14:	4b2c      	ldr	r3, [pc, #176]	; (8008bc8 <_reclaim_reent+0xb4>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4283      	cmp	r3, r0
 8008b1a:	b570      	push	{r4, r5, r6, lr}
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	d051      	beq.n	8008bc4 <_reclaim_reent+0xb0>
 8008b20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b22:	b143      	cbz	r3, 8008b36 <_reclaim_reent+0x22>
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d14a      	bne.n	8008bc0 <_reclaim_reent+0xac>
 8008b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b2c:	6819      	ldr	r1, [r3, #0]
 8008b2e:	b111      	cbz	r1, 8008b36 <_reclaim_reent+0x22>
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 fac5 	bl	80090c0 <_free_r>
 8008b36:	6961      	ldr	r1, [r4, #20]
 8008b38:	b111      	cbz	r1, 8008b40 <_reclaim_reent+0x2c>
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 fac0 	bl	80090c0 <_free_r>
 8008b40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008b42:	b111      	cbz	r1, 8008b4a <_reclaim_reent+0x36>
 8008b44:	4620      	mov	r0, r4
 8008b46:	f000 fabb 	bl	80090c0 <_free_r>
 8008b4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008b4c:	b111      	cbz	r1, 8008b54 <_reclaim_reent+0x40>
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f000 fab6 	bl	80090c0 <_free_r>
 8008b54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008b56:	b111      	cbz	r1, 8008b5e <_reclaim_reent+0x4a>
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f000 fab1 	bl	80090c0 <_free_r>
 8008b5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008b60:	b111      	cbz	r1, 8008b68 <_reclaim_reent+0x54>
 8008b62:	4620      	mov	r0, r4
 8008b64:	f000 faac 	bl	80090c0 <_free_r>
 8008b68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008b6a:	b111      	cbz	r1, 8008b72 <_reclaim_reent+0x5e>
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f000 faa7 	bl	80090c0 <_free_r>
 8008b72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008b74:	b111      	cbz	r1, 8008b7c <_reclaim_reent+0x68>
 8008b76:	4620      	mov	r0, r4
 8008b78:	f000 faa2 	bl	80090c0 <_free_r>
 8008b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b7e:	b111      	cbz	r1, 8008b86 <_reclaim_reent+0x72>
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 fa9d 	bl	80090c0 <_free_r>
 8008b86:	69a3      	ldr	r3, [r4, #24]
 8008b88:	b1e3      	cbz	r3, 8008bc4 <_reclaim_reent+0xb0>
 8008b8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	4798      	blx	r3
 8008b90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008b92:	b1b9      	cbz	r1, 8008bc4 <_reclaim_reent+0xb0>
 8008b94:	4620      	mov	r0, r4
 8008b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b9a:	f7ff bfad 	b.w	8008af8 <cleanup_glue>
 8008b9e:	5949      	ldr	r1, [r1, r5]
 8008ba0:	b941      	cbnz	r1, 8008bb4 <_reclaim_reent+0xa0>
 8008ba2:	3504      	adds	r5, #4
 8008ba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ba6:	2d80      	cmp	r5, #128	; 0x80
 8008ba8:	68d9      	ldr	r1, [r3, #12]
 8008baa:	d1f8      	bne.n	8008b9e <_reclaim_reent+0x8a>
 8008bac:	4620      	mov	r0, r4
 8008bae:	f000 fa87 	bl	80090c0 <_free_r>
 8008bb2:	e7ba      	b.n	8008b2a <_reclaim_reent+0x16>
 8008bb4:	680e      	ldr	r6, [r1, #0]
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f000 fa82 	bl	80090c0 <_free_r>
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	e7ef      	b.n	8008ba0 <_reclaim_reent+0x8c>
 8008bc0:	2500      	movs	r5, #0
 8008bc2:	e7ef      	b.n	8008ba4 <_reclaim_reent+0x90>
 8008bc4:	bd70      	pop	{r4, r5, r6, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20000038 	.word	0x20000038

08008bcc <_sbrk_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	4d06      	ldr	r5, [pc, #24]	; (8008be8 <_sbrk_r+0x1c>)
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	4608      	mov	r0, r1
 8008bd6:	602b      	str	r3, [r5, #0]
 8008bd8:	f7f9 fc42 	bl	8002460 <_sbrk>
 8008bdc:	1c43      	adds	r3, r0, #1
 8008bde:	d102      	bne.n	8008be6 <_sbrk_r+0x1a>
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	b103      	cbz	r3, 8008be6 <_sbrk_r+0x1a>
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	bd38      	pop	{r3, r4, r5, pc}
 8008be8:	20005e38 	.word	0x20005e38

08008bec <__sread>:
 8008bec:	b510      	push	{r4, lr}
 8008bee:	460c      	mov	r4, r1
 8008bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf4:	f000 fdea 	bl	80097cc <_read_r>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	bfab      	itete	ge
 8008bfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bfe:	89a3      	ldrhlt	r3, [r4, #12]
 8008c00:	181b      	addge	r3, r3, r0
 8008c02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c06:	bfac      	ite	ge
 8008c08:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c0a:	81a3      	strhlt	r3, [r4, #12]
 8008c0c:	bd10      	pop	{r4, pc}

08008c0e <__swrite>:
 8008c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c12:	461f      	mov	r7, r3
 8008c14:	898b      	ldrh	r3, [r1, #12]
 8008c16:	05db      	lsls	r3, r3, #23
 8008c18:	4605      	mov	r5, r0
 8008c1a:	460c      	mov	r4, r1
 8008c1c:	4616      	mov	r6, r2
 8008c1e:	d505      	bpl.n	8008c2c <__swrite+0x1e>
 8008c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c24:	2302      	movs	r3, #2
 8008c26:	2200      	movs	r2, #0
 8008c28:	f000 f9c8 	bl	8008fbc <_lseek_r>
 8008c2c:	89a3      	ldrh	r3, [r4, #12]
 8008c2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c36:	81a3      	strh	r3, [r4, #12]
 8008c38:	4632      	mov	r2, r6
 8008c3a:	463b      	mov	r3, r7
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c42:	f000 b869 	b.w	8008d18 <_write_r>

08008c46 <__sseek>:
 8008c46:	b510      	push	{r4, lr}
 8008c48:	460c      	mov	r4, r1
 8008c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c4e:	f000 f9b5 	bl	8008fbc <_lseek_r>
 8008c52:	1c43      	adds	r3, r0, #1
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	bf15      	itete	ne
 8008c58:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c62:	81a3      	strheq	r3, [r4, #12]
 8008c64:	bf18      	it	ne
 8008c66:	81a3      	strhne	r3, [r4, #12]
 8008c68:	bd10      	pop	{r4, pc}

08008c6a <__sclose>:
 8008c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c6e:	f000 b8d3 	b.w	8008e18 <_close_r>
	...

08008c74 <__swbuf_r>:
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	460e      	mov	r6, r1
 8008c78:	4614      	mov	r4, r2
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	b118      	cbz	r0, 8008c86 <__swbuf_r+0x12>
 8008c7e:	6983      	ldr	r3, [r0, #24]
 8008c80:	b90b      	cbnz	r3, 8008c86 <__swbuf_r+0x12>
 8008c82:	f7ff fd51 	bl	8008728 <__sinit>
 8008c86:	4b21      	ldr	r3, [pc, #132]	; (8008d0c <__swbuf_r+0x98>)
 8008c88:	429c      	cmp	r4, r3
 8008c8a:	d12b      	bne.n	8008ce4 <__swbuf_r+0x70>
 8008c8c:	686c      	ldr	r4, [r5, #4]
 8008c8e:	69a3      	ldr	r3, [r4, #24]
 8008c90:	60a3      	str	r3, [r4, #8]
 8008c92:	89a3      	ldrh	r3, [r4, #12]
 8008c94:	071a      	lsls	r2, r3, #28
 8008c96:	d52f      	bpl.n	8008cf8 <__swbuf_r+0x84>
 8008c98:	6923      	ldr	r3, [r4, #16]
 8008c9a:	b36b      	cbz	r3, 8008cf8 <__swbuf_r+0x84>
 8008c9c:	6923      	ldr	r3, [r4, #16]
 8008c9e:	6820      	ldr	r0, [r4, #0]
 8008ca0:	1ac0      	subs	r0, r0, r3
 8008ca2:	6963      	ldr	r3, [r4, #20]
 8008ca4:	b2f6      	uxtb	r6, r6
 8008ca6:	4283      	cmp	r3, r0
 8008ca8:	4637      	mov	r7, r6
 8008caa:	dc04      	bgt.n	8008cb6 <__swbuf_r+0x42>
 8008cac:	4621      	mov	r1, r4
 8008cae:	4628      	mov	r0, r5
 8008cb0:	f000 f948 	bl	8008f44 <_fflush_r>
 8008cb4:	bb30      	cbnz	r0, 8008d04 <__swbuf_r+0x90>
 8008cb6:	68a3      	ldr	r3, [r4, #8]
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	60a3      	str	r3, [r4, #8]
 8008cbc:	6823      	ldr	r3, [r4, #0]
 8008cbe:	1c5a      	adds	r2, r3, #1
 8008cc0:	6022      	str	r2, [r4, #0]
 8008cc2:	701e      	strb	r6, [r3, #0]
 8008cc4:	6963      	ldr	r3, [r4, #20]
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	4283      	cmp	r3, r0
 8008cca:	d004      	beq.n	8008cd6 <__swbuf_r+0x62>
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	07db      	lsls	r3, r3, #31
 8008cd0:	d506      	bpl.n	8008ce0 <__swbuf_r+0x6c>
 8008cd2:	2e0a      	cmp	r6, #10
 8008cd4:	d104      	bne.n	8008ce0 <__swbuf_r+0x6c>
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	4628      	mov	r0, r5
 8008cda:	f000 f933 	bl	8008f44 <_fflush_r>
 8008cde:	b988      	cbnz	r0, 8008d04 <__swbuf_r+0x90>
 8008ce0:	4638      	mov	r0, r7
 8008ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ce4:	4b0a      	ldr	r3, [pc, #40]	; (8008d10 <__swbuf_r+0x9c>)
 8008ce6:	429c      	cmp	r4, r3
 8008ce8:	d101      	bne.n	8008cee <__swbuf_r+0x7a>
 8008cea:	68ac      	ldr	r4, [r5, #8]
 8008cec:	e7cf      	b.n	8008c8e <__swbuf_r+0x1a>
 8008cee:	4b09      	ldr	r3, [pc, #36]	; (8008d14 <__swbuf_r+0xa0>)
 8008cf0:	429c      	cmp	r4, r3
 8008cf2:	bf08      	it	eq
 8008cf4:	68ec      	ldreq	r4, [r5, #12]
 8008cf6:	e7ca      	b.n	8008c8e <__swbuf_r+0x1a>
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	f000 f81e 	bl	8008d3c <__swsetup_r>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d0cb      	beq.n	8008c9c <__swbuf_r+0x28>
 8008d04:	f04f 37ff 	mov.w	r7, #4294967295
 8008d08:	e7ea      	b.n	8008ce0 <__swbuf_r+0x6c>
 8008d0a:	bf00      	nop
 8008d0c:	08009b34 	.word	0x08009b34
 8008d10:	08009b54 	.word	0x08009b54
 8008d14:	08009b14 	.word	0x08009b14

08008d18 <_write_r>:
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	4d07      	ldr	r5, [pc, #28]	; (8008d38 <_write_r+0x20>)
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	4608      	mov	r0, r1
 8008d20:	4611      	mov	r1, r2
 8008d22:	2200      	movs	r2, #0
 8008d24:	602a      	str	r2, [r5, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	f7f9 fb49 	bl	80023be <_write>
 8008d2c:	1c43      	adds	r3, r0, #1
 8008d2e:	d102      	bne.n	8008d36 <_write_r+0x1e>
 8008d30:	682b      	ldr	r3, [r5, #0]
 8008d32:	b103      	cbz	r3, 8008d36 <_write_r+0x1e>
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	bd38      	pop	{r3, r4, r5, pc}
 8008d38:	20005e38 	.word	0x20005e38

08008d3c <__swsetup_r>:
 8008d3c:	4b32      	ldr	r3, [pc, #200]	; (8008e08 <__swsetup_r+0xcc>)
 8008d3e:	b570      	push	{r4, r5, r6, lr}
 8008d40:	681d      	ldr	r5, [r3, #0]
 8008d42:	4606      	mov	r6, r0
 8008d44:	460c      	mov	r4, r1
 8008d46:	b125      	cbz	r5, 8008d52 <__swsetup_r+0x16>
 8008d48:	69ab      	ldr	r3, [r5, #24]
 8008d4a:	b913      	cbnz	r3, 8008d52 <__swsetup_r+0x16>
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f7ff fceb 	bl	8008728 <__sinit>
 8008d52:	4b2e      	ldr	r3, [pc, #184]	; (8008e0c <__swsetup_r+0xd0>)
 8008d54:	429c      	cmp	r4, r3
 8008d56:	d10f      	bne.n	8008d78 <__swsetup_r+0x3c>
 8008d58:	686c      	ldr	r4, [r5, #4]
 8008d5a:	89a3      	ldrh	r3, [r4, #12]
 8008d5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d60:	0719      	lsls	r1, r3, #28
 8008d62:	d42c      	bmi.n	8008dbe <__swsetup_r+0x82>
 8008d64:	06dd      	lsls	r5, r3, #27
 8008d66:	d411      	bmi.n	8008d8c <__swsetup_r+0x50>
 8008d68:	2309      	movs	r3, #9
 8008d6a:	6033      	str	r3, [r6, #0]
 8008d6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d70:	81a3      	strh	r3, [r4, #12]
 8008d72:	f04f 30ff 	mov.w	r0, #4294967295
 8008d76:	e03e      	b.n	8008df6 <__swsetup_r+0xba>
 8008d78:	4b25      	ldr	r3, [pc, #148]	; (8008e10 <__swsetup_r+0xd4>)
 8008d7a:	429c      	cmp	r4, r3
 8008d7c:	d101      	bne.n	8008d82 <__swsetup_r+0x46>
 8008d7e:	68ac      	ldr	r4, [r5, #8]
 8008d80:	e7eb      	b.n	8008d5a <__swsetup_r+0x1e>
 8008d82:	4b24      	ldr	r3, [pc, #144]	; (8008e14 <__swsetup_r+0xd8>)
 8008d84:	429c      	cmp	r4, r3
 8008d86:	bf08      	it	eq
 8008d88:	68ec      	ldreq	r4, [r5, #12]
 8008d8a:	e7e6      	b.n	8008d5a <__swsetup_r+0x1e>
 8008d8c:	0758      	lsls	r0, r3, #29
 8008d8e:	d512      	bpl.n	8008db6 <__swsetup_r+0x7a>
 8008d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d92:	b141      	cbz	r1, 8008da6 <__swsetup_r+0x6a>
 8008d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d98:	4299      	cmp	r1, r3
 8008d9a:	d002      	beq.n	8008da2 <__swsetup_r+0x66>
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f000 f98f 	bl	80090c0 <_free_r>
 8008da2:	2300      	movs	r3, #0
 8008da4:	6363      	str	r3, [r4, #52]	; 0x34
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008dac:	81a3      	strh	r3, [r4, #12]
 8008dae:	2300      	movs	r3, #0
 8008db0:	6063      	str	r3, [r4, #4]
 8008db2:	6923      	ldr	r3, [r4, #16]
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	89a3      	ldrh	r3, [r4, #12]
 8008db8:	f043 0308 	orr.w	r3, r3, #8
 8008dbc:	81a3      	strh	r3, [r4, #12]
 8008dbe:	6923      	ldr	r3, [r4, #16]
 8008dc0:	b94b      	cbnz	r3, 8008dd6 <__swsetup_r+0x9a>
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dcc:	d003      	beq.n	8008dd6 <__swsetup_r+0x9a>
 8008dce:	4621      	mov	r1, r4
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f000 f929 	bl	8009028 <__smakebuf_r>
 8008dd6:	89a0      	ldrh	r0, [r4, #12]
 8008dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ddc:	f010 0301 	ands.w	r3, r0, #1
 8008de0:	d00a      	beq.n	8008df8 <__swsetup_r+0xbc>
 8008de2:	2300      	movs	r3, #0
 8008de4:	60a3      	str	r3, [r4, #8]
 8008de6:	6963      	ldr	r3, [r4, #20]
 8008de8:	425b      	negs	r3, r3
 8008dea:	61a3      	str	r3, [r4, #24]
 8008dec:	6923      	ldr	r3, [r4, #16]
 8008dee:	b943      	cbnz	r3, 8008e02 <__swsetup_r+0xc6>
 8008df0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008df4:	d1ba      	bne.n	8008d6c <__swsetup_r+0x30>
 8008df6:	bd70      	pop	{r4, r5, r6, pc}
 8008df8:	0781      	lsls	r1, r0, #30
 8008dfa:	bf58      	it	pl
 8008dfc:	6963      	ldrpl	r3, [r4, #20]
 8008dfe:	60a3      	str	r3, [r4, #8]
 8008e00:	e7f4      	b.n	8008dec <__swsetup_r+0xb0>
 8008e02:	2000      	movs	r0, #0
 8008e04:	e7f7      	b.n	8008df6 <__swsetup_r+0xba>
 8008e06:	bf00      	nop
 8008e08:	20000038 	.word	0x20000038
 8008e0c:	08009b34 	.word	0x08009b34
 8008e10:	08009b54 	.word	0x08009b54
 8008e14:	08009b14 	.word	0x08009b14

08008e18 <_close_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4d06      	ldr	r5, [pc, #24]	; (8008e34 <_close_r+0x1c>)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	4604      	mov	r4, r0
 8008e20:	4608      	mov	r0, r1
 8008e22:	602b      	str	r3, [r5, #0]
 8008e24:	f7f9 fae7 	bl	80023f6 <_close>
 8008e28:	1c43      	adds	r3, r0, #1
 8008e2a:	d102      	bne.n	8008e32 <_close_r+0x1a>
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	b103      	cbz	r3, 8008e32 <_close_r+0x1a>
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	bd38      	pop	{r3, r4, r5, pc}
 8008e34:	20005e38 	.word	0x20005e38

08008e38 <__sflush_r>:
 8008e38:	898a      	ldrh	r2, [r1, #12]
 8008e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3e:	4605      	mov	r5, r0
 8008e40:	0710      	lsls	r0, r2, #28
 8008e42:	460c      	mov	r4, r1
 8008e44:	d458      	bmi.n	8008ef8 <__sflush_r+0xc0>
 8008e46:	684b      	ldr	r3, [r1, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	dc05      	bgt.n	8008e58 <__sflush_r+0x20>
 8008e4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	dc02      	bgt.n	8008e58 <__sflush_r+0x20>
 8008e52:	2000      	movs	r0, #0
 8008e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e5a:	2e00      	cmp	r6, #0
 8008e5c:	d0f9      	beq.n	8008e52 <__sflush_r+0x1a>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e64:	682f      	ldr	r7, [r5, #0]
 8008e66:	602b      	str	r3, [r5, #0]
 8008e68:	d032      	beq.n	8008ed0 <__sflush_r+0x98>
 8008e6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e6c:	89a3      	ldrh	r3, [r4, #12]
 8008e6e:	075a      	lsls	r2, r3, #29
 8008e70:	d505      	bpl.n	8008e7e <__sflush_r+0x46>
 8008e72:	6863      	ldr	r3, [r4, #4]
 8008e74:	1ac0      	subs	r0, r0, r3
 8008e76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e78:	b10b      	cbz	r3, 8008e7e <__sflush_r+0x46>
 8008e7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e7c:	1ac0      	subs	r0, r0, r3
 8008e7e:	2300      	movs	r3, #0
 8008e80:	4602      	mov	r2, r0
 8008e82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e84:	6a21      	ldr	r1, [r4, #32]
 8008e86:	4628      	mov	r0, r5
 8008e88:	47b0      	blx	r6
 8008e8a:	1c43      	adds	r3, r0, #1
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	d106      	bne.n	8008e9e <__sflush_r+0x66>
 8008e90:	6829      	ldr	r1, [r5, #0]
 8008e92:	291d      	cmp	r1, #29
 8008e94:	d82c      	bhi.n	8008ef0 <__sflush_r+0xb8>
 8008e96:	4a2a      	ldr	r2, [pc, #168]	; (8008f40 <__sflush_r+0x108>)
 8008e98:	40ca      	lsrs	r2, r1
 8008e9a:	07d6      	lsls	r6, r2, #31
 8008e9c:	d528      	bpl.n	8008ef0 <__sflush_r+0xb8>
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	6062      	str	r2, [r4, #4]
 8008ea2:	04d9      	lsls	r1, r3, #19
 8008ea4:	6922      	ldr	r2, [r4, #16]
 8008ea6:	6022      	str	r2, [r4, #0]
 8008ea8:	d504      	bpl.n	8008eb4 <__sflush_r+0x7c>
 8008eaa:	1c42      	adds	r2, r0, #1
 8008eac:	d101      	bne.n	8008eb2 <__sflush_r+0x7a>
 8008eae:	682b      	ldr	r3, [r5, #0]
 8008eb0:	b903      	cbnz	r3, 8008eb4 <__sflush_r+0x7c>
 8008eb2:	6560      	str	r0, [r4, #84]	; 0x54
 8008eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eb6:	602f      	str	r7, [r5, #0]
 8008eb8:	2900      	cmp	r1, #0
 8008eba:	d0ca      	beq.n	8008e52 <__sflush_r+0x1a>
 8008ebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ec0:	4299      	cmp	r1, r3
 8008ec2:	d002      	beq.n	8008eca <__sflush_r+0x92>
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f000 f8fb 	bl	80090c0 <_free_r>
 8008eca:	2000      	movs	r0, #0
 8008ecc:	6360      	str	r0, [r4, #52]	; 0x34
 8008ece:	e7c1      	b.n	8008e54 <__sflush_r+0x1c>
 8008ed0:	6a21      	ldr	r1, [r4, #32]
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	47b0      	blx	r6
 8008ed8:	1c41      	adds	r1, r0, #1
 8008eda:	d1c7      	bne.n	8008e6c <__sflush_r+0x34>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d0c4      	beq.n	8008e6c <__sflush_r+0x34>
 8008ee2:	2b1d      	cmp	r3, #29
 8008ee4:	d001      	beq.n	8008eea <__sflush_r+0xb2>
 8008ee6:	2b16      	cmp	r3, #22
 8008ee8:	d101      	bne.n	8008eee <__sflush_r+0xb6>
 8008eea:	602f      	str	r7, [r5, #0]
 8008eec:	e7b1      	b.n	8008e52 <__sflush_r+0x1a>
 8008eee:	89a3      	ldrh	r3, [r4, #12]
 8008ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef4:	81a3      	strh	r3, [r4, #12]
 8008ef6:	e7ad      	b.n	8008e54 <__sflush_r+0x1c>
 8008ef8:	690f      	ldr	r7, [r1, #16]
 8008efa:	2f00      	cmp	r7, #0
 8008efc:	d0a9      	beq.n	8008e52 <__sflush_r+0x1a>
 8008efe:	0793      	lsls	r3, r2, #30
 8008f00:	680e      	ldr	r6, [r1, #0]
 8008f02:	bf08      	it	eq
 8008f04:	694b      	ldreq	r3, [r1, #20]
 8008f06:	600f      	str	r7, [r1, #0]
 8008f08:	bf18      	it	ne
 8008f0a:	2300      	movne	r3, #0
 8008f0c:	eba6 0807 	sub.w	r8, r6, r7
 8008f10:	608b      	str	r3, [r1, #8]
 8008f12:	f1b8 0f00 	cmp.w	r8, #0
 8008f16:	dd9c      	ble.n	8008e52 <__sflush_r+0x1a>
 8008f18:	6a21      	ldr	r1, [r4, #32]
 8008f1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f1c:	4643      	mov	r3, r8
 8008f1e:	463a      	mov	r2, r7
 8008f20:	4628      	mov	r0, r5
 8008f22:	47b0      	blx	r6
 8008f24:	2800      	cmp	r0, #0
 8008f26:	dc06      	bgt.n	8008f36 <__sflush_r+0xfe>
 8008f28:	89a3      	ldrh	r3, [r4, #12]
 8008f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f2e:	81a3      	strh	r3, [r4, #12]
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295
 8008f34:	e78e      	b.n	8008e54 <__sflush_r+0x1c>
 8008f36:	4407      	add	r7, r0
 8008f38:	eba8 0800 	sub.w	r8, r8, r0
 8008f3c:	e7e9      	b.n	8008f12 <__sflush_r+0xda>
 8008f3e:	bf00      	nop
 8008f40:	20400001 	.word	0x20400001

08008f44 <_fflush_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	690b      	ldr	r3, [r1, #16]
 8008f48:	4605      	mov	r5, r0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	b913      	cbnz	r3, 8008f54 <_fflush_r+0x10>
 8008f4e:	2500      	movs	r5, #0
 8008f50:	4628      	mov	r0, r5
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	b118      	cbz	r0, 8008f5e <_fflush_r+0x1a>
 8008f56:	6983      	ldr	r3, [r0, #24]
 8008f58:	b90b      	cbnz	r3, 8008f5e <_fflush_r+0x1a>
 8008f5a:	f7ff fbe5 	bl	8008728 <__sinit>
 8008f5e:	4b14      	ldr	r3, [pc, #80]	; (8008fb0 <_fflush_r+0x6c>)
 8008f60:	429c      	cmp	r4, r3
 8008f62:	d11b      	bne.n	8008f9c <_fflush_r+0x58>
 8008f64:	686c      	ldr	r4, [r5, #4]
 8008f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0ef      	beq.n	8008f4e <_fflush_r+0xa>
 8008f6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f70:	07d0      	lsls	r0, r2, #31
 8008f72:	d404      	bmi.n	8008f7e <_fflush_r+0x3a>
 8008f74:	0599      	lsls	r1, r3, #22
 8008f76:	d402      	bmi.n	8008f7e <_fflush_r+0x3a>
 8008f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f7a:	f7ff fc98 	bl	80088ae <__retarget_lock_acquire_recursive>
 8008f7e:	4628      	mov	r0, r5
 8008f80:	4621      	mov	r1, r4
 8008f82:	f7ff ff59 	bl	8008e38 <__sflush_r>
 8008f86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f88:	07da      	lsls	r2, r3, #31
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	d4e0      	bmi.n	8008f50 <_fflush_r+0xc>
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	059b      	lsls	r3, r3, #22
 8008f92:	d4dd      	bmi.n	8008f50 <_fflush_r+0xc>
 8008f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f96:	f7ff fc8b 	bl	80088b0 <__retarget_lock_release_recursive>
 8008f9a:	e7d9      	b.n	8008f50 <_fflush_r+0xc>
 8008f9c:	4b05      	ldr	r3, [pc, #20]	; (8008fb4 <_fflush_r+0x70>)
 8008f9e:	429c      	cmp	r4, r3
 8008fa0:	d101      	bne.n	8008fa6 <_fflush_r+0x62>
 8008fa2:	68ac      	ldr	r4, [r5, #8]
 8008fa4:	e7df      	b.n	8008f66 <_fflush_r+0x22>
 8008fa6:	4b04      	ldr	r3, [pc, #16]	; (8008fb8 <_fflush_r+0x74>)
 8008fa8:	429c      	cmp	r4, r3
 8008faa:	bf08      	it	eq
 8008fac:	68ec      	ldreq	r4, [r5, #12]
 8008fae:	e7da      	b.n	8008f66 <_fflush_r+0x22>
 8008fb0:	08009b34 	.word	0x08009b34
 8008fb4:	08009b54 	.word	0x08009b54
 8008fb8:	08009b14 	.word	0x08009b14

08008fbc <_lseek_r>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4d07      	ldr	r5, [pc, #28]	; (8008fdc <_lseek_r+0x20>)
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	4608      	mov	r0, r1
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	602a      	str	r2, [r5, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	f7f9 fa3a 	bl	8002444 <_lseek>
 8008fd0:	1c43      	adds	r3, r0, #1
 8008fd2:	d102      	bne.n	8008fda <_lseek_r+0x1e>
 8008fd4:	682b      	ldr	r3, [r5, #0]
 8008fd6:	b103      	cbz	r3, 8008fda <_lseek_r+0x1e>
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	bd38      	pop	{r3, r4, r5, pc}
 8008fdc:	20005e38 	.word	0x20005e38

08008fe0 <__swhatbuf_r>:
 8008fe0:	b570      	push	{r4, r5, r6, lr}
 8008fe2:	460e      	mov	r6, r1
 8008fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe8:	2900      	cmp	r1, #0
 8008fea:	b096      	sub	sp, #88	; 0x58
 8008fec:	4614      	mov	r4, r2
 8008fee:	461d      	mov	r5, r3
 8008ff0:	da07      	bge.n	8009002 <__swhatbuf_r+0x22>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	602b      	str	r3, [r5, #0]
 8008ff6:	89b3      	ldrh	r3, [r6, #12]
 8008ff8:	061a      	lsls	r2, r3, #24
 8008ffa:	d410      	bmi.n	800901e <__swhatbuf_r+0x3e>
 8008ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009000:	e00e      	b.n	8009020 <__swhatbuf_r+0x40>
 8009002:	466a      	mov	r2, sp
 8009004:	f000 fbf4 	bl	80097f0 <_fstat_r>
 8009008:	2800      	cmp	r0, #0
 800900a:	dbf2      	blt.n	8008ff2 <__swhatbuf_r+0x12>
 800900c:	9a01      	ldr	r2, [sp, #4]
 800900e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009012:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009016:	425a      	negs	r2, r3
 8009018:	415a      	adcs	r2, r3
 800901a:	602a      	str	r2, [r5, #0]
 800901c:	e7ee      	b.n	8008ffc <__swhatbuf_r+0x1c>
 800901e:	2340      	movs	r3, #64	; 0x40
 8009020:	2000      	movs	r0, #0
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	b016      	add	sp, #88	; 0x58
 8009026:	bd70      	pop	{r4, r5, r6, pc}

08009028 <__smakebuf_r>:
 8009028:	898b      	ldrh	r3, [r1, #12]
 800902a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800902c:	079d      	lsls	r5, r3, #30
 800902e:	4606      	mov	r6, r0
 8009030:	460c      	mov	r4, r1
 8009032:	d507      	bpl.n	8009044 <__smakebuf_r+0x1c>
 8009034:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	6123      	str	r3, [r4, #16]
 800903c:	2301      	movs	r3, #1
 800903e:	6163      	str	r3, [r4, #20]
 8009040:	b002      	add	sp, #8
 8009042:	bd70      	pop	{r4, r5, r6, pc}
 8009044:	ab01      	add	r3, sp, #4
 8009046:	466a      	mov	r2, sp
 8009048:	f7ff ffca 	bl	8008fe0 <__swhatbuf_r>
 800904c:	9900      	ldr	r1, [sp, #0]
 800904e:	4605      	mov	r5, r0
 8009050:	4630      	mov	r0, r6
 8009052:	f7ff fc53 	bl	80088fc <_malloc_r>
 8009056:	b948      	cbnz	r0, 800906c <__smakebuf_r+0x44>
 8009058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800905c:	059a      	lsls	r2, r3, #22
 800905e:	d4ef      	bmi.n	8009040 <__smakebuf_r+0x18>
 8009060:	f023 0303 	bic.w	r3, r3, #3
 8009064:	f043 0302 	orr.w	r3, r3, #2
 8009068:	81a3      	strh	r3, [r4, #12]
 800906a:	e7e3      	b.n	8009034 <__smakebuf_r+0xc>
 800906c:	4b0d      	ldr	r3, [pc, #52]	; (80090a4 <__smakebuf_r+0x7c>)
 800906e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	6020      	str	r0, [r4, #0]
 8009074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009078:	81a3      	strh	r3, [r4, #12]
 800907a:	9b00      	ldr	r3, [sp, #0]
 800907c:	6163      	str	r3, [r4, #20]
 800907e:	9b01      	ldr	r3, [sp, #4]
 8009080:	6120      	str	r0, [r4, #16]
 8009082:	b15b      	cbz	r3, 800909c <__smakebuf_r+0x74>
 8009084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009088:	4630      	mov	r0, r6
 800908a:	f000 fbc3 	bl	8009814 <_isatty_r>
 800908e:	b128      	cbz	r0, 800909c <__smakebuf_r+0x74>
 8009090:	89a3      	ldrh	r3, [r4, #12]
 8009092:	f023 0303 	bic.w	r3, r3, #3
 8009096:	f043 0301 	orr.w	r3, r3, #1
 800909a:	81a3      	strh	r3, [r4, #12]
 800909c:	89a0      	ldrh	r0, [r4, #12]
 800909e:	4305      	orrs	r5, r0
 80090a0:	81a5      	strh	r5, [r4, #12]
 80090a2:	e7cd      	b.n	8009040 <__smakebuf_r+0x18>
 80090a4:	080086c1 	.word	0x080086c1

080090a8 <__malloc_lock>:
 80090a8:	4801      	ldr	r0, [pc, #4]	; (80090b0 <__malloc_lock+0x8>)
 80090aa:	f7ff bc00 	b.w	80088ae <__retarget_lock_acquire_recursive>
 80090ae:	bf00      	nop
 80090b0:	20005e30 	.word	0x20005e30

080090b4 <__malloc_unlock>:
 80090b4:	4801      	ldr	r0, [pc, #4]	; (80090bc <__malloc_unlock+0x8>)
 80090b6:	f7ff bbfb 	b.w	80088b0 <__retarget_lock_release_recursive>
 80090ba:	bf00      	nop
 80090bc:	20005e30 	.word	0x20005e30

080090c0 <_free_r>:
 80090c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090c2:	2900      	cmp	r1, #0
 80090c4:	d048      	beq.n	8009158 <_free_r+0x98>
 80090c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ca:	9001      	str	r0, [sp, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f1a1 0404 	sub.w	r4, r1, #4
 80090d2:	bfb8      	it	lt
 80090d4:	18e4      	addlt	r4, r4, r3
 80090d6:	f7ff ffe7 	bl	80090a8 <__malloc_lock>
 80090da:	4a20      	ldr	r2, [pc, #128]	; (800915c <_free_r+0x9c>)
 80090dc:	9801      	ldr	r0, [sp, #4]
 80090de:	6813      	ldr	r3, [r2, #0]
 80090e0:	4615      	mov	r5, r2
 80090e2:	b933      	cbnz	r3, 80090f2 <_free_r+0x32>
 80090e4:	6063      	str	r3, [r4, #4]
 80090e6:	6014      	str	r4, [r2, #0]
 80090e8:	b003      	add	sp, #12
 80090ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090ee:	f7ff bfe1 	b.w	80090b4 <__malloc_unlock>
 80090f2:	42a3      	cmp	r3, r4
 80090f4:	d90b      	bls.n	800910e <_free_r+0x4e>
 80090f6:	6821      	ldr	r1, [r4, #0]
 80090f8:	1862      	adds	r2, r4, r1
 80090fa:	4293      	cmp	r3, r2
 80090fc:	bf04      	itt	eq
 80090fe:	681a      	ldreq	r2, [r3, #0]
 8009100:	685b      	ldreq	r3, [r3, #4]
 8009102:	6063      	str	r3, [r4, #4]
 8009104:	bf04      	itt	eq
 8009106:	1852      	addeq	r2, r2, r1
 8009108:	6022      	streq	r2, [r4, #0]
 800910a:	602c      	str	r4, [r5, #0]
 800910c:	e7ec      	b.n	80090e8 <_free_r+0x28>
 800910e:	461a      	mov	r2, r3
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	b10b      	cbz	r3, 8009118 <_free_r+0x58>
 8009114:	42a3      	cmp	r3, r4
 8009116:	d9fa      	bls.n	800910e <_free_r+0x4e>
 8009118:	6811      	ldr	r1, [r2, #0]
 800911a:	1855      	adds	r5, r2, r1
 800911c:	42a5      	cmp	r5, r4
 800911e:	d10b      	bne.n	8009138 <_free_r+0x78>
 8009120:	6824      	ldr	r4, [r4, #0]
 8009122:	4421      	add	r1, r4
 8009124:	1854      	adds	r4, r2, r1
 8009126:	42a3      	cmp	r3, r4
 8009128:	6011      	str	r1, [r2, #0]
 800912a:	d1dd      	bne.n	80090e8 <_free_r+0x28>
 800912c:	681c      	ldr	r4, [r3, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	6053      	str	r3, [r2, #4]
 8009132:	4421      	add	r1, r4
 8009134:	6011      	str	r1, [r2, #0]
 8009136:	e7d7      	b.n	80090e8 <_free_r+0x28>
 8009138:	d902      	bls.n	8009140 <_free_r+0x80>
 800913a:	230c      	movs	r3, #12
 800913c:	6003      	str	r3, [r0, #0]
 800913e:	e7d3      	b.n	80090e8 <_free_r+0x28>
 8009140:	6825      	ldr	r5, [r4, #0]
 8009142:	1961      	adds	r1, r4, r5
 8009144:	428b      	cmp	r3, r1
 8009146:	bf04      	itt	eq
 8009148:	6819      	ldreq	r1, [r3, #0]
 800914a:	685b      	ldreq	r3, [r3, #4]
 800914c:	6063      	str	r3, [r4, #4]
 800914e:	bf04      	itt	eq
 8009150:	1949      	addeq	r1, r1, r5
 8009152:	6021      	streq	r1, [r4, #0]
 8009154:	6054      	str	r4, [r2, #4]
 8009156:	e7c7      	b.n	80090e8 <_free_r+0x28>
 8009158:	b003      	add	sp, #12
 800915a:	bd30      	pop	{r4, r5, pc}
 800915c:	20001b6c 	.word	0x20001b6c

08009160 <__sfputc_r>:
 8009160:	6893      	ldr	r3, [r2, #8]
 8009162:	3b01      	subs	r3, #1
 8009164:	2b00      	cmp	r3, #0
 8009166:	b410      	push	{r4}
 8009168:	6093      	str	r3, [r2, #8]
 800916a:	da08      	bge.n	800917e <__sfputc_r+0x1e>
 800916c:	6994      	ldr	r4, [r2, #24]
 800916e:	42a3      	cmp	r3, r4
 8009170:	db01      	blt.n	8009176 <__sfputc_r+0x16>
 8009172:	290a      	cmp	r1, #10
 8009174:	d103      	bne.n	800917e <__sfputc_r+0x1e>
 8009176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800917a:	f7ff bd7b 	b.w	8008c74 <__swbuf_r>
 800917e:	6813      	ldr	r3, [r2, #0]
 8009180:	1c58      	adds	r0, r3, #1
 8009182:	6010      	str	r0, [r2, #0]
 8009184:	7019      	strb	r1, [r3, #0]
 8009186:	4608      	mov	r0, r1
 8009188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800918c:	4770      	bx	lr

0800918e <__sfputs_r>:
 800918e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009190:	4606      	mov	r6, r0
 8009192:	460f      	mov	r7, r1
 8009194:	4614      	mov	r4, r2
 8009196:	18d5      	adds	r5, r2, r3
 8009198:	42ac      	cmp	r4, r5
 800919a:	d101      	bne.n	80091a0 <__sfputs_r+0x12>
 800919c:	2000      	movs	r0, #0
 800919e:	e007      	b.n	80091b0 <__sfputs_r+0x22>
 80091a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a4:	463a      	mov	r2, r7
 80091a6:	4630      	mov	r0, r6
 80091a8:	f7ff ffda 	bl	8009160 <__sfputc_r>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d1f3      	bne.n	8009198 <__sfputs_r+0xa>
 80091b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091b4 <_vfiprintf_r>:
 80091b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b8:	460d      	mov	r5, r1
 80091ba:	b09d      	sub	sp, #116	; 0x74
 80091bc:	4614      	mov	r4, r2
 80091be:	4698      	mov	r8, r3
 80091c0:	4606      	mov	r6, r0
 80091c2:	b118      	cbz	r0, 80091cc <_vfiprintf_r+0x18>
 80091c4:	6983      	ldr	r3, [r0, #24]
 80091c6:	b90b      	cbnz	r3, 80091cc <_vfiprintf_r+0x18>
 80091c8:	f7ff faae 	bl	8008728 <__sinit>
 80091cc:	4b89      	ldr	r3, [pc, #548]	; (80093f4 <_vfiprintf_r+0x240>)
 80091ce:	429d      	cmp	r5, r3
 80091d0:	d11b      	bne.n	800920a <_vfiprintf_r+0x56>
 80091d2:	6875      	ldr	r5, [r6, #4]
 80091d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091d6:	07d9      	lsls	r1, r3, #31
 80091d8:	d405      	bmi.n	80091e6 <_vfiprintf_r+0x32>
 80091da:	89ab      	ldrh	r3, [r5, #12]
 80091dc:	059a      	lsls	r2, r3, #22
 80091de:	d402      	bmi.n	80091e6 <_vfiprintf_r+0x32>
 80091e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091e2:	f7ff fb64 	bl	80088ae <__retarget_lock_acquire_recursive>
 80091e6:	89ab      	ldrh	r3, [r5, #12]
 80091e8:	071b      	lsls	r3, r3, #28
 80091ea:	d501      	bpl.n	80091f0 <_vfiprintf_r+0x3c>
 80091ec:	692b      	ldr	r3, [r5, #16]
 80091ee:	b9eb      	cbnz	r3, 800922c <_vfiprintf_r+0x78>
 80091f0:	4629      	mov	r1, r5
 80091f2:	4630      	mov	r0, r6
 80091f4:	f7ff fda2 	bl	8008d3c <__swsetup_r>
 80091f8:	b1c0      	cbz	r0, 800922c <_vfiprintf_r+0x78>
 80091fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091fc:	07dc      	lsls	r4, r3, #31
 80091fe:	d50e      	bpl.n	800921e <_vfiprintf_r+0x6a>
 8009200:	f04f 30ff 	mov.w	r0, #4294967295
 8009204:	b01d      	add	sp, #116	; 0x74
 8009206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920a:	4b7b      	ldr	r3, [pc, #492]	; (80093f8 <_vfiprintf_r+0x244>)
 800920c:	429d      	cmp	r5, r3
 800920e:	d101      	bne.n	8009214 <_vfiprintf_r+0x60>
 8009210:	68b5      	ldr	r5, [r6, #8]
 8009212:	e7df      	b.n	80091d4 <_vfiprintf_r+0x20>
 8009214:	4b79      	ldr	r3, [pc, #484]	; (80093fc <_vfiprintf_r+0x248>)
 8009216:	429d      	cmp	r5, r3
 8009218:	bf08      	it	eq
 800921a:	68f5      	ldreq	r5, [r6, #12]
 800921c:	e7da      	b.n	80091d4 <_vfiprintf_r+0x20>
 800921e:	89ab      	ldrh	r3, [r5, #12]
 8009220:	0598      	lsls	r0, r3, #22
 8009222:	d4ed      	bmi.n	8009200 <_vfiprintf_r+0x4c>
 8009224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009226:	f7ff fb43 	bl	80088b0 <__retarget_lock_release_recursive>
 800922a:	e7e9      	b.n	8009200 <_vfiprintf_r+0x4c>
 800922c:	2300      	movs	r3, #0
 800922e:	9309      	str	r3, [sp, #36]	; 0x24
 8009230:	2320      	movs	r3, #32
 8009232:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009236:	f8cd 800c 	str.w	r8, [sp, #12]
 800923a:	2330      	movs	r3, #48	; 0x30
 800923c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009400 <_vfiprintf_r+0x24c>
 8009240:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009244:	f04f 0901 	mov.w	r9, #1
 8009248:	4623      	mov	r3, r4
 800924a:	469a      	mov	sl, r3
 800924c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009250:	b10a      	cbz	r2, 8009256 <_vfiprintf_r+0xa2>
 8009252:	2a25      	cmp	r2, #37	; 0x25
 8009254:	d1f9      	bne.n	800924a <_vfiprintf_r+0x96>
 8009256:	ebba 0b04 	subs.w	fp, sl, r4
 800925a:	d00b      	beq.n	8009274 <_vfiprintf_r+0xc0>
 800925c:	465b      	mov	r3, fp
 800925e:	4622      	mov	r2, r4
 8009260:	4629      	mov	r1, r5
 8009262:	4630      	mov	r0, r6
 8009264:	f7ff ff93 	bl	800918e <__sfputs_r>
 8009268:	3001      	adds	r0, #1
 800926a:	f000 80aa 	beq.w	80093c2 <_vfiprintf_r+0x20e>
 800926e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009270:	445a      	add	r2, fp
 8009272:	9209      	str	r2, [sp, #36]	; 0x24
 8009274:	f89a 3000 	ldrb.w	r3, [sl]
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 80a2 	beq.w	80093c2 <_vfiprintf_r+0x20e>
 800927e:	2300      	movs	r3, #0
 8009280:	f04f 32ff 	mov.w	r2, #4294967295
 8009284:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009288:	f10a 0a01 	add.w	sl, sl, #1
 800928c:	9304      	str	r3, [sp, #16]
 800928e:	9307      	str	r3, [sp, #28]
 8009290:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009294:	931a      	str	r3, [sp, #104]	; 0x68
 8009296:	4654      	mov	r4, sl
 8009298:	2205      	movs	r2, #5
 800929a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800929e:	4858      	ldr	r0, [pc, #352]	; (8009400 <_vfiprintf_r+0x24c>)
 80092a0:	f7f6 ff96 	bl	80001d0 <memchr>
 80092a4:	9a04      	ldr	r2, [sp, #16]
 80092a6:	b9d8      	cbnz	r0, 80092e0 <_vfiprintf_r+0x12c>
 80092a8:	06d1      	lsls	r1, r2, #27
 80092aa:	bf44      	itt	mi
 80092ac:	2320      	movmi	r3, #32
 80092ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092b2:	0713      	lsls	r3, r2, #28
 80092b4:	bf44      	itt	mi
 80092b6:	232b      	movmi	r3, #43	; 0x2b
 80092b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092bc:	f89a 3000 	ldrb.w	r3, [sl]
 80092c0:	2b2a      	cmp	r3, #42	; 0x2a
 80092c2:	d015      	beq.n	80092f0 <_vfiprintf_r+0x13c>
 80092c4:	9a07      	ldr	r2, [sp, #28]
 80092c6:	4654      	mov	r4, sl
 80092c8:	2000      	movs	r0, #0
 80092ca:	f04f 0c0a 	mov.w	ip, #10
 80092ce:	4621      	mov	r1, r4
 80092d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092d4:	3b30      	subs	r3, #48	; 0x30
 80092d6:	2b09      	cmp	r3, #9
 80092d8:	d94e      	bls.n	8009378 <_vfiprintf_r+0x1c4>
 80092da:	b1b0      	cbz	r0, 800930a <_vfiprintf_r+0x156>
 80092dc:	9207      	str	r2, [sp, #28]
 80092de:	e014      	b.n	800930a <_vfiprintf_r+0x156>
 80092e0:	eba0 0308 	sub.w	r3, r0, r8
 80092e4:	fa09 f303 	lsl.w	r3, r9, r3
 80092e8:	4313      	orrs	r3, r2
 80092ea:	9304      	str	r3, [sp, #16]
 80092ec:	46a2      	mov	sl, r4
 80092ee:	e7d2      	b.n	8009296 <_vfiprintf_r+0xe2>
 80092f0:	9b03      	ldr	r3, [sp, #12]
 80092f2:	1d19      	adds	r1, r3, #4
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	9103      	str	r1, [sp, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	bfbb      	ittet	lt
 80092fc:	425b      	neglt	r3, r3
 80092fe:	f042 0202 	orrlt.w	r2, r2, #2
 8009302:	9307      	strge	r3, [sp, #28]
 8009304:	9307      	strlt	r3, [sp, #28]
 8009306:	bfb8      	it	lt
 8009308:	9204      	strlt	r2, [sp, #16]
 800930a:	7823      	ldrb	r3, [r4, #0]
 800930c:	2b2e      	cmp	r3, #46	; 0x2e
 800930e:	d10c      	bne.n	800932a <_vfiprintf_r+0x176>
 8009310:	7863      	ldrb	r3, [r4, #1]
 8009312:	2b2a      	cmp	r3, #42	; 0x2a
 8009314:	d135      	bne.n	8009382 <_vfiprintf_r+0x1ce>
 8009316:	9b03      	ldr	r3, [sp, #12]
 8009318:	1d1a      	adds	r2, r3, #4
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	9203      	str	r2, [sp, #12]
 800931e:	2b00      	cmp	r3, #0
 8009320:	bfb8      	it	lt
 8009322:	f04f 33ff 	movlt.w	r3, #4294967295
 8009326:	3402      	adds	r4, #2
 8009328:	9305      	str	r3, [sp, #20]
 800932a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009410 <_vfiprintf_r+0x25c>
 800932e:	7821      	ldrb	r1, [r4, #0]
 8009330:	2203      	movs	r2, #3
 8009332:	4650      	mov	r0, sl
 8009334:	f7f6 ff4c 	bl	80001d0 <memchr>
 8009338:	b140      	cbz	r0, 800934c <_vfiprintf_r+0x198>
 800933a:	2340      	movs	r3, #64	; 0x40
 800933c:	eba0 000a 	sub.w	r0, r0, sl
 8009340:	fa03 f000 	lsl.w	r0, r3, r0
 8009344:	9b04      	ldr	r3, [sp, #16]
 8009346:	4303      	orrs	r3, r0
 8009348:	3401      	adds	r4, #1
 800934a:	9304      	str	r3, [sp, #16]
 800934c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009350:	482c      	ldr	r0, [pc, #176]	; (8009404 <_vfiprintf_r+0x250>)
 8009352:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009356:	2206      	movs	r2, #6
 8009358:	f7f6 ff3a 	bl	80001d0 <memchr>
 800935c:	2800      	cmp	r0, #0
 800935e:	d03f      	beq.n	80093e0 <_vfiprintf_r+0x22c>
 8009360:	4b29      	ldr	r3, [pc, #164]	; (8009408 <_vfiprintf_r+0x254>)
 8009362:	bb1b      	cbnz	r3, 80093ac <_vfiprintf_r+0x1f8>
 8009364:	9b03      	ldr	r3, [sp, #12]
 8009366:	3307      	adds	r3, #7
 8009368:	f023 0307 	bic.w	r3, r3, #7
 800936c:	3308      	adds	r3, #8
 800936e:	9303      	str	r3, [sp, #12]
 8009370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009372:	443b      	add	r3, r7
 8009374:	9309      	str	r3, [sp, #36]	; 0x24
 8009376:	e767      	b.n	8009248 <_vfiprintf_r+0x94>
 8009378:	fb0c 3202 	mla	r2, ip, r2, r3
 800937c:	460c      	mov	r4, r1
 800937e:	2001      	movs	r0, #1
 8009380:	e7a5      	b.n	80092ce <_vfiprintf_r+0x11a>
 8009382:	2300      	movs	r3, #0
 8009384:	3401      	adds	r4, #1
 8009386:	9305      	str	r3, [sp, #20]
 8009388:	4619      	mov	r1, r3
 800938a:	f04f 0c0a 	mov.w	ip, #10
 800938e:	4620      	mov	r0, r4
 8009390:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009394:	3a30      	subs	r2, #48	; 0x30
 8009396:	2a09      	cmp	r2, #9
 8009398:	d903      	bls.n	80093a2 <_vfiprintf_r+0x1ee>
 800939a:	2b00      	cmp	r3, #0
 800939c:	d0c5      	beq.n	800932a <_vfiprintf_r+0x176>
 800939e:	9105      	str	r1, [sp, #20]
 80093a0:	e7c3      	b.n	800932a <_vfiprintf_r+0x176>
 80093a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80093a6:	4604      	mov	r4, r0
 80093a8:	2301      	movs	r3, #1
 80093aa:	e7f0      	b.n	800938e <_vfiprintf_r+0x1da>
 80093ac:	ab03      	add	r3, sp, #12
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	462a      	mov	r2, r5
 80093b2:	4b16      	ldr	r3, [pc, #88]	; (800940c <_vfiprintf_r+0x258>)
 80093b4:	a904      	add	r1, sp, #16
 80093b6:	4630      	mov	r0, r6
 80093b8:	f3af 8000 	nop.w
 80093bc:	4607      	mov	r7, r0
 80093be:	1c78      	adds	r0, r7, #1
 80093c0:	d1d6      	bne.n	8009370 <_vfiprintf_r+0x1bc>
 80093c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093c4:	07d9      	lsls	r1, r3, #31
 80093c6:	d405      	bmi.n	80093d4 <_vfiprintf_r+0x220>
 80093c8:	89ab      	ldrh	r3, [r5, #12]
 80093ca:	059a      	lsls	r2, r3, #22
 80093cc:	d402      	bmi.n	80093d4 <_vfiprintf_r+0x220>
 80093ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093d0:	f7ff fa6e 	bl	80088b0 <__retarget_lock_release_recursive>
 80093d4:	89ab      	ldrh	r3, [r5, #12]
 80093d6:	065b      	lsls	r3, r3, #25
 80093d8:	f53f af12 	bmi.w	8009200 <_vfiprintf_r+0x4c>
 80093dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093de:	e711      	b.n	8009204 <_vfiprintf_r+0x50>
 80093e0:	ab03      	add	r3, sp, #12
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	462a      	mov	r2, r5
 80093e6:	4b09      	ldr	r3, [pc, #36]	; (800940c <_vfiprintf_r+0x258>)
 80093e8:	a904      	add	r1, sp, #16
 80093ea:	4630      	mov	r0, r6
 80093ec:	f000 f880 	bl	80094f0 <_printf_i>
 80093f0:	e7e4      	b.n	80093bc <_vfiprintf_r+0x208>
 80093f2:	bf00      	nop
 80093f4:	08009b34 	.word	0x08009b34
 80093f8:	08009b54 	.word	0x08009b54
 80093fc:	08009b14 	.word	0x08009b14
 8009400:	08009b78 	.word	0x08009b78
 8009404:	08009b82 	.word	0x08009b82
 8009408:	00000000 	.word	0x00000000
 800940c:	0800918f 	.word	0x0800918f
 8009410:	08009b7e 	.word	0x08009b7e

08009414 <_printf_common>:
 8009414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009418:	4616      	mov	r6, r2
 800941a:	4699      	mov	r9, r3
 800941c:	688a      	ldr	r2, [r1, #8]
 800941e:	690b      	ldr	r3, [r1, #16]
 8009420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009424:	4293      	cmp	r3, r2
 8009426:	bfb8      	it	lt
 8009428:	4613      	movlt	r3, r2
 800942a:	6033      	str	r3, [r6, #0]
 800942c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009430:	4607      	mov	r7, r0
 8009432:	460c      	mov	r4, r1
 8009434:	b10a      	cbz	r2, 800943a <_printf_common+0x26>
 8009436:	3301      	adds	r3, #1
 8009438:	6033      	str	r3, [r6, #0]
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	0699      	lsls	r1, r3, #26
 800943e:	bf42      	ittt	mi
 8009440:	6833      	ldrmi	r3, [r6, #0]
 8009442:	3302      	addmi	r3, #2
 8009444:	6033      	strmi	r3, [r6, #0]
 8009446:	6825      	ldr	r5, [r4, #0]
 8009448:	f015 0506 	ands.w	r5, r5, #6
 800944c:	d106      	bne.n	800945c <_printf_common+0x48>
 800944e:	f104 0a19 	add.w	sl, r4, #25
 8009452:	68e3      	ldr	r3, [r4, #12]
 8009454:	6832      	ldr	r2, [r6, #0]
 8009456:	1a9b      	subs	r3, r3, r2
 8009458:	42ab      	cmp	r3, r5
 800945a:	dc26      	bgt.n	80094aa <_printf_common+0x96>
 800945c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009460:	1e13      	subs	r3, r2, #0
 8009462:	6822      	ldr	r2, [r4, #0]
 8009464:	bf18      	it	ne
 8009466:	2301      	movne	r3, #1
 8009468:	0692      	lsls	r2, r2, #26
 800946a:	d42b      	bmi.n	80094c4 <_printf_common+0xb0>
 800946c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009470:	4649      	mov	r1, r9
 8009472:	4638      	mov	r0, r7
 8009474:	47c0      	blx	r8
 8009476:	3001      	adds	r0, #1
 8009478:	d01e      	beq.n	80094b8 <_printf_common+0xa4>
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	68e5      	ldr	r5, [r4, #12]
 800947e:	6832      	ldr	r2, [r6, #0]
 8009480:	f003 0306 	and.w	r3, r3, #6
 8009484:	2b04      	cmp	r3, #4
 8009486:	bf08      	it	eq
 8009488:	1aad      	subeq	r5, r5, r2
 800948a:	68a3      	ldr	r3, [r4, #8]
 800948c:	6922      	ldr	r2, [r4, #16]
 800948e:	bf0c      	ite	eq
 8009490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009494:	2500      	movne	r5, #0
 8009496:	4293      	cmp	r3, r2
 8009498:	bfc4      	itt	gt
 800949a:	1a9b      	subgt	r3, r3, r2
 800949c:	18ed      	addgt	r5, r5, r3
 800949e:	2600      	movs	r6, #0
 80094a0:	341a      	adds	r4, #26
 80094a2:	42b5      	cmp	r5, r6
 80094a4:	d11a      	bne.n	80094dc <_printf_common+0xc8>
 80094a6:	2000      	movs	r0, #0
 80094a8:	e008      	b.n	80094bc <_printf_common+0xa8>
 80094aa:	2301      	movs	r3, #1
 80094ac:	4652      	mov	r2, sl
 80094ae:	4649      	mov	r1, r9
 80094b0:	4638      	mov	r0, r7
 80094b2:	47c0      	blx	r8
 80094b4:	3001      	adds	r0, #1
 80094b6:	d103      	bne.n	80094c0 <_printf_common+0xac>
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295
 80094bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c0:	3501      	adds	r5, #1
 80094c2:	e7c6      	b.n	8009452 <_printf_common+0x3e>
 80094c4:	18e1      	adds	r1, r4, r3
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	2030      	movs	r0, #48	; 0x30
 80094ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094ce:	4422      	add	r2, r4
 80094d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094d8:	3302      	adds	r3, #2
 80094da:	e7c7      	b.n	800946c <_printf_common+0x58>
 80094dc:	2301      	movs	r3, #1
 80094de:	4622      	mov	r2, r4
 80094e0:	4649      	mov	r1, r9
 80094e2:	4638      	mov	r0, r7
 80094e4:	47c0      	blx	r8
 80094e6:	3001      	adds	r0, #1
 80094e8:	d0e6      	beq.n	80094b8 <_printf_common+0xa4>
 80094ea:	3601      	adds	r6, #1
 80094ec:	e7d9      	b.n	80094a2 <_printf_common+0x8e>
	...

080094f0 <_printf_i>:
 80094f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094f4:	460c      	mov	r4, r1
 80094f6:	4691      	mov	r9, r2
 80094f8:	7e27      	ldrb	r7, [r4, #24]
 80094fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80094fc:	2f78      	cmp	r7, #120	; 0x78
 80094fe:	4680      	mov	r8, r0
 8009500:	469a      	mov	sl, r3
 8009502:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009506:	d807      	bhi.n	8009518 <_printf_i+0x28>
 8009508:	2f62      	cmp	r7, #98	; 0x62
 800950a:	d80a      	bhi.n	8009522 <_printf_i+0x32>
 800950c:	2f00      	cmp	r7, #0
 800950e:	f000 80d8 	beq.w	80096c2 <_printf_i+0x1d2>
 8009512:	2f58      	cmp	r7, #88	; 0x58
 8009514:	f000 80a3 	beq.w	800965e <_printf_i+0x16e>
 8009518:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800951c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009520:	e03a      	b.n	8009598 <_printf_i+0xa8>
 8009522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009526:	2b15      	cmp	r3, #21
 8009528:	d8f6      	bhi.n	8009518 <_printf_i+0x28>
 800952a:	a001      	add	r0, pc, #4	; (adr r0, 8009530 <_printf_i+0x40>)
 800952c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009530:	08009589 	.word	0x08009589
 8009534:	0800959d 	.word	0x0800959d
 8009538:	08009519 	.word	0x08009519
 800953c:	08009519 	.word	0x08009519
 8009540:	08009519 	.word	0x08009519
 8009544:	08009519 	.word	0x08009519
 8009548:	0800959d 	.word	0x0800959d
 800954c:	08009519 	.word	0x08009519
 8009550:	08009519 	.word	0x08009519
 8009554:	08009519 	.word	0x08009519
 8009558:	08009519 	.word	0x08009519
 800955c:	080096a9 	.word	0x080096a9
 8009560:	080095cd 	.word	0x080095cd
 8009564:	0800968b 	.word	0x0800968b
 8009568:	08009519 	.word	0x08009519
 800956c:	08009519 	.word	0x08009519
 8009570:	080096cb 	.word	0x080096cb
 8009574:	08009519 	.word	0x08009519
 8009578:	080095cd 	.word	0x080095cd
 800957c:	08009519 	.word	0x08009519
 8009580:	08009519 	.word	0x08009519
 8009584:	08009693 	.word	0x08009693
 8009588:	680b      	ldr	r3, [r1, #0]
 800958a:	1d1a      	adds	r2, r3, #4
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	600a      	str	r2, [r1, #0]
 8009590:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009598:	2301      	movs	r3, #1
 800959a:	e0a3      	b.n	80096e4 <_printf_i+0x1f4>
 800959c:	6825      	ldr	r5, [r4, #0]
 800959e:	6808      	ldr	r0, [r1, #0]
 80095a0:	062e      	lsls	r6, r5, #24
 80095a2:	f100 0304 	add.w	r3, r0, #4
 80095a6:	d50a      	bpl.n	80095be <_printf_i+0xce>
 80095a8:	6805      	ldr	r5, [r0, #0]
 80095aa:	600b      	str	r3, [r1, #0]
 80095ac:	2d00      	cmp	r5, #0
 80095ae:	da03      	bge.n	80095b8 <_printf_i+0xc8>
 80095b0:	232d      	movs	r3, #45	; 0x2d
 80095b2:	426d      	negs	r5, r5
 80095b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095b8:	485e      	ldr	r0, [pc, #376]	; (8009734 <_printf_i+0x244>)
 80095ba:	230a      	movs	r3, #10
 80095bc:	e019      	b.n	80095f2 <_printf_i+0x102>
 80095be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80095c2:	6805      	ldr	r5, [r0, #0]
 80095c4:	600b      	str	r3, [r1, #0]
 80095c6:	bf18      	it	ne
 80095c8:	b22d      	sxthne	r5, r5
 80095ca:	e7ef      	b.n	80095ac <_printf_i+0xbc>
 80095cc:	680b      	ldr	r3, [r1, #0]
 80095ce:	6825      	ldr	r5, [r4, #0]
 80095d0:	1d18      	adds	r0, r3, #4
 80095d2:	6008      	str	r0, [r1, #0]
 80095d4:	0628      	lsls	r0, r5, #24
 80095d6:	d501      	bpl.n	80095dc <_printf_i+0xec>
 80095d8:	681d      	ldr	r5, [r3, #0]
 80095da:	e002      	b.n	80095e2 <_printf_i+0xf2>
 80095dc:	0669      	lsls	r1, r5, #25
 80095de:	d5fb      	bpl.n	80095d8 <_printf_i+0xe8>
 80095e0:	881d      	ldrh	r5, [r3, #0]
 80095e2:	4854      	ldr	r0, [pc, #336]	; (8009734 <_printf_i+0x244>)
 80095e4:	2f6f      	cmp	r7, #111	; 0x6f
 80095e6:	bf0c      	ite	eq
 80095e8:	2308      	moveq	r3, #8
 80095ea:	230a      	movne	r3, #10
 80095ec:	2100      	movs	r1, #0
 80095ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095f2:	6866      	ldr	r6, [r4, #4]
 80095f4:	60a6      	str	r6, [r4, #8]
 80095f6:	2e00      	cmp	r6, #0
 80095f8:	bfa2      	ittt	ge
 80095fa:	6821      	ldrge	r1, [r4, #0]
 80095fc:	f021 0104 	bicge.w	r1, r1, #4
 8009600:	6021      	strge	r1, [r4, #0]
 8009602:	b90d      	cbnz	r5, 8009608 <_printf_i+0x118>
 8009604:	2e00      	cmp	r6, #0
 8009606:	d04d      	beq.n	80096a4 <_printf_i+0x1b4>
 8009608:	4616      	mov	r6, r2
 800960a:	fbb5 f1f3 	udiv	r1, r5, r3
 800960e:	fb03 5711 	mls	r7, r3, r1, r5
 8009612:	5dc7      	ldrb	r7, [r0, r7]
 8009614:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009618:	462f      	mov	r7, r5
 800961a:	42bb      	cmp	r3, r7
 800961c:	460d      	mov	r5, r1
 800961e:	d9f4      	bls.n	800960a <_printf_i+0x11a>
 8009620:	2b08      	cmp	r3, #8
 8009622:	d10b      	bne.n	800963c <_printf_i+0x14c>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	07df      	lsls	r7, r3, #31
 8009628:	d508      	bpl.n	800963c <_printf_i+0x14c>
 800962a:	6923      	ldr	r3, [r4, #16]
 800962c:	6861      	ldr	r1, [r4, #4]
 800962e:	4299      	cmp	r1, r3
 8009630:	bfde      	ittt	le
 8009632:	2330      	movle	r3, #48	; 0x30
 8009634:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009638:	f106 36ff 	addle.w	r6, r6, #4294967295
 800963c:	1b92      	subs	r2, r2, r6
 800963e:	6122      	str	r2, [r4, #16]
 8009640:	f8cd a000 	str.w	sl, [sp]
 8009644:	464b      	mov	r3, r9
 8009646:	aa03      	add	r2, sp, #12
 8009648:	4621      	mov	r1, r4
 800964a:	4640      	mov	r0, r8
 800964c:	f7ff fee2 	bl	8009414 <_printf_common>
 8009650:	3001      	adds	r0, #1
 8009652:	d14c      	bne.n	80096ee <_printf_i+0x1fe>
 8009654:	f04f 30ff 	mov.w	r0, #4294967295
 8009658:	b004      	add	sp, #16
 800965a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800965e:	4835      	ldr	r0, [pc, #212]	; (8009734 <_printf_i+0x244>)
 8009660:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	680e      	ldr	r6, [r1, #0]
 8009668:	061f      	lsls	r7, r3, #24
 800966a:	f856 5b04 	ldr.w	r5, [r6], #4
 800966e:	600e      	str	r6, [r1, #0]
 8009670:	d514      	bpl.n	800969c <_printf_i+0x1ac>
 8009672:	07d9      	lsls	r1, r3, #31
 8009674:	bf44      	itt	mi
 8009676:	f043 0320 	orrmi.w	r3, r3, #32
 800967a:	6023      	strmi	r3, [r4, #0]
 800967c:	b91d      	cbnz	r5, 8009686 <_printf_i+0x196>
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	f023 0320 	bic.w	r3, r3, #32
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	2310      	movs	r3, #16
 8009688:	e7b0      	b.n	80095ec <_printf_i+0xfc>
 800968a:	6823      	ldr	r3, [r4, #0]
 800968c:	f043 0320 	orr.w	r3, r3, #32
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	2378      	movs	r3, #120	; 0x78
 8009694:	4828      	ldr	r0, [pc, #160]	; (8009738 <_printf_i+0x248>)
 8009696:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800969a:	e7e3      	b.n	8009664 <_printf_i+0x174>
 800969c:	065e      	lsls	r6, r3, #25
 800969e:	bf48      	it	mi
 80096a0:	b2ad      	uxthmi	r5, r5
 80096a2:	e7e6      	b.n	8009672 <_printf_i+0x182>
 80096a4:	4616      	mov	r6, r2
 80096a6:	e7bb      	b.n	8009620 <_printf_i+0x130>
 80096a8:	680b      	ldr	r3, [r1, #0]
 80096aa:	6826      	ldr	r6, [r4, #0]
 80096ac:	6960      	ldr	r0, [r4, #20]
 80096ae:	1d1d      	adds	r5, r3, #4
 80096b0:	600d      	str	r5, [r1, #0]
 80096b2:	0635      	lsls	r5, r6, #24
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	d501      	bpl.n	80096bc <_printf_i+0x1cc>
 80096b8:	6018      	str	r0, [r3, #0]
 80096ba:	e002      	b.n	80096c2 <_printf_i+0x1d2>
 80096bc:	0671      	lsls	r1, r6, #25
 80096be:	d5fb      	bpl.n	80096b8 <_printf_i+0x1c8>
 80096c0:	8018      	strh	r0, [r3, #0]
 80096c2:	2300      	movs	r3, #0
 80096c4:	6123      	str	r3, [r4, #16]
 80096c6:	4616      	mov	r6, r2
 80096c8:	e7ba      	b.n	8009640 <_printf_i+0x150>
 80096ca:	680b      	ldr	r3, [r1, #0]
 80096cc:	1d1a      	adds	r2, r3, #4
 80096ce:	600a      	str	r2, [r1, #0]
 80096d0:	681e      	ldr	r6, [r3, #0]
 80096d2:	6862      	ldr	r2, [r4, #4]
 80096d4:	2100      	movs	r1, #0
 80096d6:	4630      	mov	r0, r6
 80096d8:	f7f6 fd7a 	bl	80001d0 <memchr>
 80096dc:	b108      	cbz	r0, 80096e2 <_printf_i+0x1f2>
 80096de:	1b80      	subs	r0, r0, r6
 80096e0:	6060      	str	r0, [r4, #4]
 80096e2:	6863      	ldr	r3, [r4, #4]
 80096e4:	6123      	str	r3, [r4, #16]
 80096e6:	2300      	movs	r3, #0
 80096e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ec:	e7a8      	b.n	8009640 <_printf_i+0x150>
 80096ee:	6923      	ldr	r3, [r4, #16]
 80096f0:	4632      	mov	r2, r6
 80096f2:	4649      	mov	r1, r9
 80096f4:	4640      	mov	r0, r8
 80096f6:	47d0      	blx	sl
 80096f8:	3001      	adds	r0, #1
 80096fa:	d0ab      	beq.n	8009654 <_printf_i+0x164>
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	079b      	lsls	r3, r3, #30
 8009700:	d413      	bmi.n	800972a <_printf_i+0x23a>
 8009702:	68e0      	ldr	r0, [r4, #12]
 8009704:	9b03      	ldr	r3, [sp, #12]
 8009706:	4298      	cmp	r0, r3
 8009708:	bfb8      	it	lt
 800970a:	4618      	movlt	r0, r3
 800970c:	e7a4      	b.n	8009658 <_printf_i+0x168>
 800970e:	2301      	movs	r3, #1
 8009710:	4632      	mov	r2, r6
 8009712:	4649      	mov	r1, r9
 8009714:	4640      	mov	r0, r8
 8009716:	47d0      	blx	sl
 8009718:	3001      	adds	r0, #1
 800971a:	d09b      	beq.n	8009654 <_printf_i+0x164>
 800971c:	3501      	adds	r5, #1
 800971e:	68e3      	ldr	r3, [r4, #12]
 8009720:	9903      	ldr	r1, [sp, #12]
 8009722:	1a5b      	subs	r3, r3, r1
 8009724:	42ab      	cmp	r3, r5
 8009726:	dcf2      	bgt.n	800970e <_printf_i+0x21e>
 8009728:	e7eb      	b.n	8009702 <_printf_i+0x212>
 800972a:	2500      	movs	r5, #0
 800972c:	f104 0619 	add.w	r6, r4, #25
 8009730:	e7f5      	b.n	800971e <_printf_i+0x22e>
 8009732:	bf00      	nop
 8009734:	08009b89 	.word	0x08009b89
 8009738:	08009b9a 	.word	0x08009b9a

0800973c <_putc_r>:
 800973c:	b570      	push	{r4, r5, r6, lr}
 800973e:	460d      	mov	r5, r1
 8009740:	4614      	mov	r4, r2
 8009742:	4606      	mov	r6, r0
 8009744:	b118      	cbz	r0, 800974e <_putc_r+0x12>
 8009746:	6983      	ldr	r3, [r0, #24]
 8009748:	b90b      	cbnz	r3, 800974e <_putc_r+0x12>
 800974a:	f7fe ffed 	bl	8008728 <__sinit>
 800974e:	4b1c      	ldr	r3, [pc, #112]	; (80097c0 <_putc_r+0x84>)
 8009750:	429c      	cmp	r4, r3
 8009752:	d124      	bne.n	800979e <_putc_r+0x62>
 8009754:	6874      	ldr	r4, [r6, #4]
 8009756:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009758:	07d8      	lsls	r0, r3, #31
 800975a:	d405      	bmi.n	8009768 <_putc_r+0x2c>
 800975c:	89a3      	ldrh	r3, [r4, #12]
 800975e:	0599      	lsls	r1, r3, #22
 8009760:	d402      	bmi.n	8009768 <_putc_r+0x2c>
 8009762:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009764:	f7ff f8a3 	bl	80088ae <__retarget_lock_acquire_recursive>
 8009768:	68a3      	ldr	r3, [r4, #8]
 800976a:	3b01      	subs	r3, #1
 800976c:	2b00      	cmp	r3, #0
 800976e:	60a3      	str	r3, [r4, #8]
 8009770:	da05      	bge.n	800977e <_putc_r+0x42>
 8009772:	69a2      	ldr	r2, [r4, #24]
 8009774:	4293      	cmp	r3, r2
 8009776:	db1c      	blt.n	80097b2 <_putc_r+0x76>
 8009778:	b2eb      	uxtb	r3, r5
 800977a:	2b0a      	cmp	r3, #10
 800977c:	d019      	beq.n	80097b2 <_putc_r+0x76>
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	1c5a      	adds	r2, r3, #1
 8009782:	6022      	str	r2, [r4, #0]
 8009784:	701d      	strb	r5, [r3, #0]
 8009786:	b2ed      	uxtb	r5, r5
 8009788:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800978a:	07da      	lsls	r2, r3, #31
 800978c:	d405      	bmi.n	800979a <_putc_r+0x5e>
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	059b      	lsls	r3, r3, #22
 8009792:	d402      	bmi.n	800979a <_putc_r+0x5e>
 8009794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009796:	f7ff f88b 	bl	80088b0 <__retarget_lock_release_recursive>
 800979a:	4628      	mov	r0, r5
 800979c:	bd70      	pop	{r4, r5, r6, pc}
 800979e:	4b09      	ldr	r3, [pc, #36]	; (80097c4 <_putc_r+0x88>)
 80097a0:	429c      	cmp	r4, r3
 80097a2:	d101      	bne.n	80097a8 <_putc_r+0x6c>
 80097a4:	68b4      	ldr	r4, [r6, #8]
 80097a6:	e7d6      	b.n	8009756 <_putc_r+0x1a>
 80097a8:	4b07      	ldr	r3, [pc, #28]	; (80097c8 <_putc_r+0x8c>)
 80097aa:	429c      	cmp	r4, r3
 80097ac:	bf08      	it	eq
 80097ae:	68f4      	ldreq	r4, [r6, #12]
 80097b0:	e7d1      	b.n	8009756 <_putc_r+0x1a>
 80097b2:	4629      	mov	r1, r5
 80097b4:	4622      	mov	r2, r4
 80097b6:	4630      	mov	r0, r6
 80097b8:	f7ff fa5c 	bl	8008c74 <__swbuf_r>
 80097bc:	4605      	mov	r5, r0
 80097be:	e7e3      	b.n	8009788 <_putc_r+0x4c>
 80097c0:	08009b34 	.word	0x08009b34
 80097c4:	08009b54 	.word	0x08009b54
 80097c8:	08009b14 	.word	0x08009b14

080097cc <_read_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	4d07      	ldr	r5, [pc, #28]	; (80097ec <_read_r+0x20>)
 80097d0:	4604      	mov	r4, r0
 80097d2:	4608      	mov	r0, r1
 80097d4:	4611      	mov	r1, r2
 80097d6:	2200      	movs	r2, #0
 80097d8:	602a      	str	r2, [r5, #0]
 80097da:	461a      	mov	r2, r3
 80097dc:	f7f8 fdd2 	bl	8002384 <_read>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d102      	bne.n	80097ea <_read_r+0x1e>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	b103      	cbz	r3, 80097ea <_read_r+0x1e>
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	bd38      	pop	{r3, r4, r5, pc}
 80097ec:	20005e38 	.word	0x20005e38

080097f0 <_fstat_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	4d07      	ldr	r5, [pc, #28]	; (8009810 <_fstat_r+0x20>)
 80097f4:	2300      	movs	r3, #0
 80097f6:	4604      	mov	r4, r0
 80097f8:	4608      	mov	r0, r1
 80097fa:	4611      	mov	r1, r2
 80097fc:	602b      	str	r3, [r5, #0]
 80097fe:	f7f8 fe06 	bl	800240e <_fstat>
 8009802:	1c43      	adds	r3, r0, #1
 8009804:	d102      	bne.n	800980c <_fstat_r+0x1c>
 8009806:	682b      	ldr	r3, [r5, #0]
 8009808:	b103      	cbz	r3, 800980c <_fstat_r+0x1c>
 800980a:	6023      	str	r3, [r4, #0]
 800980c:	bd38      	pop	{r3, r4, r5, pc}
 800980e:	bf00      	nop
 8009810:	20005e38 	.word	0x20005e38

08009814 <_isatty_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	4d06      	ldr	r5, [pc, #24]	; (8009830 <_isatty_r+0x1c>)
 8009818:	2300      	movs	r3, #0
 800981a:	4604      	mov	r4, r0
 800981c:	4608      	mov	r0, r1
 800981e:	602b      	str	r3, [r5, #0]
 8009820:	f7f8 fe05 	bl	800242e <_isatty>
 8009824:	1c43      	adds	r3, r0, #1
 8009826:	d102      	bne.n	800982e <_isatty_r+0x1a>
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	b103      	cbz	r3, 800982e <_isatty_r+0x1a>
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	20005e38 	.word	0x20005e38

08009834 <_init>:
 8009834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009836:	bf00      	nop
 8009838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800983a:	bc08      	pop	{r3}
 800983c:	469e      	mov	lr, r3
 800983e:	4770      	bx	lr

08009840 <_fini>:
 8009840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009842:	bf00      	nop
 8009844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009846:	bc08      	pop	{r3}
 8009848:	469e      	mov	lr, r3
 800984a:	4770      	bx	lr
