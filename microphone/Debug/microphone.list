
microphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  08007df0  08007df0  00017df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800815c  0800815c  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800815c  0800815c  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800815c  0800815c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800815c  0800815c  0001815c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008160  08008160  00018160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d08  20000094  080081f8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005d9c  080081f8  00025d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027285  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000496f  00000000  00000000  00047349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  0004bcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001808  00000000  00000000  0004d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b38a  00000000  00000000  0004eec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e1d5  00000000  00000000  0007a24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdec7  00000000  00000000  0009841f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001962e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073a8  00000000  00000000  0019633c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007dd8 	.word	0x08007dd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08007dd8 	.word	0x08007dd8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b0ac      	sub	sp, #176	; 0xb0
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000278:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
 8000286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000288:	f107 0314 	add.w	r3, r7, #20
 800028c:	2288      	movs	r2, #136	; 0x88
 800028e:	2100      	movs	r1, #0
 8000290:	4618      	mov	r0, r3
 8000292:	f006 fe4c 	bl	8006f2e <memset>
  if(DFSDM1_Init == 0)
 8000296:	4b79      	ldr	r3, [pc, #484]	; (800047c <HAL_DFSDM_FilterMspInit+0x20c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d17d      	bne.n	800039a <HAL_DFSDM_FilterMspInit+0x12a>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 800029e:	f44f 3384 	mov.w	r3, #67584	; 0x10800
 80002a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	67bb      	str	r3, [r7, #120]	; 0x78
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80002a8:	2300      	movs	r3, #0
 80002aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002ae:	2301      	movs	r3, #1
 80002b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 80002b2:	2304      	movs	r3, #4
 80002b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 11;
 80002b6:	230b      	movs	r3, #11
 80002b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80002ba:	2307      	movs	r3, #7
 80002bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80002be:	2302      	movs	r3, #2
 80002c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80002c2:	2302      	movs	r3, #2
 80002c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80002c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4618      	mov	r0, r3
 80002d2:	f002 fe99 	bl	8003008 <HAL_RCCEx_PeriphCLKConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <HAL_DFSDM_FilterMspInit+0x70>
    {
      Error_Handler();
 80002dc:	f000 fb94 	bl	8000a08 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80002e0:	4b67      	ldr	r3, [pc, #412]	; (8000480 <HAL_DFSDM_FilterMspInit+0x210>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3301      	adds	r3, #1
 80002e6:	4a66      	ldr	r2, [pc, #408]	; (8000480 <HAL_DFSDM_FilterMspInit+0x210>)
 80002e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80002ea:	4b65      	ldr	r3, [pc, #404]	; (8000480 <HAL_DFSDM_FilterMspInit+0x210>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d10b      	bne.n	800030a <HAL_DFSDM_FilterMspInit+0x9a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80002f2:	4b64      	ldr	r3, [pc, #400]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 80002f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002f6:	4a63      	ldr	r2, [pc, #396]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 80002f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002fc:	6613      	str	r3, [r2, #96]	; 0x60
 80002fe:	4b61      	ldr	r3, [pc, #388]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000302:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000306:	613b      	str	r3, [r7, #16]
 8000308:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800030a:	4b5e      	ldr	r3, [pc, #376]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	4a5d      	ldr	r2, [pc, #372]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000310:	f043 0304 	orr.w	r3, r3, #4
 8000314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000316:	4b5b      	ldr	r3, [pc, #364]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031a:	f003 0304 	and.w	r3, r3, #4
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000322:	4b58      	ldr	r3, [pc, #352]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000326:	4a57      	ldr	r2, [pc, #348]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000328:	f043 0302 	orr.w	r3, r3, #2
 800032c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032e:	4b55      	ldr	r3, [pc, #340]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	f003 0302 	and.w	r3, r3, #2
 8000336:	60bb      	str	r3, [r7, #8]
 8000338:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800033a:	2304      	movs	r3, #4
 800033c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000340:	2302      	movs	r3, #2
 8000342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034c:	2300      	movs	r3, #0
 800034e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000352:	2306      	movs	r3, #6
 8000354:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000358:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800035c:	4619      	mov	r1, r3
 800035e:	484a      	ldr	r0, [pc, #296]	; (8000488 <HAL_DFSDM_FilterMspInit+0x218>)
 8000360:	f001 fe3c 	bl	8001fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800036c:	2302      	movs	r3, #2
 800036e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	2300      	movs	r3, #0
 8000374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	2300      	movs	r3, #0
 800037a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800037e:	2306      	movs	r3, #6
 8000380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000384:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000388:	4619      	mov	r1, r3
 800038a:	4840      	ldr	r0, [pc, #256]	; (800048c <HAL_DFSDM_FilterMspInit+0x21c>)
 800038c:	f001 fe26 	bl	8001fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000390:	4b3a      	ldr	r3, [pc, #232]	; (800047c <HAL_DFSDM_FilterMspInit+0x20c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	3301      	adds	r3, #1
 8000396:	4a39      	ldr	r2, [pc, #228]	; (800047c <HAL_DFSDM_FilterMspInit+0x20c>)
 8000398:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a3c      	ldr	r2, [pc, #240]	; (8000490 <HAL_DFSDM_FilterMspInit+0x220>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d130      	bne.n	8000406 <HAL_DFSDM_FilterMspInit+0x196>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80003a4:	4b3b      	ldr	r3, [pc, #236]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003a6:	4a3c      	ldr	r2, [pc, #240]	; (8000498 <HAL_DFSDM_FilterMspInit+0x228>)
 80003a8:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80003aa:	4b3a      	ldr	r3, [pc, #232]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003b0:	4b38      	ldr	r3, [pc, #224]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80003b6:	4b37      	ldr	r3, [pc, #220]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80003bc:	4b35      	ldr	r3, [pc, #212]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003be:	2280      	movs	r2, #128	; 0x80
 80003c0:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80003c2:	4b34      	ldr	r3, [pc, #208]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003c8:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80003ca:	4b32      	ldr	r3, [pc, #200]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80003d0:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80003d2:	4b30      	ldr	r3, [pc, #192]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003d4:	2220      	movs	r2, #32
 80003d6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003da:	2200      	movs	r2, #0
 80003dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80003de:	482d      	ldr	r0, [pc, #180]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003e0:	f001 fc04 	bl	8001bec <HAL_DMA_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <HAL_DFSDM_FilterMspInit+0x17e>
    {
      Error_Handler();
 80003ea:	f000 fb0d 	bl	8000a08 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a28      	ldr	r2, [pc, #160]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80003f4:	4a27      	ldr	r2, [pc, #156]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a25      	ldr	r2, [pc, #148]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003fe:	629a      	str	r2, [r3, #40]	; 0x28
 8000400:	4a24      	ldr	r2, [pc, #144]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6293      	str	r3, [r2, #40]	; 0x28
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a24      	ldr	r2, [pc, #144]	; (800049c <HAL_DFSDM_FilterMspInit+0x22c>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d130      	bne.n	8000472 <HAL_DFSDM_FilterMspInit+0x202>
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 8000410:	4b23      	ldr	r3, [pc, #140]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000412:	4a24      	ldr	r2, [pc, #144]	; (80004a4 <HAL_DFSDM_FilterMspInit+0x234>)
 8000414:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 8000416:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000418:	2200      	movs	r2, #0
 800041a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800041c:	4b20      	ldr	r3, [pc, #128]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000424:	2200      	movs	r2, #0
 8000426:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000428:	4b1d      	ldr	r3, [pc, #116]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800042a:	2280      	movs	r2, #128	; 0x80
 800042c:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800042e:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000434:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000436:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800043c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 800043e:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000440:	2220      	movs	r2, #32
 8000442:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_LOW;
 8000444:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000446:	2200      	movs	r2, #0
 8000448:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 800044a:	4815      	ldr	r0, [pc, #84]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800044c:	f001 fbce 	bl	8001bec <HAL_DMA_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <HAL_DFSDM_FilterMspInit+0x1ea>
    {
      Error_Handler();
 8000456:	f000 fad7 	bl	8000a08 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a10      	ldr	r2, [pc, #64]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800045e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000460:	4a0f      	ldr	r2, [pc, #60]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a0d      	ldr	r2, [pc, #52]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800046a:	629a      	str	r2, [r3, #40]	; 0x28
 800046c:	4a0c      	ldr	r2, [pc, #48]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8000472:	bf00      	nop
 8000474:	37b0      	adds	r7, #176	; 0xb0
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	200000b4 	.word	0x200000b4
 8000480:	200000b0 	.word	0x200000b0
 8000484:	40021000 	.word	0x40021000
 8000488:	48000800 	.word	0x48000800
 800048c:	48000400 	.word	0x48000400
 8000490:	40016100 	.word	0x40016100
 8000494:	20001bdc 	.word	0x20001bdc
 8000498:	40020044 	.word	0x40020044
 800049c:	40016180 	.word	0x40016180
 80004a0:	20001b94 	.word	0x20001b94
 80004a4:	40020058 	.word	0x40020058

080004a8 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b0ac      	sub	sp, #176	; 0xb0
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	2288      	movs	r2, #136	; 0x88
 80004c6:	2100      	movs	r1, #0
 80004c8:	4618      	mov	r0, r3
 80004ca:	f006 fd30 	bl	8006f2e <memset>
  if(DFSDM1_Init == 0)
 80004ce:	4b43      	ldr	r3, [pc, #268]	; (80005dc <HAL_DFSDM_ChannelMspInit+0x134>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d17d      	bne.n	80005d2 <HAL_DFSDM_ChannelMspInit+0x12a>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 80004d6:	f44f 3384 	mov.w	r3, #67584	; 0x10800
 80004da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80004dc:	2300      	movs	r3, #0
 80004de:	67bb      	str	r3, [r7, #120]	; 0x78
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80004e0:	2300      	movs	r3, #0
 80004e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80004e6:	2301      	movs	r3, #1
 80004e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 80004ea:	2304      	movs	r3, #4
 80004ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 11;
 80004ee:	230b      	movs	r3, #11
 80004f0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80004f2:	2307      	movs	r3, #7
 80004f4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80004f6:	2302      	movs	r3, #2
 80004f8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80004fa:	2302      	movs	r3, #2
 80004fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80004fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000502:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	4618      	mov	r0, r3
 800050a:	f002 fd7d 	bl	8003008 <HAL_RCCEx_PeriphCLKConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <HAL_DFSDM_ChannelMspInit+0x70>
    {
      Error_Handler();
 8000514:	f000 fa78 	bl	8000a08 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000518:	4b31      	ldr	r3, [pc, #196]	; (80005e0 <HAL_DFSDM_ChannelMspInit+0x138>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	4a30      	ldr	r2, [pc, #192]	; (80005e0 <HAL_DFSDM_ChannelMspInit+0x138>)
 8000520:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000522:	4b2f      	ldr	r3, [pc, #188]	; (80005e0 <HAL_DFSDM_ChannelMspInit+0x138>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d10b      	bne.n	8000542 <HAL_DFSDM_ChannelMspInit+0x9a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800052a:	4b2e      	ldr	r3, [pc, #184]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 800052c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052e:	4a2d      	ldr	r2, [pc, #180]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000534:	6613      	str	r3, [r2, #96]	; 0x60
 8000536:	4b2b      	ldr	r3, [pc, #172]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800053a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000542:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0304 	and.w	r3, r3, #4
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000560:	f043 0302 	orr.w	r3, r3, #2
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000572:	2304      	movs	r3, #4
 8000574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000578:	2302      	movs	r3, #2
 800057a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800058a:	2306      	movs	r3, #6
 800058c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000590:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000594:	4619      	mov	r1, r3
 8000596:	4814      	ldr	r0, [pc, #80]	; (80005e8 <HAL_DFSDM_ChannelMspInit+0x140>)
 8000598:	f001 fd20 	bl	8001fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80005b6:	2306      	movs	r3, #6
 80005b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005c0:	4619      	mov	r1, r3
 80005c2:	480a      	ldr	r0, [pc, #40]	; (80005ec <HAL_DFSDM_ChannelMspInit+0x144>)
 80005c4:	f001 fd0a 	bl	8001fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <HAL_DFSDM_ChannelMspInit+0x134>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	4a03      	ldr	r2, [pc, #12]	; (80005dc <HAL_DFSDM_ChannelMspInit+0x134>)
 80005d0:	6013      	str	r3, [r2, #0]
  }
}
 80005d2:	bf00      	nop
 80005d4:	37b0      	adds	r7, #176	; 0xb0
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000b4 	.word	0x200000b4
 80005e0:	200000b0 	.word	0x200000b0
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000800 	.word	0x48000800
 80005ec:	48000400 	.word	0x48000400

080005f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_DMA_Init+0x48>)
 80005f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005fa:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <MX_DMA_Init+0x48>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6493      	str	r3, [r2, #72]	; 0x48
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_DMA_Init+0x48>)
 8000604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2105      	movs	r1, #5
 8000612:	200e      	movs	r0, #14
 8000614:	f000 fefe 	bl	8001414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000618:	200e      	movs	r0, #14
 800061a:	f000 ff17 	bl	800144c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2105      	movs	r1, #5
 8000622:	200f      	movs	r0, #15
 8000624:	f000 fef6 	bl	8001414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000628:	200f      	movs	r0, #15
 800062a:	f000 ff0f 	bl	800144c <HAL_NVIC_EnableIRQ>

}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000

0800063c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of buffer_mutex */
  buffer_mutexHandle = osMutexNew(&buffer_mutex_attributes);
 8000640:	480b      	ldr	r0, [pc, #44]	; (8000670 <MX_FREERTOS_Init+0x34>)
 8000642:	f003 fdaa 	bl	800419a <osMutexNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <MX_FREERTOS_Init+0x38>)
 800064a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800064c:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <MX_FREERTOS_Init+0x3c>)
 800064e:	2100      	movs	r1, #0
 8000650:	480a      	ldr	r0, [pc, #40]	; (800067c <MX_FREERTOS_Init+0x40>)
 8000652:	f003 fcf5 	bl	8004040 <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a09      	ldr	r2, [pc, #36]	; (8000680 <MX_FREERTOS_Init+0x44>)
 800065a:	6013      	str	r3, [r2, #0]

  /* creation of tasktest_out */
  tasktest_outHandle = osThreadNew(test_out, NULL, &tasktest_out_attributes);
 800065c:	4a09      	ldr	r2, [pc, #36]	; (8000684 <MX_FREERTOS_Init+0x48>)
 800065e:	2100      	movs	r1, #0
 8000660:	4809      	ldr	r0, [pc, #36]	; (8000688 <MX_FREERTOS_Init+0x4c>)
 8000662:	f003 fced 	bl	8004040 <osThreadNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a08      	ldr	r2, [pc, #32]	; (800068c <MX_FREERTOS_Init+0x50>)
 800066a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	0800806c 	.word	0x0800806c
 8000674:	20001ce4 	.word	0x20001ce4
 8000678:	08008024 	.word	0x08008024
 800067c:	08000691 	.word	0x08000691
 8000680:	20001ce0 	.word	0x20001ce0
 8000684:	08008048 	.word	0x08008048
 8000688:	080006a1 	.word	0x080006a1
 800068c:	20001ce8 	.word	0x20001ce8

08000690 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000698:	2001      	movs	r0, #1
 800069a:	f003 fd63 	bl	8004164 <osDelay>
 800069e:	e7fb      	b.n	8000698 <StartDefaultTask+0x8>

080006a0 <test_out>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_test_out */
void test_out(void *argument)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN test_out */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f003 fd5b 	bl	8004164 <osDelay>
 80006ae:	e7fb      	b.n	80006a8 <test_out+0x8>

080006b0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	; 0x30
 80006b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006c6:	4b4d      	ldr	r3, [pc, #308]	; (80007fc <MX_GPIO_Init+0x14c>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a4c      	ldr	r2, [pc, #304]	; (80007fc <MX_GPIO_Init+0x14c>)
 80006cc:	f043 0310 	orr.w	r3, r3, #16
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b4a      	ldr	r3, [pc, #296]	; (80007fc <MX_GPIO_Init+0x14c>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b47      	ldr	r3, [pc, #284]	; (80007fc <MX_GPIO_Init+0x14c>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a46      	ldr	r2, [pc, #280]	; (80007fc <MX_GPIO_Init+0x14c>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b44      	ldr	r3, [pc, #272]	; (80007fc <MX_GPIO_Init+0x14c>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	4b41      	ldr	r3, [pc, #260]	; (80007fc <MX_GPIO_Init+0x14c>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a40      	ldr	r2, [pc, #256]	; (80007fc <MX_GPIO_Init+0x14c>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b3e      	ldr	r3, [pc, #248]	; (80007fc <MX_GPIO_Init+0x14c>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <MX_GPIO_Init+0x14c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a3a      	ldr	r2, [pc, #232]	; (80007fc <MX_GPIO_Init+0x14c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b38      	ldr	r3, [pc, #224]	; (80007fc <MX_GPIO_Init+0x14c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b35      	ldr	r3, [pc, #212]	; (80007fc <MX_GPIO_Init+0x14c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a34      	ldr	r2, [pc, #208]	; (80007fc <MX_GPIO_Init+0x14c>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b32      	ldr	r3, [pc, #200]	; (80007fc <MX_GPIO_Init+0x14c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <MX_GPIO_Init+0x14c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a2e      	ldr	r2, [pc, #184]	; (80007fc <MX_GPIO_Init+0x14c>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b2c      	ldr	r3, [pc, #176]	; (80007fc <MX_GPIO_Init+0x14c>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800075a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	4825      	ldr	r0, [pc, #148]	; (8000800 <MX_GPIO_Init+0x150>)
 800076c:	f001 fc36 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC3 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000770:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000774:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000776:	2303      	movs	r3, #3
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	481f      	ldr	r0, [pc, #124]	; (8000804 <MX_GPIO_Init+0x154>)
 8000786:	f001 fc29 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800078a:	2303      	movs	r3, #3
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078e:	2303      	movs	r3, #3
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	481a      	ldr	r0, [pc, #104]	; (8000808 <MX_GPIO_Init+0x158>)
 800079e:	f001 fc1d 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007a2:	f649 73ff 	movw	r3, #40959	; 0x9fff
 80007a6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a8:	2303      	movs	r3, #3
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f001 fc0f 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80007be:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80007c2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c4:	2303      	movs	r3, #3
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <MX_GPIO_Init+0x15c>)
 80007d4:	f001 fc02 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80007d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007dc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007de:	2303      	movs	r3, #3
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4808      	ldr	r0, [pc, #32]	; (8000810 <MX_GPIO_Init+0x160>)
 80007ee:	f001 fbf5 	bl	8001fdc <HAL_GPIO_Init>

}
 80007f2:	bf00      	nop
 80007f4:	3730      	adds	r7, #48	; 0x30
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000
 8000800:	48001000 	.word	0x48001000
 8000804:	48000800 	.word	0x48000800
 8000808:	48001c00 	.word	0x48001c00
 800080c:	48000400 	.word	0x48000400
 8000810:	48000c00 	.word	0x48000c00

08000814 <mic_init>:
static BSP_AUDIO_Init_t MicParams;
    

static int16_t *BUFFER_RIS;

int mic_init(){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
    
	BUFFER_RIS = (int16_t*)calloc(AUDIO_SAMPLING_FREQUENCY * 2, sizeof(int16_t));
 800081a:	2102      	movs	r1, #2
 800081c:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8000820:	f006 fa4c 	bl	8006cbc <calloc>
 8000824:	4603      	mov	r3, r0
 8000826:	461a      	mov	r2, r3
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <mic_init+0x88>)
 800082a:	601a      	str	r2, [r3, #0]

    if (!BUFFER_RIS) {
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <mic_init+0x88>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d105      	bne.n	8000840 <mic_init+0x2c>
            printf("Failed to allocate BUFFER_RIS buffer\n");
 8000834:	481a      	ldr	r0, [pc, #104]	; (80008a0 <mic_init+0x8c>)
 8000836:	f006 fc71 	bl	800711c <puts>
            return -1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
 800083e:	e029      	b.n	8000894 <mic_init+0x80>
        }
    
    init_buffer(BUFFER_RIS);
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <mic_init+0x88>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4618      	mov	r0, r3
 8000846:	f000 f8e5 	bl	8000a14 <init_buffer>

    // set up the microphone
    MicParams.BitsPerSample = 16;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <mic_init+0x90>)
 800084c:	2210      	movs	r2, #16
 800084e:	609a      	str	r2, [r3, #8]
    MicParams.ChannelsNbr = AUDIO_CHANNELS;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <mic_init+0x90>)
 8000852:	2201      	movs	r2, #1
 8000854:	60da      	str	r2, [r3, #12]
    MicParams.Device = AUDIO_IN_DIGITAL_MIC1;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <mic_init+0x90>)
 8000858:	2210      	movs	r2, #16
 800085a:	601a      	str	r2, [r3, #0]
    MicParams.SampleRate = AUDIO_SAMPLING_FREQUENCY;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <mic_init+0x90>)
 800085e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000862:	605a      	str	r2, [r3, #4]
    MicParams.Volume = 32;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <mic_init+0x90>)
 8000866:	2220      	movs	r2, #32
 8000868:	611a      	str	r2, [r3, #16]

    int32_t ret = BSP_AUDIO_IN_Init(AUDIO_INSTANCE, &MicParams);
 800086a:	490e      	ldr	r1, [pc, #56]	; (80008a4 <mic_init+0x90>)
 800086c:	2000      	movs	r0, #0
 800086e:	f000 f929 	bl	8000ac4 <BSP_AUDIO_IN_Init>
 8000872:	6078      	str	r0, [r7, #4]

    if (ret != BSP_ERROR_NONE) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d006      	beq.n	8000888 <mic_init+0x74>
        printf("Error Audio Init (%ld)\r\n", ret);
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <mic_init+0x94>)
 800087e:	f006 fbc7 	bl	8007010 <iprintf>
        return -1;
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	e005      	b.n	8000894 <mic_init+0x80>
    } else {
        printf("OK Audio Init\t(Audio Freq=%d)\r\n", AUDIO_SAMPLING_FREQUENCY);
 8000888:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 800088c:	4807      	ldr	r0, [pc, #28]	; (80008ac <mic_init+0x98>)
 800088e:	f006 fbbf 	bl	8007010 <iprintf>
    }

    return 0;
 8000892:	2300      	movs	r3, #0

}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000cc 	.word	0x200000cc
 80008a0:	08007e1c 	.word	0x08007e1c
 80008a4:	200000b8 	.word	0x200000b8
 80008a8:	08007e44 	.word	0x08007e44
 80008ac:	08007e60 	.word	0x08007e60

080008b0 <taskTakeMic>:

void taskTakeMic(void *pvParameters){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	while(1){
		start_recording();
 80008b8:	f000 f8be 	bl	8000a38 <start_recording>
 80008bc:	e7fc      	b.n	80008b8 <taskTakeMic+0x8>
	...

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c6:	f000 fcb4 	bl	8001232 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ca:	f000 f82f 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ce:	f7ff feef 	bl	80006b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d2:	f7ff fe8d 	bl	80005f0 <MX_DMA_Init>
  //MX_DFSDM1_Init(); USING INIT FROM EXTERNAL LIBRARY
  /* USER CODE BEGIN 2 */
  if(mic_init() == -1){
 80008d6:	f7ff ff9d 	bl	8000814 <mic_init>
 80008da:	4603      	mov	r3, r0
 80008dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e0:	d105      	bne.n	80008ee <main+0x2e>
      printf("Something goes wrong");
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <main+0x5c>)
 80008e4:	f006 fb94 	bl	8007010 <iprintf>
      return -1;
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	e013      	b.n	8000916 <main+0x56>
    };


  xTaskCreate(taskTakeMic, "taskMic", 115, NULL, 0, NULL);
 80008ee:	2300      	movs	r3, #0
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	2300      	movs	r3, #0
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	2300      	movs	r3, #0
 80008f8:	2273      	movs	r2, #115	; 0x73
 80008fa:	4909      	ldr	r1, [pc, #36]	; (8000920 <main+0x60>)
 80008fc:	4809      	ldr	r0, [pc, #36]	; (8000924 <main+0x64>)
 80008fe:	f004 fb8a 	bl	8005016 <xTaskCreate>
  printf("task create\n");
 8000902:	4809      	ldr	r0, [pc, #36]	; (8000928 <main+0x68>)
 8000904:	f006 fc0a 	bl	800711c <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000908:	f003 fb50 	bl	8003fac <osKernelInitialize>
  MX_FREERTOS_Init();
 800090c:	f7ff fe96 	bl	800063c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000910:	f003 fb70 	bl	8003ff4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000914:	e7fe      	b.n	8000914 <main+0x54>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	08007e80 	.word	0x08007e80
 8000920:	08007e98 	.word	0x08007e98
 8000924:	080008b1 	.word	0x080008b1
 8000928:	08007ea0 	.word	0x08007ea0

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b096      	sub	sp, #88	; 0x58
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	2244      	movs	r2, #68	; 0x44
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f006 faf7 	bl	8006f2e <memset>
  sbaccioGay();
 8000940:	f000 f848 	bl	80009d4 <sbaccioGay>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	463b      	mov	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000952:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000956:	f001 fcf9 	bl	800234c <HAL_PWREx_ControlVoltageScaling>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x38>
  {
    Error_Handler();
 8000960:	f000 f852 	bl	8000a08 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000964:	2310      	movs	r3, #16
 8000966:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000968:	2301      	movs	r3, #1
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000970:	2390      	movs	r3, #144	; 0x90
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000974:	2302      	movs	r3, #2
 8000976:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000978:	2301      	movs	r3, #1
 800097a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 800097c:	2304      	movs	r3, #4
 800097e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 41;
 8000980:	2329      	movs	r3, #41	; 0x29
 8000982:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000984:	2307      	movs	r3, #7
 8000986:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000988:	2302      	movs	r3, #2
 800098a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800098c:	2304      	movs	r3, #4
 800098e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fd2f 	bl	80023f8 <HAL_RCC_OscConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009a0:	f000 f832 	bl	8000a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a4:	230f      	movs	r3, #15
 80009a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a8:	2303      	movs	r3, #3
 80009aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	2103      	movs	r1, #3
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 f901 	bl	8002bc4 <HAL_RCC_ClockConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80009c8:	f000 f81e 	bl	8000a08 <Error_Handler>
  }
}
 80009cc:	bf00      	nop
 80009ce:	3758      	adds	r7, #88	; 0x58
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <sbaccioGay>:

void sbaccioGay() {
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
	return;
 80009d8:	bf00      	nop
}
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d101      	bne.n	80009fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009f6:	f000 fc35 	bl	8001264 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40012c00 	.word	0x40012c00

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>
	...

08000a14 <init_buffer>:
static size_t transfer_complete_events = 0;


static int16_t *TARGET_AUDIO_BUFFER;

void init_buffer(int16_t *BUFFER){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
    TARGET_AUDIO_BUFFER = BUFFER;
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <init_buffer+0x1c>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
    printf("target buffer inizialize\n");
 8000a22:	4804      	ldr	r0, [pc, #16]	; (8000a34 <init_buffer+0x20>)
 8000a24:	f006 fb7a 	bl	800711c <puts>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2000011c 	.word	0x2000011c
 8000a34:	08007eac 	.word	0x08007eac

08000a38 <start_recording>:
void print_stats() {
    printf("Half %d, Complete %d, IX %d\n", half_transfer_events, transfer_complete_events,
        TARGET_AUDIO_BUFFER_IX);
}

void start_recording() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
    int32_t ret;
    uint32_t state;

    ret = BSP_AUDIO_IN_GetState(AUDIO_INSTANCE, &state);
 8000a3e:	463b      	mov	r3, r7
 8000a40:	4619      	mov	r1, r3
 8000a42:	2000      	movs	r0, #0
 8000a44:	f000 fa22 	bl	8000e8c <BSP_AUDIO_IN_GetState>
 8000a48:	6078      	str	r0, [r7, #4]
    if (ret != BSP_ERROR_NONE) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d004      	beq.n	8000a5a <start_recording+0x22>
        printf("Cannot start recording: Error getting audio state (%ld)\n", ret);
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	4814      	ldr	r0, [pc, #80]	; (8000aa4 <start_recording+0x6c>)
 8000a54:	f006 fadc 	bl	8007010 <iprintf>
        return;
 8000a58:	e020      	b.n	8000a9c <start_recording+0x64>
    }
    if (state == AUDIO_IN_STATE_RECORDING) {
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d103      	bne.n	8000a68 <start_recording+0x30>
        printf("Cannot start recording: Already recording\n");
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <start_recording+0x70>)
 8000a62:	f006 fb5b 	bl	800711c <puts>
        return;
 8000a66:	e019      	b.n	8000a9c <start_recording+0x64>
    }

    // reset audio buffer location
    TARGET_AUDIO_BUFFER_IX = 0;
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <start_recording+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
    transfer_complete_events = 0;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <start_recording+0x78>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
    half_transfer_events = 0;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <start_recording+0x7c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]

    ret = BSP_AUDIO_IN_Record(AUDIO_INSTANCE, (uint8_t *) PCM_Buffer, PCM_BUFFER_LEN);
 8000a7a:	2240      	movs	r2, #64	; 0x40
 8000a7c:	490e      	ldr	r1, [pc, #56]	; (8000ab8 <start_recording+0x80>)
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 f950 	bl	8000d24 <BSP_AUDIO_IN_Record>
 8000a84:	6078      	str	r0, [r7, #4]
    if (ret != BSP_ERROR_NONE) {
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d004      	beq.n	8000a96 <start_recording+0x5e>
        printf("Error Audio Record (%ld)\n", ret);
 8000a8c:	6879      	ldr	r1, [r7, #4]
 8000a8e:	480b      	ldr	r0, [pc, #44]	; (8000abc <start_recording+0x84>)
 8000a90:	f006 fabe 	bl	8007010 <iprintf>
        return;
 8000a94:	e002      	b.n	8000a9c <start_recording+0x64>
    }
    else {
        printf("OK Audio Record\n");
 8000a96:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <start_recording+0x88>)
 8000a98:	f006 fb40 	bl	800711c <puts>
    }
}
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	08007f6c 	.word	0x08007f6c
 8000aa8:	08007fa8 	.word	0x08007fa8
 8000aac:	20000110 	.word	0x20000110
 8000ab0:	20000118 	.word	0x20000118
 8000ab4:	20000114 	.word	0x20000114
 8000ab8:	200000d0 	.word	0x200000d0
 8000abc:	08007fd4 	.word	0x08007fd4
 8000ac0:	08007ff0 	.word	0x08007ff0

08000ac4 <BSP_AUDIO_IN_Init>:
  * @param  Instance Audio in instance.
  * @param  AudioInit Audio in init structure.
  * @retval BSP status.
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t *AudioInit)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <BSP_AUDIO_IN_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000ad8:	f06f 0301 	mvn.w	r3, #1
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	e107      	b.n	8000cf0 <BSP_AUDIO_IN_Init+0x22c>
  }
  else if (Audio_In_Ctx[Instance].State != AUDIO_IN_STATE_RESET)
 8000ae0:	4a86      	ldr	r2, [pc, #536]	; (8000cfc <BSP_AUDIO_IN_Init+0x238>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	015b      	lsls	r3, r3, #5
 8000ae6:	4413      	add	r3, r2
 8000ae8:	331c      	adds	r3, #28
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <BSP_AUDIO_IN_Init+0x34>
  {
    status = BSP_ERROR_BUSY;
 8000af0:	f06f 0302 	mvn.w	r3, #2
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	e0fb      	b.n	8000cf0 <BSP_AUDIO_IN_Init+0x22c>
  }
  else if (AudioInit->BitsPerSample != AUDIO_RESOLUTION_16b)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	2b10      	cmp	r3, #16
 8000afe:	d003      	beq.n	8000b08 <BSP_AUDIO_IN_Init+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8000b00:	f06f 030a 	mvn.w	r3, #10
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	e0f3      	b.n	8000cf0 <BSP_AUDIO_IN_Init+0x22c>
  }
  else if (((AudioInit->Device == AUDIO_IN_DIGITAL_MIC) && (AudioInit->ChannelsNbr != 2U)) ||
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b30      	cmp	r3, #48	; 0x30
 8000b0e:	d103      	bne.n	8000b18 <BSP_AUDIO_IN_Init+0x54>
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d10f      	bne.n	8000b38 <BSP_AUDIO_IN_Init+0x74>
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC1) && (AudioInit->ChannelsNbr != 1U)) ||
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681b      	ldr	r3, [r3, #0]
  else if (((AudioInit->Device == AUDIO_IN_DIGITAL_MIC) && (AudioInit->ChannelsNbr != 2U)) ||
 8000b1c:	2b10      	cmp	r3, #16
 8000b1e:	d103      	bne.n	8000b28 <BSP_AUDIO_IN_Init+0x64>
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC1) && (AudioInit->ChannelsNbr != 1U)) ||
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d107      	bne.n	8000b38 <BSP_AUDIO_IN_Init+0x74>
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC2) && (AudioInit->ChannelsNbr != 1U)))
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC1) && (AudioInit->ChannelsNbr != 1U)) ||
 8000b2c:	2b20      	cmp	r3, #32
 8000b2e:	d107      	bne.n	8000b40 <BSP_AUDIO_IN_Init+0x7c>
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC2) && (AudioInit->ChannelsNbr != 1U)))
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d003      	beq.n	8000b40 <BSP_AUDIO_IN_Init+0x7c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8000b38:	f06f 030a 	mvn.w	r3, #10
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	e0d7      	b.n	8000cf0 <BSP_AUDIO_IN_Init+0x22c>
  }
  else
  {
    /* Fill audio in context structure */
    Audio_In_Ctx[Instance].Device         = AudioInit->Device;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	496d      	ldr	r1, [pc, #436]	; (8000cfc <BSP_AUDIO_IN_Init+0x238>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	015b      	lsls	r3, r3, #5
 8000b4a:	440b      	add	r3, r1
 8000b4c:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].SampleRate     = AudioInit->SampleRate;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	496a      	ldr	r1, [pc, #424]	; (8000cfc <BSP_AUDIO_IN_Init+0x238>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	015b      	lsls	r3, r3, #5
 8000b58:	440b      	add	r3, r1
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].BitsPerSample  = AudioInit->BitsPerSample;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	4966      	ldr	r1, [pc, #408]	; (8000cfc <BSP_AUDIO_IN_Init+0x238>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	015b      	lsls	r3, r3, #5
 8000b68:	440b      	add	r3, r1
 8000b6a:	3308      	adds	r3, #8
 8000b6c:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].ChannelsNbr    = AudioInit->ChannelsNbr;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	68da      	ldr	r2, [r3, #12]
 8000b72:	4962      	ldr	r1, [pc, #392]	; (8000cfc <BSP_AUDIO_IN_Init+0x238>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	015b      	lsls	r3, r3, #5
 8000b78:	440b      	add	r3, r1
 8000b7a:	330c      	adds	r3, #12
 8000b7c:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].Volume         = AudioInit->Volume;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	691a      	ldr	r2, [r3, #16]
 8000b82:	495e      	ldr	r1, [pc, #376]	; (8000cfc <BSP_AUDIO_IN_Init+0x238>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	015b      	lsls	r3, r3, #5
 8000b88:	440b      	add	r3, r1
 8000b8a:	3318      	adds	r3, #24
 8000b8c:	601a      	str	r2, [r3, #0]
    haudio_in_dfsdm_channel[0].Instance = DFSDM1_Channel2;
    haudio_in_dfsdm_channel[1].Instance = DFSDM1_Channel1;
    haudio_in_dfsdm_filter[0].Instance  = DFSDM1_Filter0;
    haudio_in_dfsdm_filter[1].Instance  = DFSDM1_Filter1;*/

    hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000b8e:	4b5c      	ldr	r3, [pc, #368]	; (8000d00 <BSP_AUDIO_IN_Init+0x23c>)
 8000b90:	4a5c      	ldr	r2, [pc, #368]	; (8000d04 <BSP_AUDIO_IN_Init+0x240>)
 8000b92:	601a      	str	r2, [r3, #0]
    hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000b94:	4b5a      	ldr	r3, [pc, #360]	; (8000d00 <BSP_AUDIO_IN_Init+0x23c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	605a      	str	r2, [r3, #4]
    hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000b9a:	4b59      	ldr	r3, [pc, #356]	; (8000d00 <BSP_AUDIO_IN_Init+0x23c>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	721a      	strb	r2, [r3, #8]
    hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000ba0:	4b57      	ldr	r3, [pc, #348]	; (8000d00 <BSP_AUDIO_IN_Init+0x23c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	725a      	strb	r2, [r3, #9]
    hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8000ba6:	4b56      	ldr	r3, [pc, #344]	; (8000d00 <BSP_AUDIO_IN_Init+0x23c>)
 8000ba8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000bac:	61da      	str	r2, [r3, #28]
    hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000bae:	4b54      	ldr	r3, [pc, #336]	; (8000d00 <BSP_AUDIO_IN_Init+0x23c>)
 8000bb0:	2240      	movs	r2, #64	; 0x40
 8000bb2:	621a      	str	r2, [r3, #32]
    hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000bb4:	4b52      	ldr	r3, [pc, #328]	; (8000d00 <BSP_AUDIO_IN_Init+0x23c>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000bba:	4851      	ldr	r0, [pc, #324]	; (8000d00 <BSP_AUDIO_IN_Init+0x23c>)
 8000bbc:	f000 fd3c 	bl	8001638 <HAL_DFSDM_FilterInit>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <BSP_AUDIO_IN_Init+0x106>
    {
      Error_Handler();
 8000bc6:	f7ff ff1f 	bl	8000a08 <Error_Handler>
    }
     hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000bca:	4b4f      	ldr	r3, [pc, #316]	; (8000d08 <BSP_AUDIO_IN_Init+0x244>)
 8000bcc:	4a4f      	ldr	r2, [pc, #316]	; (8000d0c <BSP_AUDIO_IN_Init+0x248>)
 8000bce:	601a      	str	r2, [r3, #0]
     hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000bd0:	4b4d      	ldr	r3, [pc, #308]	; (8000d08 <BSP_AUDIO_IN_Init+0x244>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
     hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8000bd6:	4b4c      	ldr	r3, [pc, #304]	; (8000d08 <BSP_AUDIO_IN_Init+0x244>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	721a      	strb	r2, [r3, #8]
     hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000bdc:	4b4a      	ldr	r3, [pc, #296]	; (8000d08 <BSP_AUDIO_IN_Init+0x244>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	725a      	strb	r2, [r3, #9]
     hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8000be2:	4b49      	ldr	r3, [pc, #292]	; (8000d08 <BSP_AUDIO_IN_Init+0x244>)
 8000be4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000be8:	61da      	str	r2, [r3, #28]
     hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
 8000bea:	4b47      	ldr	r3, [pc, #284]	; (8000d08 <BSP_AUDIO_IN_Init+0x244>)
 8000bec:	2240      	movs	r2, #64	; 0x40
 8000bee:	621a      	str	r2, [r3, #32]
     hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8000bf0:	4b45      	ldr	r3, [pc, #276]	; (8000d08 <BSP_AUDIO_IN_Init+0x244>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24
     if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 8000bf6:	4844      	ldr	r0, [pc, #272]	; (8000d08 <BSP_AUDIO_IN_Init+0x244>)
 8000bf8:	f000 fd1e 	bl	8001638 <HAL_DFSDM_FilterInit>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <BSP_AUDIO_IN_Init+0x142>
     {
       Error_Handler();
 8000c02:	f7ff ff01 	bl	8000a08 <Error_Handler>
     }
     hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000c06:	4b42      	ldr	r3, [pc, #264]	; (8000d10 <BSP_AUDIO_IN_Init+0x24c>)
 8000c08:	4a42      	ldr	r2, [pc, #264]	; (8000d14 <BSP_AUDIO_IN_Init+0x250>)
 8000c0a:	601a      	str	r2, [r3, #0]
     hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8000c0c:	4b40      	ldr	r3, [pc, #256]	; (8000d10 <BSP_AUDIO_IN_Init+0x24c>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	711a      	strb	r2, [r3, #4]
     hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000c12:	4b3f      	ldr	r3, [pc, #252]	; (8000d10 <BSP_AUDIO_IN_Init+0x24c>)
 8000c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c18:	609a      	str	r2, [r3, #8]
     hdfsdm1_channel0.Init.OutputClock.Divider = 60;
 8000c1a:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <BSP_AUDIO_IN_Init+0x24c>)
 8000c1c:	223c      	movs	r2, #60	; 0x3c
 8000c1e:	60da      	str	r2, [r3, #12]
     hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c20:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <BSP_AUDIO_IN_Init+0x24c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
     hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c26:	4b3a      	ldr	r3, [pc, #232]	; (8000d10 <BSP_AUDIO_IN_Init+0x24c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
     hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000c2c:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <BSP_AUDIO_IN_Init+0x24c>)
 8000c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c32:	619a      	str	r2, [r3, #24]
     hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8000c34:	4b36      	ldr	r3, [pc, #216]	; (8000d10 <BSP_AUDIO_IN_Init+0x24c>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	61da      	str	r2, [r3, #28]
     hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c3a:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <BSP_AUDIO_IN_Init+0x24c>)
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	621a      	str	r2, [r3, #32]
     hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c40:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <BSP_AUDIO_IN_Init+0x24c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
     hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000c46:	4b32      	ldr	r3, [pc, #200]	; (8000d10 <BSP_AUDIO_IN_Init+0x24c>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
     hdfsdm1_channel0.Init.Offset = 0;
 8000c4c:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <BSP_AUDIO_IN_Init+0x24c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	62da      	str	r2, [r3, #44]	; 0x2c
     hdfsdm1_channel0.Init.RightBitShift = 0x02;
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <BSP_AUDIO_IN_Init+0x24c>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	631a      	str	r2, [r3, #48]	; 0x30
     if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000c58:	482d      	ldr	r0, [pc, #180]	; (8000d10 <BSP_AUDIO_IN_Init+0x24c>)
 8000c5a:	f000 fc05 	bl	8001468 <HAL_DFSDM_ChannelInit>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <BSP_AUDIO_IN_Init+0x1a4>
     {
       Error_Handler();
 8000c64:	f7ff fed0 	bl	8000a08 <Error_Handler>
     }
     hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000c68:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <BSP_AUDIO_IN_Init+0x254>)
 8000c6a:	4a2c      	ldr	r2, [pc, #176]	; (8000d1c <BSP_AUDIO_IN_Init+0x258>)
 8000c6c:	601a      	str	r2, [r3, #0]
     hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000c6e:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <BSP_AUDIO_IN_Init+0x254>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	711a      	strb	r2, [r3, #4]
     hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000c74:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <BSP_AUDIO_IN_Init+0x254>)
 8000c76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c7a:	609a      	str	r2, [r3, #8]
     hdfsdm1_channel1.Init.OutputClock.Divider = 60;
 8000c7c:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <BSP_AUDIO_IN_Init+0x254>)
 8000c7e:	223c      	movs	r2, #60	; 0x3c
 8000c80:	60da      	str	r2, [r3, #12]
     hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c82:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <BSP_AUDIO_IN_Init+0x254>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
     hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c88:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <BSP_AUDIO_IN_Init+0x254>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
     hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000c8e:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <BSP_AUDIO_IN_Init+0x254>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
     hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <BSP_AUDIO_IN_Init+0x254>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
     hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <BSP_AUDIO_IN_Init+0x254>)
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	621a      	str	r2, [r3, #32]
     hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <BSP_AUDIO_IN_Init+0x254>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24
     hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <BSP_AUDIO_IN_Init+0x254>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
     hdfsdm1_channel1.Init.Offset = 0;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <BSP_AUDIO_IN_Init+0x254>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	62da      	str	r2, [r3, #44]	; 0x2c
     hdfsdm1_channel1.Init.RightBitShift = 0x02;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <BSP_AUDIO_IN_Init+0x254>)
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	631a      	str	r2, [r3, #48]	; 0x30
     if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000cb8:	4817      	ldr	r0, [pc, #92]	; (8000d18 <BSP_AUDIO_IN_Init+0x254>)
 8000cba:	f000 fbd5 	bl	8001468 <HAL_DFSDM_ChannelInit>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <BSP_AUDIO_IN_Init+0x204>
     {
       Error_Handler();
 8000cc4:	f7ff fea0 	bl	8000a08 <Error_Handler>
     }
     if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4915      	ldr	r1, [pc, #84]	; (8000d20 <BSP_AUDIO_IN_Init+0x25c>)
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <BSP_AUDIO_IN_Init+0x23c>)
 8000cce:	f000 fdb5 	bl	800183c <HAL_DFSDM_FilterConfigRegChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <BSP_AUDIO_IN_Init+0x218>
     {
       Error_Handler();
 8000cd8:	f7ff fe96 	bl	8000a08 <Error_Handler>
     }
     if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2101      	movs	r1, #1
 8000ce0:	4809      	ldr	r0, [pc, #36]	; (8000d08 <BSP_AUDIO_IN_Init+0x244>)
 8000ce2:	f000 fdab 	bl	800183c <HAL_DFSDM_FilterConfigRegChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <BSP_AUDIO_IN_Init+0x22c>
     {
       Error_Handler();
 8000cec:	f7ff fe8c 	bl	8000a08 <Error_Handler>
     }



  }
  return status;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20001b20 	.word	0x20001b20
 8000d04:	40016100 	.word	0x40016100
 8000d08:	20001c24 	.word	0x20001c24
 8000d0c:	40016180 	.word	0x40016180
 8000d10:	20001c98 	.word	0x20001c98
 8000d14:	40016000 	.word	0x40016000
 8000d18:	20001ad8 	.word	0x20001ad8
 8000d1c:	40016020 	.word	0x40016020
 8000d20:	00010002 	.word	0x00010002

08000d24 <BSP_AUDIO_IN_Record>:
  * @param  pData Pointer on data buffer.
  * @param  NbrOfBytes Size of buffer in bytes. Maximum size is 65535 bytes.
  * @retval BSP status.
  */
int32_t BSP_AUDIO_IN_Record(uint32_t Instance, uint8_t* pData, uint32_t NbrOfBytes)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  int32_t  status = BSP_ERROR_NONE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  if ((Instance >= AUDIO_IN_INSTANCES_NBR) || (pData == NULL) || (NbrOfBytes > 65535U))
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d106      	bne.n	8000d48 <BSP_AUDIO_IN_Record+0x24>
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <BSP_AUDIO_IN_Record+0x24>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d46:	d303      	bcc.n	8000d50 <BSP_AUDIO_IN_Record+0x2c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000d48:	f06f 0301 	mvn.w	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e084      	b.n	8000e5a <BSP_AUDIO_IN_Record+0x136>
  }
  /* Check the internal buffer size */
  else if ((NbrOfBytes / 2U) > BSP_AUDIO_IN_DEFAULT_BUFFER_SIZE)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f241 0201 	movw	r2, #4097	; 0x1001
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d903      	bls.n	8000d62 <BSP_AUDIO_IN_Record+0x3e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000d5a:	f06f 0301 	mvn.w	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e07b      	b.n	8000e5a <BSP_AUDIO_IN_Record+0x136>
  }
  /* Check audio in state */
  else if (Audio_In_Ctx[Instance].State != AUDIO_IN_STATE_STOP)
 8000d62:	4a40      	ldr	r2, [pc, #256]	; (8000e64 <BSP_AUDIO_IN_Record+0x140>)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	015b      	lsls	r3, r3, #5
 8000d68:	4413      	add	r3, r2
 8000d6a:	331c      	adds	r3, #28
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d003      	beq.n	8000d7a <BSP_AUDIO_IN_Record+0x56>
  {
    status = BSP_ERROR_BUSY;
 8000d72:	f06f 0302 	mvn.w	r3, #2
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	e06f      	b.n	8000e5a <BSP_AUDIO_IN_Record+0x136>
  }
  else
  {
    Audio_In_Ctx[Instance].pBuff = pData;
 8000d7a:	4a3a      	ldr	r2, [pc, #232]	; (8000e64 <BSP_AUDIO_IN_Record+0x140>)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	015b      	lsls	r3, r3, #5
 8000d80:	4413      	add	r3, r2
 8000d82:	3310      	adds	r3, #16
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].Size  = NbrOfBytes;
 8000d88:	4a36      	ldr	r2, [pc, #216]	; (8000e64 <BSP_AUDIO_IN_Record+0x140>)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	015b      	lsls	r3, r3, #5
 8000d8e:	4413      	add	r3, r2
 8000d90:	3314      	adds	r3, #20
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	601a      	str	r2, [r3, #0]

    /* Initialise transfer control flag */
    Audio_DmaDigMic1RecHalfBuffCplt = 0;
 8000d96:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <BSP_AUDIO_IN_Record+0x144>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
    Audio_DmaDigMic1RecBuffCplt     = 0;
 8000d9c:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <BSP_AUDIO_IN_Record+0x148>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
    Audio_DmaDigMic2RecHalfBuffCplt = 0;
 8000da2:	4b33      	ldr	r3, [pc, #204]	; (8000e70 <BSP_AUDIO_IN_Record+0x14c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
    Audio_DmaDigMic2RecBuffCplt     = 0;
 8000da8:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <BSP_AUDIO_IN_Record+0x150>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]

    if ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC2) == AUDIO_IN_DIGITAL_MIC2)
 8000dae:	4a2d      	ldr	r2, [pc, #180]	; (8000e64 <BSP_AUDIO_IN_Record+0x140>)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	015b      	lsls	r3, r3, #5
 8000db4:	4413      	add	r3, r2
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0320 	and.w	r3, r3, #32
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d01c      	beq.n	8000dfa <BSP_AUDIO_IN_Record+0xd6>
    {
      printf("Set up MIC2\n");
 8000dc0:	482d      	ldr	r0, [pc, #180]	; (8000e78 <BSP_AUDIO_IN_Record+0x154>)
 8000dc2:	f006 f9ab 	bl	800711c <puts>
      /* Call the Media layer start function for MIC2 channel */
      if(HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1,
                                           Audio_DigMic2RecBuff,
                                          (Audio_In_Ctx[Instance].Size / (2U * Audio_In_Ctx[Instance].ChannelsNbr))) != HAL_OK)
 8000dc6:	4a27      	ldr	r2, [pc, #156]	; (8000e64 <BSP_AUDIO_IN_Record+0x140>)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	015b      	lsls	r3, r3, #5
 8000dcc:	4413      	add	r3, r2
 8000dce:	3314      	adds	r3, #20
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4924      	ldr	r1, [pc, #144]	; (8000e64 <BSP_AUDIO_IN_Record+0x140>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	015b      	lsls	r3, r3, #5
 8000dd8:	440b      	add	r3, r1
 8000dda:	330c      	adds	r3, #12
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	005b      	lsls	r3, r3, #1
      if(HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1,
 8000de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de4:	461a      	mov	r2, r3
 8000de6:	4925      	ldr	r1, [pc, #148]	; (8000e7c <BSP_AUDIO_IN_Record+0x158>)
 8000de8:	4825      	ldr	r0, [pc, #148]	; (8000e80 <BSP_AUDIO_IN_Record+0x15c>)
 8000dea:	f000 fd6d 	bl	80018c8 <HAL_DFSDM_FilterRegularStart_DMA>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <BSP_AUDIO_IN_Record+0xd6>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8000df4:	f06f 0303 	mvn.w	r3, #3
 8000df8:	617b      	str	r3, [r7, #20]
      }
    }

    if (((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC1) == AUDIO_IN_DIGITAL_MIC1) && (status == BSP_ERROR_NONE))
 8000dfa:	4a1a      	ldr	r2, [pc, #104]	; (8000e64 <BSP_AUDIO_IN_Record+0x140>)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	015b      	lsls	r3, r3, #5
 8000e00:	4413      	add	r3, r2
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d01c      	beq.n	8000e46 <BSP_AUDIO_IN_Record+0x122>
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d119      	bne.n	8000e46 <BSP_AUDIO_IN_Record+0x122>
    {
      // printf("Set up MIC1\n");
      /* Call the Media layer start function for MIC1 channel */
      if(HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0,
                                           Audio_DigMic1RecBuff,
                                          (Audio_In_Ctx[Instance].Size / (2U * Audio_In_Ctx[Instance].ChannelsNbr))) != HAL_OK)
 8000e12:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <BSP_AUDIO_IN_Record+0x140>)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	015b      	lsls	r3, r3, #5
 8000e18:	4413      	add	r3, r2
 8000e1a:	3314      	adds	r3, #20
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	4911      	ldr	r1, [pc, #68]	; (8000e64 <BSP_AUDIO_IN_Record+0x140>)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	015b      	lsls	r3, r3, #5
 8000e24:	440b      	add	r3, r1
 8000e26:	330c      	adds	r3, #12
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	005b      	lsls	r3, r3, #1
      if(HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0,
 8000e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e30:	461a      	mov	r2, r3
 8000e32:	4914      	ldr	r1, [pc, #80]	; (8000e84 <BSP_AUDIO_IN_Record+0x160>)
 8000e34:	4814      	ldr	r0, [pc, #80]	; (8000e88 <BSP_AUDIO_IN_Record+0x164>)
 8000e36:	f000 fd47 	bl	80018c8 <HAL_DFSDM_FilterRegularStart_DMA>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d002      	beq.n	8000e46 <BSP_AUDIO_IN_Record+0x122>
      {
        // printf("FAIL HAL_DFSDM_FilterRegularStart_DMA\n");
        status = BSP_ERROR_PERIPH_FAILURE;
 8000e40:	f06f 0303 	mvn.w	r3, #3
 8000e44:	617b      	str	r3, [r7, #20]
      }
      else {
        // printf("OK HAL_DFSDM_FilterRegularStart_DMA\n");
      }
    }
    if (status == BSP_ERROR_NONE)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d106      	bne.n	8000e5a <BSP_AUDIO_IN_Record+0x136>
    {
      /* Update audio in state */
      Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_RECORDING;
 8000e4c:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <BSP_AUDIO_IN_Record+0x140>)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	015b      	lsls	r3, r3, #5
 8000e52:	4413      	add	r3, r2
 8000e54:	331c      	adds	r3, #28
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 8000e5a:	697b      	ldr	r3, [r7, #20]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000000 	.word	0x20000000
 8000e68:	20003cf8 	.word	0x20003cf8
 8000e6c:	20001cec 	.word	0x20001cec
 8000e70:	20003cf4 	.word	0x20003cf4
 8000e74:	20001cf0 	.word	0x20001cf0
 8000e78:	08008000 	.word	0x08008000
 8000e7c:	20003cfc 	.word	0x20003cfc
 8000e80:	20001c24 	.word	0x20001c24
 8000e84:	20001cf4 	.word	0x20001cf4
 8000e88:	20001b20 	.word	0x20001b20

08000e8c <BSP_AUDIO_IN_GetState>:
  * @param  Instance Audio in instance.
  * @param  State Pointer to state of the audio in stream.
  * @retval BSP status.
  */
int32_t BSP_AUDIO_IN_GetState(uint32_t Instance, uint32_t *State)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <BSP_AUDIO_IN_GetState+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000ea0:	f06f 0301 	mvn.w	r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	e007      	b.n	8000eb8 <BSP_AUDIO_IN_GetState+0x2c>
  }
  /* Get the current state of audio in stream */
  else
  {
    *State = Audio_In_Ctx[Instance].State;
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <BSP_AUDIO_IN_GetState+0x3c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	015b      	lsls	r3, r3, #5
 8000eae:	4413      	add	r3, r2
 8000eb0:	331c      	adds	r3, #28
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	601a      	str	r2, [r3, #0]
  }
  return status;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000000 	.word	0x20000000

08000ecc <DMA1_Channel4_IRQHandler>:
/**
  * @brief This function handles DFSDM Left DMA interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_DFSDM_DMAx_MIC1_IRQHandler(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(hdfsdm1_filter0.hdmaReg);
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <DMA1_Channel4_IRQHandler+0x14>)
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 ffa1 	bl	8001e1c <HAL_DMA_IRQHandler>
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20001b20 	.word	0x20001b20

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_MspInit+0x4c>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eee:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <HAL_MspInit+0x4c>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_MspInit+0x4c>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_MspInit+0x4c>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	f06f 0001 	mvn.w	r0, #1
 8000f22:	f000 fa77 	bl	8001414 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	; 0x30
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	2019      	movs	r0, #25
 8000f4a:	f000 fa63 	bl	8001414 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f4e:	2019      	movs	r0, #25
 8000f50:	f000 fa7c 	bl	800144c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <HAL_InitTick+0x9c>)
 8000f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f58:	4a1d      	ldr	r2, [pc, #116]	; (8000fd0 <HAL_InitTick+0x9c>)
 8000f5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f5e:	6613      	str	r3, [r2, #96]	; 0x60
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <HAL_InitTick+0x9c>)
 8000f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f6c:	f107 0210 	add.w	r2, r7, #16
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 ffb4 	bl	8002ee4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f7c:	f001 ff9c 	bl	8002eb8 <HAL_RCC_GetPCLK2Freq>
 8000f80:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f84:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <HAL_InitTick+0xa0>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	0c9b      	lsrs	r3, r3, #18
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_InitTick+0xa4>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <HAL_InitTick+0xa8>)
 8000f94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_InitTick+0xa4>)
 8000f98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <HAL_InitTick+0xa4>)
 8000fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_InitTick+0xa4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_InitTick+0xa4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <HAL_InitTick+0xa4>)
 8000fb2:	f002 fce5 	bl	8003980 <HAL_TIM_Base_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d104      	bne.n	8000fc6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000fbc:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <HAL_InitTick+0xa4>)
 8000fbe:	f002 fd41 	bl	8003a44 <HAL_TIM_Base_Start_IT>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3730      	adds	r7, #48	; 0x30
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	431bde83 	.word	0x431bde83
 8000fd8:	20005cfc 	.word	0x20005cfc
 8000fdc:	40012c00 	.word	0x40012c00

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <UsageFault_Handler+0x4>

08000ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <DMA1_Channel5_IRQHandler+0x10>)
 8001012:	f000 ff03 	bl	8001e1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20001b94 	.word	0x20001b94

08001020 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001026:	f002 fd7d 	bl	8003b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20005cfc 	.word	0x20005cfc

08001034 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	e00a      	b.n	800105c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001046:	f3af 8000 	nop.w
 800104a:	4601      	mov	r1, r0
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	60ba      	str	r2, [r7, #8]
 8001052:	b2ca      	uxtb	r2, r1
 8001054:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	dbf0      	blt.n	8001046 <_read+0x12>
	}

return len;
 8001064:	687b      	ldr	r3, [r7, #4]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	e009      	b.n	8001094 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	60ba      	str	r2, [r7, #8]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	429a      	cmp	r2, r3
 800109a:	dbf1      	blt.n	8001080 <_write+0x12>
	}
	return len;
 800109c:	687b      	ldr	r3, [r7, #4]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <_close>:

int _close(int file)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
	return -1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ce:	605a      	str	r2, [r3, #4]
	return 0;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <_isatty>:

int _isatty(int file)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
	return 1;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <_sbrk+0x5c>)
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <_sbrk+0x60>)
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <_sbrk+0x64>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <_sbrk+0x68>)
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	d207      	bcs.n	8001150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001140:	f005 fdc4 	bl	8006ccc <__errno>
 8001144:	4603      	mov	r3, r0
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	e009      	b.n	8001164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <_sbrk+0x64>)
 8001160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20018000 	.word	0x20018000
 8001170:	00000400 	.word	0x00000400
 8001174:	20000120 	.word	0x20000120
 8001178:	20005da0 	.word	0x20005da0

0800117c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001180:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <SystemInit+0x5c>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001186:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <SystemInit+0x5c>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <SystemInit+0x60>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a11      	ldr	r2, [pc, #68]	; (80011dc <SystemInit+0x60>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <SystemInit+0x60>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <SystemInit+0x60>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <SystemInit+0x60>)
 80011a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80011b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <SystemInit+0x60>)
 80011b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <SystemInit+0x60>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a07      	ldr	r2, [pc, #28]	; (80011dc <SystemInit+0x60>)
 80011c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <SystemInit+0x60>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00
 80011dc:	40021000 	.word	0x40021000

080011e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001218 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e4:	f7ff ffca 	bl	800117c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011ea:	e003      	b.n	80011f4 <LoopCopyDataInit>

080011ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011f2:	3104      	adds	r1, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011f4:	480a      	ldr	r0, [pc, #40]	; (8001220 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <LoopForever+0xe>)
	adds	r2, r0, r1
 80011f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011fc:	d3f6      	bcc.n	80011ec <CopyDataInit>
	ldr	r2, =_sbss
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001200:	e002      	b.n	8001208 <LoopFillZerobss>

08001202 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001202:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001204:	f842 3b04 	str.w	r3, [r2], #4

08001208 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <LoopForever+0x16>)
	cmp	r2, r3
 800120a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800120c:	d3f9      	bcc.n	8001202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120e:	f005 fe59 	bl	8006ec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001212:	f7ff fb55 	bl	80008c0 <main>

08001216 <LoopForever>:

LoopForever:
    b LoopForever
 8001216:	e7fe      	b.n	8001216 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001218:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800121c:	08008164 	.word	0x08008164
	ldr	r0, =_sdata
 8001220:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001224:	20000094 	.word	0x20000094
	ldr	r2, =_sbss
 8001228:	20000094 	.word	0x20000094
	ldr	r3, = _ebss
 800122c:	20005d9c 	.word	0x20005d9c

08001230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC1_2_IRQHandler>

08001232 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123c:	2003      	movs	r0, #3
 800123e:	f000 f8de 	bl	80013fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001242:	200f      	movs	r0, #15
 8001244:	f7ff fe76 	bl	8000f34 <HAL_InitTick>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	71fb      	strb	r3, [r7, #7]
 8001252:	e001      	b.n	8001258 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001254:	f7ff fe46 	bl	8000ee4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001258:	79fb      	ldrb	r3, [r7, #7]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000028 	.word	0x20000028
 8001288:	20005d48 	.word	0x20005d48

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20005d48 	.word	0x20005d48

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4907      	ldr	r1, [pc, #28]	; (8001340 <__NVIC_EnableIRQ+0x38>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	; (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ff4c 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001426:	f7ff ff61 	bl	80012ec <__NVIC_GetPriorityGrouping>
 800142a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	6978      	ldr	r0, [r7, #20]
 8001432:	f7ff ffb1 	bl	8001398 <NVIC_EncodePriority>
 8001436:	4602      	mov	r2, r0
 8001438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff80 	bl	8001344 <__NVIC_SetPriority>
}
 8001444:	bf00      	nop
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff54 	bl	8001308 <__NVIC_EnableIRQ>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e0ba      	b.n	80015f0 <HAL_DFSDM_ChannelInit+0x188>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f000 fb12 	bl	8001aa8 <DFSDM_GetChannelFromInstance>
 8001484:	4603      	mov	r3, r0
 8001486:	4a5c      	ldr	r2, [pc, #368]	; (80015f8 <HAL_DFSDM_ChannelInit+0x190>)
 8001488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0ad      	b.n	80015f0 <HAL_DFSDM_ChannelInit+0x188>
  }

#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  /* Reset callback pointers to the weak predefined callbacks */
  hdfsdm_channel->CkabCallback = HAL_DFSDM_ChannelCkabCallback;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a59      	ldr	r2, [pc, #356]	; (80015fc <HAL_DFSDM_ChannelInit+0x194>)
 8001498:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_channel->ScdCallback  = HAL_DFSDM_ChannelScdCallback;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a58      	ldr	r2, [pc, #352]	; (8001600 <HAL_DFSDM_ChannelInit+0x198>)
 800149e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Call MSP init function */
  if (hdfsdm_channel->MspInitCallback == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <HAL_DFSDM_ChannelInit+0x46>
  {
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a56      	ldr	r2, [pc, #344]	; (8001604 <HAL_DFSDM_ChannelInit+0x19c>)
 80014ac:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	4798      	blx	r3
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80014b6:	4b54      	ldr	r3, [pc, #336]	; (8001608 <HAL_DFSDM_ChannelInit+0x1a0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4a52      	ldr	r2, [pc, #328]	; (8001608 <HAL_DFSDM_ChannelInit+0x1a0>)
 80014be:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80014c0:	4b51      	ldr	r3, [pc, #324]	; (8001608 <HAL_DFSDM_ChannelInit+0x1a0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d125      	bne.n	8001514 <HAL_DFSDM_ChannelInit+0xac>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80014c8:	4b50      	ldr	r3, [pc, #320]	; (800160c <HAL_DFSDM_ChannelInit+0x1a4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a4f      	ldr	r2, [pc, #316]	; (800160c <HAL_DFSDM_ChannelInit+0x1a4>)
 80014ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80014d2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80014d4:	4b4d      	ldr	r3, [pc, #308]	; (800160c <HAL_DFSDM_ChannelInit+0x1a4>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	494b      	ldr	r1, [pc, #300]	; (800160c <HAL_DFSDM_ChannelInit+0x1a4>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80014e2:	4b4a      	ldr	r3, [pc, #296]	; (800160c <HAL_DFSDM_ChannelInit+0x1a4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a49      	ldr	r2, [pc, #292]	; (800160c <HAL_DFSDM_ChannelInit+0x1a4>)
 80014e8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80014ec:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	791b      	ldrb	r3, [r3, #4]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d108      	bne.n	8001508 <HAL_DFSDM_ChannelInit+0xa0>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80014f6:	4b45      	ldr	r3, [pc, #276]	; (800160c <HAL_DFSDM_ChannelInit+0x1a4>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	3b01      	subs	r3, #1
 8001500:	041b      	lsls	r3, r3, #16
 8001502:	4942      	ldr	r1, [pc, #264]	; (800160c <HAL_DFSDM_ChannelInit+0x1a4>)
 8001504:	4313      	orrs	r3, r2
 8001506:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001508:	4b40      	ldr	r3, [pc, #256]	; (800160c <HAL_DFSDM_ChannelInit+0x1a4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a3f      	ldr	r2, [pc, #252]	; (800160c <HAL_DFSDM_ChannelInit+0x1a4>)
 800150e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001512:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001522:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6819      	ldr	r1, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001532:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001538:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 020f 	bic.w	r2, r2, #15
 8001550:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6819      	ldr	r1, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001578:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6899      	ldr	r1, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001588:	3b01      	subs	r3, #1
 800158a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f002 0207 	and.w	r2, r2, #7
 80015a4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015d0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fa62 	bl	8001aa8 <DFSDM_GetChannelFromInstance>
 80015e4:	4602      	mov	r2, r0
 80015e6:	4904      	ldr	r1, [pc, #16]	; (80015f8 <HAL_DFSDM_ChannelInit+0x190>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000128 	.word	0x20000128
 80015fc:	08001611 	.word	0x08001611
 8001600:	08001625 	.word	0x08001625
 8001604:	080004a9 	.word	0x080004a9
 8001608:	20000124 	.word	0x20000124
 800160c:	40016000 	.word	0x40016000

08001610 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e0e4      	b.n	8001814 <HAL_DFSDM_FilterInit+0x1dc>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a73      	ldr	r2, [pc, #460]	; (800181c <HAL_DFSDM_FilterInit+0x1e4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d109      	bne.n	8001668 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001658:	2b01      	cmp	r3, #1
 800165a:	d003      	beq.n	8001664 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0d5      	b.n	8001814 <HAL_DFSDM_FilterInit+0x1dc>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  /* Reset callback pointers to the weak predefined callbacks */
  hdfsdm_filter->AwdCallback             = HAL_DFSDM_FilterAwdCallback;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a67      	ldr	r2, [pc, #412]	; (8001820 <HAL_DFSDM_FilterInit+0x1e8>)
 8001684:	655a      	str	r2, [r3, #84]	; 0x54
  hdfsdm_filter->RegConvCpltCallback     = HAL_DFSDM_FilterRegConvCpltCallback;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a66      	ldr	r2, [pc, #408]	; (8001824 <HAL_DFSDM_FilterInit+0x1ec>)
 800168a:	659a      	str	r2, [r3, #88]	; 0x58
  hdfsdm_filter->RegConvHalfCpltCallback = HAL_DFSDM_FilterRegConvHalfCpltCallback;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a66      	ldr	r2, [pc, #408]	; (8001828 <HAL_DFSDM_FilterInit+0x1f0>)
 8001690:	65da      	str	r2, [r3, #92]	; 0x5c
  hdfsdm_filter->InjConvCpltCallback     = HAL_DFSDM_FilterInjConvCpltCallback;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a65      	ldr	r2, [pc, #404]	; (800182c <HAL_DFSDM_FilterInit+0x1f4>)
 8001696:	661a      	str	r2, [r3, #96]	; 0x60
  hdfsdm_filter->InjConvHalfCpltCallback = HAL_DFSDM_FilterInjConvHalfCpltCallback;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a65      	ldr	r2, [pc, #404]	; (8001830 <HAL_DFSDM_FilterInit+0x1f8>)
 800169c:	665a      	str	r2, [r3, #100]	; 0x64
  hdfsdm_filter->ErrorCallback           = HAL_DFSDM_FilterErrorCallback;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a64      	ldr	r2, [pc, #400]	; (8001834 <HAL_DFSDM_FilterInit+0x1fc>)
 80016a2:	669a      	str	r2, [r3, #104]	; 0x68

  /* Call MSP init function */
  if (hdfsdm_filter->MspInitCallback == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <HAL_DFSDM_FilterInit+0x7a>
  {
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a62      	ldr	r2, [pc, #392]	; (8001838 <HAL_DFSDM_FilterInit+0x200>)
 80016b0:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	4798      	blx	r3
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80016c8:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7a1b      	ldrb	r3, [r3, #8]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d108      	bne.n	80016e4 <HAL_DFSDM_FilterInit+0xac>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e007      	b.n	80016f4 <HAL_DFSDM_FilterInit+0xbc>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80016f2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7a5b      	ldrb	r3, [r3, #9]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d108      	bne.n	800170e <HAL_DFSDM_FilterInit+0xd6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e007      	b.n	800171e <HAL_DFSDM_FilterInit+0xe6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 800172c:	f023 0308 	bic.w	r3, r3, #8
 8001730:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d108      	bne.n	800174c <HAL_DFSDM_FilterInit+0x114>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6819      	ldr	r1, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7c1b      	ldrb	r3, [r3, #16]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d108      	bne.n	8001766 <HAL_DFSDM_FilterInit+0x12e>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0210 	orr.w	r2, r2, #16
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e007      	b.n	8001776 <HAL_DFSDM_FilterInit+0x13e>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0210 	bic.w	r2, r2, #16
 8001774:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7c5b      	ldrb	r3, [r3, #17]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_DFSDM_FilterInit+0x158>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0220 	orr.w	r2, r2, #32
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e007      	b.n	80017a0 <HAL_DFSDM_FilterInit+0x168>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0220 	bic.w	r2, r2, #32
 800179e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80017ae:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80017b2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6959      	ldr	r1, [r3, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017c6:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80017ce:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699a      	ldr	r2, [r3, #24]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7c1a      	ldrb	r2, [r3, #16]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f042 0201 	orr.w	r2, r2, #1
 8001808:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40016100 	.word	0x40016100
 8001820:	08001a1d 	.word	0x08001a1d
 8001824:	080019cd 	.word	0x080019cd
 8001828:	080019e1 	.word	0x080019e1
 800182c:	080019f5 	.word	0x080019f5
 8001830:	08001a09 	.word	0x08001a09
 8001834:	08001a35 	.word	0x08001a35
 8001838:	08000271 	.word	0x08000271

0800183c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001852:	2b00      	cmp	r3, #0
 8001854:	d02e      	beq.n	80018b4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800185c:	2bff      	cmp	r3, #255	; 0xff
 800185e:	d029      	beq.n	80018b4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800186e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001872:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d10d      	bne.n	8001896 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001888:	431a      	orrs	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e00a      	b.n	80018ac <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6819      	ldr	r1, [r3, #0]
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	631a      	str	r2, [r3, #48]	; 0x30
 80018b2:	e001      	b.n	80018b8 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	371c      	adds	r7, #28
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	75fb      	strb	r3, [r7, #23]
 80018e8:	e064      	b.n	80019b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018f8:	d002      	beq.n	8001900 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	75fb      	strb	r3, [r7, #23]
 80018fe:	e059      	b.n	80019b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10e      	bne.n	8001926 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10a      	bne.n	8001926 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001916:	2b00      	cmp	r3, #0
 8001918:	d105      	bne.n	8001926 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d002      	beq.n	8001926 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	75fb      	strb	r3, [r7, #23]
 8001924:	e046      	b.n	80019b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10b      	bne.n	8001946 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001932:	2b00      	cmp	r3, #0
 8001934:	d107      	bne.n	8001946 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800193c:	2b20      	cmp	r3, #32
 800193e:	d102      	bne.n	8001946 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	75fb      	strb	r3, [r7, #23]
 8001944:	e036      	b.n	80019b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800194c:	2b01      	cmp	r3, #1
 800194e:	d004      	beq.n	800195a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001956:	2b03      	cmp	r3, #3
 8001958:	d12a      	bne.n	80019b0 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001960:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001968:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001970:	2b20      	cmp	r3, #32
 8001972:	d101      	bne.n	8001978 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8001974:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001976:	e000      	b.n	800197a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001978:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	331c      	adds	r3, #28
 800198a:	4619      	mov	r1, r3
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f000 f9e4 	bl	8001d5c <HAL_DMA_Start_IT>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d006      	beq.n	80019a8 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	22ff      	movs	r2, #255	; 0xff
 800199e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80019a6:	e005      	b.n	80019b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 f8c9 	bl	8001b40 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80019ae:	e001      	b.n	80019b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	08001a67 	.word	0x08001a67
 80019c4:	08001a85 	.word	0x08001a85
 80019c8:	08001a49 	.word	0x08001a49

080019cc <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_DFSDM_FilterInjConvHalfCpltCallback>:
  * @brief  Half injected conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvHalfCpltCallback could be implemented in the user file.
   */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	4798      	blx	r3
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
#endif
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	4798      	blx	r3
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
#endif
}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2203      	movs	r2, #3
 8001a96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	4798      	blx	r3
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
#endif
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <DFSDM_GetChannelFromInstance+0x7c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d102      	bne.n	8001abe <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	e02b      	b.n	8001b16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <DFSDM_GetChannelFromInstance+0x80>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d102      	bne.n	8001acc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	e024      	b.n	8001b16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <DFSDM_GetChannelFromInstance+0x84>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d102      	bne.n	8001ada <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	e01d      	b.n	8001b16 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <DFSDM_GetChannelFromInstance+0x88>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d102      	bne.n	8001ae8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	e016      	b.n	8001b16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <DFSDM_GetChannelFromInstance+0x8c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d102      	bne.n	8001af6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001af0:	2305      	movs	r3, #5
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	e00f      	b.n	8001b16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <DFSDM_GetChannelFromInstance+0x90>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d102      	bne.n	8001b04 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001afe:	2306      	movs	r3, #6
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	e008      	b.n	8001b16 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <DFSDM_GetChannelFromInstance+0x94>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d102      	bne.n	8001b12 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001b0c:	2307      	movs	r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e001      	b.n	8001b16 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001b12:	2303      	movs	r3, #3
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	40016000 	.word	0x40016000
 8001b28:	40016020 	.word	0x40016020
 8001b2c:	40016040 	.word	0x40016040
 8001b30:	40016080 	.word	0x40016080
 8001b34:	400160a0 	.word	0x400160a0
 8001b38:	400160c0 	.word	0x400160c0
 8001b3c:	400160e0 	.word	0x400160e0

08001b40 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d108      	bne.n	8001b62 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e033      	b.n	8001bca <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0201 	bic.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b80:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0201 	orr.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001b98:	2b03      	cmp	r3, #3
 8001b9a:	d116      	bne.n	8001bca <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d107      	bne.n	8001bb4 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0202 	orr.w	r2, r2, #2
 8001bb2:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d102      	bne.n	8001bc4 <DFSDM_RegConvStart+0x84>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	e000      	b.n	8001bc6 <DFSDM_RegConvStart+0x86>
 8001bc4:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <DFSDM_RegConvStart+0x98>
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	e000      	b.n	8001bda <DFSDM_RegConvStart+0x9a>
 8001bd8:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e098      	b.n	8001d30 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b4d      	ldr	r3, [pc, #308]	; (8001d3c <HAL_DMA_Init+0x150>)
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d80f      	bhi.n	8001c2a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4b4b      	ldr	r3, [pc, #300]	; (8001d40 <HAL_DMA_Init+0x154>)
 8001c12:	4413      	add	r3, r2
 8001c14:	4a4b      	ldr	r2, [pc, #300]	; (8001d44 <HAL_DMA_Init+0x158>)
 8001c16:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	009a      	lsls	r2, r3, #2
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a48      	ldr	r2, [pc, #288]	; (8001d48 <HAL_DMA_Init+0x15c>)
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
 8001c28:	e00e      	b.n	8001c48 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <HAL_DMA_Init+0x160>)
 8001c32:	4413      	add	r3, r2
 8001c34:	4a43      	ldr	r2, [pc, #268]	; (8001d44 <HAL_DMA_Init+0x158>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	091b      	lsrs	r3, r3, #4
 8001c3c:	009a      	lsls	r2, r3, #2
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a42      	ldr	r2, [pc, #264]	; (8001d50 <HAL_DMA_Init+0x164>)
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ca2:	d039      	beq.n	8001d18 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	4a27      	ldr	r2, [pc, #156]	; (8001d48 <HAL_DMA_Init+0x15c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d11a      	bne.n	8001ce4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001cae:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <HAL_DMA_Init+0x168>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f003 031c 	and.w	r3, r3, #28
 8001cba:	210f      	movs	r1, #15
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	4924      	ldr	r1, [pc, #144]	; (8001d54 <HAL_DMA_Init+0x168>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001cc8:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <HAL_DMA_Init+0x168>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd4:	f003 031c 	and.w	r3, r3, #28
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	491d      	ldr	r1, [pc, #116]	; (8001d54 <HAL_DMA_Init+0x168>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
 8001ce2:	e019      	b.n	8001d18 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <HAL_DMA_Init+0x16c>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cec:	f003 031c 	and.w	r3, r3, #28
 8001cf0:	210f      	movs	r1, #15
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	4917      	ldr	r1, [pc, #92]	; (8001d58 <HAL_DMA_Init+0x16c>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001cfe:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_DMA_Init+0x16c>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6859      	ldr	r1, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f003 031c 	and.w	r3, r3, #28
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	4911      	ldr	r1, [pc, #68]	; (8001d58 <HAL_DMA_Init+0x16c>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	40020407 	.word	0x40020407
 8001d40:	bffdfff8 	.word	0xbffdfff8
 8001d44:	cccccccd 	.word	0xcccccccd
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	bffdfbf8 	.word	0xbffdfbf8
 8001d50:	40020400 	.word	0x40020400
 8001d54:	400200a8 	.word	0x400200a8
 8001d58:	400204a8 	.word	0x400204a8

08001d5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_DMA_Start_IT+0x20>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e04b      	b.n	8001e14 <HAL_DMA_Start_IT+0xb8>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d13a      	bne.n	8001e06 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0201 	bic.w	r2, r2, #1
 8001dac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	68b9      	ldr	r1, [r7, #8]
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 f8e0 	bl	8001f7a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d008      	beq.n	8001dd4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 020e 	orr.w	r2, r2, #14
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	e00f      	b.n	8001df4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0204 	bic.w	r2, r2, #4
 8001de2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 020a 	orr.w	r2, r2, #10
 8001df2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e005      	b.n	8001e12 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e38:	f003 031c 	and.w	r3, r3, #28
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d026      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x7a>
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d021      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d107      	bne.n	8001e70 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0204 	bic.w	r2, r2, #4
 8001e6e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e74:	f003 021c 	and.w	r2, r3, #28
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	2104      	movs	r1, #4
 8001e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e82:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d071      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001e94:	e06c      	b.n	8001f70 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f003 031c 	and.w	r3, r3, #28
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d02e      	beq.n	8001f08 <HAL_DMA_IRQHandler+0xec>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d029      	beq.n	8001f08 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0320 	and.w	r3, r3, #32
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10b      	bne.n	8001eda <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 020a 	bic.w	r2, r2, #10
 8001ed0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f003 021c 	and.w	r2, r3, #28
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eec:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d038      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f06:	e033      	b.n	8001f70 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0c:	f003 031c 	and.w	r3, r3, #28
 8001f10:	2208      	movs	r2, #8
 8001f12:	409a      	lsls	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d02a      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x156>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d025      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 020e 	bic.w	r2, r2, #14
 8001f34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f003 021c 	and.w	r2, r3, #28
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	2101      	movs	r1, #1
 8001f44:	fa01 f202 	lsl.w	r2, r1, r2
 8001f48:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
}
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b085      	sub	sp, #20
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	f003 021c 	and.w	r2, r3, #28
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b10      	cmp	r3, #16
 8001faa:	d108      	bne.n	8001fbe <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fbc:	e007      	b.n	8001fce <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	60da      	str	r2, [r3, #12]
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fea:	e17f      	b.n	80022ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8171 	beq.w	80022e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d00b      	beq.n	8002024 <HAL_GPIO_Init+0x48>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d007      	beq.n	8002024 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002018:	2b11      	cmp	r3, #17
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b12      	cmp	r3, #18
 8002022:	d130      	bne.n	8002086 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800205a:	2201      	movs	r2, #1
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	f003 0201 	and.w	r2, r3, #1
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b03      	cmp	r3, #3
 8002090:	d118      	bne.n	80020c4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002098:	2201      	movs	r2, #1
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	08db      	lsrs	r3, r3, #3
 80020ae:	f003 0201 	and.w	r2, r3, #1
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2203      	movs	r2, #3
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x128>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b12      	cmp	r3, #18
 8002102:	d123      	bne.n	800214c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	08da      	lsrs	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3208      	adds	r2, #8
 800210c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	220f      	movs	r2, #15
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	08da      	lsrs	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3208      	adds	r2, #8
 8002146:	6939      	ldr	r1, [r7, #16]
 8002148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0203 	and.w	r2, r3, #3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80ac 	beq.w	80022e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218e:	4b5f      	ldr	r3, [pc, #380]	; (800230c <HAL_GPIO_Init+0x330>)
 8002190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002192:	4a5e      	ldr	r2, [pc, #376]	; (800230c <HAL_GPIO_Init+0x330>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6613      	str	r3, [r2, #96]	; 0x60
 800219a:	4b5c      	ldr	r3, [pc, #368]	; (800230c <HAL_GPIO_Init+0x330>)
 800219c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021a6:	4a5a      	ldr	r2, [pc, #360]	; (8002310 <HAL_GPIO_Init+0x334>)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	3302      	adds	r3, #2
 80021ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	220f      	movs	r2, #15
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021d0:	d025      	beq.n	800221e <HAL_GPIO_Init+0x242>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4f      	ldr	r2, [pc, #316]	; (8002314 <HAL_GPIO_Init+0x338>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01f      	beq.n	800221a <HAL_GPIO_Init+0x23e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4e      	ldr	r2, [pc, #312]	; (8002318 <HAL_GPIO_Init+0x33c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d019      	beq.n	8002216 <HAL_GPIO_Init+0x23a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4d      	ldr	r2, [pc, #308]	; (800231c <HAL_GPIO_Init+0x340>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_GPIO_Init+0x236>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4c      	ldr	r2, [pc, #304]	; (8002320 <HAL_GPIO_Init+0x344>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00d      	beq.n	800220e <HAL_GPIO_Init+0x232>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4b      	ldr	r2, [pc, #300]	; (8002324 <HAL_GPIO_Init+0x348>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <HAL_GPIO_Init+0x22e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4a      	ldr	r2, [pc, #296]	; (8002328 <HAL_GPIO_Init+0x34c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_GPIO_Init+0x22a>
 8002202:	2306      	movs	r3, #6
 8002204:	e00c      	b.n	8002220 <HAL_GPIO_Init+0x244>
 8002206:	2307      	movs	r3, #7
 8002208:	e00a      	b.n	8002220 <HAL_GPIO_Init+0x244>
 800220a:	2305      	movs	r3, #5
 800220c:	e008      	b.n	8002220 <HAL_GPIO_Init+0x244>
 800220e:	2304      	movs	r3, #4
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x244>
 8002212:	2303      	movs	r3, #3
 8002214:	e004      	b.n	8002220 <HAL_GPIO_Init+0x244>
 8002216:	2302      	movs	r3, #2
 8002218:	e002      	b.n	8002220 <HAL_GPIO_Init+0x244>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x244>
 800221e:	2300      	movs	r3, #0
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	f002 0203 	and.w	r2, r2, #3
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	4093      	lsls	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002230:	4937      	ldr	r1, [pc, #220]	; (8002310 <HAL_GPIO_Init+0x334>)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800223e:	4b3b      	ldr	r3, [pc, #236]	; (800232c <HAL_GPIO_Init+0x350>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002262:	4a32      	ldr	r2, [pc, #200]	; (800232c <HAL_GPIO_Init+0x350>)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002268:	4b30      	ldr	r3, [pc, #192]	; (800232c <HAL_GPIO_Init+0x350>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800228c:	4a27      	ldr	r2, [pc, #156]	; (800232c <HAL_GPIO_Init+0x350>)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002292:	4b26      	ldr	r3, [pc, #152]	; (800232c <HAL_GPIO_Init+0x350>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022b6:	4a1d      	ldr	r2, [pc, #116]	; (800232c <HAL_GPIO_Init+0x350>)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	; (800232c <HAL_GPIO_Init+0x350>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022e0:	4a12      	ldr	r2, [pc, #72]	; (800232c <HAL_GPIO_Init+0x350>)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	3301      	adds	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa22 f303 	lsr.w	r3, r2, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f47f ae78 	bne.w	8001fec <HAL_GPIO_Init+0x10>
  }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	40010000 	.word	0x40010000
 8002314:	48000400 	.word	0x48000400
 8002318:	48000800 	.word	0x48000800
 800231c:	48000c00 	.word	0x48000c00
 8002320:	48001000 	.word	0x48001000
 8002324:	48001400 	.word	0x48001400
 8002328:	48001800 	.word	0x48001800
 800232c:	40010400 	.word	0x40010400

08002330 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <HAL_PWREx_GetVoltageRange+0x18>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40007000 	.word	0x40007000

0800234c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800235a:	d130      	bne.n	80023be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800235c:	4b23      	ldr	r3, [pc, #140]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002368:	d038      	beq.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800236a:	4b20      	ldr	r3, [pc, #128]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002372:	4a1e      	ldr	r2, [pc, #120]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002374:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002378:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800237a:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2232      	movs	r2, #50	; 0x32
 8002380:	fb02 f303 	mul.w	r3, r2, r3
 8002384:	4a1b      	ldr	r2, [pc, #108]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	0c9b      	lsrs	r3, r3, #18
 800238c:	3301      	adds	r3, #1
 800238e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002390:	e002      	b.n	8002398 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3b01      	subs	r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a4:	d102      	bne.n	80023ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f2      	bne.n	8002392 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b8:	d110      	bne.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e00f      	b.n	80023de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ca:	d007      	beq.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023d4:	4a05      	ldr	r2, [pc, #20]	; (80023ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40007000 	.word	0x40007000
 80023f0:	20000020 	.word	0x20000020
 80023f4:	431bde83 	.word	0x431bde83

080023f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e3d4      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240a:	4ba1      	ldr	r3, [pc, #644]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002414:	4b9e      	ldr	r3, [pc, #632]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80e4 	beq.w	80025f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_RCC_OscConfig+0x4a>
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	2b0c      	cmp	r3, #12
 8002436:	f040 808b 	bne.w	8002550 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b01      	cmp	r3, #1
 800243e:	f040 8087 	bne.w	8002550 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002442:	4b93      	ldr	r3, [pc, #588]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_RCC_OscConfig+0x62>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e3ac      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1a      	ldr	r2, [r3, #32]
 800245e:	4b8c      	ldr	r3, [pc, #560]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d004      	beq.n	8002474 <HAL_RCC_OscConfig+0x7c>
 800246a:	4b89      	ldr	r3, [pc, #548]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002472:	e005      	b.n	8002480 <HAL_RCC_OscConfig+0x88>
 8002474:	4b86      	ldr	r3, [pc, #536]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 8002476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002480:	4293      	cmp	r3, r2
 8002482:	d223      	bcs.n	80024cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fd5d 	bl	8002f48 <RCC_SetFlashLatencyFromMSIRange>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e38d      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002498:	4b7d      	ldr	r3, [pc, #500]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a7c      	ldr	r2, [pc, #496]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 800249e:	f043 0308 	orr.w	r3, r3, #8
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b7a      	ldr	r3, [pc, #488]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4977      	ldr	r1, [pc, #476]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b6:	4b76      	ldr	r3, [pc, #472]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	4972      	ldr	r1, [pc, #456]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
 80024ca:	e025      	b.n	8002518 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024cc:	4b70      	ldr	r3, [pc, #448]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6f      	ldr	r2, [pc, #444]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b6d      	ldr	r3, [pc, #436]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	496a      	ldr	r1, [pc, #424]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ea:	4b69      	ldr	r3, [pc, #420]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	4965      	ldr	r1, [pc, #404]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fd1d 	bl	8002f48 <RCC_SetFlashLatencyFromMSIRange>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e34d      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002518:	f000 fc36 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b5c      	ldr	r3, [pc, #368]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	495a      	ldr	r1, [pc, #360]	; (8002694 <HAL_RCC_OscConfig+0x29c>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
 8002534:	4a58      	ldr	r2, [pc, #352]	; (8002698 <HAL_RCC_OscConfig+0x2a0>)
 8002536:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002538:	4b58      	ldr	r3, [pc, #352]	; (800269c <HAL_RCC_OscConfig+0x2a4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe fcf9 	bl	8000f34 <HAL_InitTick>
 8002542:	4603      	mov	r3, r0
 8002544:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d052      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	e331      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d032      	beq.n	80025be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002558:	4b4d      	ldr	r3, [pc, #308]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a4c      	ldr	r2, [pc, #304]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002564:	f7fe fe92 	bl	800128c <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800256c:	f7fe fe8e 	bl	800128c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e31a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800257e:	4b44      	ldr	r3, [pc, #272]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800258a:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a40      	ldr	r2, [pc, #256]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 8002590:	f043 0308 	orr.w	r3, r3, #8
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b3e      	ldr	r3, [pc, #248]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	493b      	ldr	r1, [pc, #236]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025a8:	4b39      	ldr	r3, [pc, #228]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	4936      	ldr	r1, [pc, #216]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
 80025bc:	e01a      	b.n	80025f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025be:	4b34      	ldr	r3, [pc, #208]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a33      	ldr	r2, [pc, #204]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ca:	f7fe fe5f 	bl	800128c <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d2:	f7fe fe5b 	bl	800128c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e2e7      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025e4:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f0      	bne.n	80025d2 <HAL_RCC_OscConfig+0x1da>
 80025f0:	e000      	b.n	80025f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d074      	beq.n	80026ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	2b08      	cmp	r3, #8
 8002604:	d005      	beq.n	8002612 <HAL_RCC_OscConfig+0x21a>
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b0c      	cmp	r3, #12
 800260a:	d10e      	bne.n	800262a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d10b      	bne.n	800262a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002612:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d064      	beq.n	80026e8 <HAL_RCC_OscConfig+0x2f0>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d160      	bne.n	80026e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e2c4      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x24a>
 8002634:	4b16      	ldr	r3, [pc, #88]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a15      	ldr	r2, [pc, #84]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 800263a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	e01d      	b.n	800267e <HAL_RCC_OscConfig+0x286>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800264a:	d10c      	bne.n	8002666 <HAL_RCC_OscConfig+0x26e>
 800264c:	4b10      	ldr	r3, [pc, #64]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0f      	ldr	r2, [pc, #60]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 8002652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0c      	ldr	r2, [pc, #48]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 800265e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	e00b      	b.n	800267e <HAL_RCC_OscConfig+0x286>
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a09      	ldr	r2, [pc, #36]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 800266c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a06      	ldr	r2, [pc, #24]	; (8002690 <HAL_RCC_OscConfig+0x298>)
 8002678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d01c      	beq.n	80026c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7fe fe01 	bl	800128c <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800268c:	e011      	b.n	80026b2 <HAL_RCC_OscConfig+0x2ba>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	0800807c 	.word	0x0800807c
 8002698:	20000020 	.word	0x20000020
 800269c:	20000024 	.word	0x20000024
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a0:	f7fe fdf4 	bl	800128c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e280      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b2:	4baf      	ldr	r3, [pc, #700]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x2a8>
 80026be:	e014      	b.n	80026ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fde4 	bl	800128c <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c8:	f7fe fde0 	bl	800128c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e26c      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026da:	4ba5      	ldr	r3, [pc, #660]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x2d0>
 80026e6:	e000      	b.n	80026ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d060      	beq.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_OscConfig+0x310>
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b0c      	cmp	r3, #12
 8002700:	d119      	bne.n	8002736 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d116      	bne.n	8002736 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002708:	4b99      	ldr	r3, [pc, #612]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_OscConfig+0x328>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e249      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002720:	4b93      	ldr	r3, [pc, #588]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	4990      	ldr	r1, [pc, #576]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002734:	e040      	b.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d023      	beq.n	8002786 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273e:	4b8c      	ldr	r3, [pc, #560]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a8b      	ldr	r2, [pc, #556]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7fe fd9f 	bl	800128c <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002752:	f7fe fd9b 	bl	800128c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e227      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002764:	4b82      	ldr	r3, [pc, #520]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4b7f      	ldr	r3, [pc, #508]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	497c      	ldr	r1, [pc, #496]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
 8002784:	e018      	b.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002786:	4b7a      	ldr	r3, [pc, #488]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a79      	ldr	r2, [pc, #484]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 800278c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7fe fd7b 	bl	800128c <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279a:	f7fe fd77 	bl	800128c <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e203      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027ac:	4b70      	ldr	r3, [pc, #448]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d03c      	beq.n	800283e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01c      	beq.n	8002806 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027cc:	4b68      	ldr	r3, [pc, #416]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 80027ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d2:	4a67      	ldr	r2, [pc, #412]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027dc:	f7fe fd56 	bl	800128c <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e4:	f7fe fd52 	bl	800128c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e1de      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027f6:	4b5e      	ldr	r3, [pc, #376]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 80027f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ef      	beq.n	80027e4 <HAL_RCC_OscConfig+0x3ec>
 8002804:	e01b      	b.n	800283e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002806:	4b5a      	ldr	r3, [pc, #360]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 8002808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800280c:	4a58      	ldr	r2, [pc, #352]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002816:	f7fe fd39 	bl	800128c <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800281e:	f7fe fd35 	bl	800128c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e1c1      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002830:	4b4f      	ldr	r3, [pc, #316]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 8002832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1ef      	bne.n	800281e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 80a6 	beq.w	8002998 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284c:	2300      	movs	r3, #0
 800284e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002850:	4b47      	ldr	r3, [pc, #284]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10d      	bne.n	8002878 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285c:	4b44      	ldr	r3, [pc, #272]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	4a43      	ldr	r2, [pc, #268]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 8002862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002866:	6593      	str	r3, [r2, #88]	; 0x58
 8002868:	4b41      	ldr	r3, [pc, #260]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002874:	2301      	movs	r3, #1
 8002876:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002878:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_OscConfig+0x57c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d118      	bne.n	80028b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002884:	4b3b      	ldr	r3, [pc, #236]	; (8002974 <HAL_RCC_OscConfig+0x57c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a3a      	ldr	r2, [pc, #232]	; (8002974 <HAL_RCC_OscConfig+0x57c>)
 800288a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002890:	f7fe fcfc 	bl	800128c <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002898:	f7fe fcf8 	bl	800128c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e184      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028aa:	4b32      	ldr	r3, [pc, #200]	; (8002974 <HAL_RCC_OscConfig+0x57c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d108      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4d8>
 80028be:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c4:	4a2a      	ldr	r2, [pc, #168]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ce:	e024      	b.n	800291a <HAL_RCC_OscConfig+0x522>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	d110      	bne.n	80028fa <HAL_RCC_OscConfig+0x502>
 80028d8:	4b25      	ldr	r3, [pc, #148]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	4a24      	ldr	r2, [pc, #144]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e8:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 80028ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ee:	4a20      	ldr	r2, [pc, #128]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028f8:	e00f      	b.n	800291a <HAL_RCC_OscConfig+0x522>
 80028fa:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 80028fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002900:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800290a:	4b19      	ldr	r3, [pc, #100]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002910:	4a17      	ldr	r2, [pc, #92]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 8002912:	f023 0304 	bic.w	r3, r3, #4
 8002916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d016      	beq.n	8002950 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002922:	f7fe fcb3 	bl	800128c <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe fcaf 	bl	800128c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e139      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_OscConfig+0x578>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0ed      	beq.n	800292a <HAL_RCC_OscConfig+0x532>
 800294e:	e01a      	b.n	8002986 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002950:	f7fe fc9c 	bl	800128c <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002956:	e00f      	b.n	8002978 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fe fc98 	bl	800128c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d906      	bls.n	8002978 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e122      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002978:	4b90      	ldr	r3, [pc, #576]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 800297a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1e8      	bne.n	8002958 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002986:	7ffb      	ldrb	r3, [r7, #31]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298c:	4b8b      	ldr	r3, [pc, #556]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	4a8a      	ldr	r2, [pc, #552]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002996:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8108 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	f040 80d0 	bne.w	8002b4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029ac:	4b83      	ldr	r3, [pc, #524]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f003 0203 	and.w	r2, r3, #3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	429a      	cmp	r2, r3
 80029be:	d130      	bne.n	8002a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	3b01      	subs	r3, #1
 80029cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d127      	bne.n	8002a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d11f      	bne.n	8002a22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029ec:	2a07      	cmp	r2, #7
 80029ee:	bf14      	ite	ne
 80029f0:	2201      	movne	r2, #1
 80029f2:	2200      	moveq	r2, #0
 80029f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d113      	bne.n	8002a22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	3b01      	subs	r3, #1
 8002a08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	085b      	lsrs	r3, r3, #1
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d06e      	beq.n	8002b00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b0c      	cmp	r3, #12
 8002a26:	d069      	beq.n	8002afc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a28:	4b64      	ldr	r3, [pc, #400]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a34:	4b61      	ldr	r3, [pc, #388]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0b7      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a44:	4b5d      	ldr	r3, [pc, #372]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a5c      	ldr	r2, [pc, #368]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002a4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a50:	f7fe fc1c 	bl	800128c <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a58:	f7fe fc18 	bl	800128c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e0a4      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a6a:	4b54      	ldr	r3, [pc, #336]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a76:	4b51      	ldr	r3, [pc, #324]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	4b51      	ldr	r3, [pc, #324]	; (8002bc0 <HAL_RCC_OscConfig+0x7c8>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a86:	3a01      	subs	r2, #1
 8002a88:	0112      	lsls	r2, r2, #4
 8002a8a:	4311      	orrs	r1, r2
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a90:	0212      	lsls	r2, r2, #8
 8002a92:	4311      	orrs	r1, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a98:	0852      	lsrs	r2, r2, #1
 8002a9a:	3a01      	subs	r2, #1
 8002a9c:	0552      	lsls	r2, r2, #21
 8002a9e:	4311      	orrs	r1, r2
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002aa4:	0852      	lsrs	r2, r2, #1
 8002aa6:	3a01      	subs	r2, #1
 8002aa8:	0652      	lsls	r2, r2, #25
 8002aaa:	4311      	orrs	r1, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ab0:	0912      	lsrs	r2, r2, #4
 8002ab2:	0452      	lsls	r2, r2, #17
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	4941      	ldr	r1, [pc, #260]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002abc:	4b3f      	ldr	r3, [pc, #252]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a3e      	ldr	r2, [pc, #248]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ac8:	4b3c      	ldr	r3, [pc, #240]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4a3b      	ldr	r2, [pc, #236]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ad2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ad4:	f7fe fbda 	bl	800128c <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002adc:	f7fe fbd6 	bl	800128c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e062      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aee:	4b33      	ldr	r3, [pc, #204]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002afa:	e05a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e059      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b00:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d152      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a2a      	ldr	r2, [pc, #168]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b18:	4b28      	ldr	r3, [pc, #160]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a27      	ldr	r2, [pc, #156]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b24:	f7fe fbb2 	bl	800128c <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe fbae 	bl	800128c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e03a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3e:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x734>
 8002b4a:	e032      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	2b0c      	cmp	r3, #12
 8002b50:	d02d      	beq.n	8002bae <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	4b1a      	ldr	r3, [pc, #104]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002b58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b5c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b5e:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d105      	bne.n	8002b76 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b6a:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	4a13      	ldr	r2, [pc, #76]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002b70:	f023 0303 	bic.w	r3, r3, #3
 8002b74:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b76:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002b7c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b84:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b86:	f7fe fb81 	bl	800128c <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7fe fb7d 	bl	800128c <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e009      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_RCC_OscConfig+0x7c4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x796>
 8002bac:	e001      	b.n	8002bb2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3720      	adds	r7, #32
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	f99d808c 	.word	0xf99d808c

08002bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0c8      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b66      	ldr	r3, [pc, #408]	; (8002d74 <HAL_RCC_ClockConfig+0x1b0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d910      	bls.n	8002c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b63      	ldr	r3, [pc, #396]	; (8002d74 <HAL_RCC_ClockConfig+0x1b0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 0207 	bic.w	r2, r3, #7
 8002bee:	4961      	ldr	r1, [pc, #388]	; (8002d74 <HAL_RCC_ClockConfig+0x1b0>)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b5f      	ldr	r3, [pc, #380]	; (8002d74 <HAL_RCC_ClockConfig+0x1b0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0b0      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d04c      	beq.n	8002cae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d107      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1c:	4b56      	ldr	r3, [pc, #344]	; (8002d78 <HAL_RCC_ClockConfig+0x1b4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d121      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e09e      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d107      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c34:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <HAL_RCC_ClockConfig+0x1b4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d115      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e092      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d107      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c4c:	4b4a      	ldr	r3, [pc, #296]	; (8002d78 <HAL_RCC_ClockConfig+0x1b4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d109      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e086      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c5c:	4b46      	ldr	r3, [pc, #280]	; (8002d78 <HAL_RCC_ClockConfig+0x1b4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e07e      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c6c:	4b42      	ldr	r3, [pc, #264]	; (8002d78 <HAL_RCC_ClockConfig+0x1b4>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f023 0203 	bic.w	r2, r3, #3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	493f      	ldr	r1, [pc, #252]	; (8002d78 <HAL_RCC_ClockConfig+0x1b4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7e:	f7fe fb05 	bl	800128c <HAL_GetTick>
 8002c82:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c84:	e00a      	b.n	8002c9c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c86:	f7fe fb01 	bl	800128c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e066      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9c:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <HAL_RCC_ClockConfig+0x1b4>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 020c 	and.w	r2, r3, #12
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d1eb      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d008      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cba:	4b2f      	ldr	r3, [pc, #188]	; (8002d78 <HAL_RCC_ClockConfig+0x1b4>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	492c      	ldr	r1, [pc, #176]	; (8002d78 <HAL_RCC_ClockConfig+0x1b4>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <HAL_RCC_ClockConfig+0x1b0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d210      	bcs.n	8002cfc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <HAL_RCC_ClockConfig+0x1b0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 0207 	bic.w	r2, r3, #7
 8002ce2:	4924      	ldr	r1, [pc, #144]	; (8002d74 <HAL_RCC_ClockConfig+0x1b0>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <HAL_RCC_ClockConfig+0x1b0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e036      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_RCC_ClockConfig+0x1b4>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4918      	ldr	r1, [pc, #96]	; (8002d78 <HAL_RCC_ClockConfig+0x1b4>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d009      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d26:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <HAL_RCC_ClockConfig+0x1b4>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4910      	ldr	r1, [pc, #64]	; (8002d78 <HAL_RCC_ClockConfig+0x1b4>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d3a:	f000 f825 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <HAL_RCC_ClockConfig+0x1b4>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	490c      	ldr	r1, [pc, #48]	; (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002d4c:	5ccb      	ldrb	r3, [r1, r3]
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	fa22 f303 	lsr.w	r3, r2, r3
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe f8e8 	bl	8000f34 <HAL_InitTick>
 8002d64:	4603      	mov	r3, r0
 8002d66:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d68:	7afb      	ldrb	r3, [r7, #11]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40022000 	.word	0x40022000
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	0800807c 	.word	0x0800807c
 8002d80:	20000020 	.word	0x20000020
 8002d84:	20000024 	.word	0x20000024

08002d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d96:	4b3e      	ldr	r3, [pc, #248]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002da0:	4b3b      	ldr	r3, [pc, #236]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x34>
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	2b0c      	cmp	r3, #12
 8002db4:	d121      	bne.n	8002dfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d11e      	bne.n	8002dfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dbc:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d107      	bne.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dc8:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dce:	0a1b      	lsrs	r3, r3, #8
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	e005      	b.n	8002de4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dd8:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002de4:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10d      	bne.n	8002e10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002df8:	e00a      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d102      	bne.n	8002e06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e02:	61bb      	str	r3, [r7, #24]
 8002e04:	e004      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e0c:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002e0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d134      	bne.n	8002e80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e16:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d003      	beq.n	8002e2e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d003      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0xac>
 8002e2c:	e005      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e2e:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e30:	617b      	str	r3, [r7, #20]
      break;
 8002e32:	e005      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x114>)
 8002e36:	617b      	str	r3, [r7, #20]
      break;
 8002e38:	e002      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	617b      	str	r3, [r7, #20]
      break;
 8002e3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	fb02 f203 	mul.w	r2, r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	0e5b      	lsrs	r3, r3, #25
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	3301      	adds	r3, #1
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e80:	69bb      	ldr	r3, [r7, #24]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3724      	adds	r7, #36	; 0x24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	08008094 	.word	0x08008094
 8002e98:	00f42400 	.word	0x00f42400
 8002e9c:	007a1200 	.word	0x007a1200

08002ea0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea4:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000020 	.word	0x20000020

08002eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ebc:	f7ff fff0 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	0adb      	lsrs	r3, r3, #11
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	4904      	ldr	r1, [pc, #16]	; (8002ee0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	0800808c 	.word	0x0800808c

08002ee4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_RCC_GetClockConfig+0x5c>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0203 	and.w	r2, r3, #3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <HAL_RCC_GetClockConfig+0x5c>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <HAL_RCC_GetClockConfig+0x5c>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <HAL_RCC_GetClockConfig+0x5c>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	08db      	lsrs	r3, r3, #3
 8002f1e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002f26:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <HAL_RCC_GetClockConfig+0x60>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0207 	and.w	r2, r3, #7
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	601a      	str	r2, [r3, #0]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	40022000 	.word	0x40022000

08002f48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f50:	2300      	movs	r3, #0
 8002f52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f54:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f60:	f7ff f9e6 	bl	8002330 <HAL_PWREx_GetVoltageRange>
 8002f64:	6178      	str	r0, [r7, #20]
 8002f66:	e014      	b.n	8002f92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f68:	4b25      	ldr	r3, [pc, #148]	; (8003000 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6c:	4a24      	ldr	r2, [pc, #144]	; (8003000 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f72:	6593      	str	r3, [r2, #88]	; 0x58
 8002f74:	4b22      	ldr	r3, [pc, #136]	; (8003000 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f80:	f7ff f9d6 	bl	8002330 <HAL_PWREx_GetVoltageRange>
 8002f84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f86:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f98:	d10b      	bne.n	8002fb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b80      	cmp	r3, #128	; 0x80
 8002f9e:	d919      	bls.n	8002fd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2ba0      	cmp	r3, #160	; 0xa0
 8002fa4:	d902      	bls.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	e013      	b.n	8002fd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fac:	2301      	movs	r3, #1
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	e010      	b.n	8002fd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b80      	cmp	r3, #128	; 0x80
 8002fb6:	d902      	bls.n	8002fbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fb8:	2303      	movs	r3, #3
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	e00a      	b.n	8002fd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b80      	cmp	r3, #128	; 0x80
 8002fc2:	d102      	bne.n	8002fca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	e004      	b.n	8002fd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b70      	cmp	r3, #112	; 0x70
 8002fce:	d101      	bne.n	8002fd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f023 0207 	bic.w	r2, r3, #7
 8002fdc:	4909      	ldr	r1, [pc, #36]	; (8003004 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fe4:	4b07      	ldr	r3, [pc, #28]	; (8003004 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d001      	beq.n	8002ff6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000
 8003004:	40022000 	.word	0x40022000

08003008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003010:	2300      	movs	r3, #0
 8003012:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003014:	2300      	movs	r3, #0
 8003016:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003020:	2b00      	cmp	r3, #0
 8003022:	d041      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003028:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800302c:	d02a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800302e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003032:	d824      	bhi.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003034:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003038:	d008      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800303a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800303e:	d81e      	bhi.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003048:	d010      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800304a:	e018      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800304c:	4b86      	ldr	r3, [pc, #536]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4a85      	ldr	r2, [pc, #532]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003056:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003058:	e015      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3304      	adds	r3, #4
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fabb 	bl	80035dc <RCCEx_PLLSAI1_Config>
 8003066:	4603      	mov	r3, r0
 8003068:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800306a:	e00c      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3320      	adds	r3, #32
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fba6 	bl	80037c4 <RCCEx_PLLSAI2_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800307c:	e003      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	74fb      	strb	r3, [r7, #19]
      break;
 8003082:	e000      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003084:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003086:	7cfb      	ldrb	r3, [r7, #19]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10b      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800308c:	4b76      	ldr	r3, [pc, #472]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800309a:	4973      	ldr	r1, [pc, #460]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030a2:	e001      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d041      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030bc:	d02a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030c2:	d824      	bhi.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030c8:	d008      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030ce:	d81e      	bhi.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030d8:	d010      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030da:	e018      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030dc:	4b62      	ldr	r3, [pc, #392]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4a61      	ldr	r2, [pc, #388]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030e8:	e015      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fa73 	bl	80035dc <RCCEx_PLLSAI1_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030fa:	e00c      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3320      	adds	r3, #32
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fb5e 	bl	80037c4 <RCCEx_PLLSAI2_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800310c:	e003      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	74fb      	strb	r3, [r7, #19]
      break;
 8003112:	e000      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003114:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003116:	7cfb      	ldrb	r3, [r7, #19]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10b      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800311c:	4b52      	ldr	r3, [pc, #328]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800312a:	494f      	ldr	r1, [pc, #316]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003132:	e001      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80a0 	beq.w	8003286 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003146:	2300      	movs	r3, #0
 8003148:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800314a:	4b47      	ldr	r3, [pc, #284]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800315a:	2300      	movs	r3, #0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00d      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003160:	4b41      	ldr	r3, [pc, #260]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	4a40      	ldr	r2, [pc, #256]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316a:	6593      	str	r3, [r2, #88]	; 0x58
 800316c:	4b3e      	ldr	r3, [pc, #248]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003178:	2301      	movs	r3, #1
 800317a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800317c:	4b3b      	ldr	r3, [pc, #236]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a3a      	ldr	r2, [pc, #232]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003186:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003188:	f7fe f880 	bl	800128c <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800318e:	e009      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003190:	f7fe f87c 	bl	800128c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d902      	bls.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	74fb      	strb	r3, [r7, #19]
        break;
 80031a2:	e005      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031a4:	4b31      	ldr	r3, [pc, #196]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ef      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031b0:	7cfb      	ldrb	r3, [r7, #19]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d15c      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031b6:	4b2c      	ldr	r3, [pc, #176]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01f      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d019      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031d4:	4b24      	ldr	r3, [pc, #144]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031e0:	4b21      	ldr	r3, [pc, #132]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e6:	4a20      	ldr	r2, [pc, #128]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f6:	4a1c      	ldr	r2, [pc, #112]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003200:	4a19      	ldr	r2, [pc, #100]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d016      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003212:	f7fe f83b 	bl	800128c <HAL_GetTick>
 8003216:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003218:	e00b      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fe f837 	bl	800128c <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d902      	bls.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	74fb      	strb	r3, [r7, #19]
            break;
 8003230:	e006      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0ec      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10c      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003256:	4904      	ldr	r1, [pc, #16]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800325e:	e009      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	74bb      	strb	r3, [r7, #18]
 8003264:	e006      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000
 800326c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003274:	7c7b      	ldrb	r3, [r7, #17]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d105      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327a:	4b9e      	ldr	r3, [pc, #632]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327e:	4a9d      	ldr	r2, [pc, #628]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003284:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003292:	4b98      	ldr	r3, [pc, #608]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003298:	f023 0203 	bic.w	r2, r3, #3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	4994      	ldr	r1, [pc, #592]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032b4:	4b8f      	ldr	r3, [pc, #572]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	f023 020c 	bic.w	r2, r3, #12
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c2:	498c      	ldr	r1, [pc, #560]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032d6:	4b87      	ldr	r3, [pc, #540]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	4983      	ldr	r1, [pc, #524]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032f8:	4b7e      	ldr	r3, [pc, #504]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	497b      	ldr	r1, [pc, #492]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800331a:	4b76      	ldr	r3, [pc, #472]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003328:	4972      	ldr	r1, [pc, #456]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800333c:	4b6d      	ldr	r3, [pc, #436]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334a:	496a      	ldr	r1, [pc, #424]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800335e:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003364:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336c:	4961      	ldr	r1, [pc, #388]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003380:	4b5c      	ldr	r3, [pc, #368]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338e:	4959      	ldr	r1, [pc, #356]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033a2:	4b54      	ldr	r3, [pc, #336]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b0:	4950      	ldr	r1, [pc, #320]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033c4:	4b4b      	ldr	r3, [pc, #300]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	4948      	ldr	r1, [pc, #288]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033e6:	4b43      	ldr	r3, [pc, #268]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	493f      	ldr	r1, [pc, #252]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d028      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003408:	4b3a      	ldr	r3, [pc, #232]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003416:	4937      	ldr	r1, [pc, #220]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003426:	d106      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003428:	4b32      	ldr	r3, [pc, #200]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4a31      	ldr	r2, [pc, #196]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003432:	60d3      	str	r3, [r2, #12]
 8003434:	e011      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800343a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800343e:	d10c      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3304      	adds	r3, #4
 8003444:	2101      	movs	r1, #1
 8003446:	4618      	mov	r0, r3
 8003448:	f000 f8c8 	bl	80035dc <RCCEx_PLLSAI1_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003456:	7cfb      	ldrb	r3, [r7, #19]
 8003458:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d028      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003466:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	491f      	ldr	r1, [pc, #124]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003484:	d106      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	4a1a      	ldr	r2, [pc, #104]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003490:	60d3      	str	r3, [r2, #12]
 8003492:	e011      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800349c:	d10c      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3304      	adds	r3, #4
 80034a2:	2101      	movs	r1, #1
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 f899 	bl	80035dc <RCCEx_PLLSAI1_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ae:	7cfb      	ldrb	r3, [r7, #19]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034b4:	7cfb      	ldrb	r3, [r7, #19]
 80034b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d02b      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d2:	4908      	ldr	r1, [pc, #32]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034e2:	d109      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4a02      	ldr	r2, [pc, #8]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ee:	60d3      	str	r3, [r2, #12]
 80034f0:	e014      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003500:	d10c      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3304      	adds	r3, #4
 8003506:	2101      	movs	r1, #1
 8003508:	4618      	mov	r0, r3
 800350a:	f000 f867 	bl	80035dc <RCCEx_PLLSAI1_Config>
 800350e:	4603      	mov	r3, r0
 8003510:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003512:	7cfb      	ldrb	r3, [r7, #19]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003518:	7cfb      	ldrb	r3, [r7, #19]
 800351a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d02f      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003528:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003536:	4928      	ldr	r1, [pc, #160]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003542:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003546:	d10d      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3304      	adds	r3, #4
 800354c:	2102      	movs	r1, #2
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f844 	bl	80035dc <RCCEx_PLLSAI1_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003558:	7cfb      	ldrb	r3, [r7, #19]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d014      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	74bb      	strb	r3, [r7, #18]
 8003562:	e011      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800356c:	d10c      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3320      	adds	r3, #32
 8003572:	2102      	movs	r1, #2
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f925 	bl	80037c4 <RCCEx_PLLSAI2_Config>
 800357a:	4603      	mov	r3, r0
 800357c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800357e:	7cfb      	ldrb	r3, [r7, #19]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003594:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035a2:	490d      	ldr	r1, [pc, #52]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00b      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c6:	4904      	ldr	r1, [pc, #16]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000

080035dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ea:	4b75      	ldr	r3, [pc, #468]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d018      	beq.n	8003628 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035f6:	4b72      	ldr	r3, [pc, #456]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0203 	and.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d10d      	bne.n	8003622 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
       ||
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800360e:	4b6c      	ldr	r3, [pc, #432]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
       ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d047      	beq.n	80036b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
 8003626:	e044      	b.n	80036b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d018      	beq.n	8003662 <RCCEx_PLLSAI1_Config+0x86>
 8003630:	2b03      	cmp	r3, #3
 8003632:	d825      	bhi.n	8003680 <RCCEx_PLLSAI1_Config+0xa4>
 8003634:	2b01      	cmp	r3, #1
 8003636:	d002      	beq.n	800363e <RCCEx_PLLSAI1_Config+0x62>
 8003638:	2b02      	cmp	r3, #2
 800363a:	d009      	beq.n	8003650 <RCCEx_PLLSAI1_Config+0x74>
 800363c:	e020      	b.n	8003680 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800363e:	4b60      	ldr	r3, [pc, #384]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d11d      	bne.n	8003686 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800364e:	e01a      	b.n	8003686 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003650:	4b5b      	ldr	r3, [pc, #364]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003658:	2b00      	cmp	r3, #0
 800365a:	d116      	bne.n	800368a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003660:	e013      	b.n	800368a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003662:	4b57      	ldr	r3, [pc, #348]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10f      	bne.n	800368e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800366e:	4b54      	ldr	r3, [pc, #336]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800367e:	e006      	b.n	800368e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
      break;
 8003684:	e004      	b.n	8003690 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003686:	bf00      	nop
 8003688:	e002      	b.n	8003690 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800368a:	bf00      	nop
 800368c:	e000      	b.n	8003690 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800368e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10d      	bne.n	80036b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003696:	4b4a      	ldr	r3, [pc, #296]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6819      	ldr	r1, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	430b      	orrs	r3, r1
 80036ac:	4944      	ldr	r1, [pc, #272]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d17d      	bne.n	80037b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036b8:	4b41      	ldr	r3, [pc, #260]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a40      	ldr	r2, [pc, #256]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c4:	f7fd fde2 	bl	800128c <HAL_GetTick>
 80036c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036ca:	e009      	b.n	80036e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036cc:	f7fd fdde 	bl	800128c <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d902      	bls.n	80036e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	73fb      	strb	r3, [r7, #15]
        break;
 80036de:	e005      	b.n	80036ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036e0:	4b37      	ldr	r3, [pc, #220]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1ef      	bne.n	80036cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d160      	bne.n	80037b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d111      	bne.n	800371c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036f8:	4b31      	ldr	r3, [pc, #196]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6892      	ldr	r2, [r2, #8]
 8003708:	0211      	lsls	r1, r2, #8
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68d2      	ldr	r2, [r2, #12]
 800370e:	0912      	lsrs	r2, r2, #4
 8003710:	0452      	lsls	r2, r2, #17
 8003712:	430a      	orrs	r2, r1
 8003714:	492a      	ldr	r1, [pc, #168]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003716:	4313      	orrs	r3, r2
 8003718:	610b      	str	r3, [r1, #16]
 800371a:	e027      	b.n	800376c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d112      	bne.n	8003748 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003722:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800372a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6892      	ldr	r2, [r2, #8]
 8003732:	0211      	lsls	r1, r2, #8
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6912      	ldr	r2, [r2, #16]
 8003738:	0852      	lsrs	r2, r2, #1
 800373a:	3a01      	subs	r2, #1
 800373c:	0552      	lsls	r2, r2, #21
 800373e:	430a      	orrs	r2, r1
 8003740:	491f      	ldr	r1, [pc, #124]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003742:	4313      	orrs	r3, r2
 8003744:	610b      	str	r3, [r1, #16]
 8003746:	e011      	b.n	800376c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003748:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003750:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6892      	ldr	r2, [r2, #8]
 8003758:	0211      	lsls	r1, r2, #8
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6952      	ldr	r2, [r2, #20]
 800375e:	0852      	lsrs	r2, r2, #1
 8003760:	3a01      	subs	r2, #1
 8003762:	0652      	lsls	r2, r2, #25
 8003764:	430a      	orrs	r2, r1
 8003766:	4916      	ldr	r1, [pc, #88]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003768:	4313      	orrs	r3, r2
 800376a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800376c:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003772:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003776:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7fd fd88 	bl	800128c <HAL_GetTick>
 800377c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800377e:	e009      	b.n	8003794 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003780:	f7fd fd84 	bl	800128c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d902      	bls.n	8003794 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	73fb      	strb	r3, [r7, #15]
          break;
 8003792:	e005      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003794:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ef      	beq.n	8003780 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a8:	691a      	ldr	r2, [r3, #16]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	4904      	ldr	r1, [pc, #16]	; (80037c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000

080037c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037d2:	4b6a      	ldr	r3, [pc, #424]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d018      	beq.n	8003810 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037de:	4b67      	ldr	r3, [pc, #412]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0203 	and.w	r2, r3, #3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d10d      	bne.n	800380a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
       ||
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037f6:	4b61      	ldr	r3, [pc, #388]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
       ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d047      	beq.n	800389a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
 800380e:	e044      	b.n	800389a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d018      	beq.n	800384a <RCCEx_PLLSAI2_Config+0x86>
 8003818:	2b03      	cmp	r3, #3
 800381a:	d825      	bhi.n	8003868 <RCCEx_PLLSAI2_Config+0xa4>
 800381c:	2b01      	cmp	r3, #1
 800381e:	d002      	beq.n	8003826 <RCCEx_PLLSAI2_Config+0x62>
 8003820:	2b02      	cmp	r3, #2
 8003822:	d009      	beq.n	8003838 <RCCEx_PLLSAI2_Config+0x74>
 8003824:	e020      	b.n	8003868 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003826:	4b55      	ldr	r3, [pc, #340]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d11d      	bne.n	800386e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003836:	e01a      	b.n	800386e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003838:	4b50      	ldr	r3, [pc, #320]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003840:	2b00      	cmp	r3, #0
 8003842:	d116      	bne.n	8003872 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003848:	e013      	b.n	8003872 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800384a:	4b4c      	ldr	r3, [pc, #304]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10f      	bne.n	8003876 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003856:	4b49      	ldr	r3, [pc, #292]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003866:	e006      	b.n	8003876 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
      break;
 800386c:	e004      	b.n	8003878 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800386e:	bf00      	nop
 8003870:	e002      	b.n	8003878 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003872:	bf00      	nop
 8003874:	e000      	b.n	8003878 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003876:	bf00      	nop
    }

    if(status == HAL_OK)
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10d      	bne.n	800389a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800387e:	4b3f      	ldr	r3, [pc, #252]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6819      	ldr	r1, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	3b01      	subs	r3, #1
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	430b      	orrs	r3, r1
 8003894:	4939      	ldr	r1, [pc, #228]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003896:	4313      	orrs	r3, r2
 8003898:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d167      	bne.n	8003970 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038a0:	4b36      	ldr	r3, [pc, #216]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a35      	ldr	r2, [pc, #212]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ac:	f7fd fcee 	bl	800128c <HAL_GetTick>
 80038b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038b2:	e009      	b.n	80038c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038b4:	f7fd fcea 	bl	800128c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d902      	bls.n	80038c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	73fb      	strb	r3, [r7, #15]
        break;
 80038c6:	e005      	b.n	80038d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038c8:	4b2c      	ldr	r3, [pc, #176]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1ef      	bne.n	80038b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d14a      	bne.n	8003970 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d111      	bne.n	8003904 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038e0:	4b26      	ldr	r3, [pc, #152]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6892      	ldr	r2, [r2, #8]
 80038f0:	0211      	lsls	r1, r2, #8
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68d2      	ldr	r2, [r2, #12]
 80038f6:	0912      	lsrs	r2, r2, #4
 80038f8:	0452      	lsls	r2, r2, #17
 80038fa:	430a      	orrs	r2, r1
 80038fc:	491f      	ldr	r1, [pc, #124]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	614b      	str	r3, [r1, #20]
 8003902:	e011      	b.n	8003928 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003904:	4b1d      	ldr	r3, [pc, #116]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800390c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6892      	ldr	r2, [r2, #8]
 8003914:	0211      	lsls	r1, r2, #8
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6912      	ldr	r2, [r2, #16]
 800391a:	0852      	lsrs	r2, r2, #1
 800391c:	3a01      	subs	r2, #1
 800391e:	0652      	lsls	r2, r2, #25
 8003920:	430a      	orrs	r2, r1
 8003922:	4916      	ldr	r1, [pc, #88]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003924:	4313      	orrs	r3, r2
 8003926:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003928:	4b14      	ldr	r3, [pc, #80]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a13      	ldr	r2, [pc, #76]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 800392e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003932:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003934:	f7fd fcaa 	bl	800128c <HAL_GetTick>
 8003938:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800393a:	e009      	b.n	8003950 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800393c:	f7fd fca6 	bl	800128c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d902      	bls.n	8003950 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	73fb      	strb	r3, [r7, #15]
          break;
 800394e:	e005      	b.n	800395c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003950:	4b0a      	ldr	r3, [pc, #40]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0ef      	beq.n	800393c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d106      	bne.n	8003970 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	4904      	ldr	r1, [pc, #16]	; (800397c <RCCEx_PLLSAI2_Config+0x1b8>)
 800396c:	4313      	orrs	r3, r2
 800396e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000

08003980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e049      	b.n	8003a26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f841 	bl	8003a2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f000 f9f8 	bl	8003db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d001      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e04f      	b.n	8003afc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a23      	ldr	r2, [pc, #140]	; (8003b08 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01d      	beq.n	8003aba <HAL_TIM_Base_Start_IT+0x76>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a86:	d018      	beq.n	8003aba <HAL_TIM_Base_Start_IT+0x76>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1f      	ldr	r2, [pc, #124]	; (8003b0c <HAL_TIM_Base_Start_IT+0xc8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <HAL_TIM_Base_Start_IT+0x76>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1e      	ldr	r2, [pc, #120]	; (8003b10 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00e      	beq.n	8003aba <HAL_TIM_Base_Start_IT+0x76>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a1c      	ldr	r2, [pc, #112]	; (8003b14 <HAL_TIM_Base_Start_IT+0xd0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d009      	beq.n	8003aba <HAL_TIM_Base_Start_IT+0x76>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a1b      	ldr	r2, [pc, #108]	; (8003b18 <HAL_TIM_Base_Start_IT+0xd4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d004      	beq.n	8003aba <HAL_TIM_Base_Start_IT+0x76>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a19      	ldr	r2, [pc, #100]	; (8003b1c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d115      	bne.n	8003ae6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b06      	cmp	r3, #6
 8003aca:	d015      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0xb4>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad2:	d011      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae4:	e008      	b.n	8003af8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0201 	orr.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e000      	b.n	8003afa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	40012c00 	.word	0x40012c00
 8003b0c:	40000400 	.word	0x40000400
 8003b10:	40000800 	.word	0x40000800
 8003b14:	40000c00 	.word	0x40000c00
 8003b18:	40013400 	.word	0x40013400
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	00010007 	.word	0x00010007

08003b24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d122      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d11b      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0202 	mvn.w	r2, #2
 8003b50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f905 	bl	8003d76 <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f8f7 	bl	8003d62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f908 	bl	8003d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d122      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0204 	mvn.w	r2, #4
 8003ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f8db 	bl	8003d76 <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f8cd 	bl	8003d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f8de 	bl	8003d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d122      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d11b      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0208 	mvn.w	r2, #8
 8003bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f8b1 	bl	8003d76 <HAL_TIM_IC_CaptureCallback>
 8003c14:	e005      	b.n	8003c22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f8a3 	bl	8003d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f8b4 	bl	8003d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b10      	cmp	r3, #16
 8003c34:	d122      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b10      	cmp	r3, #16
 8003c42:	d11b      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0210 	mvn.w	r2, #16
 8003c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2208      	movs	r2, #8
 8003c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f887 	bl	8003d76 <HAL_TIM_IC_CaptureCallback>
 8003c68:	e005      	b.n	8003c76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f879 	bl	8003d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f88a 	bl	8003d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d10e      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d107      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0201 	mvn.w	r2, #1
 8003ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fc fe9e 	bl	80009e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	2b80      	cmp	r3, #128	; 0x80
 8003cb4:	d10e      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc0:	2b80      	cmp	r3, #128	; 0x80
 8003cc2:	d107      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f914 	bl	8003efc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce2:	d10e      	bne.n	8003d02 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cee:	2b80      	cmp	r3, #128	; 0x80
 8003cf0:	d107      	bne.n	8003d02 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f907 	bl	8003f10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0c:	2b40      	cmp	r3, #64	; 0x40
 8003d0e:	d10e      	bne.n	8003d2e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1a:	2b40      	cmp	r3, #64	; 0x40
 8003d1c:	d107      	bne.n	8003d2e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f838 	bl	8003d9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d10e      	bne.n	8003d5a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	d107      	bne.n	8003d5a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f06f 0220 	mvn.w	r2, #32
 8003d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f8c7 	bl	8003ee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
	...

08003db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a40      	ldr	r2, [pc, #256]	; (8003ec8 <TIM_Base_SetConfig+0x114>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d013      	beq.n	8003df4 <TIM_Base_SetConfig+0x40>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd2:	d00f      	beq.n	8003df4 <TIM_Base_SetConfig+0x40>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a3d      	ldr	r2, [pc, #244]	; (8003ecc <TIM_Base_SetConfig+0x118>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00b      	beq.n	8003df4 <TIM_Base_SetConfig+0x40>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a3c      	ldr	r2, [pc, #240]	; (8003ed0 <TIM_Base_SetConfig+0x11c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d007      	beq.n	8003df4 <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a3b      	ldr	r2, [pc, #236]	; (8003ed4 <TIM_Base_SetConfig+0x120>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d003      	beq.n	8003df4 <TIM_Base_SetConfig+0x40>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a3a      	ldr	r2, [pc, #232]	; (8003ed8 <TIM_Base_SetConfig+0x124>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d108      	bne.n	8003e06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a2f      	ldr	r2, [pc, #188]	; (8003ec8 <TIM_Base_SetConfig+0x114>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d01f      	beq.n	8003e4e <TIM_Base_SetConfig+0x9a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e14:	d01b      	beq.n	8003e4e <TIM_Base_SetConfig+0x9a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a2c      	ldr	r2, [pc, #176]	; (8003ecc <TIM_Base_SetConfig+0x118>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d017      	beq.n	8003e4e <TIM_Base_SetConfig+0x9a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a2b      	ldr	r2, [pc, #172]	; (8003ed0 <TIM_Base_SetConfig+0x11c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d013      	beq.n	8003e4e <TIM_Base_SetConfig+0x9a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a2a      	ldr	r2, [pc, #168]	; (8003ed4 <TIM_Base_SetConfig+0x120>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00f      	beq.n	8003e4e <TIM_Base_SetConfig+0x9a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a29      	ldr	r2, [pc, #164]	; (8003ed8 <TIM_Base_SetConfig+0x124>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00b      	beq.n	8003e4e <TIM_Base_SetConfig+0x9a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a28      	ldr	r2, [pc, #160]	; (8003edc <TIM_Base_SetConfig+0x128>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d007      	beq.n	8003e4e <TIM_Base_SetConfig+0x9a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a27      	ldr	r2, [pc, #156]	; (8003ee0 <TIM_Base_SetConfig+0x12c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d003      	beq.n	8003e4e <TIM_Base_SetConfig+0x9a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a26      	ldr	r2, [pc, #152]	; (8003ee4 <TIM_Base_SetConfig+0x130>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d108      	bne.n	8003e60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a10      	ldr	r2, [pc, #64]	; (8003ec8 <TIM_Base_SetConfig+0x114>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00f      	beq.n	8003eac <TIM_Base_SetConfig+0xf8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <TIM_Base_SetConfig+0x124>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00b      	beq.n	8003eac <TIM_Base_SetConfig+0xf8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a11      	ldr	r2, [pc, #68]	; (8003edc <TIM_Base_SetConfig+0x128>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <TIM_Base_SetConfig+0xf8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a10      	ldr	r2, [pc, #64]	; (8003ee0 <TIM_Base_SetConfig+0x12c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_Base_SetConfig+0xf8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a0f      	ldr	r2, [pc, #60]	; (8003ee4 <TIM_Base_SetConfig+0x130>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d103      	bne.n	8003eb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	615a      	str	r2, [r3, #20]
}
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40012c00 	.word	0x40012c00
 8003ecc:	40000400 	.word	0x40000400
 8003ed0:	40000800 	.word	0x40000800
 8003ed4:	40000c00 	.word	0x40000c00
 8003ed8:	40013400 	.word	0x40013400
 8003edc:	40014000 	.word	0x40014000
 8003ee0:	40014400 	.word	0x40014400
 8003ee4:	40014800 	.word	0x40014800

08003ee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <__NVIC_SetPriority>:
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	6039      	str	r1, [r7, #0]
 8003f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	db0a      	blt.n	8003f4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	490c      	ldr	r1, [pc, #48]	; (8003f70 <__NVIC_SetPriority+0x4c>)
 8003f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f42:	0112      	lsls	r2, r2, #4
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	440b      	add	r3, r1
 8003f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f4c:	e00a      	b.n	8003f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	4908      	ldr	r1, [pc, #32]	; (8003f74 <__NVIC_SetPriority+0x50>)
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	3b04      	subs	r3, #4
 8003f5c:	0112      	lsls	r2, r2, #4
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	440b      	add	r3, r1
 8003f62:	761a      	strb	r2, [r3, #24]
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	e000e100 	.word	0xe000e100
 8003f74:	e000ed00 	.word	0xe000ed00

08003f78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <SysTick_Handler+0x1c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003f80:	f001 fe34 	bl	8005bec <xTaskGetSchedulerState>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d001      	beq.n	8003f8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003f8a:	f002 fc1d 	bl	80067c8 <xPortSysTickHandler>
  }
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	e000e010 	.word	0xe000e010

08003f98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	f06f 0004 	mvn.w	r0, #4
 8003fa2:	f7ff ffbf 	bl	8003f24 <__NVIC_SetPriority>
#endif
}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fb2:	f3ef 8305 	mrs	r3, IPSR
 8003fb6:	603b      	str	r3, [r7, #0]
  return(result);
 8003fb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003fbe:	f06f 0305 	mvn.w	r3, #5
 8003fc2:	607b      	str	r3, [r7, #4]
 8003fc4:	e00c      	b.n	8003fe0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <osKernelInitialize+0x44>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d105      	bne.n	8003fda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003fce:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <osKernelInitialize+0x44>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	607b      	str	r3, [r7, #4]
 8003fd8:	e002      	b.n	8003fe0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003fda:	f04f 33ff 	mov.w	r3, #4294967295
 8003fde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003fe0:	687b      	ldr	r3, [r7, #4]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20000148 	.word	0x20000148

08003ff4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ffa:	f3ef 8305 	mrs	r3, IPSR
 8003ffe:	603b      	str	r3, [r7, #0]
  return(result);
 8004000:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004006:	f06f 0305 	mvn.w	r3, #5
 800400a:	607b      	str	r3, [r7, #4]
 800400c:	e010      	b.n	8004030 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800400e:	4b0b      	ldr	r3, [pc, #44]	; (800403c <osKernelStart+0x48>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d109      	bne.n	800402a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004016:	f7ff ffbf 	bl	8003f98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800401a:	4b08      	ldr	r3, [pc, #32]	; (800403c <osKernelStart+0x48>)
 800401c:	2202      	movs	r2, #2
 800401e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004020:	f001 f988 	bl	8005334 <vTaskStartScheduler>
      stat = osOK;
 8004024:	2300      	movs	r3, #0
 8004026:	607b      	str	r3, [r7, #4]
 8004028:	e002      	b.n	8004030 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800402a:	f04f 33ff 	mov.w	r3, #4294967295
 800402e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004030:	687b      	ldr	r3, [r7, #4]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20000148 	.word	0x20000148

08004040 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004040:	b580      	push	{r7, lr}
 8004042:	b08e      	sub	sp, #56	; 0x38
 8004044:	af04      	add	r7, sp, #16
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800404c:	2300      	movs	r3, #0
 800404e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004050:	f3ef 8305 	mrs	r3, IPSR
 8004054:	617b      	str	r3, [r7, #20]
  return(result);
 8004056:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004058:	2b00      	cmp	r3, #0
 800405a:	d17e      	bne.n	800415a <osThreadNew+0x11a>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d07b      	beq.n	800415a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004062:	2380      	movs	r3, #128	; 0x80
 8004064:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004066:	2318      	movs	r3, #24
 8004068:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295
 8004072:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d045      	beq.n	8004106 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <osThreadNew+0x48>
        name = attr->name;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <osThreadNew+0x6e>
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	2b38      	cmp	r3, #56	; 0x38
 80040a0:	d805      	bhi.n	80040ae <osThreadNew+0x6e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <osThreadNew+0x72>
        return (NULL);
 80040ae:	2300      	movs	r3, #0
 80040b0:	e054      	b.n	800415c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	089b      	lsrs	r3, r3, #2
 80040c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00e      	beq.n	80040e8 <osThreadNew+0xa8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	2bbb      	cmp	r3, #187	; 0xbb
 80040d0:	d90a      	bls.n	80040e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d006      	beq.n	80040e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <osThreadNew+0xa8>
        mem = 1;
 80040e2:	2301      	movs	r3, #1
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	e010      	b.n	800410a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10c      	bne.n	800410a <osThreadNew+0xca>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d108      	bne.n	800410a <osThreadNew+0xca>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d104      	bne.n	800410a <osThreadNew+0xca>
          mem = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	e001      	b.n	800410a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d110      	bne.n	8004132 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004118:	9202      	str	r2, [sp, #8]
 800411a:	9301      	str	r3, [sp, #4]
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	6a3a      	ldr	r2, [r7, #32]
 8004124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 ff18 	bl	8004f5c <xTaskCreateStatic>
 800412c:	4603      	mov	r3, r0
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	e013      	b.n	800415a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d110      	bne.n	800415a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	b29a      	uxth	r2, r3
 800413c:	f107 0310 	add.w	r3, r7, #16
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 ff63 	bl	8005016 <xTaskCreate>
 8004150:	4603      	mov	r3, r0
 8004152:	2b01      	cmp	r3, #1
 8004154:	d001      	beq.n	800415a <osThreadNew+0x11a>
            hTask = NULL;
 8004156:	2300      	movs	r3, #0
 8004158:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800415a:	693b      	ldr	r3, [r7, #16]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3728      	adds	r7, #40	; 0x28
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800416c:	f3ef 8305 	mrs	r3, IPSR
 8004170:	60bb      	str	r3, [r7, #8]
  return(result);
 8004172:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <osDelay+0x1c>
    stat = osErrorISR;
 8004178:	f06f 0305 	mvn.w	r3, #5
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	e007      	b.n	8004190 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <osDelay+0x2c>
      vTaskDelay(ticks);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f001 f89e 	bl	80052cc <vTaskDelay>
    }
  }

  return (stat);
 8004190:	68fb      	ldr	r3, [r7, #12]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800419a:	b580      	push	{r7, lr}
 800419c:	b088      	sub	sp, #32
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041a6:	f3ef 8305 	mrs	r3, IPSR
 80041aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80041ac:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d174      	bne.n	800429c <osMutexNew+0x102>
    if (attr != NULL) {
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <osMutexNew+0x26>
      type = attr->attr_bits;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	61bb      	str	r3, [r7, #24]
 80041be:	e001      	b.n	80041c4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <osMutexNew+0x3a>
      rmtx = 1U;
 80041ce:	2301      	movs	r3, #1
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	e001      	b.n	80041d8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d15c      	bne.n	800429c <osMutexNew+0x102>
      mem = -1;
 80041e2:	f04f 33ff 	mov.w	r3, #4294967295
 80041e6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d015      	beq.n	800421a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d006      	beq.n	8004204 <osMutexNew+0x6a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2b4f      	cmp	r3, #79	; 0x4f
 80041fc:	d902      	bls.n	8004204 <osMutexNew+0x6a>
          mem = 1;
 80041fe:	2301      	movs	r3, #1
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	e00c      	b.n	800421e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d108      	bne.n	800421e <osMutexNew+0x84>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d104      	bne.n	800421e <osMutexNew+0x84>
            mem = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	e001      	b.n	800421e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d112      	bne.n	800424a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	4619      	mov	r1, r3
 8004230:	2004      	movs	r0, #4
 8004232:	f000 fa90 	bl	8004756 <xQueueCreateMutexStatic>
 8004236:	61f8      	str	r0, [r7, #28]
 8004238:	e016      	b.n	8004268 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	4619      	mov	r1, r3
 8004240:	2001      	movs	r0, #1
 8004242:	f000 fa88 	bl	8004756 <xQueueCreateMutexStatic>
 8004246:	61f8      	str	r0, [r7, #28]
 8004248:	e00e      	b.n	8004268 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10b      	bne.n	8004268 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d004      	beq.n	8004260 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004256:	2004      	movs	r0, #4
 8004258:	f000 fa65 	bl	8004726 <xQueueCreateMutex>
 800425c:	61f8      	str	r0, [r7, #28]
 800425e:	e003      	b.n	8004268 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004260:	2001      	movs	r0, #1
 8004262:	f000 fa60 	bl	8004726 <xQueueCreateMutex>
 8004266:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00c      	beq.n	8004288 <osMutexNew+0xee>
        if (attr != NULL) {
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <osMutexNew+0xe2>
          name = attr->name;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	e001      	b.n	8004280 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004280:	68f9      	ldr	r1, [r7, #12]
 8004282:	69f8      	ldr	r0, [r7, #28]
 8004284:	f000 fe0c 	bl	8004ea0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d006      	beq.n	800429c <osMutexNew+0x102>
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800429c:	69fb      	ldr	r3, [r7, #28]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4a07      	ldr	r2, [pc, #28]	; (80042d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80042b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4a06      	ldr	r2, [pc, #24]	; (80042d8 <vApplicationGetIdleTaskMemory+0x30>)
 80042be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2280      	movs	r2, #128	; 0x80
 80042c4:	601a      	str	r2, [r3, #0]
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	2000014c 	.word	0x2000014c
 80042d8:	20000208 	.word	0x20000208

080042dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4a07      	ldr	r2, [pc, #28]	; (8004308 <vApplicationGetTimerTaskMemory+0x2c>)
 80042ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4a06      	ldr	r2, [pc, #24]	; (800430c <vApplicationGetTimerTaskMemory+0x30>)
 80042f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042fa:	601a      	str	r2, [r3, #0]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	20000408 	.word	0x20000408
 800430c:	200004c4 	.word	0x200004c4

08004310 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f103 0208 	add.w	r2, r3, #8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f04f 32ff 	mov.w	r2, #4294967295
 8004328:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f103 0208 	add.w	r2, r3, #8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f103 0208 	add.w	r2, r3, #8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	601a      	str	r2, [r3, #0]
}
 80043a6:	bf00      	nop
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043b2:	b480      	push	{r7}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d103      	bne.n	80043d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e00c      	b.n	80043ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3308      	adds	r3, #8
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	e002      	b.n	80043e0 <vListInsert+0x2e>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d2f6      	bcs.n	80043da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	601a      	str	r2, [r3, #0]
}
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6892      	ldr	r2, [r2, #8]
 800443a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6852      	ldr	r2, [r2, #4]
 8004444:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	429a      	cmp	r2, r3
 800444e:	d103      	bne.n	8004458 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	1e5a      	subs	r2, r3, #1
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800449e:	bf00      	nop
 80044a0:	e7fe      	b.n	80044a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80044a2:	f002 f8ff 	bl	80066a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	68f9      	ldr	r1, [r7, #12]
 80044b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	441a      	add	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	3b01      	subs	r3, #1
 80044d4:	68f9      	ldr	r1, [r7, #12]
 80044d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	441a      	add	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	22ff      	movs	r2, #255	; 0xff
 80044e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	22ff      	movs	r2, #255	; 0xff
 80044ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d114      	bne.n	8004522 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01a      	beq.n	8004536 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3310      	adds	r3, #16
 8004504:	4618      	mov	r0, r3
 8004506:	f001 f9af 	bl	8005868 <xTaskRemoveFromEventList>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d012      	beq.n	8004536 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004510:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <xQueueGenericReset+0xcc>)
 8004512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	e009      	b.n	8004536 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3310      	adds	r3, #16
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff fef2 	bl	8004310 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3324      	adds	r3, #36	; 0x24
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff feed 	bl	8004310 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004536:	f002 f8e5 	bl	8006704 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800453a:	2301      	movs	r3, #1
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08e      	sub	sp, #56	; 0x38
 800454c:	af02      	add	r7, sp, #8
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10a      	bne.n	8004572 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800456e:	bf00      	nop
 8004570:	e7fe      	b.n	8004570 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
}
 800458a:	bf00      	nop
 800458c:	e7fe      	b.n	800458c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <xQueueGenericCreateStatic+0x52>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <xQueueGenericCreateStatic+0x56>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <xQueueGenericCreateStatic+0x58>
 800459e:	2300      	movs	r3, #0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	623b      	str	r3, [r7, #32]
}
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d102      	bne.n	80045c6 <xQueueGenericCreateStatic+0x7e>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <xQueueGenericCreateStatic+0x82>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <xQueueGenericCreateStatic+0x84>
 80045ca:	2300      	movs	r3, #0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10a      	bne.n	80045e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	61fb      	str	r3, [r7, #28]
}
 80045e2:	bf00      	nop
 80045e4:	e7fe      	b.n	80045e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045e6:	2350      	movs	r3, #80	; 0x50
 80045e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b50      	cmp	r3, #80	; 0x50
 80045ee:	d00a      	beq.n	8004606 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	61bb      	str	r3, [r7, #24]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004606:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800460c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00d      	beq.n	800462e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800461a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	4613      	mov	r3, r2
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f83f 	bl	80046ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800462e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004630:	4618      	mov	r0, r3
 8004632:	3730      	adds	r7, #48	; 0x30
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	; 0x28
 800463c:	af02      	add	r7, sp, #8
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	4613      	mov	r3, r2
 8004644:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <xQueueGenericCreate+0x2a>
	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	613b      	str	r3, [r7, #16]
}
 800465e:	bf00      	nop
 8004660:	e7fe      	b.n	8004660 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	fb02 f303 	mul.w	r3, r2, r3
 800466a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	3350      	adds	r3, #80	; 0x50
 8004670:	4618      	mov	r0, r3
 8004672:	f002 f939 	bl	80068e8 <pvPortMalloc>
 8004676:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d011      	beq.n	80046a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	3350      	adds	r3, #80	; 0x50
 8004686:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004690:	79fa      	ldrb	r2, [r7, #7]
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	4613      	mov	r3, r2
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f805 	bl	80046ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046a2:	69bb      	ldr	r3, [r7, #24]
	}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3720      	adds	r7, #32
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d103      	bne.n	80046c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e002      	b.n	80046ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046da:	2101      	movs	r1, #1
 80046dc:	69b8      	ldr	r0, [r7, #24]
 80046de:	f7ff fecb 	bl	8004478 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	78fa      	ldrb	r2, [r7, #3]
 80046e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046ea:	bf00      	nop
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00e      	beq.n	800471e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004712:	2300      	movs	r3, #0
 8004714:	2200      	movs	r2, #0
 8004716:	2100      	movs	r1, #0
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f837 	bl	800478c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004726:	b580      	push	{r7, lr}
 8004728:	b086      	sub	sp, #24
 800472a:	af00      	add	r7, sp, #0
 800472c:	4603      	mov	r3, r0
 800472e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004730:	2301      	movs	r3, #1
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	2300      	movs	r3, #0
 8004736:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	461a      	mov	r2, r3
 800473c:	6939      	ldr	r1, [r7, #16]
 800473e:	6978      	ldr	r0, [r7, #20]
 8004740:	f7ff ff7a 	bl	8004638 <xQueueGenericCreate>
 8004744:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f7ff ffd3 	bl	80046f2 <prvInitialiseMutex>

		return xNewQueue;
 800474c:	68fb      	ldr	r3, [r7, #12]
	}
 800474e:	4618      	mov	r0, r3
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004756:	b580      	push	{r7, lr}
 8004758:	b088      	sub	sp, #32
 800475a:	af02      	add	r7, sp, #8
 800475c:	4603      	mov	r3, r0
 800475e:	6039      	str	r1, [r7, #0]
 8004760:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004762:	2301      	movs	r3, #1
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	2300      	movs	r3, #0
 8004768:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2200      	movs	r2, #0
 8004772:	6939      	ldr	r1, [r7, #16]
 8004774:	6978      	ldr	r0, [r7, #20]
 8004776:	f7ff fee7 	bl	8004548 <xQueueGenericCreateStatic>
 800477a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7ff ffb8 	bl	80046f2 <prvInitialiseMutex>

		return xNewQueue;
 8004782:	68fb      	ldr	r3, [r7, #12]
	}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08e      	sub	sp, #56	; 0x38
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800479a:	2300      	movs	r3, #0
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <xQueueGenericSend+0x32>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d103      	bne.n	80047cc <xQueueGenericSend+0x40>
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <xQueueGenericSend+0x44>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <xQueueGenericSend+0x46>
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10a      	bne.n	80047ec <xQueueGenericSend+0x60>
	__asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047e8:	bf00      	nop
 80047ea:	e7fe      	b.n	80047ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d103      	bne.n	80047fa <xQueueGenericSend+0x6e>
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <xQueueGenericSend+0x72>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <xQueueGenericSend+0x74>
 80047fe:	2300      	movs	r3, #0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10a      	bne.n	800481a <xQueueGenericSend+0x8e>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	623b      	str	r3, [r7, #32]
}
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800481a:	f001 f9e7 	bl	8005bec <xTaskGetSchedulerState>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d102      	bne.n	800482a <xQueueGenericSend+0x9e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <xQueueGenericSend+0xa2>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <xQueueGenericSend+0xa4>
 800482e:	2300      	movs	r3, #0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <xQueueGenericSend+0xbe>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	61fb      	str	r3, [r7, #28]
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800484a:	f001 ff2b 	bl	80066a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004856:	429a      	cmp	r2, r3
 8004858:	d302      	bcc.n	8004860 <xQueueGenericSend+0xd4>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b02      	cmp	r3, #2
 800485e:	d129      	bne.n	80048b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004866:	f000 fa0b 	bl	8004c80 <prvCopyDataToQueue>
 800486a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	2b00      	cmp	r3, #0
 8004872:	d010      	beq.n	8004896 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	3324      	adds	r3, #36	; 0x24
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fff5 	bl	8005868 <xTaskRemoveFromEventList>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d013      	beq.n	80048ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004884:	4b3f      	ldr	r3, [pc, #252]	; (8004984 <xQueueGenericSend+0x1f8>)
 8004886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	e00a      	b.n	80048ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d007      	beq.n	80048ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800489c:	4b39      	ldr	r3, [pc, #228]	; (8004984 <xQueueGenericSend+0x1f8>)
 800489e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048ac:	f001 ff2a 	bl	8006704 <vPortExitCritical>
				return pdPASS;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e063      	b.n	800497c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d103      	bne.n	80048c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048ba:	f001 ff23 	bl	8006704 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	e05c      	b.n	800497c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d106      	bne.n	80048d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	4618      	mov	r0, r3
 80048ce:	f001 f82f 	bl	8005930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048d2:	2301      	movs	r3, #1
 80048d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048d6:	f001 ff15 	bl	8006704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048da:	f000 fd9b 	bl	8005414 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048de:	f001 fee1 	bl	80066a4 <vPortEnterCritical>
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048e8:	b25b      	sxtb	r3, r3
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ee:	d103      	bne.n	80048f8 <xQueueGenericSend+0x16c>
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048fe:	b25b      	sxtb	r3, r3
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d103      	bne.n	800490e <xQueueGenericSend+0x182>
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800490e:	f001 fef9 	bl	8006704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004912:	1d3a      	adds	r2, r7, #4
 8004914:	f107 0314 	add.w	r3, r7, #20
 8004918:	4611      	mov	r1, r2
 800491a:	4618      	mov	r0, r3
 800491c:	f001 f81e 	bl	800595c <xTaskCheckForTimeOut>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d124      	bne.n	8004970 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004928:	f000 faa2 	bl	8004e70 <prvIsQueueFull>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d018      	beq.n	8004964 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	3310      	adds	r3, #16
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	4611      	mov	r1, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f000 ff44 	bl	80057c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004942:	f000 fa2d 	bl	8004da0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004946:	f000 fd73 	bl	8005430 <xTaskResumeAll>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	f47f af7c 	bne.w	800484a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004952:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <xQueueGenericSend+0x1f8>)
 8004954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	e772      	b.n	800484a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004966:	f000 fa1b 	bl	8004da0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800496a:	f000 fd61 	bl	8005430 <xTaskResumeAll>
 800496e:	e76c      	b.n	800484a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004972:	f000 fa15 	bl	8004da0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004976:	f000 fd5b 	bl	8005430 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800497a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800497c:	4618      	mov	r0, r3
 800497e:	3738      	adds	r7, #56	; 0x38
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	e000ed04 	.word	0xe000ed04

08004988 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b090      	sub	sp, #64	; 0x40
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049b2:	bf00      	nop
 80049b4:	e7fe      	b.n	80049b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d103      	bne.n	80049c4 <xQueueGenericSendFromISR+0x3c>
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <xQueueGenericSendFromISR+0x40>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <xQueueGenericSendFromISR+0x42>
 80049c8:	2300      	movs	r3, #0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d103      	bne.n	80049f2 <xQueueGenericSendFromISR+0x6a>
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <xQueueGenericSendFromISR+0x6e>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <xQueueGenericSendFromISR+0x70>
 80049f6:	2300      	movs	r3, #0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10a      	bne.n	8004a12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	623b      	str	r3, [r7, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	e7fe      	b.n	8004a10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a12:	f001 ff29 	bl	8006868 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a16:	f3ef 8211 	mrs	r2, BASEPRI
 8004a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	61fa      	str	r2, [r7, #28]
 8004a2c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a2e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d302      	bcc.n	8004a44 <xQueueGenericSendFromISR+0xbc>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d12f      	bne.n	8004aa4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a5a:	f000 f911 	bl	8004c80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a66:	d112      	bne.n	8004a8e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d016      	beq.n	8004a9e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a72:	3324      	adds	r3, #36	; 0x24
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fef7 	bl	8005868 <xTaskRemoveFromEventList>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00e      	beq.n	8004a9e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00b      	beq.n	8004a9e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	e007      	b.n	8004a9e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a92:	3301      	adds	r3, #1
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	b25a      	sxtb	r2, r3
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004aa2:	e001      	b.n	8004aa8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aaa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ab2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3740      	adds	r7, #64	; 0x40
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08c      	sub	sp, #48	; 0x30
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004acc:	2300      	movs	r3, #0
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10a      	bne.n	8004af0 <xQueueReceive+0x30>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	623b      	str	r3, [r7, #32]
}
 8004aec:	bf00      	nop
 8004aee:	e7fe      	b.n	8004aee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d103      	bne.n	8004afe <xQueueReceive+0x3e>
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <xQueueReceive+0x42>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <xQueueReceive+0x44>
 8004b02:	2300      	movs	r3, #0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <xQueueReceive+0x5e>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	61fb      	str	r3, [r7, #28]
}
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b1e:	f001 f865 	bl	8005bec <xTaskGetSchedulerState>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d102      	bne.n	8004b2e <xQueueReceive+0x6e>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <xQueueReceive+0x72>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <xQueueReceive+0x74>
 8004b32:	2300      	movs	r3, #0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <xQueueReceive+0x8e>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	61bb      	str	r3, [r7, #24]
}
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b4e:	f001 fda9 	bl	80066a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d01f      	beq.n	8004b9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b62:	f000 f8f7 	bl	8004d54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	1e5a      	subs	r2, r3, #1
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00f      	beq.n	8004b96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	3310      	adds	r3, #16
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fe74 	bl	8005868 <xTaskRemoveFromEventList>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d007      	beq.n	8004b96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b86:	4b3d      	ldr	r3, [pc, #244]	; (8004c7c <xQueueReceive+0x1bc>)
 8004b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b96:	f001 fdb5 	bl	8006704 <vPortExitCritical>
				return pdPASS;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e069      	b.n	8004c72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d103      	bne.n	8004bac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ba4:	f001 fdae 	bl	8006704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e062      	b.n	8004c72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bb2:	f107 0310 	add.w	r3, r7, #16
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 feba 	bl	8005930 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bc0:	f001 fda0 	bl	8006704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bc4:	f000 fc26 	bl	8005414 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bc8:	f001 fd6c 	bl	80066a4 <vPortEnterCritical>
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bd2:	b25b      	sxtb	r3, r3
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d103      	bne.n	8004be2 <xQueueReceive+0x122>
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004be8:	b25b      	sxtb	r3, r3
 8004bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bee:	d103      	bne.n	8004bf8 <xQueueReceive+0x138>
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bf8:	f001 fd84 	bl	8006704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bfc:	1d3a      	adds	r2, r7, #4
 8004bfe:	f107 0310 	add.w	r3, r7, #16
 8004c02:	4611      	mov	r1, r2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fea9 	bl	800595c <xTaskCheckForTimeOut>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d123      	bne.n	8004c58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c12:	f000 f917 	bl	8004e44 <prvIsQueueEmpty>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d017      	beq.n	8004c4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	3324      	adds	r3, #36	; 0x24
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	4611      	mov	r1, r2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fdcf 	bl	80057c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c2c:	f000 f8b8 	bl	8004da0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c30:	f000 fbfe 	bl	8005430 <xTaskResumeAll>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d189      	bne.n	8004b4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004c3a:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <xQueueReceive+0x1bc>)
 8004c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	e780      	b.n	8004b4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c4e:	f000 f8a7 	bl	8004da0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c52:	f000 fbed 	bl	8005430 <xTaskResumeAll>
 8004c56:	e77a      	b.n	8004b4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c5a:	f000 f8a1 	bl	8004da0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c5e:	f000 fbe7 	bl	8005430 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c64:	f000 f8ee 	bl	8004e44 <prvIsQueueEmpty>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f43f af6f 	beq.w	8004b4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3730      	adds	r7, #48	; 0x30
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	e000ed04 	.word	0xe000ed04

08004c80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10d      	bne.n	8004cba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d14d      	bne.n	8004d42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 ffbc 	bl	8005c28 <xTaskPriorityDisinherit>
 8004cb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	e043      	b.n	8004d42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d119      	bne.n	8004cf4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6858      	ldr	r0, [r3, #4]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	461a      	mov	r2, r3
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	f002 f921 	bl	8006f12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	441a      	add	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d32b      	bcc.n	8004d42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	605a      	str	r2, [r3, #4]
 8004cf2:	e026      	b.n	8004d42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	68d8      	ldr	r0, [r3, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	f002 f907 	bl	8006f12 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	425b      	negs	r3, r3
 8004d0e:	441a      	add	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d207      	bcs.n	8004d30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	425b      	negs	r3, r3
 8004d2a:	441a      	add	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d105      	bne.n	8004d42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d4a:	697b      	ldr	r3, [r7, #20]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d018      	beq.n	8004d98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	441a      	add	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d303      	bcc.n	8004d88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68d9      	ldr	r1, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	461a      	mov	r2, r3
 8004d92:	6838      	ldr	r0, [r7, #0]
 8004d94:	f002 f8bd 	bl	8006f12 <memcpy>
	}
}
 8004d98:	bf00      	nop
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004da8:	f001 fc7c 	bl	80066a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004db2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004db4:	e011      	b.n	8004dda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d012      	beq.n	8004de4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3324      	adds	r3, #36	; 0x24
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fd50 	bl	8005868 <xTaskRemoveFromEventList>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004dce:	f000 fe27 	bl	8005a20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	dce9      	bgt.n	8004db6 <prvUnlockQueue+0x16>
 8004de2:	e000      	b.n	8004de6 <prvUnlockQueue+0x46>
					break;
 8004de4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	22ff      	movs	r2, #255	; 0xff
 8004dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004dee:	f001 fc89 	bl	8006704 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004df2:	f001 fc57 	bl	80066a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dfe:	e011      	b.n	8004e24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d012      	beq.n	8004e2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3310      	adds	r3, #16
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fd2b 	bl	8005868 <xTaskRemoveFromEventList>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e18:	f000 fe02 	bl	8005a20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e1c:	7bbb      	ldrb	r3, [r7, #14]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	dce9      	bgt.n	8004e00 <prvUnlockQueue+0x60>
 8004e2c:	e000      	b.n	8004e30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	22ff      	movs	r2, #255	; 0xff
 8004e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e38:	f001 fc64 	bl	8006704 <vPortExitCritical>
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e4c:	f001 fc2a 	bl	80066a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d102      	bne.n	8004e5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	e001      	b.n	8004e62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e62:	f001 fc4f 	bl	8006704 <vPortExitCritical>

	return xReturn;
 8004e66:	68fb      	ldr	r3, [r7, #12]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e78:	f001 fc14 	bl	80066a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d102      	bne.n	8004e8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	e001      	b.n	8004e92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e92:	f001 fc37 	bl	8006704 <vPortExitCritical>

	return xReturn;
 8004e96:	68fb      	ldr	r3, [r7, #12]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	e014      	b.n	8004eda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004eb0:	4a0f      	ldr	r2, [pc, #60]	; (8004ef0 <vQueueAddToRegistry+0x50>)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10b      	bne.n	8004ed4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ebc:	490c      	ldr	r1, [pc, #48]	; (8004ef0 <vQueueAddToRegistry+0x50>)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004ec6:	4a0a      	ldr	r2, [pc, #40]	; (8004ef0 <vQueueAddToRegistry+0x50>)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	4413      	add	r3, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ed2:	e006      	b.n	8004ee2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b07      	cmp	r3, #7
 8004ede:	d9e7      	bls.n	8004eb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	20005d4c 	.word	0x20005d4c

08004ef4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f04:	f001 fbce 	bl	80066a4 <vPortEnterCritical>
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f0e:	b25b      	sxtb	r3, r3
 8004f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f14:	d103      	bne.n	8004f1e <vQueueWaitForMessageRestricted+0x2a>
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f24:	b25b      	sxtb	r3, r3
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d103      	bne.n	8004f34 <vQueueWaitForMessageRestricted+0x40>
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f34:	f001 fbe6 	bl	8006704 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	3324      	adds	r3, #36	; 0x24
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	68b9      	ldr	r1, [r7, #8]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fc61 	bl	8005810 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f4e:	6978      	ldr	r0, [r7, #20]
 8004f50:	f7ff ff26 	bl	8004da0 <prvUnlockQueue>
	}
 8004f54:	bf00      	nop
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08e      	sub	sp, #56	; 0x38
 8004f60:	af04      	add	r7, sp, #16
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10a      	bne.n	8004f86 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	623b      	str	r3, [r7, #32]
}
 8004f82:	bf00      	nop
 8004f84:	e7fe      	b.n	8004f84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <xTaskCreateStatic+0x46>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	61fb      	str	r3, [r7, #28]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004fa2:	23bc      	movs	r3, #188	; 0xbc
 8004fa4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2bbc      	cmp	r3, #188	; 0xbc
 8004faa:	d00a      	beq.n	8004fc2 <xTaskCreateStatic+0x66>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	61bb      	str	r3, [r7, #24]
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004fc2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d01e      	beq.n	8005008 <xTaskCreateStatic+0xac>
 8004fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01b      	beq.n	8005008 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	2202      	movs	r2, #2
 8004fde:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	9303      	str	r3, [sp, #12]
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	9302      	str	r3, [sp, #8]
 8004fea:	f107 0314 	add.w	r3, r7, #20
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f850 	bl	80050a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005000:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005002:	f000 f8f3 	bl	80051ec <prvAddNewTaskToReadyList>
 8005006:	e001      	b.n	800500c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800500c:	697b      	ldr	r3, [r7, #20]
	}
 800500e:	4618      	mov	r0, r3
 8005010:	3728      	adds	r7, #40	; 0x28
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005016:	b580      	push	{r7, lr}
 8005018:	b08c      	sub	sp, #48	; 0x30
 800501a:	af04      	add	r7, sp, #16
 800501c:	60f8      	str	r0, [r7, #12]
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	603b      	str	r3, [r7, #0]
 8005022:	4613      	mov	r3, r2
 8005024:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4618      	mov	r0, r3
 800502c:	f001 fc5c 	bl	80068e8 <pvPortMalloc>
 8005030:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00e      	beq.n	8005056 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005038:	20bc      	movs	r0, #188	; 0xbc
 800503a:	f001 fc55 	bl	80068e8 <pvPortMalloc>
 800503e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	631a      	str	r2, [r3, #48]	; 0x30
 800504c:	e005      	b.n	800505a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800504e:	6978      	ldr	r0, [r7, #20]
 8005050:	f001 fd16 	bl	8006a80 <vPortFree>
 8005054:	e001      	b.n	800505a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005056:	2300      	movs	r3, #0
 8005058:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d017      	beq.n	8005090 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005068:	88fa      	ldrh	r2, [r7, #6]
 800506a:	2300      	movs	r3, #0
 800506c:	9303      	str	r3, [sp, #12]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	9302      	str	r3, [sp, #8]
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f80e 	bl	80050a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005084:	69f8      	ldr	r0, [r7, #28]
 8005086:	f000 f8b1 	bl	80051ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800508a:	2301      	movs	r3, #1
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	e002      	b.n	8005096 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005090:	f04f 33ff 	mov.w	r3, #4294967295
 8005094:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005096:	69bb      	ldr	r3, [r7, #24]
	}
 8005098:	4618      	mov	r0, r3
 800509a:	3720      	adds	r7, #32
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	461a      	mov	r2, r3
 80050b8:	21a5      	movs	r1, #165	; 0xa5
 80050ba:	f001 ff38 	bl	8006f2e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050c8:	3b01      	subs	r3, #1
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f023 0307 	bic.w	r3, r3, #7
 80050d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	617b      	str	r3, [r7, #20]
}
 80050f4:	bf00      	nop
 80050f6:	e7fe      	b.n	80050f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01f      	beq.n	800513e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050fe:	2300      	movs	r3, #0
 8005100:	61fb      	str	r3, [r7, #28]
 8005102:	e012      	b.n	800512a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	4413      	add	r3, r2
 800510a:	7819      	ldrb	r1, [r3, #0]
 800510c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	3334      	adds	r3, #52	; 0x34
 8005114:	460a      	mov	r2, r1
 8005116:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d006      	beq.n	8005132 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	3301      	adds	r3, #1
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	2b0f      	cmp	r3, #15
 800512e:	d9e9      	bls.n	8005104 <prvInitialiseNewTask+0x64>
 8005130:	e000      	b.n	8005134 <prvInitialiseNewTask+0x94>
			{
				break;
 8005132:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800513c:	e003      	b.n	8005146 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005148:	2b37      	cmp	r3, #55	; 0x37
 800514a:	d901      	bls.n	8005150 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800514c:	2337      	movs	r3, #55	; 0x37
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005154:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800515a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	2200      	movs	r2, #0
 8005160:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	3304      	adds	r3, #4
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff f8f2 	bl	8004350 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	3318      	adds	r3, #24
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff f8ed 	bl	8004350 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800518a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	2200      	movs	r2, #0
 8005190:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	2200      	movs	r2, #0
 8005198:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	3354      	adds	r3, #84	; 0x54
 80051a0:	2260      	movs	r2, #96	; 0x60
 80051a2:	2100      	movs	r1, #0
 80051a4:	4618      	mov	r0, r3
 80051a6:	f001 fec2 	bl	8006f2e <memset>
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	4a0c      	ldr	r2, [pc, #48]	; (80051e0 <prvInitialiseNewTask+0x140>)
 80051ae:	659a      	str	r2, [r3, #88]	; 0x58
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	4a0c      	ldr	r2, [pc, #48]	; (80051e4 <prvInitialiseNewTask+0x144>)
 80051b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	4a0b      	ldr	r2, [pc, #44]	; (80051e8 <prvInitialiseNewTask+0x148>)
 80051ba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	68f9      	ldr	r1, [r7, #12]
 80051c0:	69b8      	ldr	r0, [r7, #24]
 80051c2:	f001 f941 	bl	8006448 <pxPortInitialiseStack>
 80051c6:	4602      	mov	r2, r0
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80051cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051d8:	bf00      	nop
 80051da:	3720      	adds	r7, #32
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	080080e4 	.word	0x080080e4
 80051e4:	08008104 	.word	0x08008104
 80051e8:	080080c4 	.word	0x080080c4

080051ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051f4:	f001 fa56 	bl	80066a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051f8:	4b2d      	ldr	r3, [pc, #180]	; (80052b0 <prvAddNewTaskToReadyList+0xc4>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3301      	adds	r3, #1
 80051fe:	4a2c      	ldr	r2, [pc, #176]	; (80052b0 <prvAddNewTaskToReadyList+0xc4>)
 8005200:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005202:	4b2c      	ldr	r3, [pc, #176]	; (80052b4 <prvAddNewTaskToReadyList+0xc8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d109      	bne.n	800521e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800520a:	4a2a      	ldr	r2, [pc, #168]	; (80052b4 <prvAddNewTaskToReadyList+0xc8>)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005210:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <prvAddNewTaskToReadyList+0xc4>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d110      	bne.n	800523a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005218:	f000 fc26 	bl	8005a68 <prvInitialiseTaskLists>
 800521c:	e00d      	b.n	800523a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800521e:	4b26      	ldr	r3, [pc, #152]	; (80052b8 <prvAddNewTaskToReadyList+0xcc>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005226:	4b23      	ldr	r3, [pc, #140]	; (80052b4 <prvAddNewTaskToReadyList+0xc8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	429a      	cmp	r2, r3
 8005232:	d802      	bhi.n	800523a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005234:	4a1f      	ldr	r2, [pc, #124]	; (80052b4 <prvAddNewTaskToReadyList+0xc8>)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800523a:	4b20      	ldr	r3, [pc, #128]	; (80052bc <prvAddNewTaskToReadyList+0xd0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3301      	adds	r3, #1
 8005240:	4a1e      	ldr	r2, [pc, #120]	; (80052bc <prvAddNewTaskToReadyList+0xd0>)
 8005242:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005244:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <prvAddNewTaskToReadyList+0xd0>)
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005250:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <prvAddNewTaskToReadyList+0xd4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d903      	bls.n	8005260 <prvAddNewTaskToReadyList+0x74>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	4a18      	ldr	r2, [pc, #96]	; (80052c0 <prvAddNewTaskToReadyList+0xd4>)
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <prvAddNewTaskToReadyList+0xd8>)
 800526e:	441a      	add	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3304      	adds	r3, #4
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f7ff f877 	bl	800436a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800527c:	f001 fa42 	bl	8006704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005280:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <prvAddNewTaskToReadyList+0xcc>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00e      	beq.n	80052a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005288:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <prvAddNewTaskToReadyList+0xc8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005292:	429a      	cmp	r2, r3
 8005294:	d207      	bcs.n	80052a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005296:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <prvAddNewTaskToReadyList+0xdc>)
 8005298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20000d98 	.word	0x20000d98
 80052b4:	200008c4 	.word	0x200008c4
 80052b8:	20000da4 	.word	0x20000da4
 80052bc:	20000db4 	.word	0x20000db4
 80052c0:	20000da0 	.word	0x20000da0
 80052c4:	200008c8 	.word	0x200008c8
 80052c8:	e000ed04 	.word	0xe000ed04

080052cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d017      	beq.n	800530e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052de:	4b13      	ldr	r3, [pc, #76]	; (800532c <vTaskDelay+0x60>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <vTaskDelay+0x30>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60bb      	str	r3, [r7, #8]
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80052fc:	f000 f88a 	bl	8005414 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005300:	2100      	movs	r1, #0
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fcfe 	bl	8005d04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005308:	f000 f892 	bl	8005430 <xTaskResumeAll>
 800530c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d107      	bne.n	8005324 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005314:	4b06      	ldr	r3, [pc, #24]	; (8005330 <vTaskDelay+0x64>)
 8005316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005324:	bf00      	nop
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20000dc0 	.word	0x20000dc0
 8005330:	e000ed04 	.word	0xe000ed04

08005334 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	; 0x28
 8005338:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800533a:	2300      	movs	r3, #0
 800533c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800533e:	2300      	movs	r3, #0
 8005340:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005342:	463a      	mov	r2, r7
 8005344:	1d39      	adds	r1, r7, #4
 8005346:	f107 0308 	add.w	r3, r7, #8
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe ffac 	bl	80042a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	9202      	str	r2, [sp, #8]
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	2300      	movs	r3, #0
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	2300      	movs	r3, #0
 8005360:	460a      	mov	r2, r1
 8005362:	4924      	ldr	r1, [pc, #144]	; (80053f4 <vTaskStartScheduler+0xc0>)
 8005364:	4824      	ldr	r0, [pc, #144]	; (80053f8 <vTaskStartScheduler+0xc4>)
 8005366:	f7ff fdf9 	bl	8004f5c <xTaskCreateStatic>
 800536a:	4603      	mov	r3, r0
 800536c:	4a23      	ldr	r2, [pc, #140]	; (80053fc <vTaskStartScheduler+0xc8>)
 800536e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005370:	4b22      	ldr	r3, [pc, #136]	; (80053fc <vTaskStartScheduler+0xc8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005378:	2301      	movs	r3, #1
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	e001      	b.n	8005382 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d102      	bne.n	800538e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005388:	f000 fd10 	bl	8005dac <xTimerCreateTimerTask>
 800538c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d11b      	bne.n	80053cc <vTaskStartScheduler+0x98>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	613b      	str	r3, [r7, #16]
}
 80053a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053a8:	4b15      	ldr	r3, [pc, #84]	; (8005400 <vTaskStartScheduler+0xcc>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3354      	adds	r3, #84	; 0x54
 80053ae:	4a15      	ldr	r2, [pc, #84]	; (8005404 <vTaskStartScheduler+0xd0>)
 80053b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053b2:	4b15      	ldr	r3, [pc, #84]	; (8005408 <vTaskStartScheduler+0xd4>)
 80053b4:	f04f 32ff 	mov.w	r2, #4294967295
 80053b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053ba:	4b14      	ldr	r3, [pc, #80]	; (800540c <vTaskStartScheduler+0xd8>)
 80053bc:	2201      	movs	r2, #1
 80053be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053c0:	4b13      	ldr	r3, [pc, #76]	; (8005410 <vTaskStartScheduler+0xdc>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053c6:	f001 f8cb 	bl	8006560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053ca:	e00e      	b.n	80053ea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d2:	d10a      	bne.n	80053ea <vTaskStartScheduler+0xb6>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	60fb      	str	r3, [r7, #12]
}
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <vTaskStartScheduler+0xb4>
}
 80053ea:	bf00      	nop
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	0800800c 	.word	0x0800800c
 80053f8:	08005a39 	.word	0x08005a39
 80053fc:	20000dbc 	.word	0x20000dbc
 8005400:	200008c4 	.word	0x200008c4
 8005404:	20000030 	.word	0x20000030
 8005408:	20000db8 	.word	0x20000db8
 800540c:	20000da4 	.word	0x20000da4
 8005410:	20000d9c 	.word	0x20000d9c

08005414 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005418:	4b04      	ldr	r3, [pc, #16]	; (800542c <vTaskSuspendAll+0x18>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3301      	adds	r3, #1
 800541e:	4a03      	ldr	r2, [pc, #12]	; (800542c <vTaskSuspendAll+0x18>)
 8005420:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005422:	bf00      	nop
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	20000dc0 	.word	0x20000dc0

08005430 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800543a:	2300      	movs	r3, #0
 800543c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800543e:	4b42      	ldr	r3, [pc, #264]	; (8005548 <xTaskResumeAll+0x118>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <xTaskResumeAll+0x2c>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	603b      	str	r3, [r7, #0]
}
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800545c:	f001 f922 	bl	80066a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005460:	4b39      	ldr	r3, [pc, #228]	; (8005548 <xTaskResumeAll+0x118>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3b01      	subs	r3, #1
 8005466:	4a38      	ldr	r2, [pc, #224]	; (8005548 <xTaskResumeAll+0x118>)
 8005468:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546a:	4b37      	ldr	r3, [pc, #220]	; (8005548 <xTaskResumeAll+0x118>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d162      	bne.n	8005538 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005472:	4b36      	ldr	r3, [pc, #216]	; (800554c <xTaskResumeAll+0x11c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d05e      	beq.n	8005538 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800547a:	e02f      	b.n	80054dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800547c:	4b34      	ldr	r3, [pc, #208]	; (8005550 <xTaskResumeAll+0x120>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3318      	adds	r3, #24
 8005488:	4618      	mov	r0, r3
 800548a:	f7fe ffcb 	bl	8004424 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3304      	adds	r3, #4
 8005492:	4618      	mov	r0, r3
 8005494:	f7fe ffc6 	bl	8004424 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549c:	4b2d      	ldr	r3, [pc, #180]	; (8005554 <xTaskResumeAll+0x124>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d903      	bls.n	80054ac <xTaskResumeAll+0x7c>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	4a2a      	ldr	r2, [pc, #168]	; (8005554 <xTaskResumeAll+0x124>)
 80054aa:	6013      	str	r3, [r2, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4a27      	ldr	r2, [pc, #156]	; (8005558 <xTaskResumeAll+0x128>)
 80054ba:	441a      	add	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3304      	adds	r3, #4
 80054c0:	4619      	mov	r1, r3
 80054c2:	4610      	mov	r0, r2
 80054c4:	f7fe ff51 	bl	800436a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054cc:	4b23      	ldr	r3, [pc, #140]	; (800555c <xTaskResumeAll+0x12c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d302      	bcc.n	80054dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80054d6:	4b22      	ldr	r3, [pc, #136]	; (8005560 <xTaskResumeAll+0x130>)
 80054d8:	2201      	movs	r2, #1
 80054da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054dc:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <xTaskResumeAll+0x120>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1cb      	bne.n	800547c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054ea:	f000 fb5f 	bl	8005bac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80054ee:	4b1d      	ldr	r3, [pc, #116]	; (8005564 <xTaskResumeAll+0x134>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d010      	beq.n	800551c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054fa:	f000 f847 	bl	800558c <xTaskIncrementTick>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005504:	4b16      	ldr	r3, [pc, #88]	; (8005560 <xTaskResumeAll+0x130>)
 8005506:	2201      	movs	r2, #1
 8005508:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3b01      	subs	r3, #1
 800550e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f1      	bne.n	80054fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005516:	4b13      	ldr	r3, [pc, #76]	; (8005564 <xTaskResumeAll+0x134>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800551c:	4b10      	ldr	r3, [pc, #64]	; (8005560 <xTaskResumeAll+0x130>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d009      	beq.n	8005538 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005524:	2301      	movs	r3, #1
 8005526:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005528:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <xTaskResumeAll+0x138>)
 800552a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005538:	f001 f8e4 	bl	8006704 <vPortExitCritical>

	return xAlreadyYielded;
 800553c:	68bb      	ldr	r3, [r7, #8]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000dc0 	.word	0x20000dc0
 800554c:	20000d98 	.word	0x20000d98
 8005550:	20000d58 	.word	0x20000d58
 8005554:	20000da0 	.word	0x20000da0
 8005558:	200008c8 	.word	0x200008c8
 800555c:	200008c4 	.word	0x200008c4
 8005560:	20000dac 	.word	0x20000dac
 8005564:	20000da8 	.word	0x20000da8
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <xTaskGetTickCount+0x1c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005578:	687b      	ldr	r3, [r7, #4]
}
 800557a:	4618      	mov	r0, r3
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	20000d9c 	.word	0x20000d9c

0800558c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005596:	4b4f      	ldr	r3, [pc, #316]	; (80056d4 <xTaskIncrementTick+0x148>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	f040 808f 	bne.w	80056be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055a0:	4b4d      	ldr	r3, [pc, #308]	; (80056d8 <xTaskIncrementTick+0x14c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3301      	adds	r3, #1
 80055a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055a8:	4a4b      	ldr	r2, [pc, #300]	; (80056d8 <xTaskIncrementTick+0x14c>)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d120      	bne.n	80055f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80055b4:	4b49      	ldr	r3, [pc, #292]	; (80056dc <xTaskIncrementTick+0x150>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	603b      	str	r3, [r7, #0]
}
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <xTaskIncrementTick+0x46>
 80055d4:	4b41      	ldr	r3, [pc, #260]	; (80056dc <xTaskIncrementTick+0x150>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	4b41      	ldr	r3, [pc, #260]	; (80056e0 <xTaskIncrementTick+0x154>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a3f      	ldr	r2, [pc, #252]	; (80056dc <xTaskIncrementTick+0x150>)
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	4a3f      	ldr	r2, [pc, #252]	; (80056e0 <xTaskIncrementTick+0x154>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	4b3e      	ldr	r3, [pc, #248]	; (80056e4 <xTaskIncrementTick+0x158>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3301      	adds	r3, #1
 80055ee:	4a3d      	ldr	r2, [pc, #244]	; (80056e4 <xTaskIncrementTick+0x158>)
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	f000 fadb 	bl	8005bac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055f6:	4b3c      	ldr	r3, [pc, #240]	; (80056e8 <xTaskIncrementTick+0x15c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d349      	bcc.n	8005694 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005600:	4b36      	ldr	r3, [pc, #216]	; (80056dc <xTaskIncrementTick+0x150>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d104      	bne.n	8005614 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800560a:	4b37      	ldr	r3, [pc, #220]	; (80056e8 <xTaskIncrementTick+0x15c>)
 800560c:	f04f 32ff 	mov.w	r2, #4294967295
 8005610:	601a      	str	r2, [r3, #0]
					break;
 8005612:	e03f      	b.n	8005694 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005614:	4b31      	ldr	r3, [pc, #196]	; (80056dc <xTaskIncrementTick+0x150>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	429a      	cmp	r2, r3
 800562a:	d203      	bcs.n	8005634 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800562c:	4a2e      	ldr	r2, [pc, #184]	; (80056e8 <xTaskIncrementTick+0x15c>)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005632:	e02f      	b.n	8005694 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	3304      	adds	r3, #4
 8005638:	4618      	mov	r0, r3
 800563a:	f7fe fef3 	bl	8004424 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005642:	2b00      	cmp	r3, #0
 8005644:	d004      	beq.n	8005650 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	3318      	adds	r3, #24
 800564a:	4618      	mov	r0, r3
 800564c:	f7fe feea 	bl	8004424 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005654:	4b25      	ldr	r3, [pc, #148]	; (80056ec <xTaskIncrementTick+0x160>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d903      	bls.n	8005664 <xTaskIncrementTick+0xd8>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	4a22      	ldr	r2, [pc, #136]	; (80056ec <xTaskIncrementTick+0x160>)
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005668:	4613      	mov	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4a1f      	ldr	r2, [pc, #124]	; (80056f0 <xTaskIncrementTick+0x164>)
 8005672:	441a      	add	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	3304      	adds	r3, #4
 8005678:	4619      	mov	r1, r3
 800567a:	4610      	mov	r0, r2
 800567c:	f7fe fe75 	bl	800436a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005684:	4b1b      	ldr	r3, [pc, #108]	; (80056f4 <xTaskIncrementTick+0x168>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568a:	429a      	cmp	r2, r3
 800568c:	d3b8      	bcc.n	8005600 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800568e:	2301      	movs	r3, #1
 8005690:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005692:	e7b5      	b.n	8005600 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005694:	4b17      	ldr	r3, [pc, #92]	; (80056f4 <xTaskIncrementTick+0x168>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569a:	4915      	ldr	r1, [pc, #84]	; (80056f0 <xTaskIncrementTick+0x164>)
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	440b      	add	r3, r1
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d901      	bls.n	80056b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80056ac:	2301      	movs	r3, #1
 80056ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80056b0:	4b11      	ldr	r3, [pc, #68]	; (80056f8 <xTaskIncrementTick+0x16c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d007      	beq.n	80056c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80056b8:	2301      	movs	r3, #1
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	e004      	b.n	80056c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80056be:	4b0f      	ldr	r3, [pc, #60]	; (80056fc <xTaskIncrementTick+0x170>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3301      	adds	r3, #1
 80056c4:	4a0d      	ldr	r2, [pc, #52]	; (80056fc <xTaskIncrementTick+0x170>)
 80056c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80056c8:	697b      	ldr	r3, [r7, #20]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000dc0 	.word	0x20000dc0
 80056d8:	20000d9c 	.word	0x20000d9c
 80056dc:	20000d50 	.word	0x20000d50
 80056e0:	20000d54 	.word	0x20000d54
 80056e4:	20000db0 	.word	0x20000db0
 80056e8:	20000db8 	.word	0x20000db8
 80056ec:	20000da0 	.word	0x20000da0
 80056f0:	200008c8 	.word	0x200008c8
 80056f4:	200008c4 	.word	0x200008c4
 80056f8:	20000dac 	.word	0x20000dac
 80056fc:	20000da8 	.word	0x20000da8

08005700 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005706:	4b2a      	ldr	r3, [pc, #168]	; (80057b0 <vTaskSwitchContext+0xb0>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800570e:	4b29      	ldr	r3, [pc, #164]	; (80057b4 <vTaskSwitchContext+0xb4>)
 8005710:	2201      	movs	r2, #1
 8005712:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005714:	e046      	b.n	80057a4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005716:	4b27      	ldr	r3, [pc, #156]	; (80057b4 <vTaskSwitchContext+0xb4>)
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800571c:	4b26      	ldr	r3, [pc, #152]	; (80057b8 <vTaskSwitchContext+0xb8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	e010      	b.n	8005746 <vTaskSwitchContext+0x46>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10a      	bne.n	8005740 <vTaskSwitchContext+0x40>
	__asm volatile
 800572a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	607b      	str	r3, [r7, #4]
}
 800573c:	bf00      	nop
 800573e:	e7fe      	b.n	800573e <vTaskSwitchContext+0x3e>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3b01      	subs	r3, #1
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	491d      	ldr	r1, [pc, #116]	; (80057bc <vTaskSwitchContext+0xbc>)
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	440b      	add	r3, r1
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0e4      	beq.n	8005724 <vTaskSwitchContext+0x24>
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4a15      	ldr	r2, [pc, #84]	; (80057bc <vTaskSwitchContext+0xbc>)
 8005766:	4413      	add	r3, r2
 8005768:	60bb      	str	r3, [r7, #8]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	605a      	str	r2, [r3, #4]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	3308      	adds	r3, #8
 800577c:	429a      	cmp	r2, r3
 800577e:	d104      	bne.n	800578a <vTaskSwitchContext+0x8a>
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	605a      	str	r2, [r3, #4]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4a0b      	ldr	r2, [pc, #44]	; (80057c0 <vTaskSwitchContext+0xc0>)
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	4a08      	ldr	r2, [pc, #32]	; (80057b8 <vTaskSwitchContext+0xb8>)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <vTaskSwitchContext+0xc0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3354      	adds	r3, #84	; 0x54
 80057a0:	4a08      	ldr	r2, [pc, #32]	; (80057c4 <vTaskSwitchContext+0xc4>)
 80057a2:	6013      	str	r3, [r2, #0]
}
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	20000dc0 	.word	0x20000dc0
 80057b4:	20000dac 	.word	0x20000dac
 80057b8:	20000da0 	.word	0x20000da0
 80057bc:	200008c8 	.word	0x200008c8
 80057c0:	200008c4 	.word	0x200008c4
 80057c4:	20000030 	.word	0x20000030

080057c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	60fb      	str	r3, [r7, #12]
}
 80057ea:	bf00      	nop
 80057ec:	e7fe      	b.n	80057ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057ee:	4b07      	ldr	r3, [pc, #28]	; (800580c <vTaskPlaceOnEventList+0x44>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3318      	adds	r3, #24
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fe fddb 	bl	80043b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057fc:	2101      	movs	r1, #1
 80057fe:	6838      	ldr	r0, [r7, #0]
 8005800:	f000 fa80 	bl	8005d04 <prvAddCurrentTaskToDelayedList>
}
 8005804:	bf00      	nop
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	200008c4 	.word	0x200008c4

08005810 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	617b      	str	r3, [r7, #20]
}
 8005834:	bf00      	nop
 8005836:	e7fe      	b.n	8005836 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005838:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <vTaskPlaceOnEventListRestricted+0x54>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3318      	adds	r3, #24
 800583e:	4619      	mov	r1, r3
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7fe fd92 	bl	800436a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800584c:	f04f 33ff 	mov.w	r3, #4294967295
 8005850:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	68b8      	ldr	r0, [r7, #8]
 8005856:	f000 fa55 	bl	8005d04 <prvAddCurrentTaskToDelayedList>
	}
 800585a:	bf00      	nop
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	200008c4 	.word	0x200008c4

08005868 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10a      	bne.n	8005894 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	60fb      	str	r3, [r7, #12]
}
 8005890:	bf00      	nop
 8005892:	e7fe      	b.n	8005892 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	3318      	adds	r3, #24
 8005898:	4618      	mov	r0, r3
 800589a:	f7fe fdc3 	bl	8004424 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800589e:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <xTaskRemoveFromEventList+0xb0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d11d      	bne.n	80058e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	3304      	adds	r3, #4
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe fdba 	bl	8004424 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b4:	4b19      	ldr	r3, [pc, #100]	; (800591c <xTaskRemoveFromEventList+0xb4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d903      	bls.n	80058c4 <xTaskRemoveFromEventList+0x5c>
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	4a16      	ldr	r2, [pc, #88]	; (800591c <xTaskRemoveFromEventList+0xb4>)
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4a13      	ldr	r2, [pc, #76]	; (8005920 <xTaskRemoveFromEventList+0xb8>)
 80058d2:	441a      	add	r2, r3
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4619      	mov	r1, r3
 80058da:	4610      	mov	r0, r2
 80058dc:	f7fe fd45 	bl	800436a <vListInsertEnd>
 80058e0:	e005      	b.n	80058ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	3318      	adds	r3, #24
 80058e6:	4619      	mov	r1, r3
 80058e8:	480e      	ldr	r0, [pc, #56]	; (8005924 <xTaskRemoveFromEventList+0xbc>)
 80058ea:	f7fe fd3e 	bl	800436a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f2:	4b0d      	ldr	r3, [pc, #52]	; (8005928 <xTaskRemoveFromEventList+0xc0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d905      	bls.n	8005908 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058fc:	2301      	movs	r3, #1
 80058fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005900:	4b0a      	ldr	r3, [pc, #40]	; (800592c <xTaskRemoveFromEventList+0xc4>)
 8005902:	2201      	movs	r2, #1
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	e001      	b.n	800590c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800590c:	697b      	ldr	r3, [r7, #20]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20000dc0 	.word	0x20000dc0
 800591c:	20000da0 	.word	0x20000da0
 8005920:	200008c8 	.word	0x200008c8
 8005924:	20000d58 	.word	0x20000d58
 8005928:	200008c4 	.word	0x200008c4
 800592c:	20000dac 	.word	0x20000dac

08005930 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005938:	4b06      	ldr	r3, [pc, #24]	; (8005954 <vTaskInternalSetTimeOutState+0x24>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005940:	4b05      	ldr	r3, [pc, #20]	; (8005958 <vTaskInternalSetTimeOutState+0x28>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	605a      	str	r2, [r3, #4]
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	20000db0 	.word	0x20000db0
 8005958:	20000d9c 	.word	0x20000d9c

0800595c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10a      	bne.n	8005982 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	613b      	str	r3, [r7, #16]
}
 800597e:	bf00      	nop
 8005980:	e7fe      	b.n	8005980 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	60fb      	str	r3, [r7, #12]
}
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800599e:	f000 fe81 	bl	80066a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059a2:	4b1d      	ldr	r3, [pc, #116]	; (8005a18 <xTaskCheckForTimeOut+0xbc>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ba:	d102      	bne.n	80059c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059bc:	2300      	movs	r3, #0
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	e023      	b.n	8005a0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	4b15      	ldr	r3, [pc, #84]	; (8005a1c <xTaskCheckForTimeOut+0xc0>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d007      	beq.n	80059de <xTaskCheckForTimeOut+0x82>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d302      	bcc.n	80059de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80059d8:	2301      	movs	r3, #1
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	e015      	b.n	8005a0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d20b      	bcs.n	8005a00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	1ad2      	subs	r2, r2, r3
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff ff9b 	bl	8005930 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	e004      	b.n	8005a0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a06:	2301      	movs	r3, #1
 8005a08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a0a:	f000 fe7b 	bl	8006704 <vPortExitCritical>

	return xReturn;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3720      	adds	r7, #32
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000d9c 	.word	0x20000d9c
 8005a1c:	20000db0 	.word	0x20000db0

08005a20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a24:	4b03      	ldr	r3, [pc, #12]	; (8005a34 <vTaskMissedYield+0x14>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
}
 8005a2a:	bf00      	nop
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	20000dac 	.word	0x20000dac

08005a38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a40:	f000 f852 	bl	8005ae8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <prvIdleTask+0x28>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d9f9      	bls.n	8005a40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a4c:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <prvIdleTask+0x2c>)
 8005a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a5c:	e7f0      	b.n	8005a40 <prvIdleTask+0x8>
 8005a5e:	bf00      	nop
 8005a60:	200008c8 	.word	0x200008c8
 8005a64:	e000ed04 	.word	0xe000ed04

08005a68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a6e:	2300      	movs	r3, #0
 8005a70:	607b      	str	r3, [r7, #4]
 8005a72:	e00c      	b.n	8005a8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4a12      	ldr	r2, [pc, #72]	; (8005ac8 <prvInitialiseTaskLists+0x60>)
 8005a80:	4413      	add	r3, r2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fc44 	bl	8004310 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b37      	cmp	r3, #55	; 0x37
 8005a92:	d9ef      	bls.n	8005a74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a94:	480d      	ldr	r0, [pc, #52]	; (8005acc <prvInitialiseTaskLists+0x64>)
 8005a96:	f7fe fc3b 	bl	8004310 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a9a:	480d      	ldr	r0, [pc, #52]	; (8005ad0 <prvInitialiseTaskLists+0x68>)
 8005a9c:	f7fe fc38 	bl	8004310 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005aa0:	480c      	ldr	r0, [pc, #48]	; (8005ad4 <prvInitialiseTaskLists+0x6c>)
 8005aa2:	f7fe fc35 	bl	8004310 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005aa6:	480c      	ldr	r0, [pc, #48]	; (8005ad8 <prvInitialiseTaskLists+0x70>)
 8005aa8:	f7fe fc32 	bl	8004310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005aac:	480b      	ldr	r0, [pc, #44]	; (8005adc <prvInitialiseTaskLists+0x74>)
 8005aae:	f7fe fc2f 	bl	8004310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ab2:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <prvInitialiseTaskLists+0x78>)
 8005ab4:	4a05      	ldr	r2, [pc, #20]	; (8005acc <prvInitialiseTaskLists+0x64>)
 8005ab6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ab8:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <prvInitialiseTaskLists+0x7c>)
 8005aba:	4a05      	ldr	r2, [pc, #20]	; (8005ad0 <prvInitialiseTaskLists+0x68>)
 8005abc:	601a      	str	r2, [r3, #0]
}
 8005abe:	bf00      	nop
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	200008c8 	.word	0x200008c8
 8005acc:	20000d28 	.word	0x20000d28
 8005ad0:	20000d3c 	.word	0x20000d3c
 8005ad4:	20000d58 	.word	0x20000d58
 8005ad8:	20000d6c 	.word	0x20000d6c
 8005adc:	20000d84 	.word	0x20000d84
 8005ae0:	20000d50 	.word	0x20000d50
 8005ae4:	20000d54 	.word	0x20000d54

08005ae8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aee:	e019      	b.n	8005b24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005af0:	f000 fdd8 	bl	80066a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af4:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <prvCheckTasksWaitingTermination+0x50>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe fc8f 	bl	8004424 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b06:	4b0d      	ldr	r3, [pc, #52]	; (8005b3c <prvCheckTasksWaitingTermination+0x54>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	4a0b      	ldr	r2, [pc, #44]	; (8005b3c <prvCheckTasksWaitingTermination+0x54>)
 8005b0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b10:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <prvCheckTasksWaitingTermination+0x58>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	4a0a      	ldr	r2, [pc, #40]	; (8005b40 <prvCheckTasksWaitingTermination+0x58>)
 8005b18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b1a:	f000 fdf3 	bl	8006704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f810 	bl	8005b44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b24:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <prvCheckTasksWaitingTermination+0x58>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e1      	bne.n	8005af0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b2c:	bf00      	nop
 8005b2e:	bf00      	nop
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000d6c 	.word	0x20000d6c
 8005b3c:	20000d98 	.word	0x20000d98
 8005b40:	20000d80 	.word	0x20000d80

08005b44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3354      	adds	r3, #84	; 0x54
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 faf9 	bl	8007148 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d108      	bne.n	8005b72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 ff8b 	bl	8006a80 <vPortFree>
				vPortFree( pxTCB );
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 ff88 	bl	8006a80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b70:	e018      	b.n	8005ba4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d103      	bne.n	8005b84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 ff7f 	bl	8006a80 <vPortFree>
	}
 8005b82:	e00f      	b.n	8005ba4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d00a      	beq.n	8005ba4 <prvDeleteTCB+0x60>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	60fb      	str	r3, [r7, #12]
}
 8005ba0:	bf00      	nop
 8005ba2:	e7fe      	b.n	8005ba2 <prvDeleteTCB+0x5e>
	}
 8005ba4:	bf00      	nop
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bb2:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <prvResetNextTaskUnblockTime+0x38>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d104      	bne.n	8005bc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <prvResetNextTaskUnblockTime+0x3c>)
 8005bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005bc4:	e008      	b.n	8005bd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc6:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <prvResetNextTaskUnblockTime+0x38>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	4a04      	ldr	r2, [pc, #16]	; (8005be8 <prvResetNextTaskUnblockTime+0x3c>)
 8005bd6:	6013      	str	r3, [r2, #0]
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	20000d50 	.word	0x20000d50
 8005be8:	20000db8 	.word	0x20000db8

08005bec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <xTaskGetSchedulerState+0x34>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d102      	bne.n	8005c00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	607b      	str	r3, [r7, #4]
 8005bfe:	e008      	b.n	8005c12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c00:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <xTaskGetSchedulerState+0x38>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d102      	bne.n	8005c0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c08:	2302      	movs	r3, #2
 8005c0a:	607b      	str	r3, [r7, #4]
 8005c0c:	e001      	b.n	8005c12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c12:	687b      	ldr	r3, [r7, #4]
	}
 8005c14:	4618      	mov	r0, r3
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	20000da4 	.word	0x20000da4
 8005c24:	20000dc0 	.word	0x20000dc0

08005c28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d056      	beq.n	8005cec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c3e:	4b2e      	ldr	r3, [pc, #184]	; (8005cf8 <xTaskPriorityDisinherit+0xd0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d00a      	beq.n	8005c5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	60fb      	str	r3, [r7, #12]
}
 8005c5a:	bf00      	nop
 8005c5c:	e7fe      	b.n	8005c5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10a      	bne.n	8005c7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	60bb      	str	r3, [r7, #8]
}
 8005c78:	bf00      	nop
 8005c7a:	e7fe      	b.n	8005c7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c80:	1e5a      	subs	r2, r3, #1
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d02c      	beq.n	8005cec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d128      	bne.n	8005cec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe fbc0 	bl	8004424 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbc:	4b0f      	ldr	r3, [pc, #60]	; (8005cfc <xTaskPriorityDisinherit+0xd4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d903      	bls.n	8005ccc <xTaskPriorityDisinherit+0xa4>
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	4a0c      	ldr	r2, [pc, #48]	; (8005cfc <xTaskPriorityDisinherit+0xd4>)
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4a09      	ldr	r2, [pc, #36]	; (8005d00 <xTaskPriorityDisinherit+0xd8>)
 8005cda:	441a      	add	r2, r3
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	f7fe fb41 	bl	800436a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cec:	697b      	ldr	r3, [r7, #20]
	}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	200008c4 	.word	0x200008c4
 8005cfc:	20000da0 	.word	0x20000da0
 8005d00:	200008c8 	.word	0x200008c8

08005d04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d0e:	4b21      	ldr	r3, [pc, #132]	; (8005d94 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d14:	4b20      	ldr	r3, [pc, #128]	; (8005d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fe fb82 	bl	8004424 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d26:	d10a      	bne.n	8005d3e <prvAddCurrentTaskToDelayedList+0x3a>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d007      	beq.n	8005d3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d2e:	4b1a      	ldr	r3, [pc, #104]	; (8005d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3304      	adds	r3, #4
 8005d34:	4619      	mov	r1, r3
 8005d36:	4819      	ldr	r0, [pc, #100]	; (8005d9c <prvAddCurrentTaskToDelayedList+0x98>)
 8005d38:	f7fe fb17 	bl	800436a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d3c:	e026      	b.n	8005d8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4413      	add	r3, r2
 8005d44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d46:	4b14      	ldr	r3, [pc, #80]	; (8005d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d209      	bcs.n	8005d6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d56:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b0f      	ldr	r3, [pc, #60]	; (8005d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	4619      	mov	r1, r3
 8005d62:	4610      	mov	r0, r2
 8005d64:	f7fe fb25 	bl	80043b2 <vListInsert>
}
 8005d68:	e010      	b.n	8005d8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d6a:	4b0e      	ldr	r3, [pc, #56]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	4b0a      	ldr	r3, [pc, #40]	; (8005d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4619      	mov	r1, r3
 8005d76:	4610      	mov	r0, r2
 8005d78:	f7fe fb1b 	bl	80043b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d202      	bcs.n	8005d8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d86:	4a08      	ldr	r2, [pc, #32]	; (8005da8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	6013      	str	r3, [r2, #0]
}
 8005d8c:	bf00      	nop
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20000d9c 	.word	0x20000d9c
 8005d98:	200008c4 	.word	0x200008c4
 8005d9c:	20000d84 	.word	0x20000d84
 8005da0:	20000d54 	.word	0x20000d54
 8005da4:	20000d50 	.word	0x20000d50
 8005da8:	20000db8 	.word	0x20000db8

08005dac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08a      	sub	sp, #40	; 0x28
 8005db0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005db6:	f000 fb07 	bl	80063c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005dba:	4b1c      	ldr	r3, [pc, #112]	; (8005e2c <xTimerCreateTimerTask+0x80>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d021      	beq.n	8005e06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005dca:	1d3a      	adds	r2, r7, #4
 8005dcc:	f107 0108 	add.w	r1, r7, #8
 8005dd0:	f107 030c 	add.w	r3, r7, #12
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fe fa81 	bl	80042dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	9202      	str	r2, [sp, #8]
 8005de2:	9301      	str	r3, [sp, #4]
 8005de4:	2302      	movs	r3, #2
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	2300      	movs	r3, #0
 8005dea:	460a      	mov	r2, r1
 8005dec:	4910      	ldr	r1, [pc, #64]	; (8005e30 <xTimerCreateTimerTask+0x84>)
 8005dee:	4811      	ldr	r0, [pc, #68]	; (8005e34 <xTimerCreateTimerTask+0x88>)
 8005df0:	f7ff f8b4 	bl	8004f5c <xTaskCreateStatic>
 8005df4:	4603      	mov	r3, r0
 8005df6:	4a10      	ldr	r2, [pc, #64]	; (8005e38 <xTimerCreateTimerTask+0x8c>)
 8005df8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005dfa:	4b0f      	ldr	r3, [pc, #60]	; (8005e38 <xTimerCreateTimerTask+0x8c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e02:	2301      	movs	r3, #1
 8005e04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10a      	bne.n	8005e22 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	613b      	str	r3, [r7, #16]
}
 8005e1e:	bf00      	nop
 8005e20:	e7fe      	b.n	8005e20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e22:	697b      	ldr	r3, [r7, #20]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	20000df4 	.word	0x20000df4
 8005e30:	08008014 	.word	0x08008014
 8005e34:	08005f71 	.word	0x08005f71
 8005e38:	20000df8 	.word	0x20000df8

08005e3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08a      	sub	sp, #40	; 0x28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	623b      	str	r3, [r7, #32]
}
 8005e66:	bf00      	nop
 8005e68:	e7fe      	b.n	8005e68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e6a:	4b1a      	ldr	r3, [pc, #104]	; (8005ed4 <xTimerGenericCommand+0x98>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d02a      	beq.n	8005ec8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b05      	cmp	r3, #5
 8005e82:	dc18      	bgt.n	8005eb6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e84:	f7ff feb2 	bl	8005bec <xTaskGetSchedulerState>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d109      	bne.n	8005ea2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e8e:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <xTimerGenericCommand+0x98>)
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	f107 0110 	add.w	r1, r7, #16
 8005e96:	2300      	movs	r3, #0
 8005e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e9a:	f7fe fc77 	bl	800478c <xQueueGenericSend>
 8005e9e:	6278      	str	r0, [r7, #36]	; 0x24
 8005ea0:	e012      	b.n	8005ec8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ea2:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <xTimerGenericCommand+0x98>)
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	f107 0110 	add.w	r1, r7, #16
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2200      	movs	r2, #0
 8005eae:	f7fe fc6d 	bl	800478c <xQueueGenericSend>
 8005eb2:	6278      	str	r0, [r7, #36]	; 0x24
 8005eb4:	e008      	b.n	8005ec8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005eb6:	4b07      	ldr	r3, [pc, #28]	; (8005ed4 <xTimerGenericCommand+0x98>)
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	f107 0110 	add.w	r1, r7, #16
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	f7fe fd61 	bl	8004988 <xQueueGenericSendFromISR>
 8005ec6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3728      	adds	r7, #40	; 0x28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20000df4 	.word	0x20000df4

08005ed8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee2:	4b22      	ldr	r3, [pc, #136]	; (8005f6c <prvProcessExpiredTimer+0x94>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fe fa97 	bl	8004424 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d022      	beq.n	8005f4a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	699a      	ldr	r2, [r3, #24]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	18d1      	adds	r1, r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	6978      	ldr	r0, [r7, #20]
 8005f12:	f000 f8d1 	bl	80060b8 <prvInsertTimerInActiveList>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01f      	beq.n	8005f5c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	2300      	movs	r3, #0
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	2100      	movs	r1, #0
 8005f26:	6978      	ldr	r0, [r7, #20]
 8005f28:	f7ff ff88 	bl	8005e3c <xTimerGenericCommand>
 8005f2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d113      	bne.n	8005f5c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	60fb      	str	r3, [r7, #12]
}
 8005f46:	bf00      	nop
 8005f48:	e7fe      	b.n	8005f48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f50:	f023 0301 	bic.w	r3, r3, #1
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	6978      	ldr	r0, [r7, #20]
 8005f62:	4798      	blx	r3
}
 8005f64:	bf00      	nop
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	20000dec 	.word	0x20000dec

08005f70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f78:	f107 0308 	add.w	r3, r7, #8
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 f857 	bl	8006030 <prvGetNextExpireTime>
 8005f82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	4619      	mov	r1, r3
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f803 	bl	8005f94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f8e:	f000 f8d5 	bl	800613c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f92:	e7f1      	b.n	8005f78 <prvTimerTask+0x8>

08005f94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f9e:	f7ff fa39 	bl	8005414 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fa2:	f107 0308 	add.w	r3, r7, #8
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 f866 	bl	8006078 <prvSampleTimeNow>
 8005fac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d130      	bne.n	8006016 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <prvProcessTimerOrBlockTask+0x3c>
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d806      	bhi.n	8005fd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005fc2:	f7ff fa35 	bl	8005430 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005fc6:	68f9      	ldr	r1, [r7, #12]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7ff ff85 	bl	8005ed8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005fce:	e024      	b.n	800601a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d008      	beq.n	8005fe8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005fd6:	4b13      	ldr	r3, [pc, #76]	; (8006024 <prvProcessTimerOrBlockTask+0x90>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <prvProcessTimerOrBlockTask+0x50>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <prvProcessTimerOrBlockTask+0x52>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005fe8:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <prvProcessTimerOrBlockTask+0x94>)
 8005fea:	6818      	ldr	r0, [r3, #0]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	f7fe ff7d 	bl	8004ef4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ffa:	f7ff fa19 	bl	8005430 <xTaskResumeAll>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006004:	4b09      	ldr	r3, [pc, #36]	; (800602c <prvProcessTimerOrBlockTask+0x98>)
 8006006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	f3bf 8f6f 	isb	sy
}
 8006014:	e001      	b.n	800601a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006016:	f7ff fa0b 	bl	8005430 <xTaskResumeAll>
}
 800601a:	bf00      	nop
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000df0 	.word	0x20000df0
 8006028:	20000df4 	.word	0x20000df4
 800602c:	e000ed04 	.word	0xe000ed04

08006030 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006038:	4b0e      	ldr	r3, [pc, #56]	; (8006074 <prvGetNextExpireTime+0x44>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <prvGetNextExpireTime+0x16>
 8006042:	2201      	movs	r2, #1
 8006044:	e000      	b.n	8006048 <prvGetNextExpireTime+0x18>
 8006046:	2200      	movs	r2, #0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d105      	bne.n	8006060 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006054:	4b07      	ldr	r3, [pc, #28]	; (8006074 <prvGetNextExpireTime+0x44>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	e001      	b.n	8006064 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006064:	68fb      	ldr	r3, [r7, #12]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000dec 	.word	0x20000dec

08006078 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006080:	f7ff fa74 	bl	800556c <xTaskGetTickCount>
 8006084:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006086:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <prvSampleTimeNow+0x3c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	429a      	cmp	r2, r3
 800608e:	d205      	bcs.n	800609c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006090:	f000 f936 	bl	8006300 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	e002      	b.n	80060a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060a2:	4a04      	ldr	r2, [pc, #16]	; (80060b4 <prvSampleTimeNow+0x3c>)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060a8:	68fb      	ldr	r3, [r7, #12]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000dfc 	.word	0x20000dfc

080060b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060c6:	2300      	movs	r3, #0
 80060c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d812      	bhi.n	8006104 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	1ad2      	subs	r2, r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d302      	bcc.n	80060f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80060ec:	2301      	movs	r3, #1
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	e01b      	b.n	800612a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060f2:	4b10      	ldr	r3, [pc, #64]	; (8006134 <prvInsertTimerInActiveList+0x7c>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3304      	adds	r3, #4
 80060fa:	4619      	mov	r1, r3
 80060fc:	4610      	mov	r0, r2
 80060fe:	f7fe f958 	bl	80043b2 <vListInsert>
 8006102:	e012      	b.n	800612a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d206      	bcs.n	800611a <prvInsertTimerInActiveList+0x62>
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d302      	bcc.n	800611a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006114:	2301      	movs	r3, #1
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	e007      	b.n	800612a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800611a:	4b07      	ldr	r3, [pc, #28]	; (8006138 <prvInsertTimerInActiveList+0x80>)
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3304      	adds	r3, #4
 8006122:	4619      	mov	r1, r3
 8006124:	4610      	mov	r0, r2
 8006126:	f7fe f944 	bl	80043b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800612a:	697b      	ldr	r3, [r7, #20]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	20000df0 	.word	0x20000df0
 8006138:	20000dec 	.word	0x20000dec

0800613c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08e      	sub	sp, #56	; 0x38
 8006140:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006142:	e0ca      	b.n	80062da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	da18      	bge.n	800617c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800614a:	1d3b      	adds	r3, r7, #4
 800614c:	3304      	adds	r3, #4
 800614e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10a      	bne.n	800616c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	61fb      	str	r3, [r7, #28]
}
 8006168:	bf00      	nop
 800616a:	e7fe      	b.n	800616a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006172:	6850      	ldr	r0, [r2, #4]
 8006174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006176:	6892      	ldr	r2, [r2, #8]
 8006178:	4611      	mov	r1, r2
 800617a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f2c0 80aa 	blt.w	80062d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d004      	beq.n	800619a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	3304      	adds	r3, #4
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe f945 	bl	8004424 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800619a:	463b      	mov	r3, r7
 800619c:	4618      	mov	r0, r3
 800619e:	f7ff ff6b 	bl	8006078 <prvSampleTimeNow>
 80061a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b09      	cmp	r3, #9
 80061a8:	f200 8097 	bhi.w	80062da <prvProcessReceivedCommands+0x19e>
 80061ac:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <prvProcessReceivedCommands+0x78>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	080061dd 	.word	0x080061dd
 80061b8:	080061dd 	.word	0x080061dd
 80061bc:	080061dd 	.word	0x080061dd
 80061c0:	08006251 	.word	0x08006251
 80061c4:	08006265 	.word	0x08006265
 80061c8:	080062af 	.word	0x080062af
 80061cc:	080061dd 	.word	0x080061dd
 80061d0:	080061dd 	.word	0x080061dd
 80061d4:	08006251 	.word	0x08006251
 80061d8:	08006265 	.word	0x08006265
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061e2:	f043 0301 	orr.w	r3, r3, #1
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	18d1      	adds	r1, r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061fc:	f7ff ff5c 	bl	80060b8 <prvInsertTimerInActiveList>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d069      	beq.n	80062da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800620c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d05e      	beq.n	80062da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	441a      	add	r2, r3
 8006224:	2300      	movs	r3, #0
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	2300      	movs	r3, #0
 800622a:	2100      	movs	r1, #0
 800622c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800622e:	f7ff fe05 	bl	8005e3c <xTimerGenericCommand>
 8006232:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d14f      	bne.n	80062da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	61bb      	str	r3, [r7, #24]
}
 800624c:	bf00      	nop
 800624e:	e7fe      	b.n	800624e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006256:	f023 0301 	bic.w	r3, r3, #1
 800625a:	b2da      	uxtb	r2, r3
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006262:	e03a      	b.n	80062da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800626a:	f043 0301 	orr.w	r3, r3, #1
 800626e:	b2da      	uxtb	r2, r3
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10a      	bne.n	800629a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	617b      	str	r3, [r7, #20]
}
 8006296:	bf00      	nop
 8006298:	e7fe      	b.n	8006298 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	18d1      	adds	r1, r2, r3
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062a8:	f7ff ff06 	bl	80060b8 <prvInsertTimerInActiveList>
					break;
 80062ac:	e015      	b.n	80062da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d103      	bne.n	80062c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80062bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062be:	f000 fbdf 	bl	8006a80 <vPortFree>
 80062c2:	e00a      	b.n	80062da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062ca:	f023 0301 	bic.w	r3, r3, #1
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062d6:	e000      	b.n	80062da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80062d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062da:	4b08      	ldr	r3, [pc, #32]	; (80062fc <prvProcessReceivedCommands+0x1c0>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	1d39      	adds	r1, r7, #4
 80062e0:	2200      	movs	r2, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe fbec 	bl	8004ac0 <xQueueReceive>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f47f af2a 	bne.w	8006144 <prvProcessReceivedCommands+0x8>
	}
}
 80062f0:	bf00      	nop
 80062f2:	bf00      	nop
 80062f4:	3730      	adds	r7, #48	; 0x30
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20000df4 	.word	0x20000df4

08006300 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b088      	sub	sp, #32
 8006304:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006306:	e048      	b.n	800639a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006308:	4b2d      	ldr	r3, [pc, #180]	; (80063c0 <prvSwitchTimerLists+0xc0>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006312:	4b2b      	ldr	r3, [pc, #172]	; (80063c0 <prvSwitchTimerLists+0xc0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3304      	adds	r3, #4
 8006320:	4618      	mov	r0, r3
 8006322:	f7fe f87f 	bl	8004424 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006334:	f003 0304 	and.w	r3, r3, #4
 8006338:	2b00      	cmp	r3, #0
 800633a:	d02e      	beq.n	800639a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	4413      	add	r3, r2
 8006344:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	429a      	cmp	r2, r3
 800634c:	d90e      	bls.n	800636c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800635a:	4b19      	ldr	r3, [pc, #100]	; (80063c0 <prvSwitchTimerLists+0xc0>)
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3304      	adds	r3, #4
 8006362:	4619      	mov	r1, r3
 8006364:	4610      	mov	r0, r2
 8006366:	f7fe f824 	bl	80043b2 <vListInsert>
 800636a:	e016      	b.n	800639a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800636c:	2300      	movs	r3, #0
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	2300      	movs	r3, #0
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	2100      	movs	r1, #0
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f7ff fd60 	bl	8005e3c <xTimerGenericCommand>
 800637c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	603b      	str	r3, [r7, #0]
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800639a:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <prvSwitchTimerLists+0xc0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1b1      	bne.n	8006308 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063a4:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <prvSwitchTimerLists+0xc0>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063aa:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <prvSwitchTimerLists+0xc4>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a04      	ldr	r2, [pc, #16]	; (80063c0 <prvSwitchTimerLists+0xc0>)
 80063b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063b2:	4a04      	ldr	r2, [pc, #16]	; (80063c4 <prvSwitchTimerLists+0xc4>)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	6013      	str	r3, [r2, #0]
}
 80063b8:	bf00      	nop
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20000dec 	.word	0x20000dec
 80063c4:	20000df0 	.word	0x20000df0

080063c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063ce:	f000 f969 	bl	80066a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063d2:	4b15      	ldr	r3, [pc, #84]	; (8006428 <prvCheckForValidListAndQueue+0x60>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d120      	bne.n	800641c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063da:	4814      	ldr	r0, [pc, #80]	; (800642c <prvCheckForValidListAndQueue+0x64>)
 80063dc:	f7fd ff98 	bl	8004310 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063e0:	4813      	ldr	r0, [pc, #76]	; (8006430 <prvCheckForValidListAndQueue+0x68>)
 80063e2:	f7fd ff95 	bl	8004310 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80063e6:	4b13      	ldr	r3, [pc, #76]	; (8006434 <prvCheckForValidListAndQueue+0x6c>)
 80063e8:	4a10      	ldr	r2, [pc, #64]	; (800642c <prvCheckForValidListAndQueue+0x64>)
 80063ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80063ec:	4b12      	ldr	r3, [pc, #72]	; (8006438 <prvCheckForValidListAndQueue+0x70>)
 80063ee:	4a10      	ldr	r2, [pc, #64]	; (8006430 <prvCheckForValidListAndQueue+0x68>)
 80063f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80063f2:	2300      	movs	r3, #0
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	4b11      	ldr	r3, [pc, #68]	; (800643c <prvCheckForValidListAndQueue+0x74>)
 80063f8:	4a11      	ldr	r2, [pc, #68]	; (8006440 <prvCheckForValidListAndQueue+0x78>)
 80063fa:	2110      	movs	r1, #16
 80063fc:	200a      	movs	r0, #10
 80063fe:	f7fe f8a3 	bl	8004548 <xQueueGenericCreateStatic>
 8006402:	4603      	mov	r3, r0
 8006404:	4a08      	ldr	r2, [pc, #32]	; (8006428 <prvCheckForValidListAndQueue+0x60>)
 8006406:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006408:	4b07      	ldr	r3, [pc, #28]	; (8006428 <prvCheckForValidListAndQueue+0x60>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d005      	beq.n	800641c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <prvCheckForValidListAndQueue+0x60>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	490b      	ldr	r1, [pc, #44]	; (8006444 <prvCheckForValidListAndQueue+0x7c>)
 8006416:	4618      	mov	r0, r3
 8006418:	f7fe fd42 	bl	8004ea0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800641c:	f000 f972 	bl	8006704 <vPortExitCritical>
}
 8006420:	bf00      	nop
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000df4 	.word	0x20000df4
 800642c:	20000dc4 	.word	0x20000dc4
 8006430:	20000dd8 	.word	0x20000dd8
 8006434:	20000dec 	.word	0x20000dec
 8006438:	20000df0 	.word	0x20000df0
 800643c:	20000ea0 	.word	0x20000ea0
 8006440:	20000e00 	.word	0x20000e00
 8006444:	0800801c 	.word	0x0800801c

08006448 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3b04      	subs	r3, #4
 8006458:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3b04      	subs	r3, #4
 8006466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f023 0201 	bic.w	r2, r3, #1
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3b04      	subs	r3, #4
 8006476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006478:	4a0c      	ldr	r2, [pc, #48]	; (80064ac <pxPortInitialiseStack+0x64>)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3b14      	subs	r3, #20
 8006482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3b04      	subs	r3, #4
 800648e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f06f 0202 	mvn.w	r2, #2
 8006496:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3b20      	subs	r3, #32
 800649c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800649e:	68fb      	ldr	r3, [r7, #12]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	080064b1 	.word	0x080064b1

080064b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064ba:	4b12      	ldr	r3, [pc, #72]	; (8006504 <prvTaskExitError+0x54>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c2:	d00a      	beq.n	80064da <prvTaskExitError+0x2a>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	60fb      	str	r3, [r7, #12]
}
 80064d6:	bf00      	nop
 80064d8:	e7fe      	b.n	80064d8 <prvTaskExitError+0x28>
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	60bb      	str	r3, [r7, #8]
}
 80064ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064ee:	bf00      	nop
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0fc      	beq.n	80064f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064f6:	bf00      	nop
 80064f8:	bf00      	nop
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	2000002c 	.word	0x2000002c
	...

08006510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006510:	4b07      	ldr	r3, [pc, #28]	; (8006530 <pxCurrentTCBConst2>)
 8006512:	6819      	ldr	r1, [r3, #0]
 8006514:	6808      	ldr	r0, [r1, #0]
 8006516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651a:	f380 8809 	msr	PSP, r0
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f04f 0000 	mov.w	r0, #0
 8006526:	f380 8811 	msr	BASEPRI, r0
 800652a:	4770      	bx	lr
 800652c:	f3af 8000 	nop.w

08006530 <pxCurrentTCBConst2>:
 8006530:	200008c4 	.word	0x200008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop

08006538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006538:	4808      	ldr	r0, [pc, #32]	; (800655c <prvPortStartFirstTask+0x24>)
 800653a:	6800      	ldr	r0, [r0, #0]
 800653c:	6800      	ldr	r0, [r0, #0]
 800653e:	f380 8808 	msr	MSP, r0
 8006542:	f04f 0000 	mov.w	r0, #0
 8006546:	f380 8814 	msr	CONTROL, r0
 800654a:	b662      	cpsie	i
 800654c:	b661      	cpsie	f
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	df00      	svc	0
 8006558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800655a:	bf00      	nop
 800655c:	e000ed08 	.word	0xe000ed08

08006560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006566:	4b46      	ldr	r3, [pc, #280]	; (8006680 <xPortStartScheduler+0x120>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a46      	ldr	r2, [pc, #280]	; (8006684 <xPortStartScheduler+0x124>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d10a      	bne.n	8006586 <xPortStartScheduler+0x26>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	613b      	str	r3, [r7, #16]
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006586:	4b3e      	ldr	r3, [pc, #248]	; (8006680 <xPortStartScheduler+0x120>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a3f      	ldr	r2, [pc, #252]	; (8006688 <xPortStartScheduler+0x128>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d10a      	bne.n	80065a6 <xPortStartScheduler+0x46>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	60fb      	str	r3, [r7, #12]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065a6:	4b39      	ldr	r3, [pc, #228]	; (800668c <xPortStartScheduler+0x12c>)
 80065a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	22ff      	movs	r2, #255	; 0xff
 80065b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065c0:	78fb      	ldrb	r3, [r7, #3]
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	4b31      	ldr	r3, [pc, #196]	; (8006690 <xPortStartScheduler+0x130>)
 80065cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065ce:	4b31      	ldr	r3, [pc, #196]	; (8006694 <xPortStartScheduler+0x134>)
 80065d0:	2207      	movs	r2, #7
 80065d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065d4:	e009      	b.n	80065ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80065d6:	4b2f      	ldr	r3, [pc, #188]	; (8006694 <xPortStartScheduler+0x134>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3b01      	subs	r3, #1
 80065dc:	4a2d      	ldr	r2, [pc, #180]	; (8006694 <xPortStartScheduler+0x134>)
 80065de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065ea:	78fb      	ldrb	r3, [r7, #3]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f2:	2b80      	cmp	r3, #128	; 0x80
 80065f4:	d0ef      	beq.n	80065d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065f6:	4b27      	ldr	r3, [pc, #156]	; (8006694 <xPortStartScheduler+0x134>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f1c3 0307 	rsb	r3, r3, #7
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d00a      	beq.n	8006618 <xPortStartScheduler+0xb8>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	60bb      	str	r3, [r7, #8]
}
 8006614:	bf00      	nop
 8006616:	e7fe      	b.n	8006616 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006618:	4b1e      	ldr	r3, [pc, #120]	; (8006694 <xPortStartScheduler+0x134>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	021b      	lsls	r3, r3, #8
 800661e:	4a1d      	ldr	r2, [pc, #116]	; (8006694 <xPortStartScheduler+0x134>)
 8006620:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006622:	4b1c      	ldr	r3, [pc, #112]	; (8006694 <xPortStartScheduler+0x134>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800662a:	4a1a      	ldr	r2, [pc, #104]	; (8006694 <xPortStartScheduler+0x134>)
 800662c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	b2da      	uxtb	r2, r3
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006636:	4b18      	ldr	r3, [pc, #96]	; (8006698 <xPortStartScheduler+0x138>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a17      	ldr	r2, [pc, #92]	; (8006698 <xPortStartScheduler+0x138>)
 800663c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006642:	4b15      	ldr	r3, [pc, #84]	; (8006698 <xPortStartScheduler+0x138>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a14      	ldr	r2, [pc, #80]	; (8006698 <xPortStartScheduler+0x138>)
 8006648:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800664c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800664e:	f000 f8dd 	bl	800680c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006652:	4b12      	ldr	r3, [pc, #72]	; (800669c <xPortStartScheduler+0x13c>)
 8006654:	2200      	movs	r2, #0
 8006656:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006658:	f000 f8fc 	bl	8006854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800665c:	4b10      	ldr	r3, [pc, #64]	; (80066a0 <xPortStartScheduler+0x140>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a0f      	ldr	r2, [pc, #60]	; (80066a0 <xPortStartScheduler+0x140>)
 8006662:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006666:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006668:	f7ff ff66 	bl	8006538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800666c:	f7ff f848 	bl	8005700 <vTaskSwitchContext>
	prvTaskExitError();
 8006670:	f7ff ff1e 	bl	80064b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	e000ed00 	.word	0xe000ed00
 8006684:	410fc271 	.word	0x410fc271
 8006688:	410fc270 	.word	0x410fc270
 800668c:	e000e400 	.word	0xe000e400
 8006690:	20000ef0 	.word	0x20000ef0
 8006694:	20000ef4 	.word	0x20000ef4
 8006698:	e000ed20 	.word	0xe000ed20
 800669c:	2000002c 	.word	0x2000002c
 80066a0:	e000ef34 	.word	0xe000ef34

080066a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	607b      	str	r3, [r7, #4]
}
 80066bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066be:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <vPortEnterCritical+0x58>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3301      	adds	r3, #1
 80066c4:	4a0d      	ldr	r2, [pc, #52]	; (80066fc <vPortEnterCritical+0x58>)
 80066c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066c8:	4b0c      	ldr	r3, [pc, #48]	; (80066fc <vPortEnterCritical+0x58>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d10f      	bne.n	80066f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066d0:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <vPortEnterCritical+0x5c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	603b      	str	r3, [r7, #0]
}
 80066ec:	bf00      	nop
 80066ee:	e7fe      	b.n	80066ee <vPortEnterCritical+0x4a>
	}
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	2000002c 	.word	0x2000002c
 8006700:	e000ed04 	.word	0xe000ed04

08006704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800670a:	4b12      	ldr	r3, [pc, #72]	; (8006754 <vPortExitCritical+0x50>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <vPortExitCritical+0x24>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	607b      	str	r3, [r7, #4]
}
 8006724:	bf00      	nop
 8006726:	e7fe      	b.n	8006726 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006728:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <vPortExitCritical+0x50>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3b01      	subs	r3, #1
 800672e:	4a09      	ldr	r2, [pc, #36]	; (8006754 <vPortExitCritical+0x50>)
 8006730:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006732:	4b08      	ldr	r3, [pc, #32]	; (8006754 <vPortExitCritical+0x50>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d105      	bne.n	8006746 <vPortExitCritical+0x42>
 800673a:	2300      	movs	r3, #0
 800673c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	f383 8811 	msr	BASEPRI, r3
}
 8006744:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	2000002c 	.word	0x2000002c
	...

08006760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006760:	f3ef 8009 	mrs	r0, PSP
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	4b15      	ldr	r3, [pc, #84]	; (80067c0 <pxCurrentTCBConst>)
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	f01e 0f10 	tst.w	lr, #16
 8006770:	bf08      	it	eq
 8006772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677a:	6010      	str	r0, [r2, #0]
 800677c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006784:	f380 8811 	msr	BASEPRI, r0
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f7fe ffb6 	bl	8005700 <vTaskSwitchContext>
 8006794:	f04f 0000 	mov.w	r0, #0
 8006798:	f380 8811 	msr	BASEPRI, r0
 800679c:	bc09      	pop	{r0, r3}
 800679e:	6819      	ldr	r1, [r3, #0]
 80067a0:	6808      	ldr	r0, [r1, #0]
 80067a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a6:	f01e 0f10 	tst.w	lr, #16
 80067aa:	bf08      	it	eq
 80067ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067b0:	f380 8809 	msr	PSP, r0
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	f3af 8000 	nop.w

080067c0 <pxCurrentTCBConst>:
 80067c0:	200008c4 	.word	0x200008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop

080067c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	607b      	str	r3, [r7, #4]
}
 80067e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067e2:	f7fe fed3 	bl	800558c <xTaskIncrementTick>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067ec:	4b06      	ldr	r3, [pc, #24]	; (8006808 <xPortSysTickHandler+0x40>)
 80067ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	2300      	movs	r3, #0
 80067f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	f383 8811 	msr	BASEPRI, r3
}
 80067fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006800:	bf00      	nop
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	e000ed04 	.word	0xe000ed04

0800680c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800680c:	b480      	push	{r7}
 800680e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006810:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <vPortSetupTimerInterrupt+0x34>)
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006816:	4b0b      	ldr	r3, [pc, #44]	; (8006844 <vPortSetupTimerInterrupt+0x38>)
 8006818:	2200      	movs	r2, #0
 800681a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800681c:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <vPortSetupTimerInterrupt+0x3c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a0a      	ldr	r2, [pc, #40]	; (800684c <vPortSetupTimerInterrupt+0x40>)
 8006822:	fba2 2303 	umull	r2, r3, r2, r3
 8006826:	099b      	lsrs	r3, r3, #6
 8006828:	4a09      	ldr	r2, [pc, #36]	; (8006850 <vPortSetupTimerInterrupt+0x44>)
 800682a:	3b01      	subs	r3, #1
 800682c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800682e:	4b04      	ldr	r3, [pc, #16]	; (8006840 <vPortSetupTimerInterrupt+0x34>)
 8006830:	2207      	movs	r2, #7
 8006832:	601a      	str	r2, [r3, #0]
}
 8006834:	bf00      	nop
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	e000e010 	.word	0xe000e010
 8006844:	e000e018 	.word	0xe000e018
 8006848:	20000020 	.word	0x20000020
 800684c:	10624dd3 	.word	0x10624dd3
 8006850:	e000e014 	.word	0xe000e014

08006854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006854:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006864 <vPortEnableVFP+0x10>
 8006858:	6801      	ldr	r1, [r0, #0]
 800685a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800685e:	6001      	str	r1, [r0, #0]
 8006860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006862:	bf00      	nop
 8006864:	e000ed88 	.word	0xe000ed88

08006868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800686e:	f3ef 8305 	mrs	r3, IPSR
 8006872:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b0f      	cmp	r3, #15
 8006878:	d914      	bls.n	80068a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800687a:	4a17      	ldr	r2, [pc, #92]	; (80068d8 <vPortValidateInterruptPriority+0x70>)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4413      	add	r3, r2
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006884:	4b15      	ldr	r3, [pc, #84]	; (80068dc <vPortValidateInterruptPriority+0x74>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	7afa      	ldrb	r2, [r7, #11]
 800688a:	429a      	cmp	r2, r3
 800688c:	d20a      	bcs.n	80068a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	607b      	str	r3, [r7, #4]
}
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068a4:	4b0e      	ldr	r3, [pc, #56]	; (80068e0 <vPortValidateInterruptPriority+0x78>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068ac:	4b0d      	ldr	r3, [pc, #52]	; (80068e4 <vPortValidateInterruptPriority+0x7c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d90a      	bls.n	80068ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	603b      	str	r3, [r7, #0]
}
 80068c6:	bf00      	nop
 80068c8:	e7fe      	b.n	80068c8 <vPortValidateInterruptPriority+0x60>
	}
 80068ca:	bf00      	nop
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	e000e3f0 	.word	0xe000e3f0
 80068dc:	20000ef0 	.word	0x20000ef0
 80068e0:	e000ed0c 	.word	0xe000ed0c
 80068e4:	20000ef4 	.word	0x20000ef4

080068e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08a      	sub	sp, #40	; 0x28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068f0:	2300      	movs	r3, #0
 80068f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80068f4:	f7fe fd8e 	bl	8005414 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80068f8:	4b5b      	ldr	r3, [pc, #364]	; (8006a68 <pvPortMalloc+0x180>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006900:	f000 f920 	bl	8006b44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006904:	4b59      	ldr	r3, [pc, #356]	; (8006a6c <pvPortMalloc+0x184>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4013      	ands	r3, r2
 800690c:	2b00      	cmp	r3, #0
 800690e:	f040 8093 	bne.w	8006a38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01d      	beq.n	8006954 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006918:	2208      	movs	r2, #8
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4413      	add	r3, r2
 800691e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f003 0307 	and.w	r3, r3, #7
 8006926:	2b00      	cmp	r3, #0
 8006928:	d014      	beq.n	8006954 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f023 0307 	bic.w	r3, r3, #7
 8006930:	3308      	adds	r3, #8
 8006932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <pvPortMalloc+0x6c>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	617b      	str	r3, [r7, #20]
}
 8006950:	bf00      	nop
 8006952:	e7fe      	b.n	8006952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d06e      	beq.n	8006a38 <pvPortMalloc+0x150>
 800695a:	4b45      	ldr	r3, [pc, #276]	; (8006a70 <pvPortMalloc+0x188>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	429a      	cmp	r2, r3
 8006962:	d869      	bhi.n	8006a38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006964:	4b43      	ldr	r3, [pc, #268]	; (8006a74 <pvPortMalloc+0x18c>)
 8006966:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006968:	4b42      	ldr	r3, [pc, #264]	; (8006a74 <pvPortMalloc+0x18c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800696e:	e004      	b.n	800697a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	429a      	cmp	r2, r3
 8006982:	d903      	bls.n	800698c <pvPortMalloc+0xa4>
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1f1      	bne.n	8006970 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800698c:	4b36      	ldr	r3, [pc, #216]	; (8006a68 <pvPortMalloc+0x180>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006992:	429a      	cmp	r2, r3
 8006994:	d050      	beq.n	8006a38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2208      	movs	r2, #8
 800699c:	4413      	add	r3, r2
 800699e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	1ad2      	subs	r2, r2, r3
 80069b0:	2308      	movs	r3, #8
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d91f      	bls.n	80069f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4413      	add	r3, r2
 80069be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <pvPortMalloc+0xf8>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	613b      	str	r3, [r7, #16]
}
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	1ad2      	subs	r2, r2, r3
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069f2:	69b8      	ldr	r0, [r7, #24]
 80069f4:	f000 f908 	bl	8006c08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069f8:	4b1d      	ldr	r3, [pc, #116]	; (8006a70 <pvPortMalloc+0x188>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	4a1b      	ldr	r2, [pc, #108]	; (8006a70 <pvPortMalloc+0x188>)
 8006a04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a06:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <pvPortMalloc+0x188>)
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	4b1b      	ldr	r3, [pc, #108]	; (8006a78 <pvPortMalloc+0x190>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d203      	bcs.n	8006a1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a12:	4b17      	ldr	r3, [pc, #92]	; (8006a70 <pvPortMalloc+0x188>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a18      	ldr	r2, [pc, #96]	; (8006a78 <pvPortMalloc+0x190>)
 8006a18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	4b13      	ldr	r3, [pc, #76]	; (8006a6c <pvPortMalloc+0x184>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a2e:	4b13      	ldr	r3, [pc, #76]	; (8006a7c <pvPortMalloc+0x194>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3301      	adds	r3, #1
 8006a34:	4a11      	ldr	r2, [pc, #68]	; (8006a7c <pvPortMalloc+0x194>)
 8006a36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a38:	f7fe fcfa 	bl	8005430 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	f003 0307 	and.w	r3, r3, #7
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <pvPortMalloc+0x174>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	60fb      	str	r3, [r7, #12]
}
 8006a58:	bf00      	nop
 8006a5a:	e7fe      	b.n	8006a5a <pvPortMalloc+0x172>
	return pvReturn;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3728      	adds	r7, #40	; 0x28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	20001ab8 	.word	0x20001ab8
 8006a6c:	20001acc 	.word	0x20001acc
 8006a70:	20001abc 	.word	0x20001abc
 8006a74:	20001ab0 	.word	0x20001ab0
 8006a78:	20001ac0 	.word	0x20001ac0
 8006a7c:	20001ac4 	.word	0x20001ac4

08006a80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d04d      	beq.n	8006b2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a92:	2308      	movs	r3, #8
 8006a94:	425b      	negs	r3, r3
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	4413      	add	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	4b24      	ldr	r3, [pc, #144]	; (8006b38 <vPortFree+0xb8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <vPortFree+0x44>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	60fb      	str	r3, [r7, #12]
}
 8006ac0:	bf00      	nop
 8006ac2:	e7fe      	b.n	8006ac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00a      	beq.n	8006ae2 <vPortFree+0x62>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	60bb      	str	r3, [r7, #8]
}
 8006ade:	bf00      	nop
 8006ae0:	e7fe      	b.n	8006ae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	4b14      	ldr	r3, [pc, #80]	; (8006b38 <vPortFree+0xb8>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4013      	ands	r3, r2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d01e      	beq.n	8006b2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d11a      	bne.n	8006b2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	4b0e      	ldr	r3, [pc, #56]	; (8006b38 <vPortFree+0xb8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	43db      	mvns	r3, r3
 8006b02:	401a      	ands	r2, r3
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b08:	f7fe fc84 	bl	8005414 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	4b0a      	ldr	r3, [pc, #40]	; (8006b3c <vPortFree+0xbc>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4413      	add	r3, r2
 8006b16:	4a09      	ldr	r2, [pc, #36]	; (8006b3c <vPortFree+0xbc>)
 8006b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b1a:	6938      	ldr	r0, [r7, #16]
 8006b1c:	f000 f874 	bl	8006c08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b20:	4b07      	ldr	r3, [pc, #28]	; (8006b40 <vPortFree+0xc0>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3301      	adds	r3, #1
 8006b26:	4a06      	ldr	r2, [pc, #24]	; (8006b40 <vPortFree+0xc0>)
 8006b28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b2a:	f7fe fc81 	bl	8005430 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b2e:	bf00      	nop
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20001acc 	.word	0x20001acc
 8006b3c:	20001abc 	.word	0x20001abc
 8006b40:	20001ac8 	.word	0x20001ac8

08006b44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b4a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006b4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b50:	4b27      	ldr	r3, [pc, #156]	; (8006bf0 <prvHeapInit+0xac>)
 8006b52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f003 0307 	and.w	r3, r3, #7
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00c      	beq.n	8006b78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3307      	adds	r3, #7
 8006b62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0307 	bic.w	r3, r3, #7
 8006b6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	4a1f      	ldr	r2, [pc, #124]	; (8006bf0 <prvHeapInit+0xac>)
 8006b74:	4413      	add	r3, r2
 8006b76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b7c:	4a1d      	ldr	r2, [pc, #116]	; (8006bf4 <prvHeapInit+0xb0>)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b82:	4b1c      	ldr	r3, [pc, #112]	; (8006bf4 <prvHeapInit+0xb0>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b90:	2208      	movs	r2, #8
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	1a9b      	subs	r3, r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 0307 	bic.w	r3, r3, #7
 8006b9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4a15      	ldr	r2, [pc, #84]	; (8006bf8 <prvHeapInit+0xb4>)
 8006ba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ba6:	4b14      	ldr	r3, [pc, #80]	; (8006bf8 <prvHeapInit+0xb4>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2200      	movs	r2, #0
 8006bac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006bae:	4b12      	ldr	r3, [pc, #72]	; (8006bf8 <prvHeapInit+0xb4>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	1ad2      	subs	r2, r2, r3
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <prvHeapInit+0xb4>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	4a0a      	ldr	r2, [pc, #40]	; (8006bfc <prvHeapInit+0xb8>)
 8006bd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	4a09      	ldr	r2, [pc, #36]	; (8006c00 <prvHeapInit+0xbc>)
 8006bda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bdc:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <prvHeapInit+0xc0>)
 8006bde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006be2:	601a      	str	r2, [r3, #0]
}
 8006be4:	bf00      	nop
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	20000ef8 	.word	0x20000ef8
 8006bf4:	20001ab0 	.word	0x20001ab0
 8006bf8:	20001ab8 	.word	0x20001ab8
 8006bfc:	20001ac0 	.word	0x20001ac0
 8006c00:	20001abc 	.word	0x20001abc
 8006c04:	20001acc 	.word	0x20001acc

08006c08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c10:	4b28      	ldr	r3, [pc, #160]	; (8006cb4 <prvInsertBlockIntoFreeList+0xac>)
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	e002      	b.n	8006c1c <prvInsertBlockIntoFreeList+0x14>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d8f7      	bhi.n	8006c16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	4413      	add	r3, r2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d108      	bne.n	8006c4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	441a      	add	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	441a      	add	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d118      	bne.n	8006c90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	4b15      	ldr	r3, [pc, #84]	; (8006cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d00d      	beq.n	8006c86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	441a      	add	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	e008      	b.n	8006c98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c86:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	e003      	b.n	8006c98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d002      	beq.n	8006ca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ca6:	bf00      	nop
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	20001ab0 	.word	0x20001ab0
 8006cb8:	20001ab8 	.word	0x20001ab8

08006cbc <calloc>:
 8006cbc:	4b02      	ldr	r3, [pc, #8]	; (8006cc8 <calloc+0xc>)
 8006cbe:	460a      	mov	r2, r1
 8006cc0:	4601      	mov	r1, r0
 8006cc2:	6818      	ldr	r0, [r3, #0]
 8006cc4:	f000 b93b 	b.w	8006f3e <_calloc_r>
 8006cc8:	20000030 	.word	0x20000030

08006ccc <__errno>:
 8006ccc:	4b01      	ldr	r3, [pc, #4]	; (8006cd4 <__errno+0x8>)
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	20000030 	.word	0x20000030

08006cd8 <std>:
 8006cd8:	2300      	movs	r3, #0
 8006cda:	b510      	push	{r4, lr}
 8006cdc:	4604      	mov	r4, r0
 8006cde:	e9c0 3300 	strd	r3, r3, [r0]
 8006ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ce6:	6083      	str	r3, [r0, #8]
 8006ce8:	8181      	strh	r1, [r0, #12]
 8006cea:	6643      	str	r3, [r0, #100]	; 0x64
 8006cec:	81c2      	strh	r2, [r0, #14]
 8006cee:	6183      	str	r3, [r0, #24]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	2208      	movs	r2, #8
 8006cf4:	305c      	adds	r0, #92	; 0x5c
 8006cf6:	f000 f91a 	bl	8006f2e <memset>
 8006cfa:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <std+0x38>)
 8006cfc:	6263      	str	r3, [r4, #36]	; 0x24
 8006cfe:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <std+0x3c>)
 8006d00:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d02:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <std+0x40>)
 8006d04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d06:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <std+0x44>)
 8006d08:	6224      	str	r4, [r4, #32]
 8006d0a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d0c:	bd10      	pop	{r4, pc}
 8006d0e:	bf00      	nop
 8006d10:	08007221 	.word	0x08007221
 8006d14:	08007243 	.word	0x08007243
 8006d18:	0800727b 	.word	0x0800727b
 8006d1c:	0800729f 	.word	0x0800729f

08006d20 <_cleanup_r>:
 8006d20:	4901      	ldr	r1, [pc, #4]	; (8006d28 <_cleanup_r+0x8>)
 8006d22:	f000 b8af 	b.w	8006e84 <_fwalk_reent>
 8006d26:	bf00      	nop
 8006d28:	08007579 	.word	0x08007579

08006d2c <__sfmoreglue>:
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	1e4a      	subs	r2, r1, #1
 8006d30:	2568      	movs	r5, #104	; 0x68
 8006d32:	4355      	muls	r5, r2
 8006d34:	460e      	mov	r6, r1
 8006d36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d3a:	f000 f90f 	bl	8006f5c <_malloc_r>
 8006d3e:	4604      	mov	r4, r0
 8006d40:	b140      	cbz	r0, 8006d54 <__sfmoreglue+0x28>
 8006d42:	2100      	movs	r1, #0
 8006d44:	e9c0 1600 	strd	r1, r6, [r0]
 8006d48:	300c      	adds	r0, #12
 8006d4a:	60a0      	str	r0, [r4, #8]
 8006d4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d50:	f000 f8ed 	bl	8006f2e <memset>
 8006d54:	4620      	mov	r0, r4
 8006d56:	bd70      	pop	{r4, r5, r6, pc}

08006d58 <__sfp_lock_acquire>:
 8006d58:	4801      	ldr	r0, [pc, #4]	; (8006d60 <__sfp_lock_acquire+0x8>)
 8006d5a:	f000 b8d8 	b.w	8006f0e <__retarget_lock_acquire_recursive>
 8006d5e:	bf00      	nop
 8006d60:	20005d94 	.word	0x20005d94

08006d64 <__sfp_lock_release>:
 8006d64:	4801      	ldr	r0, [pc, #4]	; (8006d6c <__sfp_lock_release+0x8>)
 8006d66:	f000 b8d3 	b.w	8006f10 <__retarget_lock_release_recursive>
 8006d6a:	bf00      	nop
 8006d6c:	20005d94 	.word	0x20005d94

08006d70 <__sinit_lock_acquire>:
 8006d70:	4801      	ldr	r0, [pc, #4]	; (8006d78 <__sinit_lock_acquire+0x8>)
 8006d72:	f000 b8cc 	b.w	8006f0e <__retarget_lock_acquire_recursive>
 8006d76:	bf00      	nop
 8006d78:	20005d8f 	.word	0x20005d8f

08006d7c <__sinit_lock_release>:
 8006d7c:	4801      	ldr	r0, [pc, #4]	; (8006d84 <__sinit_lock_release+0x8>)
 8006d7e:	f000 b8c7 	b.w	8006f10 <__retarget_lock_release_recursive>
 8006d82:	bf00      	nop
 8006d84:	20005d8f 	.word	0x20005d8f

08006d88 <__sinit>:
 8006d88:	b510      	push	{r4, lr}
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	f7ff fff0 	bl	8006d70 <__sinit_lock_acquire>
 8006d90:	69a3      	ldr	r3, [r4, #24]
 8006d92:	b11b      	cbz	r3, 8006d9c <__sinit+0x14>
 8006d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d98:	f7ff bff0 	b.w	8006d7c <__sinit_lock_release>
 8006d9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006da0:	6523      	str	r3, [r4, #80]	; 0x50
 8006da2:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <__sinit+0x68>)
 8006da4:	4a13      	ldr	r2, [pc, #76]	; (8006df4 <__sinit+0x6c>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006daa:	42a3      	cmp	r3, r4
 8006dac:	bf04      	itt	eq
 8006dae:	2301      	moveq	r3, #1
 8006db0:	61a3      	streq	r3, [r4, #24]
 8006db2:	4620      	mov	r0, r4
 8006db4:	f000 f820 	bl	8006df8 <__sfp>
 8006db8:	6060      	str	r0, [r4, #4]
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f000 f81c 	bl	8006df8 <__sfp>
 8006dc0:	60a0      	str	r0, [r4, #8]
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 f818 	bl	8006df8 <__sfp>
 8006dc8:	2200      	movs	r2, #0
 8006dca:	60e0      	str	r0, [r4, #12]
 8006dcc:	2104      	movs	r1, #4
 8006dce:	6860      	ldr	r0, [r4, #4]
 8006dd0:	f7ff ff82 	bl	8006cd8 <std>
 8006dd4:	68a0      	ldr	r0, [r4, #8]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	2109      	movs	r1, #9
 8006dda:	f7ff ff7d 	bl	8006cd8 <std>
 8006dde:	68e0      	ldr	r0, [r4, #12]
 8006de0:	2202      	movs	r2, #2
 8006de2:	2112      	movs	r1, #18
 8006de4:	f7ff ff78 	bl	8006cd8 <std>
 8006de8:	2301      	movs	r3, #1
 8006dea:	61a3      	str	r3, [r4, #24]
 8006dec:	e7d2      	b.n	8006d94 <__sinit+0xc>
 8006dee:	bf00      	nop
 8006df0:	08008124 	.word	0x08008124
 8006df4:	08006d21 	.word	0x08006d21

08006df8 <__sfp>:
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	4607      	mov	r7, r0
 8006dfc:	f7ff ffac 	bl	8006d58 <__sfp_lock_acquire>
 8006e00:	4b1e      	ldr	r3, [pc, #120]	; (8006e7c <__sfp+0x84>)
 8006e02:	681e      	ldr	r6, [r3, #0]
 8006e04:	69b3      	ldr	r3, [r6, #24]
 8006e06:	b913      	cbnz	r3, 8006e0e <__sfp+0x16>
 8006e08:	4630      	mov	r0, r6
 8006e0a:	f7ff ffbd 	bl	8006d88 <__sinit>
 8006e0e:	3648      	adds	r6, #72	; 0x48
 8006e10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	d503      	bpl.n	8006e20 <__sfp+0x28>
 8006e18:	6833      	ldr	r3, [r6, #0]
 8006e1a:	b30b      	cbz	r3, 8006e60 <__sfp+0x68>
 8006e1c:	6836      	ldr	r6, [r6, #0]
 8006e1e:	e7f7      	b.n	8006e10 <__sfp+0x18>
 8006e20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e24:	b9d5      	cbnz	r5, 8006e5c <__sfp+0x64>
 8006e26:	4b16      	ldr	r3, [pc, #88]	; (8006e80 <__sfp+0x88>)
 8006e28:	60e3      	str	r3, [r4, #12]
 8006e2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e2e:	6665      	str	r5, [r4, #100]	; 0x64
 8006e30:	f000 f86c 	bl	8006f0c <__retarget_lock_init_recursive>
 8006e34:	f7ff ff96 	bl	8006d64 <__sfp_lock_release>
 8006e38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e40:	6025      	str	r5, [r4, #0]
 8006e42:	61a5      	str	r5, [r4, #24]
 8006e44:	2208      	movs	r2, #8
 8006e46:	4629      	mov	r1, r5
 8006e48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e4c:	f000 f86f 	bl	8006f2e <memset>
 8006e50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e58:	4620      	mov	r0, r4
 8006e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e5c:	3468      	adds	r4, #104	; 0x68
 8006e5e:	e7d9      	b.n	8006e14 <__sfp+0x1c>
 8006e60:	2104      	movs	r1, #4
 8006e62:	4638      	mov	r0, r7
 8006e64:	f7ff ff62 	bl	8006d2c <__sfmoreglue>
 8006e68:	4604      	mov	r4, r0
 8006e6a:	6030      	str	r0, [r6, #0]
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d1d5      	bne.n	8006e1c <__sfp+0x24>
 8006e70:	f7ff ff78 	bl	8006d64 <__sfp_lock_release>
 8006e74:	230c      	movs	r3, #12
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	e7ee      	b.n	8006e58 <__sfp+0x60>
 8006e7a:	bf00      	nop
 8006e7c:	08008124 	.word	0x08008124
 8006e80:	ffff0001 	.word	0xffff0001

08006e84 <_fwalk_reent>:
 8006e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e88:	4606      	mov	r6, r0
 8006e8a:	4688      	mov	r8, r1
 8006e8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e90:	2700      	movs	r7, #0
 8006e92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e96:	f1b9 0901 	subs.w	r9, r9, #1
 8006e9a:	d505      	bpl.n	8006ea8 <_fwalk_reent+0x24>
 8006e9c:	6824      	ldr	r4, [r4, #0]
 8006e9e:	2c00      	cmp	r4, #0
 8006ea0:	d1f7      	bne.n	8006e92 <_fwalk_reent+0xe>
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ea8:	89ab      	ldrh	r3, [r5, #12]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d907      	bls.n	8006ebe <_fwalk_reent+0x3a>
 8006eae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	d003      	beq.n	8006ebe <_fwalk_reent+0x3a>
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	4630      	mov	r0, r6
 8006eba:	47c0      	blx	r8
 8006ebc:	4307      	orrs	r7, r0
 8006ebe:	3568      	adds	r5, #104	; 0x68
 8006ec0:	e7e9      	b.n	8006e96 <_fwalk_reent+0x12>
	...

08006ec4 <__libc_init_array>:
 8006ec4:	b570      	push	{r4, r5, r6, lr}
 8006ec6:	4d0d      	ldr	r5, [pc, #52]	; (8006efc <__libc_init_array+0x38>)
 8006ec8:	4c0d      	ldr	r4, [pc, #52]	; (8006f00 <__libc_init_array+0x3c>)
 8006eca:	1b64      	subs	r4, r4, r5
 8006ecc:	10a4      	asrs	r4, r4, #2
 8006ece:	2600      	movs	r6, #0
 8006ed0:	42a6      	cmp	r6, r4
 8006ed2:	d109      	bne.n	8006ee8 <__libc_init_array+0x24>
 8006ed4:	4d0b      	ldr	r5, [pc, #44]	; (8006f04 <__libc_init_array+0x40>)
 8006ed6:	4c0c      	ldr	r4, [pc, #48]	; (8006f08 <__libc_init_array+0x44>)
 8006ed8:	f000 ff7e 	bl	8007dd8 <_init>
 8006edc:	1b64      	subs	r4, r4, r5
 8006ede:	10a4      	asrs	r4, r4, #2
 8006ee0:	2600      	movs	r6, #0
 8006ee2:	42a6      	cmp	r6, r4
 8006ee4:	d105      	bne.n	8006ef2 <__libc_init_array+0x2e>
 8006ee6:	bd70      	pop	{r4, r5, r6, pc}
 8006ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eec:	4798      	blx	r3
 8006eee:	3601      	adds	r6, #1
 8006ef0:	e7ee      	b.n	8006ed0 <__libc_init_array+0xc>
 8006ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef6:	4798      	blx	r3
 8006ef8:	3601      	adds	r6, #1
 8006efa:	e7f2      	b.n	8006ee2 <__libc_init_array+0x1e>
 8006efc:	0800815c 	.word	0x0800815c
 8006f00:	0800815c 	.word	0x0800815c
 8006f04:	0800815c 	.word	0x0800815c
 8006f08:	08008160 	.word	0x08008160

08006f0c <__retarget_lock_init_recursive>:
 8006f0c:	4770      	bx	lr

08006f0e <__retarget_lock_acquire_recursive>:
 8006f0e:	4770      	bx	lr

08006f10 <__retarget_lock_release_recursive>:
 8006f10:	4770      	bx	lr

08006f12 <memcpy>:
 8006f12:	440a      	add	r2, r1
 8006f14:	4291      	cmp	r1, r2
 8006f16:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f1a:	d100      	bne.n	8006f1e <memcpy+0xc>
 8006f1c:	4770      	bx	lr
 8006f1e:	b510      	push	{r4, lr}
 8006f20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f28:	4291      	cmp	r1, r2
 8006f2a:	d1f9      	bne.n	8006f20 <memcpy+0xe>
 8006f2c:	bd10      	pop	{r4, pc}

08006f2e <memset>:
 8006f2e:	4402      	add	r2, r0
 8006f30:	4603      	mov	r3, r0
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d100      	bne.n	8006f38 <memset+0xa>
 8006f36:	4770      	bx	lr
 8006f38:	f803 1b01 	strb.w	r1, [r3], #1
 8006f3c:	e7f9      	b.n	8006f32 <memset+0x4>

08006f3e <_calloc_r>:
 8006f3e:	b513      	push	{r0, r1, r4, lr}
 8006f40:	434a      	muls	r2, r1
 8006f42:	4611      	mov	r1, r2
 8006f44:	9201      	str	r2, [sp, #4]
 8006f46:	f000 f809 	bl	8006f5c <_malloc_r>
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	b118      	cbz	r0, 8006f56 <_calloc_r+0x18>
 8006f4e:	9a01      	ldr	r2, [sp, #4]
 8006f50:	2100      	movs	r1, #0
 8006f52:	f7ff ffec 	bl	8006f2e <memset>
 8006f56:	4620      	mov	r0, r4
 8006f58:	b002      	add	sp, #8
 8006f5a:	bd10      	pop	{r4, pc}

08006f5c <_malloc_r>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	1ccd      	adds	r5, r1, #3
 8006f60:	f025 0503 	bic.w	r5, r5, #3
 8006f64:	3508      	adds	r5, #8
 8006f66:	2d0c      	cmp	r5, #12
 8006f68:	bf38      	it	cc
 8006f6a:	250c      	movcc	r5, #12
 8006f6c:	2d00      	cmp	r5, #0
 8006f6e:	4606      	mov	r6, r0
 8006f70:	db01      	blt.n	8006f76 <_malloc_r+0x1a>
 8006f72:	42a9      	cmp	r1, r5
 8006f74:	d903      	bls.n	8006f7e <_malloc_r+0x22>
 8006f76:	230c      	movs	r3, #12
 8006f78:	6033      	str	r3, [r6, #0]
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f7e:	f000 fbad 	bl	80076dc <__malloc_lock>
 8006f82:	4921      	ldr	r1, [pc, #132]	; (8007008 <_malloc_r+0xac>)
 8006f84:	680a      	ldr	r2, [r1, #0]
 8006f86:	4614      	mov	r4, r2
 8006f88:	b99c      	cbnz	r4, 8006fb2 <_malloc_r+0x56>
 8006f8a:	4f20      	ldr	r7, [pc, #128]	; (800700c <_malloc_r+0xb0>)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	b923      	cbnz	r3, 8006f9a <_malloc_r+0x3e>
 8006f90:	4621      	mov	r1, r4
 8006f92:	4630      	mov	r0, r6
 8006f94:	f000 f934 	bl	8007200 <_sbrk_r>
 8006f98:	6038      	str	r0, [r7, #0]
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f000 f92f 	bl	8007200 <_sbrk_r>
 8006fa2:	1c43      	adds	r3, r0, #1
 8006fa4:	d123      	bne.n	8006fee <_malloc_r+0x92>
 8006fa6:	230c      	movs	r3, #12
 8006fa8:	6033      	str	r3, [r6, #0]
 8006faa:	4630      	mov	r0, r6
 8006fac:	f000 fb9c 	bl	80076e8 <__malloc_unlock>
 8006fb0:	e7e3      	b.n	8006f7a <_malloc_r+0x1e>
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	1b5b      	subs	r3, r3, r5
 8006fb6:	d417      	bmi.n	8006fe8 <_malloc_r+0x8c>
 8006fb8:	2b0b      	cmp	r3, #11
 8006fba:	d903      	bls.n	8006fc4 <_malloc_r+0x68>
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	441c      	add	r4, r3
 8006fc0:	6025      	str	r5, [r4, #0]
 8006fc2:	e004      	b.n	8006fce <_malloc_r+0x72>
 8006fc4:	6863      	ldr	r3, [r4, #4]
 8006fc6:	42a2      	cmp	r2, r4
 8006fc8:	bf0c      	ite	eq
 8006fca:	600b      	streq	r3, [r1, #0]
 8006fcc:	6053      	strne	r3, [r2, #4]
 8006fce:	4630      	mov	r0, r6
 8006fd0:	f000 fb8a 	bl	80076e8 <__malloc_unlock>
 8006fd4:	f104 000b 	add.w	r0, r4, #11
 8006fd8:	1d23      	adds	r3, r4, #4
 8006fda:	f020 0007 	bic.w	r0, r0, #7
 8006fde:	1ac2      	subs	r2, r0, r3
 8006fe0:	d0cc      	beq.n	8006f7c <_malloc_r+0x20>
 8006fe2:	1a1b      	subs	r3, r3, r0
 8006fe4:	50a3      	str	r3, [r4, r2]
 8006fe6:	e7c9      	b.n	8006f7c <_malloc_r+0x20>
 8006fe8:	4622      	mov	r2, r4
 8006fea:	6864      	ldr	r4, [r4, #4]
 8006fec:	e7cc      	b.n	8006f88 <_malloc_r+0x2c>
 8006fee:	1cc4      	adds	r4, r0, #3
 8006ff0:	f024 0403 	bic.w	r4, r4, #3
 8006ff4:	42a0      	cmp	r0, r4
 8006ff6:	d0e3      	beq.n	8006fc0 <_malloc_r+0x64>
 8006ff8:	1a21      	subs	r1, r4, r0
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f000 f900 	bl	8007200 <_sbrk_r>
 8007000:	3001      	adds	r0, #1
 8007002:	d1dd      	bne.n	8006fc0 <_malloc_r+0x64>
 8007004:	e7cf      	b.n	8006fa6 <_malloc_r+0x4a>
 8007006:	bf00      	nop
 8007008:	20001ad0 	.word	0x20001ad0
 800700c:	20001ad4 	.word	0x20001ad4

08007010 <iprintf>:
 8007010:	b40f      	push	{r0, r1, r2, r3}
 8007012:	4b0a      	ldr	r3, [pc, #40]	; (800703c <iprintf+0x2c>)
 8007014:	b513      	push	{r0, r1, r4, lr}
 8007016:	681c      	ldr	r4, [r3, #0]
 8007018:	b124      	cbz	r4, 8007024 <iprintf+0x14>
 800701a:	69a3      	ldr	r3, [r4, #24]
 800701c:	b913      	cbnz	r3, 8007024 <iprintf+0x14>
 800701e:	4620      	mov	r0, r4
 8007020:	f7ff feb2 	bl	8006d88 <__sinit>
 8007024:	ab05      	add	r3, sp, #20
 8007026:	9a04      	ldr	r2, [sp, #16]
 8007028:	68a1      	ldr	r1, [r4, #8]
 800702a:	9301      	str	r3, [sp, #4]
 800702c:	4620      	mov	r0, r4
 800702e:	f000 fbdb 	bl	80077e8 <_vfiprintf_r>
 8007032:	b002      	add	sp, #8
 8007034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007038:	b004      	add	sp, #16
 800703a:	4770      	bx	lr
 800703c:	20000030 	.word	0x20000030

08007040 <_puts_r>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	460e      	mov	r6, r1
 8007044:	4605      	mov	r5, r0
 8007046:	b118      	cbz	r0, 8007050 <_puts_r+0x10>
 8007048:	6983      	ldr	r3, [r0, #24]
 800704a:	b90b      	cbnz	r3, 8007050 <_puts_r+0x10>
 800704c:	f7ff fe9c 	bl	8006d88 <__sinit>
 8007050:	69ab      	ldr	r3, [r5, #24]
 8007052:	68ac      	ldr	r4, [r5, #8]
 8007054:	b913      	cbnz	r3, 800705c <_puts_r+0x1c>
 8007056:	4628      	mov	r0, r5
 8007058:	f7ff fe96 	bl	8006d88 <__sinit>
 800705c:	4b2c      	ldr	r3, [pc, #176]	; (8007110 <_puts_r+0xd0>)
 800705e:	429c      	cmp	r4, r3
 8007060:	d120      	bne.n	80070a4 <_puts_r+0x64>
 8007062:	686c      	ldr	r4, [r5, #4]
 8007064:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007066:	07db      	lsls	r3, r3, #31
 8007068:	d405      	bmi.n	8007076 <_puts_r+0x36>
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	0598      	lsls	r0, r3, #22
 800706e:	d402      	bmi.n	8007076 <_puts_r+0x36>
 8007070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007072:	f7ff ff4c 	bl	8006f0e <__retarget_lock_acquire_recursive>
 8007076:	89a3      	ldrh	r3, [r4, #12]
 8007078:	0719      	lsls	r1, r3, #28
 800707a:	d51d      	bpl.n	80070b8 <_puts_r+0x78>
 800707c:	6923      	ldr	r3, [r4, #16]
 800707e:	b1db      	cbz	r3, 80070b8 <_puts_r+0x78>
 8007080:	3e01      	subs	r6, #1
 8007082:	68a3      	ldr	r3, [r4, #8]
 8007084:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007088:	3b01      	subs	r3, #1
 800708a:	60a3      	str	r3, [r4, #8]
 800708c:	bb39      	cbnz	r1, 80070de <_puts_r+0x9e>
 800708e:	2b00      	cmp	r3, #0
 8007090:	da38      	bge.n	8007104 <_puts_r+0xc4>
 8007092:	4622      	mov	r2, r4
 8007094:	210a      	movs	r1, #10
 8007096:	4628      	mov	r0, r5
 8007098:	f000 f906 	bl	80072a8 <__swbuf_r>
 800709c:	3001      	adds	r0, #1
 800709e:	d011      	beq.n	80070c4 <_puts_r+0x84>
 80070a0:	250a      	movs	r5, #10
 80070a2:	e011      	b.n	80070c8 <_puts_r+0x88>
 80070a4:	4b1b      	ldr	r3, [pc, #108]	; (8007114 <_puts_r+0xd4>)
 80070a6:	429c      	cmp	r4, r3
 80070a8:	d101      	bne.n	80070ae <_puts_r+0x6e>
 80070aa:	68ac      	ldr	r4, [r5, #8]
 80070ac:	e7da      	b.n	8007064 <_puts_r+0x24>
 80070ae:	4b1a      	ldr	r3, [pc, #104]	; (8007118 <_puts_r+0xd8>)
 80070b0:	429c      	cmp	r4, r3
 80070b2:	bf08      	it	eq
 80070b4:	68ec      	ldreq	r4, [r5, #12]
 80070b6:	e7d5      	b.n	8007064 <_puts_r+0x24>
 80070b8:	4621      	mov	r1, r4
 80070ba:	4628      	mov	r0, r5
 80070bc:	f000 f958 	bl	8007370 <__swsetup_r>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d0dd      	beq.n	8007080 <_puts_r+0x40>
 80070c4:	f04f 35ff 	mov.w	r5, #4294967295
 80070c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070ca:	07da      	lsls	r2, r3, #31
 80070cc:	d405      	bmi.n	80070da <_puts_r+0x9a>
 80070ce:	89a3      	ldrh	r3, [r4, #12]
 80070d0:	059b      	lsls	r3, r3, #22
 80070d2:	d402      	bmi.n	80070da <_puts_r+0x9a>
 80070d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070d6:	f7ff ff1b 	bl	8006f10 <__retarget_lock_release_recursive>
 80070da:	4628      	mov	r0, r5
 80070dc:	bd70      	pop	{r4, r5, r6, pc}
 80070de:	2b00      	cmp	r3, #0
 80070e0:	da04      	bge.n	80070ec <_puts_r+0xac>
 80070e2:	69a2      	ldr	r2, [r4, #24]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	dc06      	bgt.n	80070f6 <_puts_r+0xb6>
 80070e8:	290a      	cmp	r1, #10
 80070ea:	d004      	beq.n	80070f6 <_puts_r+0xb6>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	6022      	str	r2, [r4, #0]
 80070f2:	7019      	strb	r1, [r3, #0]
 80070f4:	e7c5      	b.n	8007082 <_puts_r+0x42>
 80070f6:	4622      	mov	r2, r4
 80070f8:	4628      	mov	r0, r5
 80070fa:	f000 f8d5 	bl	80072a8 <__swbuf_r>
 80070fe:	3001      	adds	r0, #1
 8007100:	d1bf      	bne.n	8007082 <_puts_r+0x42>
 8007102:	e7df      	b.n	80070c4 <_puts_r+0x84>
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	250a      	movs	r5, #10
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	6022      	str	r2, [r4, #0]
 800710c:	701d      	strb	r5, [r3, #0]
 800710e:	e7db      	b.n	80070c8 <_puts_r+0x88>
 8007110:	080080e4 	.word	0x080080e4
 8007114:	08008104 	.word	0x08008104
 8007118:	080080c4 	.word	0x080080c4

0800711c <puts>:
 800711c:	4b02      	ldr	r3, [pc, #8]	; (8007128 <puts+0xc>)
 800711e:	4601      	mov	r1, r0
 8007120:	6818      	ldr	r0, [r3, #0]
 8007122:	f7ff bf8d 	b.w	8007040 <_puts_r>
 8007126:	bf00      	nop
 8007128:	20000030 	.word	0x20000030

0800712c <cleanup_glue>:
 800712c:	b538      	push	{r3, r4, r5, lr}
 800712e:	460c      	mov	r4, r1
 8007130:	6809      	ldr	r1, [r1, #0]
 8007132:	4605      	mov	r5, r0
 8007134:	b109      	cbz	r1, 800713a <cleanup_glue+0xe>
 8007136:	f7ff fff9 	bl	800712c <cleanup_glue>
 800713a:	4621      	mov	r1, r4
 800713c:	4628      	mov	r0, r5
 800713e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007142:	f000 bad7 	b.w	80076f4 <_free_r>
	...

08007148 <_reclaim_reent>:
 8007148:	4b2c      	ldr	r3, [pc, #176]	; (80071fc <_reclaim_reent+0xb4>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4283      	cmp	r3, r0
 800714e:	b570      	push	{r4, r5, r6, lr}
 8007150:	4604      	mov	r4, r0
 8007152:	d051      	beq.n	80071f8 <_reclaim_reent+0xb0>
 8007154:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007156:	b143      	cbz	r3, 800716a <_reclaim_reent+0x22>
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d14a      	bne.n	80071f4 <_reclaim_reent+0xac>
 800715e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007160:	6819      	ldr	r1, [r3, #0]
 8007162:	b111      	cbz	r1, 800716a <_reclaim_reent+0x22>
 8007164:	4620      	mov	r0, r4
 8007166:	f000 fac5 	bl	80076f4 <_free_r>
 800716a:	6961      	ldr	r1, [r4, #20]
 800716c:	b111      	cbz	r1, 8007174 <_reclaim_reent+0x2c>
 800716e:	4620      	mov	r0, r4
 8007170:	f000 fac0 	bl	80076f4 <_free_r>
 8007174:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007176:	b111      	cbz	r1, 800717e <_reclaim_reent+0x36>
 8007178:	4620      	mov	r0, r4
 800717a:	f000 fabb 	bl	80076f4 <_free_r>
 800717e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007180:	b111      	cbz	r1, 8007188 <_reclaim_reent+0x40>
 8007182:	4620      	mov	r0, r4
 8007184:	f000 fab6 	bl	80076f4 <_free_r>
 8007188:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800718a:	b111      	cbz	r1, 8007192 <_reclaim_reent+0x4a>
 800718c:	4620      	mov	r0, r4
 800718e:	f000 fab1 	bl	80076f4 <_free_r>
 8007192:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007194:	b111      	cbz	r1, 800719c <_reclaim_reent+0x54>
 8007196:	4620      	mov	r0, r4
 8007198:	f000 faac 	bl	80076f4 <_free_r>
 800719c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800719e:	b111      	cbz	r1, 80071a6 <_reclaim_reent+0x5e>
 80071a0:	4620      	mov	r0, r4
 80071a2:	f000 faa7 	bl	80076f4 <_free_r>
 80071a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80071a8:	b111      	cbz	r1, 80071b0 <_reclaim_reent+0x68>
 80071aa:	4620      	mov	r0, r4
 80071ac:	f000 faa2 	bl	80076f4 <_free_r>
 80071b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071b2:	b111      	cbz	r1, 80071ba <_reclaim_reent+0x72>
 80071b4:	4620      	mov	r0, r4
 80071b6:	f000 fa9d 	bl	80076f4 <_free_r>
 80071ba:	69a3      	ldr	r3, [r4, #24]
 80071bc:	b1e3      	cbz	r3, 80071f8 <_reclaim_reent+0xb0>
 80071be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80071c0:	4620      	mov	r0, r4
 80071c2:	4798      	blx	r3
 80071c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80071c6:	b1b9      	cbz	r1, 80071f8 <_reclaim_reent+0xb0>
 80071c8:	4620      	mov	r0, r4
 80071ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80071ce:	f7ff bfad 	b.w	800712c <cleanup_glue>
 80071d2:	5949      	ldr	r1, [r1, r5]
 80071d4:	b941      	cbnz	r1, 80071e8 <_reclaim_reent+0xa0>
 80071d6:	3504      	adds	r5, #4
 80071d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071da:	2d80      	cmp	r5, #128	; 0x80
 80071dc:	68d9      	ldr	r1, [r3, #12]
 80071de:	d1f8      	bne.n	80071d2 <_reclaim_reent+0x8a>
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 fa87 	bl	80076f4 <_free_r>
 80071e6:	e7ba      	b.n	800715e <_reclaim_reent+0x16>
 80071e8:	680e      	ldr	r6, [r1, #0]
 80071ea:	4620      	mov	r0, r4
 80071ec:	f000 fa82 	bl	80076f4 <_free_r>
 80071f0:	4631      	mov	r1, r6
 80071f2:	e7ef      	b.n	80071d4 <_reclaim_reent+0x8c>
 80071f4:	2500      	movs	r5, #0
 80071f6:	e7ef      	b.n	80071d8 <_reclaim_reent+0x90>
 80071f8:	bd70      	pop	{r4, r5, r6, pc}
 80071fa:	bf00      	nop
 80071fc:	20000030 	.word	0x20000030

08007200 <_sbrk_r>:
 8007200:	b538      	push	{r3, r4, r5, lr}
 8007202:	4d06      	ldr	r5, [pc, #24]	; (800721c <_sbrk_r+0x1c>)
 8007204:	2300      	movs	r3, #0
 8007206:	4604      	mov	r4, r0
 8007208:	4608      	mov	r0, r1
 800720a:	602b      	str	r3, [r5, #0]
 800720c:	f7f9 ff80 	bl	8001110 <_sbrk>
 8007210:	1c43      	adds	r3, r0, #1
 8007212:	d102      	bne.n	800721a <_sbrk_r+0x1a>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	b103      	cbz	r3, 800721a <_sbrk_r+0x1a>
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	bd38      	pop	{r3, r4, r5, pc}
 800721c:	20005d98 	.word	0x20005d98

08007220 <__sread>:
 8007220:	b510      	push	{r4, lr}
 8007222:	460c      	mov	r4, r1
 8007224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007228:	f000 fda2 	bl	8007d70 <_read_r>
 800722c:	2800      	cmp	r0, #0
 800722e:	bfab      	itete	ge
 8007230:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007232:	89a3      	ldrhlt	r3, [r4, #12]
 8007234:	181b      	addge	r3, r3, r0
 8007236:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800723a:	bfac      	ite	ge
 800723c:	6563      	strge	r3, [r4, #84]	; 0x54
 800723e:	81a3      	strhlt	r3, [r4, #12]
 8007240:	bd10      	pop	{r4, pc}

08007242 <__swrite>:
 8007242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007246:	461f      	mov	r7, r3
 8007248:	898b      	ldrh	r3, [r1, #12]
 800724a:	05db      	lsls	r3, r3, #23
 800724c:	4605      	mov	r5, r0
 800724e:	460c      	mov	r4, r1
 8007250:	4616      	mov	r6, r2
 8007252:	d505      	bpl.n	8007260 <__swrite+0x1e>
 8007254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007258:	2302      	movs	r3, #2
 800725a:	2200      	movs	r2, #0
 800725c:	f000 f9c8 	bl	80075f0 <_lseek_r>
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800726a:	81a3      	strh	r3, [r4, #12]
 800726c:	4632      	mov	r2, r6
 800726e:	463b      	mov	r3, r7
 8007270:	4628      	mov	r0, r5
 8007272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007276:	f000 b869 	b.w	800734c <_write_r>

0800727a <__sseek>:
 800727a:	b510      	push	{r4, lr}
 800727c:	460c      	mov	r4, r1
 800727e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007282:	f000 f9b5 	bl	80075f0 <_lseek_r>
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	bf15      	itete	ne
 800728c:	6560      	strne	r0, [r4, #84]	; 0x54
 800728e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007296:	81a3      	strheq	r3, [r4, #12]
 8007298:	bf18      	it	ne
 800729a:	81a3      	strhne	r3, [r4, #12]
 800729c:	bd10      	pop	{r4, pc}

0800729e <__sclose>:
 800729e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072a2:	f000 b8d3 	b.w	800744c <_close_r>
	...

080072a8 <__swbuf_r>:
 80072a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072aa:	460e      	mov	r6, r1
 80072ac:	4614      	mov	r4, r2
 80072ae:	4605      	mov	r5, r0
 80072b0:	b118      	cbz	r0, 80072ba <__swbuf_r+0x12>
 80072b2:	6983      	ldr	r3, [r0, #24]
 80072b4:	b90b      	cbnz	r3, 80072ba <__swbuf_r+0x12>
 80072b6:	f7ff fd67 	bl	8006d88 <__sinit>
 80072ba:	4b21      	ldr	r3, [pc, #132]	; (8007340 <__swbuf_r+0x98>)
 80072bc:	429c      	cmp	r4, r3
 80072be:	d12b      	bne.n	8007318 <__swbuf_r+0x70>
 80072c0:	686c      	ldr	r4, [r5, #4]
 80072c2:	69a3      	ldr	r3, [r4, #24]
 80072c4:	60a3      	str	r3, [r4, #8]
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	071a      	lsls	r2, r3, #28
 80072ca:	d52f      	bpl.n	800732c <__swbuf_r+0x84>
 80072cc:	6923      	ldr	r3, [r4, #16]
 80072ce:	b36b      	cbz	r3, 800732c <__swbuf_r+0x84>
 80072d0:	6923      	ldr	r3, [r4, #16]
 80072d2:	6820      	ldr	r0, [r4, #0]
 80072d4:	1ac0      	subs	r0, r0, r3
 80072d6:	6963      	ldr	r3, [r4, #20]
 80072d8:	b2f6      	uxtb	r6, r6
 80072da:	4283      	cmp	r3, r0
 80072dc:	4637      	mov	r7, r6
 80072de:	dc04      	bgt.n	80072ea <__swbuf_r+0x42>
 80072e0:	4621      	mov	r1, r4
 80072e2:	4628      	mov	r0, r5
 80072e4:	f000 f948 	bl	8007578 <_fflush_r>
 80072e8:	bb30      	cbnz	r0, 8007338 <__swbuf_r+0x90>
 80072ea:	68a3      	ldr	r3, [r4, #8]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	60a3      	str	r3, [r4, #8]
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	6022      	str	r2, [r4, #0]
 80072f6:	701e      	strb	r6, [r3, #0]
 80072f8:	6963      	ldr	r3, [r4, #20]
 80072fa:	3001      	adds	r0, #1
 80072fc:	4283      	cmp	r3, r0
 80072fe:	d004      	beq.n	800730a <__swbuf_r+0x62>
 8007300:	89a3      	ldrh	r3, [r4, #12]
 8007302:	07db      	lsls	r3, r3, #31
 8007304:	d506      	bpl.n	8007314 <__swbuf_r+0x6c>
 8007306:	2e0a      	cmp	r6, #10
 8007308:	d104      	bne.n	8007314 <__swbuf_r+0x6c>
 800730a:	4621      	mov	r1, r4
 800730c:	4628      	mov	r0, r5
 800730e:	f000 f933 	bl	8007578 <_fflush_r>
 8007312:	b988      	cbnz	r0, 8007338 <__swbuf_r+0x90>
 8007314:	4638      	mov	r0, r7
 8007316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007318:	4b0a      	ldr	r3, [pc, #40]	; (8007344 <__swbuf_r+0x9c>)
 800731a:	429c      	cmp	r4, r3
 800731c:	d101      	bne.n	8007322 <__swbuf_r+0x7a>
 800731e:	68ac      	ldr	r4, [r5, #8]
 8007320:	e7cf      	b.n	80072c2 <__swbuf_r+0x1a>
 8007322:	4b09      	ldr	r3, [pc, #36]	; (8007348 <__swbuf_r+0xa0>)
 8007324:	429c      	cmp	r4, r3
 8007326:	bf08      	it	eq
 8007328:	68ec      	ldreq	r4, [r5, #12]
 800732a:	e7ca      	b.n	80072c2 <__swbuf_r+0x1a>
 800732c:	4621      	mov	r1, r4
 800732e:	4628      	mov	r0, r5
 8007330:	f000 f81e 	bl	8007370 <__swsetup_r>
 8007334:	2800      	cmp	r0, #0
 8007336:	d0cb      	beq.n	80072d0 <__swbuf_r+0x28>
 8007338:	f04f 37ff 	mov.w	r7, #4294967295
 800733c:	e7ea      	b.n	8007314 <__swbuf_r+0x6c>
 800733e:	bf00      	nop
 8007340:	080080e4 	.word	0x080080e4
 8007344:	08008104 	.word	0x08008104
 8007348:	080080c4 	.word	0x080080c4

0800734c <_write_r>:
 800734c:	b538      	push	{r3, r4, r5, lr}
 800734e:	4d07      	ldr	r5, [pc, #28]	; (800736c <_write_r+0x20>)
 8007350:	4604      	mov	r4, r0
 8007352:	4608      	mov	r0, r1
 8007354:	4611      	mov	r1, r2
 8007356:	2200      	movs	r2, #0
 8007358:	602a      	str	r2, [r5, #0]
 800735a:	461a      	mov	r2, r3
 800735c:	f7f9 fe87 	bl	800106e <_write>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d102      	bne.n	800736a <_write_r+0x1e>
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	b103      	cbz	r3, 800736a <_write_r+0x1e>
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	20005d98 	.word	0x20005d98

08007370 <__swsetup_r>:
 8007370:	4b32      	ldr	r3, [pc, #200]	; (800743c <__swsetup_r+0xcc>)
 8007372:	b570      	push	{r4, r5, r6, lr}
 8007374:	681d      	ldr	r5, [r3, #0]
 8007376:	4606      	mov	r6, r0
 8007378:	460c      	mov	r4, r1
 800737a:	b125      	cbz	r5, 8007386 <__swsetup_r+0x16>
 800737c:	69ab      	ldr	r3, [r5, #24]
 800737e:	b913      	cbnz	r3, 8007386 <__swsetup_r+0x16>
 8007380:	4628      	mov	r0, r5
 8007382:	f7ff fd01 	bl	8006d88 <__sinit>
 8007386:	4b2e      	ldr	r3, [pc, #184]	; (8007440 <__swsetup_r+0xd0>)
 8007388:	429c      	cmp	r4, r3
 800738a:	d10f      	bne.n	80073ac <__swsetup_r+0x3c>
 800738c:	686c      	ldr	r4, [r5, #4]
 800738e:	89a3      	ldrh	r3, [r4, #12]
 8007390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007394:	0719      	lsls	r1, r3, #28
 8007396:	d42c      	bmi.n	80073f2 <__swsetup_r+0x82>
 8007398:	06dd      	lsls	r5, r3, #27
 800739a:	d411      	bmi.n	80073c0 <__swsetup_r+0x50>
 800739c:	2309      	movs	r3, #9
 800739e:	6033      	str	r3, [r6, #0]
 80073a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073a4:	81a3      	strh	r3, [r4, #12]
 80073a6:	f04f 30ff 	mov.w	r0, #4294967295
 80073aa:	e03e      	b.n	800742a <__swsetup_r+0xba>
 80073ac:	4b25      	ldr	r3, [pc, #148]	; (8007444 <__swsetup_r+0xd4>)
 80073ae:	429c      	cmp	r4, r3
 80073b0:	d101      	bne.n	80073b6 <__swsetup_r+0x46>
 80073b2:	68ac      	ldr	r4, [r5, #8]
 80073b4:	e7eb      	b.n	800738e <__swsetup_r+0x1e>
 80073b6:	4b24      	ldr	r3, [pc, #144]	; (8007448 <__swsetup_r+0xd8>)
 80073b8:	429c      	cmp	r4, r3
 80073ba:	bf08      	it	eq
 80073bc:	68ec      	ldreq	r4, [r5, #12]
 80073be:	e7e6      	b.n	800738e <__swsetup_r+0x1e>
 80073c0:	0758      	lsls	r0, r3, #29
 80073c2:	d512      	bpl.n	80073ea <__swsetup_r+0x7a>
 80073c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073c6:	b141      	cbz	r1, 80073da <__swsetup_r+0x6a>
 80073c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073cc:	4299      	cmp	r1, r3
 80073ce:	d002      	beq.n	80073d6 <__swsetup_r+0x66>
 80073d0:	4630      	mov	r0, r6
 80073d2:	f000 f98f 	bl	80076f4 <_free_r>
 80073d6:	2300      	movs	r3, #0
 80073d8:	6363      	str	r3, [r4, #52]	; 0x34
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073e0:	81a3      	strh	r3, [r4, #12]
 80073e2:	2300      	movs	r3, #0
 80073e4:	6063      	str	r3, [r4, #4]
 80073e6:	6923      	ldr	r3, [r4, #16]
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	89a3      	ldrh	r3, [r4, #12]
 80073ec:	f043 0308 	orr.w	r3, r3, #8
 80073f0:	81a3      	strh	r3, [r4, #12]
 80073f2:	6923      	ldr	r3, [r4, #16]
 80073f4:	b94b      	cbnz	r3, 800740a <__swsetup_r+0x9a>
 80073f6:	89a3      	ldrh	r3, [r4, #12]
 80073f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007400:	d003      	beq.n	800740a <__swsetup_r+0x9a>
 8007402:	4621      	mov	r1, r4
 8007404:	4630      	mov	r0, r6
 8007406:	f000 f929 	bl	800765c <__smakebuf_r>
 800740a:	89a0      	ldrh	r0, [r4, #12]
 800740c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007410:	f010 0301 	ands.w	r3, r0, #1
 8007414:	d00a      	beq.n	800742c <__swsetup_r+0xbc>
 8007416:	2300      	movs	r3, #0
 8007418:	60a3      	str	r3, [r4, #8]
 800741a:	6963      	ldr	r3, [r4, #20]
 800741c:	425b      	negs	r3, r3
 800741e:	61a3      	str	r3, [r4, #24]
 8007420:	6923      	ldr	r3, [r4, #16]
 8007422:	b943      	cbnz	r3, 8007436 <__swsetup_r+0xc6>
 8007424:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007428:	d1ba      	bne.n	80073a0 <__swsetup_r+0x30>
 800742a:	bd70      	pop	{r4, r5, r6, pc}
 800742c:	0781      	lsls	r1, r0, #30
 800742e:	bf58      	it	pl
 8007430:	6963      	ldrpl	r3, [r4, #20]
 8007432:	60a3      	str	r3, [r4, #8]
 8007434:	e7f4      	b.n	8007420 <__swsetup_r+0xb0>
 8007436:	2000      	movs	r0, #0
 8007438:	e7f7      	b.n	800742a <__swsetup_r+0xba>
 800743a:	bf00      	nop
 800743c:	20000030 	.word	0x20000030
 8007440:	080080e4 	.word	0x080080e4
 8007444:	08008104 	.word	0x08008104
 8007448:	080080c4 	.word	0x080080c4

0800744c <_close_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	4d06      	ldr	r5, [pc, #24]	; (8007468 <_close_r+0x1c>)
 8007450:	2300      	movs	r3, #0
 8007452:	4604      	mov	r4, r0
 8007454:	4608      	mov	r0, r1
 8007456:	602b      	str	r3, [r5, #0]
 8007458:	f7f9 fe25 	bl	80010a6 <_close>
 800745c:	1c43      	adds	r3, r0, #1
 800745e:	d102      	bne.n	8007466 <_close_r+0x1a>
 8007460:	682b      	ldr	r3, [r5, #0]
 8007462:	b103      	cbz	r3, 8007466 <_close_r+0x1a>
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	bd38      	pop	{r3, r4, r5, pc}
 8007468:	20005d98 	.word	0x20005d98

0800746c <__sflush_r>:
 800746c:	898a      	ldrh	r2, [r1, #12]
 800746e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007472:	4605      	mov	r5, r0
 8007474:	0710      	lsls	r0, r2, #28
 8007476:	460c      	mov	r4, r1
 8007478:	d458      	bmi.n	800752c <__sflush_r+0xc0>
 800747a:	684b      	ldr	r3, [r1, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	dc05      	bgt.n	800748c <__sflush_r+0x20>
 8007480:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007482:	2b00      	cmp	r3, #0
 8007484:	dc02      	bgt.n	800748c <__sflush_r+0x20>
 8007486:	2000      	movs	r0, #0
 8007488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800748c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800748e:	2e00      	cmp	r6, #0
 8007490:	d0f9      	beq.n	8007486 <__sflush_r+0x1a>
 8007492:	2300      	movs	r3, #0
 8007494:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007498:	682f      	ldr	r7, [r5, #0]
 800749a:	602b      	str	r3, [r5, #0]
 800749c:	d032      	beq.n	8007504 <__sflush_r+0x98>
 800749e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074a0:	89a3      	ldrh	r3, [r4, #12]
 80074a2:	075a      	lsls	r2, r3, #29
 80074a4:	d505      	bpl.n	80074b2 <__sflush_r+0x46>
 80074a6:	6863      	ldr	r3, [r4, #4]
 80074a8:	1ac0      	subs	r0, r0, r3
 80074aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074ac:	b10b      	cbz	r3, 80074b2 <__sflush_r+0x46>
 80074ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074b0:	1ac0      	subs	r0, r0, r3
 80074b2:	2300      	movs	r3, #0
 80074b4:	4602      	mov	r2, r0
 80074b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074b8:	6a21      	ldr	r1, [r4, #32]
 80074ba:	4628      	mov	r0, r5
 80074bc:	47b0      	blx	r6
 80074be:	1c43      	adds	r3, r0, #1
 80074c0:	89a3      	ldrh	r3, [r4, #12]
 80074c2:	d106      	bne.n	80074d2 <__sflush_r+0x66>
 80074c4:	6829      	ldr	r1, [r5, #0]
 80074c6:	291d      	cmp	r1, #29
 80074c8:	d82c      	bhi.n	8007524 <__sflush_r+0xb8>
 80074ca:	4a2a      	ldr	r2, [pc, #168]	; (8007574 <__sflush_r+0x108>)
 80074cc:	40ca      	lsrs	r2, r1
 80074ce:	07d6      	lsls	r6, r2, #31
 80074d0:	d528      	bpl.n	8007524 <__sflush_r+0xb8>
 80074d2:	2200      	movs	r2, #0
 80074d4:	6062      	str	r2, [r4, #4]
 80074d6:	04d9      	lsls	r1, r3, #19
 80074d8:	6922      	ldr	r2, [r4, #16]
 80074da:	6022      	str	r2, [r4, #0]
 80074dc:	d504      	bpl.n	80074e8 <__sflush_r+0x7c>
 80074de:	1c42      	adds	r2, r0, #1
 80074e0:	d101      	bne.n	80074e6 <__sflush_r+0x7a>
 80074e2:	682b      	ldr	r3, [r5, #0]
 80074e4:	b903      	cbnz	r3, 80074e8 <__sflush_r+0x7c>
 80074e6:	6560      	str	r0, [r4, #84]	; 0x54
 80074e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074ea:	602f      	str	r7, [r5, #0]
 80074ec:	2900      	cmp	r1, #0
 80074ee:	d0ca      	beq.n	8007486 <__sflush_r+0x1a>
 80074f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074f4:	4299      	cmp	r1, r3
 80074f6:	d002      	beq.n	80074fe <__sflush_r+0x92>
 80074f8:	4628      	mov	r0, r5
 80074fa:	f000 f8fb 	bl	80076f4 <_free_r>
 80074fe:	2000      	movs	r0, #0
 8007500:	6360      	str	r0, [r4, #52]	; 0x34
 8007502:	e7c1      	b.n	8007488 <__sflush_r+0x1c>
 8007504:	6a21      	ldr	r1, [r4, #32]
 8007506:	2301      	movs	r3, #1
 8007508:	4628      	mov	r0, r5
 800750a:	47b0      	blx	r6
 800750c:	1c41      	adds	r1, r0, #1
 800750e:	d1c7      	bne.n	80074a0 <__sflush_r+0x34>
 8007510:	682b      	ldr	r3, [r5, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0c4      	beq.n	80074a0 <__sflush_r+0x34>
 8007516:	2b1d      	cmp	r3, #29
 8007518:	d001      	beq.n	800751e <__sflush_r+0xb2>
 800751a:	2b16      	cmp	r3, #22
 800751c:	d101      	bne.n	8007522 <__sflush_r+0xb6>
 800751e:	602f      	str	r7, [r5, #0]
 8007520:	e7b1      	b.n	8007486 <__sflush_r+0x1a>
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007528:	81a3      	strh	r3, [r4, #12]
 800752a:	e7ad      	b.n	8007488 <__sflush_r+0x1c>
 800752c:	690f      	ldr	r7, [r1, #16]
 800752e:	2f00      	cmp	r7, #0
 8007530:	d0a9      	beq.n	8007486 <__sflush_r+0x1a>
 8007532:	0793      	lsls	r3, r2, #30
 8007534:	680e      	ldr	r6, [r1, #0]
 8007536:	bf08      	it	eq
 8007538:	694b      	ldreq	r3, [r1, #20]
 800753a:	600f      	str	r7, [r1, #0]
 800753c:	bf18      	it	ne
 800753e:	2300      	movne	r3, #0
 8007540:	eba6 0807 	sub.w	r8, r6, r7
 8007544:	608b      	str	r3, [r1, #8]
 8007546:	f1b8 0f00 	cmp.w	r8, #0
 800754a:	dd9c      	ble.n	8007486 <__sflush_r+0x1a>
 800754c:	6a21      	ldr	r1, [r4, #32]
 800754e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007550:	4643      	mov	r3, r8
 8007552:	463a      	mov	r2, r7
 8007554:	4628      	mov	r0, r5
 8007556:	47b0      	blx	r6
 8007558:	2800      	cmp	r0, #0
 800755a:	dc06      	bgt.n	800756a <__sflush_r+0xfe>
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007562:	81a3      	strh	r3, [r4, #12]
 8007564:	f04f 30ff 	mov.w	r0, #4294967295
 8007568:	e78e      	b.n	8007488 <__sflush_r+0x1c>
 800756a:	4407      	add	r7, r0
 800756c:	eba8 0800 	sub.w	r8, r8, r0
 8007570:	e7e9      	b.n	8007546 <__sflush_r+0xda>
 8007572:	bf00      	nop
 8007574:	20400001 	.word	0x20400001

08007578 <_fflush_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	690b      	ldr	r3, [r1, #16]
 800757c:	4605      	mov	r5, r0
 800757e:	460c      	mov	r4, r1
 8007580:	b913      	cbnz	r3, 8007588 <_fflush_r+0x10>
 8007582:	2500      	movs	r5, #0
 8007584:	4628      	mov	r0, r5
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	b118      	cbz	r0, 8007592 <_fflush_r+0x1a>
 800758a:	6983      	ldr	r3, [r0, #24]
 800758c:	b90b      	cbnz	r3, 8007592 <_fflush_r+0x1a>
 800758e:	f7ff fbfb 	bl	8006d88 <__sinit>
 8007592:	4b14      	ldr	r3, [pc, #80]	; (80075e4 <_fflush_r+0x6c>)
 8007594:	429c      	cmp	r4, r3
 8007596:	d11b      	bne.n	80075d0 <_fflush_r+0x58>
 8007598:	686c      	ldr	r4, [r5, #4]
 800759a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0ef      	beq.n	8007582 <_fflush_r+0xa>
 80075a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075a4:	07d0      	lsls	r0, r2, #31
 80075a6:	d404      	bmi.n	80075b2 <_fflush_r+0x3a>
 80075a8:	0599      	lsls	r1, r3, #22
 80075aa:	d402      	bmi.n	80075b2 <_fflush_r+0x3a>
 80075ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ae:	f7ff fcae 	bl	8006f0e <__retarget_lock_acquire_recursive>
 80075b2:	4628      	mov	r0, r5
 80075b4:	4621      	mov	r1, r4
 80075b6:	f7ff ff59 	bl	800746c <__sflush_r>
 80075ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075bc:	07da      	lsls	r2, r3, #31
 80075be:	4605      	mov	r5, r0
 80075c0:	d4e0      	bmi.n	8007584 <_fflush_r+0xc>
 80075c2:	89a3      	ldrh	r3, [r4, #12]
 80075c4:	059b      	lsls	r3, r3, #22
 80075c6:	d4dd      	bmi.n	8007584 <_fflush_r+0xc>
 80075c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ca:	f7ff fca1 	bl	8006f10 <__retarget_lock_release_recursive>
 80075ce:	e7d9      	b.n	8007584 <_fflush_r+0xc>
 80075d0:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <_fflush_r+0x70>)
 80075d2:	429c      	cmp	r4, r3
 80075d4:	d101      	bne.n	80075da <_fflush_r+0x62>
 80075d6:	68ac      	ldr	r4, [r5, #8]
 80075d8:	e7df      	b.n	800759a <_fflush_r+0x22>
 80075da:	4b04      	ldr	r3, [pc, #16]	; (80075ec <_fflush_r+0x74>)
 80075dc:	429c      	cmp	r4, r3
 80075de:	bf08      	it	eq
 80075e0:	68ec      	ldreq	r4, [r5, #12]
 80075e2:	e7da      	b.n	800759a <_fflush_r+0x22>
 80075e4:	080080e4 	.word	0x080080e4
 80075e8:	08008104 	.word	0x08008104
 80075ec:	080080c4 	.word	0x080080c4

080075f0 <_lseek_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4d07      	ldr	r5, [pc, #28]	; (8007610 <_lseek_r+0x20>)
 80075f4:	4604      	mov	r4, r0
 80075f6:	4608      	mov	r0, r1
 80075f8:	4611      	mov	r1, r2
 80075fa:	2200      	movs	r2, #0
 80075fc:	602a      	str	r2, [r5, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	f7f9 fd78 	bl	80010f4 <_lseek>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d102      	bne.n	800760e <_lseek_r+0x1e>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	b103      	cbz	r3, 800760e <_lseek_r+0x1e>
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	20005d98 	.word	0x20005d98

08007614 <__swhatbuf_r>:
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	460e      	mov	r6, r1
 8007618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800761c:	2900      	cmp	r1, #0
 800761e:	b096      	sub	sp, #88	; 0x58
 8007620:	4614      	mov	r4, r2
 8007622:	461d      	mov	r5, r3
 8007624:	da07      	bge.n	8007636 <__swhatbuf_r+0x22>
 8007626:	2300      	movs	r3, #0
 8007628:	602b      	str	r3, [r5, #0]
 800762a:	89b3      	ldrh	r3, [r6, #12]
 800762c:	061a      	lsls	r2, r3, #24
 800762e:	d410      	bmi.n	8007652 <__swhatbuf_r+0x3e>
 8007630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007634:	e00e      	b.n	8007654 <__swhatbuf_r+0x40>
 8007636:	466a      	mov	r2, sp
 8007638:	f000 fbac 	bl	8007d94 <_fstat_r>
 800763c:	2800      	cmp	r0, #0
 800763e:	dbf2      	blt.n	8007626 <__swhatbuf_r+0x12>
 8007640:	9a01      	ldr	r2, [sp, #4]
 8007642:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007646:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800764a:	425a      	negs	r2, r3
 800764c:	415a      	adcs	r2, r3
 800764e:	602a      	str	r2, [r5, #0]
 8007650:	e7ee      	b.n	8007630 <__swhatbuf_r+0x1c>
 8007652:	2340      	movs	r3, #64	; 0x40
 8007654:	2000      	movs	r0, #0
 8007656:	6023      	str	r3, [r4, #0]
 8007658:	b016      	add	sp, #88	; 0x58
 800765a:	bd70      	pop	{r4, r5, r6, pc}

0800765c <__smakebuf_r>:
 800765c:	898b      	ldrh	r3, [r1, #12]
 800765e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007660:	079d      	lsls	r5, r3, #30
 8007662:	4606      	mov	r6, r0
 8007664:	460c      	mov	r4, r1
 8007666:	d507      	bpl.n	8007678 <__smakebuf_r+0x1c>
 8007668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	6123      	str	r3, [r4, #16]
 8007670:	2301      	movs	r3, #1
 8007672:	6163      	str	r3, [r4, #20]
 8007674:	b002      	add	sp, #8
 8007676:	bd70      	pop	{r4, r5, r6, pc}
 8007678:	ab01      	add	r3, sp, #4
 800767a:	466a      	mov	r2, sp
 800767c:	f7ff ffca 	bl	8007614 <__swhatbuf_r>
 8007680:	9900      	ldr	r1, [sp, #0]
 8007682:	4605      	mov	r5, r0
 8007684:	4630      	mov	r0, r6
 8007686:	f7ff fc69 	bl	8006f5c <_malloc_r>
 800768a:	b948      	cbnz	r0, 80076a0 <__smakebuf_r+0x44>
 800768c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007690:	059a      	lsls	r2, r3, #22
 8007692:	d4ef      	bmi.n	8007674 <__smakebuf_r+0x18>
 8007694:	f023 0303 	bic.w	r3, r3, #3
 8007698:	f043 0302 	orr.w	r3, r3, #2
 800769c:	81a3      	strh	r3, [r4, #12]
 800769e:	e7e3      	b.n	8007668 <__smakebuf_r+0xc>
 80076a0:	4b0d      	ldr	r3, [pc, #52]	; (80076d8 <__smakebuf_r+0x7c>)
 80076a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	6020      	str	r0, [r4, #0]
 80076a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ac:	81a3      	strh	r3, [r4, #12]
 80076ae:	9b00      	ldr	r3, [sp, #0]
 80076b0:	6163      	str	r3, [r4, #20]
 80076b2:	9b01      	ldr	r3, [sp, #4]
 80076b4:	6120      	str	r0, [r4, #16]
 80076b6:	b15b      	cbz	r3, 80076d0 <__smakebuf_r+0x74>
 80076b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076bc:	4630      	mov	r0, r6
 80076be:	f000 fb7b 	bl	8007db8 <_isatty_r>
 80076c2:	b128      	cbz	r0, 80076d0 <__smakebuf_r+0x74>
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	f023 0303 	bic.w	r3, r3, #3
 80076ca:	f043 0301 	orr.w	r3, r3, #1
 80076ce:	81a3      	strh	r3, [r4, #12]
 80076d0:	89a0      	ldrh	r0, [r4, #12]
 80076d2:	4305      	orrs	r5, r0
 80076d4:	81a5      	strh	r5, [r4, #12]
 80076d6:	e7cd      	b.n	8007674 <__smakebuf_r+0x18>
 80076d8:	08006d21 	.word	0x08006d21

080076dc <__malloc_lock>:
 80076dc:	4801      	ldr	r0, [pc, #4]	; (80076e4 <__malloc_lock+0x8>)
 80076de:	f7ff bc16 	b.w	8006f0e <__retarget_lock_acquire_recursive>
 80076e2:	bf00      	nop
 80076e4:	20005d90 	.word	0x20005d90

080076e8 <__malloc_unlock>:
 80076e8:	4801      	ldr	r0, [pc, #4]	; (80076f0 <__malloc_unlock+0x8>)
 80076ea:	f7ff bc11 	b.w	8006f10 <__retarget_lock_release_recursive>
 80076ee:	bf00      	nop
 80076f0:	20005d90 	.word	0x20005d90

080076f4 <_free_r>:
 80076f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076f6:	2900      	cmp	r1, #0
 80076f8:	d048      	beq.n	800778c <_free_r+0x98>
 80076fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076fe:	9001      	str	r0, [sp, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f1a1 0404 	sub.w	r4, r1, #4
 8007706:	bfb8      	it	lt
 8007708:	18e4      	addlt	r4, r4, r3
 800770a:	f7ff ffe7 	bl	80076dc <__malloc_lock>
 800770e:	4a20      	ldr	r2, [pc, #128]	; (8007790 <_free_r+0x9c>)
 8007710:	9801      	ldr	r0, [sp, #4]
 8007712:	6813      	ldr	r3, [r2, #0]
 8007714:	4615      	mov	r5, r2
 8007716:	b933      	cbnz	r3, 8007726 <_free_r+0x32>
 8007718:	6063      	str	r3, [r4, #4]
 800771a:	6014      	str	r4, [r2, #0]
 800771c:	b003      	add	sp, #12
 800771e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007722:	f7ff bfe1 	b.w	80076e8 <__malloc_unlock>
 8007726:	42a3      	cmp	r3, r4
 8007728:	d90b      	bls.n	8007742 <_free_r+0x4e>
 800772a:	6821      	ldr	r1, [r4, #0]
 800772c:	1862      	adds	r2, r4, r1
 800772e:	4293      	cmp	r3, r2
 8007730:	bf04      	itt	eq
 8007732:	681a      	ldreq	r2, [r3, #0]
 8007734:	685b      	ldreq	r3, [r3, #4]
 8007736:	6063      	str	r3, [r4, #4]
 8007738:	bf04      	itt	eq
 800773a:	1852      	addeq	r2, r2, r1
 800773c:	6022      	streq	r2, [r4, #0]
 800773e:	602c      	str	r4, [r5, #0]
 8007740:	e7ec      	b.n	800771c <_free_r+0x28>
 8007742:	461a      	mov	r2, r3
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	b10b      	cbz	r3, 800774c <_free_r+0x58>
 8007748:	42a3      	cmp	r3, r4
 800774a:	d9fa      	bls.n	8007742 <_free_r+0x4e>
 800774c:	6811      	ldr	r1, [r2, #0]
 800774e:	1855      	adds	r5, r2, r1
 8007750:	42a5      	cmp	r5, r4
 8007752:	d10b      	bne.n	800776c <_free_r+0x78>
 8007754:	6824      	ldr	r4, [r4, #0]
 8007756:	4421      	add	r1, r4
 8007758:	1854      	adds	r4, r2, r1
 800775a:	42a3      	cmp	r3, r4
 800775c:	6011      	str	r1, [r2, #0]
 800775e:	d1dd      	bne.n	800771c <_free_r+0x28>
 8007760:	681c      	ldr	r4, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	6053      	str	r3, [r2, #4]
 8007766:	4421      	add	r1, r4
 8007768:	6011      	str	r1, [r2, #0]
 800776a:	e7d7      	b.n	800771c <_free_r+0x28>
 800776c:	d902      	bls.n	8007774 <_free_r+0x80>
 800776e:	230c      	movs	r3, #12
 8007770:	6003      	str	r3, [r0, #0]
 8007772:	e7d3      	b.n	800771c <_free_r+0x28>
 8007774:	6825      	ldr	r5, [r4, #0]
 8007776:	1961      	adds	r1, r4, r5
 8007778:	428b      	cmp	r3, r1
 800777a:	bf04      	itt	eq
 800777c:	6819      	ldreq	r1, [r3, #0]
 800777e:	685b      	ldreq	r3, [r3, #4]
 8007780:	6063      	str	r3, [r4, #4]
 8007782:	bf04      	itt	eq
 8007784:	1949      	addeq	r1, r1, r5
 8007786:	6021      	streq	r1, [r4, #0]
 8007788:	6054      	str	r4, [r2, #4]
 800778a:	e7c7      	b.n	800771c <_free_r+0x28>
 800778c:	b003      	add	sp, #12
 800778e:	bd30      	pop	{r4, r5, pc}
 8007790:	20001ad0 	.word	0x20001ad0

08007794 <__sfputc_r>:
 8007794:	6893      	ldr	r3, [r2, #8]
 8007796:	3b01      	subs	r3, #1
 8007798:	2b00      	cmp	r3, #0
 800779a:	b410      	push	{r4}
 800779c:	6093      	str	r3, [r2, #8]
 800779e:	da08      	bge.n	80077b2 <__sfputc_r+0x1e>
 80077a0:	6994      	ldr	r4, [r2, #24]
 80077a2:	42a3      	cmp	r3, r4
 80077a4:	db01      	blt.n	80077aa <__sfputc_r+0x16>
 80077a6:	290a      	cmp	r1, #10
 80077a8:	d103      	bne.n	80077b2 <__sfputc_r+0x1e>
 80077aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077ae:	f7ff bd7b 	b.w	80072a8 <__swbuf_r>
 80077b2:	6813      	ldr	r3, [r2, #0]
 80077b4:	1c58      	adds	r0, r3, #1
 80077b6:	6010      	str	r0, [r2, #0]
 80077b8:	7019      	strb	r1, [r3, #0]
 80077ba:	4608      	mov	r0, r1
 80077bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <__sfputs_r>:
 80077c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c4:	4606      	mov	r6, r0
 80077c6:	460f      	mov	r7, r1
 80077c8:	4614      	mov	r4, r2
 80077ca:	18d5      	adds	r5, r2, r3
 80077cc:	42ac      	cmp	r4, r5
 80077ce:	d101      	bne.n	80077d4 <__sfputs_r+0x12>
 80077d0:	2000      	movs	r0, #0
 80077d2:	e007      	b.n	80077e4 <__sfputs_r+0x22>
 80077d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d8:	463a      	mov	r2, r7
 80077da:	4630      	mov	r0, r6
 80077dc:	f7ff ffda 	bl	8007794 <__sfputc_r>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	d1f3      	bne.n	80077cc <__sfputs_r+0xa>
 80077e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077e8 <_vfiprintf_r>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	460d      	mov	r5, r1
 80077ee:	b09d      	sub	sp, #116	; 0x74
 80077f0:	4614      	mov	r4, r2
 80077f2:	4698      	mov	r8, r3
 80077f4:	4606      	mov	r6, r0
 80077f6:	b118      	cbz	r0, 8007800 <_vfiprintf_r+0x18>
 80077f8:	6983      	ldr	r3, [r0, #24]
 80077fa:	b90b      	cbnz	r3, 8007800 <_vfiprintf_r+0x18>
 80077fc:	f7ff fac4 	bl	8006d88 <__sinit>
 8007800:	4b89      	ldr	r3, [pc, #548]	; (8007a28 <_vfiprintf_r+0x240>)
 8007802:	429d      	cmp	r5, r3
 8007804:	d11b      	bne.n	800783e <_vfiprintf_r+0x56>
 8007806:	6875      	ldr	r5, [r6, #4]
 8007808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800780a:	07d9      	lsls	r1, r3, #31
 800780c:	d405      	bmi.n	800781a <_vfiprintf_r+0x32>
 800780e:	89ab      	ldrh	r3, [r5, #12]
 8007810:	059a      	lsls	r2, r3, #22
 8007812:	d402      	bmi.n	800781a <_vfiprintf_r+0x32>
 8007814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007816:	f7ff fb7a 	bl	8006f0e <__retarget_lock_acquire_recursive>
 800781a:	89ab      	ldrh	r3, [r5, #12]
 800781c:	071b      	lsls	r3, r3, #28
 800781e:	d501      	bpl.n	8007824 <_vfiprintf_r+0x3c>
 8007820:	692b      	ldr	r3, [r5, #16]
 8007822:	b9eb      	cbnz	r3, 8007860 <_vfiprintf_r+0x78>
 8007824:	4629      	mov	r1, r5
 8007826:	4630      	mov	r0, r6
 8007828:	f7ff fda2 	bl	8007370 <__swsetup_r>
 800782c:	b1c0      	cbz	r0, 8007860 <_vfiprintf_r+0x78>
 800782e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007830:	07dc      	lsls	r4, r3, #31
 8007832:	d50e      	bpl.n	8007852 <_vfiprintf_r+0x6a>
 8007834:	f04f 30ff 	mov.w	r0, #4294967295
 8007838:	b01d      	add	sp, #116	; 0x74
 800783a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783e:	4b7b      	ldr	r3, [pc, #492]	; (8007a2c <_vfiprintf_r+0x244>)
 8007840:	429d      	cmp	r5, r3
 8007842:	d101      	bne.n	8007848 <_vfiprintf_r+0x60>
 8007844:	68b5      	ldr	r5, [r6, #8]
 8007846:	e7df      	b.n	8007808 <_vfiprintf_r+0x20>
 8007848:	4b79      	ldr	r3, [pc, #484]	; (8007a30 <_vfiprintf_r+0x248>)
 800784a:	429d      	cmp	r5, r3
 800784c:	bf08      	it	eq
 800784e:	68f5      	ldreq	r5, [r6, #12]
 8007850:	e7da      	b.n	8007808 <_vfiprintf_r+0x20>
 8007852:	89ab      	ldrh	r3, [r5, #12]
 8007854:	0598      	lsls	r0, r3, #22
 8007856:	d4ed      	bmi.n	8007834 <_vfiprintf_r+0x4c>
 8007858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800785a:	f7ff fb59 	bl	8006f10 <__retarget_lock_release_recursive>
 800785e:	e7e9      	b.n	8007834 <_vfiprintf_r+0x4c>
 8007860:	2300      	movs	r3, #0
 8007862:	9309      	str	r3, [sp, #36]	; 0x24
 8007864:	2320      	movs	r3, #32
 8007866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800786a:	f8cd 800c 	str.w	r8, [sp, #12]
 800786e:	2330      	movs	r3, #48	; 0x30
 8007870:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a34 <_vfiprintf_r+0x24c>
 8007874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007878:	f04f 0901 	mov.w	r9, #1
 800787c:	4623      	mov	r3, r4
 800787e:	469a      	mov	sl, r3
 8007880:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007884:	b10a      	cbz	r2, 800788a <_vfiprintf_r+0xa2>
 8007886:	2a25      	cmp	r2, #37	; 0x25
 8007888:	d1f9      	bne.n	800787e <_vfiprintf_r+0x96>
 800788a:	ebba 0b04 	subs.w	fp, sl, r4
 800788e:	d00b      	beq.n	80078a8 <_vfiprintf_r+0xc0>
 8007890:	465b      	mov	r3, fp
 8007892:	4622      	mov	r2, r4
 8007894:	4629      	mov	r1, r5
 8007896:	4630      	mov	r0, r6
 8007898:	f7ff ff93 	bl	80077c2 <__sfputs_r>
 800789c:	3001      	adds	r0, #1
 800789e:	f000 80aa 	beq.w	80079f6 <_vfiprintf_r+0x20e>
 80078a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078a4:	445a      	add	r2, fp
 80078a6:	9209      	str	r2, [sp, #36]	; 0x24
 80078a8:	f89a 3000 	ldrb.w	r3, [sl]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 80a2 	beq.w	80079f6 <_vfiprintf_r+0x20e>
 80078b2:	2300      	movs	r3, #0
 80078b4:	f04f 32ff 	mov.w	r2, #4294967295
 80078b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078bc:	f10a 0a01 	add.w	sl, sl, #1
 80078c0:	9304      	str	r3, [sp, #16]
 80078c2:	9307      	str	r3, [sp, #28]
 80078c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078c8:	931a      	str	r3, [sp, #104]	; 0x68
 80078ca:	4654      	mov	r4, sl
 80078cc:	2205      	movs	r2, #5
 80078ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d2:	4858      	ldr	r0, [pc, #352]	; (8007a34 <_vfiprintf_r+0x24c>)
 80078d4:	f7f8 fc7c 	bl	80001d0 <memchr>
 80078d8:	9a04      	ldr	r2, [sp, #16]
 80078da:	b9d8      	cbnz	r0, 8007914 <_vfiprintf_r+0x12c>
 80078dc:	06d1      	lsls	r1, r2, #27
 80078de:	bf44      	itt	mi
 80078e0:	2320      	movmi	r3, #32
 80078e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078e6:	0713      	lsls	r3, r2, #28
 80078e8:	bf44      	itt	mi
 80078ea:	232b      	movmi	r3, #43	; 0x2b
 80078ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078f0:	f89a 3000 	ldrb.w	r3, [sl]
 80078f4:	2b2a      	cmp	r3, #42	; 0x2a
 80078f6:	d015      	beq.n	8007924 <_vfiprintf_r+0x13c>
 80078f8:	9a07      	ldr	r2, [sp, #28]
 80078fa:	4654      	mov	r4, sl
 80078fc:	2000      	movs	r0, #0
 80078fe:	f04f 0c0a 	mov.w	ip, #10
 8007902:	4621      	mov	r1, r4
 8007904:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007908:	3b30      	subs	r3, #48	; 0x30
 800790a:	2b09      	cmp	r3, #9
 800790c:	d94e      	bls.n	80079ac <_vfiprintf_r+0x1c4>
 800790e:	b1b0      	cbz	r0, 800793e <_vfiprintf_r+0x156>
 8007910:	9207      	str	r2, [sp, #28]
 8007912:	e014      	b.n	800793e <_vfiprintf_r+0x156>
 8007914:	eba0 0308 	sub.w	r3, r0, r8
 8007918:	fa09 f303 	lsl.w	r3, r9, r3
 800791c:	4313      	orrs	r3, r2
 800791e:	9304      	str	r3, [sp, #16]
 8007920:	46a2      	mov	sl, r4
 8007922:	e7d2      	b.n	80078ca <_vfiprintf_r+0xe2>
 8007924:	9b03      	ldr	r3, [sp, #12]
 8007926:	1d19      	adds	r1, r3, #4
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	9103      	str	r1, [sp, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	bfbb      	ittet	lt
 8007930:	425b      	neglt	r3, r3
 8007932:	f042 0202 	orrlt.w	r2, r2, #2
 8007936:	9307      	strge	r3, [sp, #28]
 8007938:	9307      	strlt	r3, [sp, #28]
 800793a:	bfb8      	it	lt
 800793c:	9204      	strlt	r2, [sp, #16]
 800793e:	7823      	ldrb	r3, [r4, #0]
 8007940:	2b2e      	cmp	r3, #46	; 0x2e
 8007942:	d10c      	bne.n	800795e <_vfiprintf_r+0x176>
 8007944:	7863      	ldrb	r3, [r4, #1]
 8007946:	2b2a      	cmp	r3, #42	; 0x2a
 8007948:	d135      	bne.n	80079b6 <_vfiprintf_r+0x1ce>
 800794a:	9b03      	ldr	r3, [sp, #12]
 800794c:	1d1a      	adds	r2, r3, #4
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	9203      	str	r2, [sp, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	bfb8      	it	lt
 8007956:	f04f 33ff 	movlt.w	r3, #4294967295
 800795a:	3402      	adds	r4, #2
 800795c:	9305      	str	r3, [sp, #20]
 800795e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a44 <_vfiprintf_r+0x25c>
 8007962:	7821      	ldrb	r1, [r4, #0]
 8007964:	2203      	movs	r2, #3
 8007966:	4650      	mov	r0, sl
 8007968:	f7f8 fc32 	bl	80001d0 <memchr>
 800796c:	b140      	cbz	r0, 8007980 <_vfiprintf_r+0x198>
 800796e:	2340      	movs	r3, #64	; 0x40
 8007970:	eba0 000a 	sub.w	r0, r0, sl
 8007974:	fa03 f000 	lsl.w	r0, r3, r0
 8007978:	9b04      	ldr	r3, [sp, #16]
 800797a:	4303      	orrs	r3, r0
 800797c:	3401      	adds	r4, #1
 800797e:	9304      	str	r3, [sp, #16]
 8007980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007984:	482c      	ldr	r0, [pc, #176]	; (8007a38 <_vfiprintf_r+0x250>)
 8007986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800798a:	2206      	movs	r2, #6
 800798c:	f7f8 fc20 	bl	80001d0 <memchr>
 8007990:	2800      	cmp	r0, #0
 8007992:	d03f      	beq.n	8007a14 <_vfiprintf_r+0x22c>
 8007994:	4b29      	ldr	r3, [pc, #164]	; (8007a3c <_vfiprintf_r+0x254>)
 8007996:	bb1b      	cbnz	r3, 80079e0 <_vfiprintf_r+0x1f8>
 8007998:	9b03      	ldr	r3, [sp, #12]
 800799a:	3307      	adds	r3, #7
 800799c:	f023 0307 	bic.w	r3, r3, #7
 80079a0:	3308      	adds	r3, #8
 80079a2:	9303      	str	r3, [sp, #12]
 80079a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a6:	443b      	add	r3, r7
 80079a8:	9309      	str	r3, [sp, #36]	; 0x24
 80079aa:	e767      	b.n	800787c <_vfiprintf_r+0x94>
 80079ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80079b0:	460c      	mov	r4, r1
 80079b2:	2001      	movs	r0, #1
 80079b4:	e7a5      	b.n	8007902 <_vfiprintf_r+0x11a>
 80079b6:	2300      	movs	r3, #0
 80079b8:	3401      	adds	r4, #1
 80079ba:	9305      	str	r3, [sp, #20]
 80079bc:	4619      	mov	r1, r3
 80079be:	f04f 0c0a 	mov.w	ip, #10
 80079c2:	4620      	mov	r0, r4
 80079c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079c8:	3a30      	subs	r2, #48	; 0x30
 80079ca:	2a09      	cmp	r2, #9
 80079cc:	d903      	bls.n	80079d6 <_vfiprintf_r+0x1ee>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0c5      	beq.n	800795e <_vfiprintf_r+0x176>
 80079d2:	9105      	str	r1, [sp, #20]
 80079d4:	e7c3      	b.n	800795e <_vfiprintf_r+0x176>
 80079d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80079da:	4604      	mov	r4, r0
 80079dc:	2301      	movs	r3, #1
 80079de:	e7f0      	b.n	80079c2 <_vfiprintf_r+0x1da>
 80079e0:	ab03      	add	r3, sp, #12
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	462a      	mov	r2, r5
 80079e6:	4b16      	ldr	r3, [pc, #88]	; (8007a40 <_vfiprintf_r+0x258>)
 80079e8:	a904      	add	r1, sp, #16
 80079ea:	4630      	mov	r0, r6
 80079ec:	f3af 8000 	nop.w
 80079f0:	4607      	mov	r7, r0
 80079f2:	1c78      	adds	r0, r7, #1
 80079f4:	d1d6      	bne.n	80079a4 <_vfiprintf_r+0x1bc>
 80079f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079f8:	07d9      	lsls	r1, r3, #31
 80079fa:	d405      	bmi.n	8007a08 <_vfiprintf_r+0x220>
 80079fc:	89ab      	ldrh	r3, [r5, #12]
 80079fe:	059a      	lsls	r2, r3, #22
 8007a00:	d402      	bmi.n	8007a08 <_vfiprintf_r+0x220>
 8007a02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a04:	f7ff fa84 	bl	8006f10 <__retarget_lock_release_recursive>
 8007a08:	89ab      	ldrh	r3, [r5, #12]
 8007a0a:	065b      	lsls	r3, r3, #25
 8007a0c:	f53f af12 	bmi.w	8007834 <_vfiprintf_r+0x4c>
 8007a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a12:	e711      	b.n	8007838 <_vfiprintf_r+0x50>
 8007a14:	ab03      	add	r3, sp, #12
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	462a      	mov	r2, r5
 8007a1a:	4b09      	ldr	r3, [pc, #36]	; (8007a40 <_vfiprintf_r+0x258>)
 8007a1c:	a904      	add	r1, sp, #16
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f000 f880 	bl	8007b24 <_printf_i>
 8007a24:	e7e4      	b.n	80079f0 <_vfiprintf_r+0x208>
 8007a26:	bf00      	nop
 8007a28:	080080e4 	.word	0x080080e4
 8007a2c:	08008104 	.word	0x08008104
 8007a30:	080080c4 	.word	0x080080c4
 8007a34:	08008128 	.word	0x08008128
 8007a38:	08008132 	.word	0x08008132
 8007a3c:	00000000 	.word	0x00000000
 8007a40:	080077c3 	.word	0x080077c3
 8007a44:	0800812e 	.word	0x0800812e

08007a48 <_printf_common>:
 8007a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a4c:	4616      	mov	r6, r2
 8007a4e:	4699      	mov	r9, r3
 8007a50:	688a      	ldr	r2, [r1, #8]
 8007a52:	690b      	ldr	r3, [r1, #16]
 8007a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	bfb8      	it	lt
 8007a5c:	4613      	movlt	r3, r2
 8007a5e:	6033      	str	r3, [r6, #0]
 8007a60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a64:	4607      	mov	r7, r0
 8007a66:	460c      	mov	r4, r1
 8007a68:	b10a      	cbz	r2, 8007a6e <_printf_common+0x26>
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	6033      	str	r3, [r6, #0]
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	0699      	lsls	r1, r3, #26
 8007a72:	bf42      	ittt	mi
 8007a74:	6833      	ldrmi	r3, [r6, #0]
 8007a76:	3302      	addmi	r3, #2
 8007a78:	6033      	strmi	r3, [r6, #0]
 8007a7a:	6825      	ldr	r5, [r4, #0]
 8007a7c:	f015 0506 	ands.w	r5, r5, #6
 8007a80:	d106      	bne.n	8007a90 <_printf_common+0x48>
 8007a82:	f104 0a19 	add.w	sl, r4, #25
 8007a86:	68e3      	ldr	r3, [r4, #12]
 8007a88:	6832      	ldr	r2, [r6, #0]
 8007a8a:	1a9b      	subs	r3, r3, r2
 8007a8c:	42ab      	cmp	r3, r5
 8007a8e:	dc26      	bgt.n	8007ade <_printf_common+0x96>
 8007a90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a94:	1e13      	subs	r3, r2, #0
 8007a96:	6822      	ldr	r2, [r4, #0]
 8007a98:	bf18      	it	ne
 8007a9a:	2301      	movne	r3, #1
 8007a9c:	0692      	lsls	r2, r2, #26
 8007a9e:	d42b      	bmi.n	8007af8 <_printf_common+0xb0>
 8007aa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aa4:	4649      	mov	r1, r9
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	47c0      	blx	r8
 8007aaa:	3001      	adds	r0, #1
 8007aac:	d01e      	beq.n	8007aec <_printf_common+0xa4>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	68e5      	ldr	r5, [r4, #12]
 8007ab2:	6832      	ldr	r2, [r6, #0]
 8007ab4:	f003 0306 	and.w	r3, r3, #6
 8007ab8:	2b04      	cmp	r3, #4
 8007aba:	bf08      	it	eq
 8007abc:	1aad      	subeq	r5, r5, r2
 8007abe:	68a3      	ldr	r3, [r4, #8]
 8007ac0:	6922      	ldr	r2, [r4, #16]
 8007ac2:	bf0c      	ite	eq
 8007ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ac8:	2500      	movne	r5, #0
 8007aca:	4293      	cmp	r3, r2
 8007acc:	bfc4      	itt	gt
 8007ace:	1a9b      	subgt	r3, r3, r2
 8007ad0:	18ed      	addgt	r5, r5, r3
 8007ad2:	2600      	movs	r6, #0
 8007ad4:	341a      	adds	r4, #26
 8007ad6:	42b5      	cmp	r5, r6
 8007ad8:	d11a      	bne.n	8007b10 <_printf_common+0xc8>
 8007ada:	2000      	movs	r0, #0
 8007adc:	e008      	b.n	8007af0 <_printf_common+0xa8>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	4652      	mov	r2, sl
 8007ae2:	4649      	mov	r1, r9
 8007ae4:	4638      	mov	r0, r7
 8007ae6:	47c0      	blx	r8
 8007ae8:	3001      	adds	r0, #1
 8007aea:	d103      	bne.n	8007af4 <_printf_common+0xac>
 8007aec:	f04f 30ff 	mov.w	r0, #4294967295
 8007af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af4:	3501      	adds	r5, #1
 8007af6:	e7c6      	b.n	8007a86 <_printf_common+0x3e>
 8007af8:	18e1      	adds	r1, r4, r3
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	2030      	movs	r0, #48	; 0x30
 8007afe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b02:	4422      	add	r2, r4
 8007b04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b0c:	3302      	adds	r3, #2
 8007b0e:	e7c7      	b.n	8007aa0 <_printf_common+0x58>
 8007b10:	2301      	movs	r3, #1
 8007b12:	4622      	mov	r2, r4
 8007b14:	4649      	mov	r1, r9
 8007b16:	4638      	mov	r0, r7
 8007b18:	47c0      	blx	r8
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	d0e6      	beq.n	8007aec <_printf_common+0xa4>
 8007b1e:	3601      	adds	r6, #1
 8007b20:	e7d9      	b.n	8007ad6 <_printf_common+0x8e>
	...

08007b24 <_printf_i>:
 8007b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b28:	460c      	mov	r4, r1
 8007b2a:	4691      	mov	r9, r2
 8007b2c:	7e27      	ldrb	r7, [r4, #24]
 8007b2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b30:	2f78      	cmp	r7, #120	; 0x78
 8007b32:	4680      	mov	r8, r0
 8007b34:	469a      	mov	sl, r3
 8007b36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b3a:	d807      	bhi.n	8007b4c <_printf_i+0x28>
 8007b3c:	2f62      	cmp	r7, #98	; 0x62
 8007b3e:	d80a      	bhi.n	8007b56 <_printf_i+0x32>
 8007b40:	2f00      	cmp	r7, #0
 8007b42:	f000 80d8 	beq.w	8007cf6 <_printf_i+0x1d2>
 8007b46:	2f58      	cmp	r7, #88	; 0x58
 8007b48:	f000 80a3 	beq.w	8007c92 <_printf_i+0x16e>
 8007b4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b54:	e03a      	b.n	8007bcc <_printf_i+0xa8>
 8007b56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b5a:	2b15      	cmp	r3, #21
 8007b5c:	d8f6      	bhi.n	8007b4c <_printf_i+0x28>
 8007b5e:	a001      	add	r0, pc, #4	; (adr r0, 8007b64 <_printf_i+0x40>)
 8007b60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b64:	08007bbd 	.word	0x08007bbd
 8007b68:	08007bd1 	.word	0x08007bd1
 8007b6c:	08007b4d 	.word	0x08007b4d
 8007b70:	08007b4d 	.word	0x08007b4d
 8007b74:	08007b4d 	.word	0x08007b4d
 8007b78:	08007b4d 	.word	0x08007b4d
 8007b7c:	08007bd1 	.word	0x08007bd1
 8007b80:	08007b4d 	.word	0x08007b4d
 8007b84:	08007b4d 	.word	0x08007b4d
 8007b88:	08007b4d 	.word	0x08007b4d
 8007b8c:	08007b4d 	.word	0x08007b4d
 8007b90:	08007cdd 	.word	0x08007cdd
 8007b94:	08007c01 	.word	0x08007c01
 8007b98:	08007cbf 	.word	0x08007cbf
 8007b9c:	08007b4d 	.word	0x08007b4d
 8007ba0:	08007b4d 	.word	0x08007b4d
 8007ba4:	08007cff 	.word	0x08007cff
 8007ba8:	08007b4d 	.word	0x08007b4d
 8007bac:	08007c01 	.word	0x08007c01
 8007bb0:	08007b4d 	.word	0x08007b4d
 8007bb4:	08007b4d 	.word	0x08007b4d
 8007bb8:	08007cc7 	.word	0x08007cc7
 8007bbc:	680b      	ldr	r3, [r1, #0]
 8007bbe:	1d1a      	adds	r2, r3, #4
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	600a      	str	r2, [r1, #0]
 8007bc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e0a3      	b.n	8007d18 <_printf_i+0x1f4>
 8007bd0:	6825      	ldr	r5, [r4, #0]
 8007bd2:	6808      	ldr	r0, [r1, #0]
 8007bd4:	062e      	lsls	r6, r5, #24
 8007bd6:	f100 0304 	add.w	r3, r0, #4
 8007bda:	d50a      	bpl.n	8007bf2 <_printf_i+0xce>
 8007bdc:	6805      	ldr	r5, [r0, #0]
 8007bde:	600b      	str	r3, [r1, #0]
 8007be0:	2d00      	cmp	r5, #0
 8007be2:	da03      	bge.n	8007bec <_printf_i+0xc8>
 8007be4:	232d      	movs	r3, #45	; 0x2d
 8007be6:	426d      	negs	r5, r5
 8007be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bec:	485e      	ldr	r0, [pc, #376]	; (8007d68 <_printf_i+0x244>)
 8007bee:	230a      	movs	r3, #10
 8007bf0:	e019      	b.n	8007c26 <_printf_i+0x102>
 8007bf2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007bf6:	6805      	ldr	r5, [r0, #0]
 8007bf8:	600b      	str	r3, [r1, #0]
 8007bfa:	bf18      	it	ne
 8007bfc:	b22d      	sxthne	r5, r5
 8007bfe:	e7ef      	b.n	8007be0 <_printf_i+0xbc>
 8007c00:	680b      	ldr	r3, [r1, #0]
 8007c02:	6825      	ldr	r5, [r4, #0]
 8007c04:	1d18      	adds	r0, r3, #4
 8007c06:	6008      	str	r0, [r1, #0]
 8007c08:	0628      	lsls	r0, r5, #24
 8007c0a:	d501      	bpl.n	8007c10 <_printf_i+0xec>
 8007c0c:	681d      	ldr	r5, [r3, #0]
 8007c0e:	e002      	b.n	8007c16 <_printf_i+0xf2>
 8007c10:	0669      	lsls	r1, r5, #25
 8007c12:	d5fb      	bpl.n	8007c0c <_printf_i+0xe8>
 8007c14:	881d      	ldrh	r5, [r3, #0]
 8007c16:	4854      	ldr	r0, [pc, #336]	; (8007d68 <_printf_i+0x244>)
 8007c18:	2f6f      	cmp	r7, #111	; 0x6f
 8007c1a:	bf0c      	ite	eq
 8007c1c:	2308      	moveq	r3, #8
 8007c1e:	230a      	movne	r3, #10
 8007c20:	2100      	movs	r1, #0
 8007c22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c26:	6866      	ldr	r6, [r4, #4]
 8007c28:	60a6      	str	r6, [r4, #8]
 8007c2a:	2e00      	cmp	r6, #0
 8007c2c:	bfa2      	ittt	ge
 8007c2e:	6821      	ldrge	r1, [r4, #0]
 8007c30:	f021 0104 	bicge.w	r1, r1, #4
 8007c34:	6021      	strge	r1, [r4, #0]
 8007c36:	b90d      	cbnz	r5, 8007c3c <_printf_i+0x118>
 8007c38:	2e00      	cmp	r6, #0
 8007c3a:	d04d      	beq.n	8007cd8 <_printf_i+0x1b4>
 8007c3c:	4616      	mov	r6, r2
 8007c3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c42:	fb03 5711 	mls	r7, r3, r1, r5
 8007c46:	5dc7      	ldrb	r7, [r0, r7]
 8007c48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c4c:	462f      	mov	r7, r5
 8007c4e:	42bb      	cmp	r3, r7
 8007c50:	460d      	mov	r5, r1
 8007c52:	d9f4      	bls.n	8007c3e <_printf_i+0x11a>
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d10b      	bne.n	8007c70 <_printf_i+0x14c>
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	07df      	lsls	r7, r3, #31
 8007c5c:	d508      	bpl.n	8007c70 <_printf_i+0x14c>
 8007c5e:	6923      	ldr	r3, [r4, #16]
 8007c60:	6861      	ldr	r1, [r4, #4]
 8007c62:	4299      	cmp	r1, r3
 8007c64:	bfde      	ittt	le
 8007c66:	2330      	movle	r3, #48	; 0x30
 8007c68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c70:	1b92      	subs	r2, r2, r6
 8007c72:	6122      	str	r2, [r4, #16]
 8007c74:	f8cd a000 	str.w	sl, [sp]
 8007c78:	464b      	mov	r3, r9
 8007c7a:	aa03      	add	r2, sp, #12
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	4640      	mov	r0, r8
 8007c80:	f7ff fee2 	bl	8007a48 <_printf_common>
 8007c84:	3001      	adds	r0, #1
 8007c86:	d14c      	bne.n	8007d22 <_printf_i+0x1fe>
 8007c88:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8c:	b004      	add	sp, #16
 8007c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c92:	4835      	ldr	r0, [pc, #212]	; (8007d68 <_printf_i+0x244>)
 8007c94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	680e      	ldr	r6, [r1, #0]
 8007c9c:	061f      	lsls	r7, r3, #24
 8007c9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007ca2:	600e      	str	r6, [r1, #0]
 8007ca4:	d514      	bpl.n	8007cd0 <_printf_i+0x1ac>
 8007ca6:	07d9      	lsls	r1, r3, #31
 8007ca8:	bf44      	itt	mi
 8007caa:	f043 0320 	orrmi.w	r3, r3, #32
 8007cae:	6023      	strmi	r3, [r4, #0]
 8007cb0:	b91d      	cbnz	r5, 8007cba <_printf_i+0x196>
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	f023 0320 	bic.w	r3, r3, #32
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	2310      	movs	r3, #16
 8007cbc:	e7b0      	b.n	8007c20 <_printf_i+0xfc>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	f043 0320 	orr.w	r3, r3, #32
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	2378      	movs	r3, #120	; 0x78
 8007cc8:	4828      	ldr	r0, [pc, #160]	; (8007d6c <_printf_i+0x248>)
 8007cca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cce:	e7e3      	b.n	8007c98 <_printf_i+0x174>
 8007cd0:	065e      	lsls	r6, r3, #25
 8007cd2:	bf48      	it	mi
 8007cd4:	b2ad      	uxthmi	r5, r5
 8007cd6:	e7e6      	b.n	8007ca6 <_printf_i+0x182>
 8007cd8:	4616      	mov	r6, r2
 8007cda:	e7bb      	b.n	8007c54 <_printf_i+0x130>
 8007cdc:	680b      	ldr	r3, [r1, #0]
 8007cde:	6826      	ldr	r6, [r4, #0]
 8007ce0:	6960      	ldr	r0, [r4, #20]
 8007ce2:	1d1d      	adds	r5, r3, #4
 8007ce4:	600d      	str	r5, [r1, #0]
 8007ce6:	0635      	lsls	r5, r6, #24
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	d501      	bpl.n	8007cf0 <_printf_i+0x1cc>
 8007cec:	6018      	str	r0, [r3, #0]
 8007cee:	e002      	b.n	8007cf6 <_printf_i+0x1d2>
 8007cf0:	0671      	lsls	r1, r6, #25
 8007cf2:	d5fb      	bpl.n	8007cec <_printf_i+0x1c8>
 8007cf4:	8018      	strh	r0, [r3, #0]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	6123      	str	r3, [r4, #16]
 8007cfa:	4616      	mov	r6, r2
 8007cfc:	e7ba      	b.n	8007c74 <_printf_i+0x150>
 8007cfe:	680b      	ldr	r3, [r1, #0]
 8007d00:	1d1a      	adds	r2, r3, #4
 8007d02:	600a      	str	r2, [r1, #0]
 8007d04:	681e      	ldr	r6, [r3, #0]
 8007d06:	6862      	ldr	r2, [r4, #4]
 8007d08:	2100      	movs	r1, #0
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f7f8 fa60 	bl	80001d0 <memchr>
 8007d10:	b108      	cbz	r0, 8007d16 <_printf_i+0x1f2>
 8007d12:	1b80      	subs	r0, r0, r6
 8007d14:	6060      	str	r0, [r4, #4]
 8007d16:	6863      	ldr	r3, [r4, #4]
 8007d18:	6123      	str	r3, [r4, #16]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d20:	e7a8      	b.n	8007c74 <_printf_i+0x150>
 8007d22:	6923      	ldr	r3, [r4, #16]
 8007d24:	4632      	mov	r2, r6
 8007d26:	4649      	mov	r1, r9
 8007d28:	4640      	mov	r0, r8
 8007d2a:	47d0      	blx	sl
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d0ab      	beq.n	8007c88 <_printf_i+0x164>
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	079b      	lsls	r3, r3, #30
 8007d34:	d413      	bmi.n	8007d5e <_printf_i+0x23a>
 8007d36:	68e0      	ldr	r0, [r4, #12]
 8007d38:	9b03      	ldr	r3, [sp, #12]
 8007d3a:	4298      	cmp	r0, r3
 8007d3c:	bfb8      	it	lt
 8007d3e:	4618      	movlt	r0, r3
 8007d40:	e7a4      	b.n	8007c8c <_printf_i+0x168>
 8007d42:	2301      	movs	r3, #1
 8007d44:	4632      	mov	r2, r6
 8007d46:	4649      	mov	r1, r9
 8007d48:	4640      	mov	r0, r8
 8007d4a:	47d0      	blx	sl
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	d09b      	beq.n	8007c88 <_printf_i+0x164>
 8007d50:	3501      	adds	r5, #1
 8007d52:	68e3      	ldr	r3, [r4, #12]
 8007d54:	9903      	ldr	r1, [sp, #12]
 8007d56:	1a5b      	subs	r3, r3, r1
 8007d58:	42ab      	cmp	r3, r5
 8007d5a:	dcf2      	bgt.n	8007d42 <_printf_i+0x21e>
 8007d5c:	e7eb      	b.n	8007d36 <_printf_i+0x212>
 8007d5e:	2500      	movs	r5, #0
 8007d60:	f104 0619 	add.w	r6, r4, #25
 8007d64:	e7f5      	b.n	8007d52 <_printf_i+0x22e>
 8007d66:	bf00      	nop
 8007d68:	08008139 	.word	0x08008139
 8007d6c:	0800814a 	.word	0x0800814a

08007d70 <_read_r>:
 8007d70:	b538      	push	{r3, r4, r5, lr}
 8007d72:	4d07      	ldr	r5, [pc, #28]	; (8007d90 <_read_r+0x20>)
 8007d74:	4604      	mov	r4, r0
 8007d76:	4608      	mov	r0, r1
 8007d78:	4611      	mov	r1, r2
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	602a      	str	r2, [r5, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f7f9 f958 	bl	8001034 <_read>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d102      	bne.n	8007d8e <_read_r+0x1e>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	b103      	cbz	r3, 8007d8e <_read_r+0x1e>
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	20005d98 	.word	0x20005d98

08007d94 <_fstat_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4d07      	ldr	r5, [pc, #28]	; (8007db4 <_fstat_r+0x20>)
 8007d98:	2300      	movs	r3, #0
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	4608      	mov	r0, r1
 8007d9e:	4611      	mov	r1, r2
 8007da0:	602b      	str	r3, [r5, #0]
 8007da2:	f7f9 f98c 	bl	80010be <_fstat>
 8007da6:	1c43      	adds	r3, r0, #1
 8007da8:	d102      	bne.n	8007db0 <_fstat_r+0x1c>
 8007daa:	682b      	ldr	r3, [r5, #0]
 8007dac:	b103      	cbz	r3, 8007db0 <_fstat_r+0x1c>
 8007dae:	6023      	str	r3, [r4, #0]
 8007db0:	bd38      	pop	{r3, r4, r5, pc}
 8007db2:	bf00      	nop
 8007db4:	20005d98 	.word	0x20005d98

08007db8 <_isatty_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4d06      	ldr	r5, [pc, #24]	; (8007dd4 <_isatty_r+0x1c>)
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	4608      	mov	r0, r1
 8007dc2:	602b      	str	r3, [r5, #0]
 8007dc4:	f7f9 f98b 	bl	80010de <_isatty>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d102      	bne.n	8007dd2 <_isatty_r+0x1a>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	b103      	cbz	r3, 8007dd2 <_isatty_r+0x1a>
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	20005d98 	.word	0x20005d98

08007dd8 <_init>:
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dda:	bf00      	nop
 8007ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dde:	bc08      	pop	{r3}
 8007de0:	469e      	mov	lr, r3
 8007de2:	4770      	bx	lr

08007de4 <_fini>:
 8007de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de6:	bf00      	nop
 8007de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dea:	bc08      	pop	{r3}
 8007dec:	469e      	mov	lr, r3
 8007dee:	4770      	bx	lr
