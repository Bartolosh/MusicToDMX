
microphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  08007de0  08007de0  00017de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800814c  0800814c  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800814c  0800814c  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800814c  0800814c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800814c  0800814c  0001814c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008150  08008150  00018150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d08  20000094  080081e8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005d9c  080081e8  00025d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027260  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000493d  00000000  00000000  00047324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  0004bc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001800  00000000  00000000  0004d660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b38a  00000000  00000000  0004ee60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e1b8  00000000  00000000  0007a1ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdebc  00000000  00000000  000983a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019625e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007388  00000000  00000000  001962b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007dc8 	.word	0x08007dc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08007dc8 	.word	0x08007dc8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b0ac      	sub	sp, #176	; 0xb0
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000278:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
 8000286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000288:	f107 0314 	add.w	r3, r7, #20
 800028c:	2288      	movs	r2, #136	; 0x88
 800028e:	2100      	movs	r1, #0
 8000290:	4618      	mov	r0, r3
 8000292:	f006 fe44 	bl	8006f1e <memset>
  if(DFSDM1_Init == 0)
 8000296:	4b79      	ldr	r3, [pc, #484]	; (800047c <HAL_DFSDM_FilterMspInit+0x20c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d17d      	bne.n	800039a <HAL_DFSDM_FilterMspInit+0x12a>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 800029e:	f44f 3384 	mov.w	r3, #67584	; 0x10800
 80002a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	67bb      	str	r3, [r7, #120]	; 0x78
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80002a8:	2300      	movs	r3, #0
 80002aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80002ae:	2301      	movs	r3, #1
 80002b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 80002b2:	2304      	movs	r3, #4
 80002b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 11;
 80002b6:	230b      	movs	r3, #11
 80002b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80002ba:	2307      	movs	r3, #7
 80002bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80002be:	2302      	movs	r3, #2
 80002c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80002c2:	2302      	movs	r3, #2
 80002c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80002c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4618      	mov	r0, r3
 80002d2:	f002 fe8f 	bl	8002ff4 <HAL_RCCEx_PeriphCLKConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <HAL_DFSDM_FilterMspInit+0x70>
    {
      Error_Handler();
 80002dc:	f000 fb8a 	bl	80009f4 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80002e0:	4b67      	ldr	r3, [pc, #412]	; (8000480 <HAL_DFSDM_FilterMspInit+0x210>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3301      	adds	r3, #1
 80002e6:	4a66      	ldr	r2, [pc, #408]	; (8000480 <HAL_DFSDM_FilterMspInit+0x210>)
 80002e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80002ea:	4b65      	ldr	r3, [pc, #404]	; (8000480 <HAL_DFSDM_FilterMspInit+0x210>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d10b      	bne.n	800030a <HAL_DFSDM_FilterMspInit+0x9a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80002f2:	4b64      	ldr	r3, [pc, #400]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 80002f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002f6:	4a63      	ldr	r2, [pc, #396]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 80002f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002fc:	6613      	str	r3, [r2, #96]	; 0x60
 80002fe:	4b61      	ldr	r3, [pc, #388]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000302:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000306:	613b      	str	r3, [r7, #16]
 8000308:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800030a:	4b5e      	ldr	r3, [pc, #376]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	4a5d      	ldr	r2, [pc, #372]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000310:	f043 0304 	orr.w	r3, r3, #4
 8000314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000316:	4b5b      	ldr	r3, [pc, #364]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031a:	f003 0304 	and.w	r3, r3, #4
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000322:	4b58      	ldr	r3, [pc, #352]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000326:	4a57      	ldr	r2, [pc, #348]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000328:	f043 0302 	orr.w	r3, r3, #2
 800032c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032e:	4b55      	ldr	r3, [pc, #340]	; (8000484 <HAL_DFSDM_FilterMspInit+0x214>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	f003 0302 	and.w	r3, r3, #2
 8000336:	60bb      	str	r3, [r7, #8]
 8000338:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800033a:	2304      	movs	r3, #4
 800033c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000340:	2302      	movs	r3, #2
 8000342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000346:	2300      	movs	r3, #0
 8000348:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034c:	2300      	movs	r3, #0
 800034e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000352:	2306      	movs	r3, #6
 8000354:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000358:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800035c:	4619      	mov	r1, r3
 800035e:	484a      	ldr	r0, [pc, #296]	; (8000488 <HAL_DFSDM_FilterMspInit+0x218>)
 8000360:	f001 fe32 	bl	8001fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800036c:	2302      	movs	r3, #2
 800036e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	2300      	movs	r3, #0
 8000374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	2300      	movs	r3, #0
 800037a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800037e:	2306      	movs	r3, #6
 8000380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000384:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000388:	4619      	mov	r1, r3
 800038a:	4840      	ldr	r0, [pc, #256]	; (800048c <HAL_DFSDM_FilterMspInit+0x21c>)
 800038c:	f001 fe1c 	bl	8001fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000390:	4b3a      	ldr	r3, [pc, #232]	; (800047c <HAL_DFSDM_FilterMspInit+0x20c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	3301      	adds	r3, #1
 8000396:	4a39      	ldr	r2, [pc, #228]	; (800047c <HAL_DFSDM_FilterMspInit+0x20c>)
 8000398:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a3c      	ldr	r2, [pc, #240]	; (8000490 <HAL_DFSDM_FilterMspInit+0x220>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d130      	bne.n	8000406 <HAL_DFSDM_FilterMspInit+0x196>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80003a4:	4b3b      	ldr	r3, [pc, #236]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003a6:	4a3c      	ldr	r2, [pc, #240]	; (8000498 <HAL_DFSDM_FilterMspInit+0x228>)
 80003a8:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80003aa:	4b3a      	ldr	r3, [pc, #232]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003b0:	4b38      	ldr	r3, [pc, #224]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80003b6:	4b37      	ldr	r3, [pc, #220]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80003bc:	4b35      	ldr	r3, [pc, #212]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003be:	2280      	movs	r2, #128	; 0x80
 80003c0:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80003c2:	4b34      	ldr	r3, [pc, #208]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003c8:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80003ca:	4b32      	ldr	r3, [pc, #200]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80003d0:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80003d2:	4b30      	ldr	r3, [pc, #192]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003d4:	2220      	movs	r2, #32
 80003d6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003da:	2200      	movs	r2, #0
 80003dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80003de:	482d      	ldr	r0, [pc, #180]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003e0:	f001 fbfa 	bl	8001bd8 <HAL_DMA_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <HAL_DFSDM_FilterMspInit+0x17e>
    {
      Error_Handler();
 80003ea:	f000 fb03 	bl	80009f4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a28      	ldr	r2, [pc, #160]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80003f4:	4a27      	ldr	r2, [pc, #156]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a25      	ldr	r2, [pc, #148]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 80003fe:	629a      	str	r2, [r3, #40]	; 0x28
 8000400:	4a24      	ldr	r2, [pc, #144]	; (8000494 <HAL_DFSDM_FilterMspInit+0x224>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6293      	str	r3, [r2, #40]	; 0x28
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a24      	ldr	r2, [pc, #144]	; (800049c <HAL_DFSDM_FilterMspInit+0x22c>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d130      	bne.n	8000472 <HAL_DFSDM_FilterMspInit+0x202>
    hdma_dfsdm1_flt1.Instance = DMA1_Channel5;
 8000410:	4b23      	ldr	r3, [pc, #140]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000412:	4a24      	ldr	r2, [pc, #144]	; (80004a4 <HAL_DFSDM_FilterMspInit+0x234>)
 8000414:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Request = DMA_REQUEST_0;
 8000416:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000418:	2200      	movs	r2, #0
 800041a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800041c:	4b20      	ldr	r3, [pc, #128]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000424:	2200      	movs	r2, #0
 8000426:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000428:	4b1d      	ldr	r3, [pc, #116]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800042a:	2280      	movs	r2, #128	; 0x80
 800042c:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800042e:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000434:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000436:	4b1a      	ldr	r3, [pc, #104]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800043c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 800043e:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000440:	2220      	movs	r2, #32
 8000442:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_LOW;
 8000444:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000446:	2200      	movs	r2, #0
 8000448:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 800044a:	4815      	ldr	r0, [pc, #84]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800044c:	f001 fbc4 	bl	8001bd8 <HAL_DMA_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <HAL_DFSDM_FilterMspInit+0x1ea>
    {
      Error_Handler();
 8000456:	f000 facd 	bl	80009f4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a10      	ldr	r2, [pc, #64]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800045e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000460:	4a0f      	ldr	r2, [pc, #60]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a0d      	ldr	r2, [pc, #52]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800046a:	629a      	str	r2, [r3, #40]	; 0x28
 800046c:	4a0c      	ldr	r2, [pc, #48]	; (80004a0 <HAL_DFSDM_FilterMspInit+0x230>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8000472:	bf00      	nop
 8000474:	37b0      	adds	r7, #176	; 0xb0
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	200000b4 	.word	0x200000b4
 8000480:	200000b0 	.word	0x200000b0
 8000484:	40021000 	.word	0x40021000
 8000488:	48000800 	.word	0x48000800
 800048c:	48000400 	.word	0x48000400
 8000490:	40016100 	.word	0x40016100
 8000494:	20001bdc 	.word	0x20001bdc
 8000498:	40020044 	.word	0x40020044
 800049c:	40016180 	.word	0x40016180
 80004a0:	20001b94 	.word	0x20001b94
 80004a4:	40020058 	.word	0x40020058

080004a8 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b0ac      	sub	sp, #176	; 0xb0
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	2288      	movs	r2, #136	; 0x88
 80004c6:	2100      	movs	r1, #0
 80004c8:	4618      	mov	r0, r3
 80004ca:	f006 fd28 	bl	8006f1e <memset>
  if(DFSDM1_Init == 0)
 80004ce:	4b43      	ldr	r3, [pc, #268]	; (80005dc <HAL_DFSDM_ChannelMspInit+0x134>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d17d      	bne.n	80005d2 <HAL_DFSDM_ChannelMspInit+0x12a>
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_DFSDM1;
 80004d6:	f44f 3384 	mov.w	r3, #67584	; 0x10800
 80004da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80004dc:	2300      	movs	r3, #0
 80004de:	67bb      	str	r3, [r7, #120]	; 0x78
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80004e0:	2300      	movs	r3, #0
 80004e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80004e6:	2301      	movs	r3, #1
 80004e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 80004ea:	2304      	movs	r3, #4
 80004ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 11;
 80004ee:	230b      	movs	r3, #11
 80004f0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80004f2:	2307      	movs	r3, #7
 80004f4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80004f6:	2302      	movs	r3, #2
 80004f8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80004fa:	2302      	movs	r3, #2
 80004fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80004fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000502:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	4618      	mov	r0, r3
 800050a:	f002 fd73 	bl	8002ff4 <HAL_RCCEx_PeriphCLKConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <HAL_DFSDM_ChannelMspInit+0x70>
    {
      Error_Handler();
 8000514:	f000 fa6e 	bl	80009f4 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000518:	4b31      	ldr	r3, [pc, #196]	; (80005e0 <HAL_DFSDM_ChannelMspInit+0x138>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	4a30      	ldr	r2, [pc, #192]	; (80005e0 <HAL_DFSDM_ChannelMspInit+0x138>)
 8000520:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000522:	4b2f      	ldr	r3, [pc, #188]	; (80005e0 <HAL_DFSDM_ChannelMspInit+0x138>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d10b      	bne.n	8000542 <HAL_DFSDM_ChannelMspInit+0x9a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800052a:	4b2e      	ldr	r3, [pc, #184]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 800052c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052e:	4a2d      	ldr	r2, [pc, #180]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000534:	6613      	str	r3, [r2, #96]	; 0x60
 8000536:	4b2b      	ldr	r3, [pc, #172]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800053a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000542:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0304 	and.w	r3, r3, #4
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000560:	f043 0302 	orr.w	r3, r3, #2
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <HAL_DFSDM_ChannelMspInit+0x13c>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000572:	2304      	movs	r3, #4
 8000574:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000578:	2302      	movs	r3, #2
 800057a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800058a:	2306      	movs	r3, #6
 800058c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000590:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000594:	4619      	mov	r1, r3
 8000596:	4814      	ldr	r0, [pc, #80]	; (80005e8 <HAL_DFSDM_ChannelMspInit+0x140>)
 8000598:	f001 fd16 	bl	8001fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80005b6:	2306      	movs	r3, #6
 80005b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005c0:	4619      	mov	r1, r3
 80005c2:	480a      	ldr	r0, [pc, #40]	; (80005ec <HAL_DFSDM_ChannelMspInit+0x144>)
 80005c4:	f001 fd00 	bl	8001fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <HAL_DFSDM_ChannelMspInit+0x134>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	4a03      	ldr	r2, [pc, #12]	; (80005dc <HAL_DFSDM_ChannelMspInit+0x134>)
 80005d0:	6013      	str	r3, [r2, #0]
  }
}
 80005d2:	bf00      	nop
 80005d4:	37b0      	adds	r7, #176	; 0xb0
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000b4 	.word	0x200000b4
 80005e0:	200000b0 	.word	0x200000b0
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000800 	.word	0x48000800
 80005ec:	48000400 	.word	0x48000400

080005f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_DMA_Init+0x48>)
 80005f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005fa:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <MX_DMA_Init+0x48>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6493      	str	r3, [r2, #72]	; 0x48
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_DMA_Init+0x48>)
 8000604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2105      	movs	r1, #5
 8000612:	200e      	movs	r0, #14
 8000614:	f000 fef4 	bl	8001400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000618:	200e      	movs	r0, #14
 800061a:	f000 ff0d 	bl	8001438 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2105      	movs	r1, #5
 8000622:	200f      	movs	r0, #15
 8000624:	f000 feec 	bl	8001400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000628:	200f      	movs	r0, #15
 800062a:	f000 ff05 	bl	8001438 <HAL_NVIC_EnableIRQ>

}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000

0800063c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of buffer_mutex */
  buffer_mutexHandle = osMutexNew(&buffer_mutex_attributes);
 8000640:	480b      	ldr	r0, [pc, #44]	; (8000670 <MX_FREERTOS_Init+0x34>)
 8000642:	f003 fda0 	bl	8004186 <osMutexNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <MX_FREERTOS_Init+0x38>)
 800064a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800064c:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <MX_FREERTOS_Init+0x3c>)
 800064e:	2100      	movs	r1, #0
 8000650:	480a      	ldr	r0, [pc, #40]	; (800067c <MX_FREERTOS_Init+0x40>)
 8000652:	f003 fceb 	bl	800402c <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a09      	ldr	r2, [pc, #36]	; (8000680 <MX_FREERTOS_Init+0x44>)
 800065a:	6013      	str	r3, [r2, #0]

  /* creation of tasktest_out */
  tasktest_outHandle = osThreadNew(test_out, NULL, &tasktest_out_attributes);
 800065c:	4a09      	ldr	r2, [pc, #36]	; (8000684 <MX_FREERTOS_Init+0x48>)
 800065e:	2100      	movs	r1, #0
 8000660:	4809      	ldr	r0, [pc, #36]	; (8000688 <MX_FREERTOS_Init+0x4c>)
 8000662:	f003 fce3 	bl	800402c <osThreadNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a08      	ldr	r2, [pc, #32]	; (800068c <MX_FREERTOS_Init+0x50>)
 800066a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	0800805c 	.word	0x0800805c
 8000674:	20001ce4 	.word	0x20001ce4
 8000678:	08008014 	.word	0x08008014
 800067c:	08000691 	.word	0x08000691
 8000680:	20001ce0 	.word	0x20001ce0
 8000684:	08008038 	.word	0x08008038
 8000688:	080006a1 	.word	0x080006a1
 800068c:	20001ce8 	.word	0x20001ce8

08000690 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000698:	2001      	movs	r0, #1
 800069a:	f003 fd59 	bl	8004150 <osDelay>
 800069e:	e7fb      	b.n	8000698 <StartDefaultTask+0x8>

080006a0 <test_out>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_test_out */
void test_out(void *argument)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN test_out */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f003 fd51 	bl	8004150 <osDelay>
 80006ae:	e7fb      	b.n	80006a8 <test_out+0x8>

080006b0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	; 0x30
 80006b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006c6:	4b4d      	ldr	r3, [pc, #308]	; (80007fc <MX_GPIO_Init+0x14c>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a4c      	ldr	r2, [pc, #304]	; (80007fc <MX_GPIO_Init+0x14c>)
 80006cc:	f043 0310 	orr.w	r3, r3, #16
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b4a      	ldr	r3, [pc, #296]	; (80007fc <MX_GPIO_Init+0x14c>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b47      	ldr	r3, [pc, #284]	; (80007fc <MX_GPIO_Init+0x14c>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a46      	ldr	r2, [pc, #280]	; (80007fc <MX_GPIO_Init+0x14c>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b44      	ldr	r3, [pc, #272]	; (80007fc <MX_GPIO_Init+0x14c>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	4b41      	ldr	r3, [pc, #260]	; (80007fc <MX_GPIO_Init+0x14c>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a40      	ldr	r2, [pc, #256]	; (80007fc <MX_GPIO_Init+0x14c>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b3e      	ldr	r3, [pc, #248]	; (80007fc <MX_GPIO_Init+0x14c>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <MX_GPIO_Init+0x14c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a3a      	ldr	r2, [pc, #232]	; (80007fc <MX_GPIO_Init+0x14c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b38      	ldr	r3, [pc, #224]	; (80007fc <MX_GPIO_Init+0x14c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b35      	ldr	r3, [pc, #212]	; (80007fc <MX_GPIO_Init+0x14c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a34      	ldr	r2, [pc, #208]	; (80007fc <MX_GPIO_Init+0x14c>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b32      	ldr	r3, [pc, #200]	; (80007fc <MX_GPIO_Init+0x14c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <MX_GPIO_Init+0x14c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a2e      	ldr	r2, [pc, #184]	; (80007fc <MX_GPIO_Init+0x14c>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b2c      	ldr	r3, [pc, #176]	; (80007fc <MX_GPIO_Init+0x14c>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800075a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075c:	2303      	movs	r3, #3
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	4825      	ldr	r0, [pc, #148]	; (8000800 <MX_GPIO_Init+0x150>)
 800076c:	f001 fc2c 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC3 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000770:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000774:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000776:	2303      	movs	r3, #3
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	481f      	ldr	r0, [pc, #124]	; (8000804 <MX_GPIO_Init+0x154>)
 8000786:	f001 fc1f 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800078a:	2303      	movs	r3, #3
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078e:	2303      	movs	r3, #3
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	481a      	ldr	r0, [pc, #104]	; (8000808 <MX_GPIO_Init+0x158>)
 800079e:	f001 fc13 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007a2:	f649 73ff 	movw	r3, #40959	; 0x9fff
 80007a6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a8:	2303      	movs	r3, #3
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f001 fc05 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80007be:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80007c2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c4:	2303      	movs	r3, #3
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <MX_GPIO_Init+0x15c>)
 80007d4:	f001 fbf8 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80007d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007dc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007de:	2303      	movs	r3, #3
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4808      	ldr	r0, [pc, #32]	; (8000810 <MX_GPIO_Init+0x160>)
 80007ee:	f001 fbeb 	bl	8001fc8 <HAL_GPIO_Init>

}
 80007f2:	bf00      	nop
 80007f4:	3730      	adds	r7, #48	; 0x30
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000
 8000800:	48001000 	.word	0x48001000
 8000804:	48000800 	.word	0x48000800
 8000808:	48001c00 	.word	0x48001c00
 800080c:	48000400 	.word	0x48000400
 8000810:	48000c00 	.word	0x48000c00

08000814 <mic_init>:
static BSP_AUDIO_Init_t MicParams;
    

static int16_t *BUFFER_RIS;

int mic_init(){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
    
	BUFFER_RIS = (int16_t*)calloc(AUDIO_SAMPLING_FREQUENCY * 2, sizeof(int16_t));
 800081a:	2102      	movs	r1, #2
 800081c:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8000820:	f006 fa44 	bl	8006cac <calloc>
 8000824:	4603      	mov	r3, r0
 8000826:	461a      	mov	r2, r3
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <mic_init+0x88>)
 800082a:	601a      	str	r2, [r3, #0]

    if (!BUFFER_RIS) {
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <mic_init+0x88>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d105      	bne.n	8000840 <mic_init+0x2c>
            printf("Failed to allocate BUFFER_RIS buffer\n");
 8000834:	481a      	ldr	r0, [pc, #104]	; (80008a0 <mic_init+0x8c>)
 8000836:	f006 fc69 	bl	800710c <puts>
            return -1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
 800083e:	e029      	b.n	8000894 <mic_init+0x80>
        }
    
    init_buffer(BUFFER_RIS);
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <mic_init+0x88>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4618      	mov	r0, r3
 8000846:	f000 f8db 	bl	8000a00 <init_buffer>

    // set up the microphone
    MicParams.BitsPerSample = 16;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <mic_init+0x90>)
 800084c:	2210      	movs	r2, #16
 800084e:	609a      	str	r2, [r3, #8]
    MicParams.ChannelsNbr = AUDIO_CHANNELS;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <mic_init+0x90>)
 8000852:	2201      	movs	r2, #1
 8000854:	60da      	str	r2, [r3, #12]
    MicParams.Device = AUDIO_IN_DIGITAL_MIC1;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <mic_init+0x90>)
 8000858:	2210      	movs	r2, #16
 800085a:	601a      	str	r2, [r3, #0]
    MicParams.SampleRate = AUDIO_SAMPLING_FREQUENCY;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <mic_init+0x90>)
 800085e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000862:	605a      	str	r2, [r3, #4]
    MicParams.Volume = 32;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <mic_init+0x90>)
 8000866:	2220      	movs	r2, #32
 8000868:	611a      	str	r2, [r3, #16]

    int32_t ret = BSP_AUDIO_IN_Init(AUDIO_INSTANCE, &MicParams);
 800086a:	490e      	ldr	r1, [pc, #56]	; (80008a4 <mic_init+0x90>)
 800086c:	2000      	movs	r0, #0
 800086e:	f000 f91f 	bl	8000ab0 <BSP_AUDIO_IN_Init>
 8000872:	6078      	str	r0, [r7, #4]

    if (ret != BSP_ERROR_NONE) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d006      	beq.n	8000888 <mic_init+0x74>
        printf("Error Audio Init (%ld)\r\n", ret);
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <mic_init+0x94>)
 800087e:	f006 fbbf 	bl	8007000 <iprintf>
        return -1;
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	e005      	b.n	8000894 <mic_init+0x80>
    } else {
        printf("OK Audio Init\t(Audio Freq=%d)\r\n", AUDIO_SAMPLING_FREQUENCY);
 8000888:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 800088c:	4807      	ldr	r0, [pc, #28]	; (80008ac <mic_init+0x98>)
 800088e:	f006 fbb7 	bl	8007000 <iprintf>
    }

    return 0;
 8000892:	2300      	movs	r3, #0

}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000cc 	.word	0x200000cc
 80008a0:	08007e0c 	.word	0x08007e0c
 80008a4:	200000b8 	.word	0x200000b8
 80008a8:	08007e34 	.word	0x08007e34
 80008ac:	08007e50 	.word	0x08007e50

080008b0 <taskTakeMic>:

void taskTakeMic(void *pvParameters){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	while(1){
		start_recording();
 80008b8:	f000 f8b4 	bl	8000a24 <start_recording>
 80008bc:	e7fc      	b.n	80008b8 <taskTakeMic+0x8>
	...

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c6:	f000 fcaa 	bl	800121e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ca:	f000 f82f 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ce:	f7ff feef 	bl	80006b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d2:	f7ff fe8d 	bl	80005f0 <MX_DMA_Init>
  //MX_DFSDM1_Init(); USING INIT FROM EXTERNAL LIBRARY
  /* USER CODE BEGIN 2 */
  if(mic_init() == -1){
 80008d6:	f7ff ff9d 	bl	8000814 <mic_init>
 80008da:	4603      	mov	r3, r0
 80008dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e0:	d105      	bne.n	80008ee <main+0x2e>
      printf("Something goes wrong");
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <main+0x5c>)
 80008e4:	f006 fb8c 	bl	8007000 <iprintf>
      return -1;
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	e013      	b.n	8000916 <main+0x56>
    };


  xTaskCreate(taskTakeMic, "taskMic", 115, NULL, 0, NULL);
 80008ee:	2300      	movs	r3, #0
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	2300      	movs	r3, #0
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	2300      	movs	r3, #0
 80008f8:	2273      	movs	r2, #115	; 0x73
 80008fa:	4909      	ldr	r1, [pc, #36]	; (8000920 <main+0x60>)
 80008fc:	4809      	ldr	r0, [pc, #36]	; (8000924 <main+0x64>)
 80008fe:	f004 fb80 	bl	8005002 <xTaskCreate>
  printf("task create\n");
 8000902:	4809      	ldr	r0, [pc, #36]	; (8000928 <main+0x68>)
 8000904:	f006 fc02 	bl	800710c <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000908:	f003 fb46 	bl	8003f98 <osKernelInitialize>
  MX_FREERTOS_Init();
 800090c:	f7ff fe96 	bl	800063c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000910:	f003 fb66 	bl	8003fe0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000914:	e7fe      	b.n	8000914 <main+0x54>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	08007e70 	.word	0x08007e70
 8000920:	08007e88 	.word	0x08007e88
 8000924:	080008b1 	.word	0x080008b1
 8000928:	08007e90 	.word	0x08007e90

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b096      	sub	sp, #88	; 0x58
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	2244      	movs	r2, #68	; 0x44
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f006 faef 	bl	8006f1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	463b      	mov	r3, r7
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800094e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000952:	f001 fcf1 	bl	8002338 <HAL_PWREx_ControlVoltageScaling>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800095c:	f000 f84a 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000960:	2310      	movs	r3, #16
 8000962:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000964:	2301      	movs	r3, #1
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 800096c:	2390      	movs	r3, #144	; 0x90
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	2302      	movs	r3, #2
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000974:	2301      	movs	r3, #1
 8000976:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000978:	2304      	movs	r3, #4
 800097a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 41;
 800097c:	2329      	movs	r3, #41	; 0x29
 800097e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000980:	2307      	movs	r3, #7
 8000982:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000984:	2302      	movs	r3, #2
 8000986:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000988:	2304      	movs	r3, #4
 800098a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fd27 	bl	80023e4 <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800099c:	f000 f82a 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a0:	230f      	movs	r3, #15
 80009a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a4:	2303      	movs	r3, #3
 80009a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	2103      	movs	r1, #3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 f8f9 	bl	8002bb0 <HAL_RCC_ClockConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009c4:	f000 f816 	bl	80009f4 <Error_Handler>
  }
}
 80009c8:	bf00      	nop
 80009ca:	3758      	adds	r7, #88	; 0x58
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e2:	f000 fc35 	bl	8001250 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40012c00 	.word	0x40012c00

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	e7fe      	b.n	80009fc <Error_Handler+0x8>
	...

08000a00 <init_buffer>:
static size_t transfer_complete_events = 0;


static int16_t *TARGET_AUDIO_BUFFER;

void init_buffer(int16_t *BUFFER){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
    TARGET_AUDIO_BUFFER = BUFFER;
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <init_buffer+0x1c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
    printf("target buffer inizialize\n");
 8000a0e:	4804      	ldr	r0, [pc, #16]	; (8000a20 <init_buffer+0x20>)
 8000a10:	f006 fb7c 	bl	800710c <puts>
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000011c 	.word	0x2000011c
 8000a20:	08007e9c 	.word	0x08007e9c

08000a24 <start_recording>:
void print_stats() {
    printf("Half %d, Complete %d, IX %d\n", half_transfer_events, transfer_complete_events,
        TARGET_AUDIO_BUFFER_IX);
}

void start_recording() {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
    int32_t ret;
    uint32_t state;

    ret = BSP_AUDIO_IN_GetState(AUDIO_INSTANCE, &state);
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 fa22 	bl	8000e78 <BSP_AUDIO_IN_GetState>
 8000a34:	6078      	str	r0, [r7, #4]
    if (ret != BSP_ERROR_NONE) {
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d004      	beq.n	8000a46 <start_recording+0x22>
        printf("Cannot start recording: Error getting audio state (%ld)\n", ret);
 8000a3c:	6879      	ldr	r1, [r7, #4]
 8000a3e:	4814      	ldr	r0, [pc, #80]	; (8000a90 <start_recording+0x6c>)
 8000a40:	f006 fade 	bl	8007000 <iprintf>
        return;
 8000a44:	e020      	b.n	8000a88 <start_recording+0x64>
    }
    if (state == AUDIO_IN_STATE_RECORDING) {
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d103      	bne.n	8000a54 <start_recording+0x30>
        printf("Cannot start recording: Already recording\n");
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <start_recording+0x70>)
 8000a4e:	f006 fb5d 	bl	800710c <puts>
        return;
 8000a52:	e019      	b.n	8000a88 <start_recording+0x64>
    }

    // reset audio buffer location
    TARGET_AUDIO_BUFFER_IX = 0;
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <start_recording+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
    transfer_complete_events = 0;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <start_recording+0x78>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
    half_transfer_events = 0;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <start_recording+0x7c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]

    ret = BSP_AUDIO_IN_Record(AUDIO_INSTANCE, (uint8_t *) PCM_Buffer, PCM_BUFFER_LEN);
 8000a66:	2240      	movs	r2, #64	; 0x40
 8000a68:	490e      	ldr	r1, [pc, #56]	; (8000aa4 <start_recording+0x80>)
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 f950 	bl	8000d10 <BSP_AUDIO_IN_Record>
 8000a70:	6078      	str	r0, [r7, #4]
    if (ret != BSP_ERROR_NONE) {
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d004      	beq.n	8000a82 <start_recording+0x5e>
        printf("Error Audio Record (%ld)\n", ret);
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <start_recording+0x84>)
 8000a7c:	f006 fac0 	bl	8007000 <iprintf>
        return;
 8000a80:	e002      	b.n	8000a88 <start_recording+0x64>
    }
    else {
        printf("OK Audio Record\n");
 8000a82:	480a      	ldr	r0, [pc, #40]	; (8000aac <start_recording+0x88>)
 8000a84:	f006 fb42 	bl	800710c <puts>
    }
}
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	08007f5c 	.word	0x08007f5c
 8000a94:	08007f98 	.word	0x08007f98
 8000a98:	20000110 	.word	0x20000110
 8000a9c:	20000118 	.word	0x20000118
 8000aa0:	20000114 	.word	0x20000114
 8000aa4:	200000d0 	.word	0x200000d0
 8000aa8:	08007fc4 	.word	0x08007fc4
 8000aac:	08007fe0 	.word	0x08007fe0

08000ab0 <BSP_AUDIO_IN_Init>:
  * @param  Instance Audio in instance.
  * @param  AudioInit Audio in init structure.
  * @retval BSP status.
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t *AudioInit)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d003      	beq.n	8000acc <BSP_AUDIO_IN_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000ac4:	f06f 0301 	mvn.w	r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	e107      	b.n	8000cdc <BSP_AUDIO_IN_Init+0x22c>
  }
  else if (Audio_In_Ctx[Instance].State != AUDIO_IN_STATE_RESET)
 8000acc:	4a86      	ldr	r2, [pc, #536]	; (8000ce8 <BSP_AUDIO_IN_Init+0x238>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	015b      	lsls	r3, r3, #5
 8000ad2:	4413      	add	r3, r2
 8000ad4:	331c      	adds	r3, #28
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <BSP_AUDIO_IN_Init+0x34>
  {
    status = BSP_ERROR_BUSY;
 8000adc:	f06f 0302 	mvn.w	r3, #2
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	e0fb      	b.n	8000cdc <BSP_AUDIO_IN_Init+0x22c>
  }
  else if (AudioInit->BitsPerSample != AUDIO_RESOLUTION_16b)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	2b10      	cmp	r3, #16
 8000aea:	d003      	beq.n	8000af4 <BSP_AUDIO_IN_Init+0x44>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8000aec:	f06f 030a 	mvn.w	r3, #10
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	e0f3      	b.n	8000cdc <BSP_AUDIO_IN_Init+0x22c>
  }
  else if (((AudioInit->Device == AUDIO_IN_DIGITAL_MIC) && (AudioInit->ChannelsNbr != 2U)) ||
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b30      	cmp	r3, #48	; 0x30
 8000afa:	d103      	bne.n	8000b04 <BSP_AUDIO_IN_Init+0x54>
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d10f      	bne.n	8000b24 <BSP_AUDIO_IN_Init+0x74>
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC1) && (AudioInit->ChannelsNbr != 1U)) ||
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
  else if (((AudioInit->Device == AUDIO_IN_DIGITAL_MIC) && (AudioInit->ChannelsNbr != 2U)) ||
 8000b08:	2b10      	cmp	r3, #16
 8000b0a:	d103      	bne.n	8000b14 <BSP_AUDIO_IN_Init+0x64>
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC1) && (AudioInit->ChannelsNbr != 1U)) ||
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d107      	bne.n	8000b24 <BSP_AUDIO_IN_Init+0x74>
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC2) && (AudioInit->ChannelsNbr != 1U)))
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	681b      	ldr	r3, [r3, #0]
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC1) && (AudioInit->ChannelsNbr != 1U)) ||
 8000b18:	2b20      	cmp	r3, #32
 8000b1a:	d107      	bne.n	8000b2c <BSP_AUDIO_IN_Init+0x7c>
           ((AudioInit->Device == AUDIO_IN_DIGITAL_MIC2) && (AudioInit->ChannelsNbr != 1U)))
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d003      	beq.n	8000b2c <BSP_AUDIO_IN_Init+0x7c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8000b24:	f06f 030a 	mvn.w	r3, #10
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	e0d7      	b.n	8000cdc <BSP_AUDIO_IN_Init+0x22c>
  }
  else
  {
    /* Fill audio in context structure */
    Audio_In_Ctx[Instance].Device         = AudioInit->Device;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	496d      	ldr	r1, [pc, #436]	; (8000ce8 <BSP_AUDIO_IN_Init+0x238>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	015b      	lsls	r3, r3, #5
 8000b36:	440b      	add	r3, r1
 8000b38:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].SampleRate     = AudioInit->SampleRate;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	496a      	ldr	r1, [pc, #424]	; (8000ce8 <BSP_AUDIO_IN_Init+0x238>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	015b      	lsls	r3, r3, #5
 8000b44:	440b      	add	r3, r1
 8000b46:	3304      	adds	r3, #4
 8000b48:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].BitsPerSample  = AudioInit->BitsPerSample;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	4966      	ldr	r1, [pc, #408]	; (8000ce8 <BSP_AUDIO_IN_Init+0x238>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	015b      	lsls	r3, r3, #5
 8000b54:	440b      	add	r3, r1
 8000b56:	3308      	adds	r3, #8
 8000b58:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].ChannelsNbr    = AudioInit->ChannelsNbr;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	68da      	ldr	r2, [r3, #12]
 8000b5e:	4962      	ldr	r1, [pc, #392]	; (8000ce8 <BSP_AUDIO_IN_Init+0x238>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	015b      	lsls	r3, r3, #5
 8000b64:	440b      	add	r3, r1
 8000b66:	330c      	adds	r3, #12
 8000b68:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].Volume         = AudioInit->Volume;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	691a      	ldr	r2, [r3, #16]
 8000b6e:	495e      	ldr	r1, [pc, #376]	; (8000ce8 <BSP_AUDIO_IN_Init+0x238>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	015b      	lsls	r3, r3, #5
 8000b74:	440b      	add	r3, r1
 8000b76:	3318      	adds	r3, #24
 8000b78:	601a      	str	r2, [r3, #0]
    haudio_in_dfsdm_channel[0].Instance = DFSDM1_Channel2;
    haudio_in_dfsdm_channel[1].Instance = DFSDM1_Channel1;
    haudio_in_dfsdm_filter[0].Instance  = DFSDM1_Filter0;
    haudio_in_dfsdm_filter[1].Instance  = DFSDM1_Filter1;*/

    hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000b7a:	4b5c      	ldr	r3, [pc, #368]	; (8000cec <BSP_AUDIO_IN_Init+0x23c>)
 8000b7c:	4a5c      	ldr	r2, [pc, #368]	; (8000cf0 <BSP_AUDIO_IN_Init+0x240>)
 8000b7e:	601a      	str	r2, [r3, #0]
    hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000b80:	4b5a      	ldr	r3, [pc, #360]	; (8000cec <BSP_AUDIO_IN_Init+0x23c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	605a      	str	r2, [r3, #4]
    hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000b86:	4b59      	ldr	r3, [pc, #356]	; (8000cec <BSP_AUDIO_IN_Init+0x23c>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	721a      	strb	r2, [r3, #8]
    hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000b8c:	4b57      	ldr	r3, [pc, #348]	; (8000cec <BSP_AUDIO_IN_Init+0x23c>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	725a      	strb	r2, [r3, #9]
    hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8000b92:	4b56      	ldr	r3, [pc, #344]	; (8000cec <BSP_AUDIO_IN_Init+0x23c>)
 8000b94:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b98:	61da      	str	r2, [r3, #28]
    hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000b9a:	4b54      	ldr	r3, [pc, #336]	; (8000cec <BSP_AUDIO_IN_Init+0x23c>)
 8000b9c:	2240      	movs	r2, #64	; 0x40
 8000b9e:	621a      	str	r2, [r3, #32]
    hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000ba0:	4b52      	ldr	r3, [pc, #328]	; (8000cec <BSP_AUDIO_IN_Init+0x23c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000ba6:	4851      	ldr	r0, [pc, #324]	; (8000cec <BSP_AUDIO_IN_Init+0x23c>)
 8000ba8:	f000 fd3c 	bl	8001624 <HAL_DFSDM_FilterInit>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <BSP_AUDIO_IN_Init+0x106>
    {
      Error_Handler();
 8000bb2:	f7ff ff1f 	bl	80009f4 <Error_Handler>
    }
     hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000bb6:	4b4f      	ldr	r3, [pc, #316]	; (8000cf4 <BSP_AUDIO_IN_Init+0x244>)
 8000bb8:	4a4f      	ldr	r2, [pc, #316]	; (8000cf8 <BSP_AUDIO_IN_Init+0x248>)
 8000bba:	601a      	str	r2, [r3, #0]
     hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000bbc:	4b4d      	ldr	r3, [pc, #308]	; (8000cf4 <BSP_AUDIO_IN_Init+0x244>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]
     hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8000bc2:	4b4c      	ldr	r3, [pc, #304]	; (8000cf4 <BSP_AUDIO_IN_Init+0x244>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	721a      	strb	r2, [r3, #8]
     hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000bc8:	4b4a      	ldr	r3, [pc, #296]	; (8000cf4 <BSP_AUDIO_IN_Init+0x244>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	725a      	strb	r2, [r3, #9]
     hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC4_ORDER;
 8000bce:	4b49      	ldr	r3, [pc, #292]	; (8000cf4 <BSP_AUDIO_IN_Init+0x244>)
 8000bd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000bd4:	61da      	str	r2, [r3, #28]
     hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
 8000bd6:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <BSP_AUDIO_IN_Init+0x244>)
 8000bd8:	2240      	movs	r2, #64	; 0x40
 8000bda:	621a      	str	r2, [r3, #32]
     hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8000bdc:	4b45      	ldr	r3, [pc, #276]	; (8000cf4 <BSP_AUDIO_IN_Init+0x244>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
     if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 8000be2:	4844      	ldr	r0, [pc, #272]	; (8000cf4 <BSP_AUDIO_IN_Init+0x244>)
 8000be4:	f000 fd1e 	bl	8001624 <HAL_DFSDM_FilterInit>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <BSP_AUDIO_IN_Init+0x142>
     {
       Error_Handler();
 8000bee:	f7ff ff01 	bl	80009f4 <Error_Handler>
     }
     hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000bf2:	4b42      	ldr	r3, [pc, #264]	; (8000cfc <BSP_AUDIO_IN_Init+0x24c>)
 8000bf4:	4a42      	ldr	r2, [pc, #264]	; (8000d00 <BSP_AUDIO_IN_Init+0x250>)
 8000bf6:	601a      	str	r2, [r3, #0]
     hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8000bf8:	4b40      	ldr	r3, [pc, #256]	; (8000cfc <BSP_AUDIO_IN_Init+0x24c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	711a      	strb	r2, [r3, #4]
     hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000bfe:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <BSP_AUDIO_IN_Init+0x24c>)
 8000c00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c04:	609a      	str	r2, [r3, #8]
     hdfsdm1_channel0.Init.OutputClock.Divider = 60;
 8000c06:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <BSP_AUDIO_IN_Init+0x24c>)
 8000c08:	223c      	movs	r2, #60	; 0x3c
 8000c0a:	60da      	str	r2, [r3, #12]
     hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c0c:	4b3b      	ldr	r3, [pc, #236]	; (8000cfc <BSP_AUDIO_IN_Init+0x24c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
     hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c12:	4b3a      	ldr	r3, [pc, #232]	; (8000cfc <BSP_AUDIO_IN_Init+0x24c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
     hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000c18:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <BSP_AUDIO_IN_Init+0x24c>)
 8000c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1e:	619a      	str	r2, [r3, #24]
     hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8000c20:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <BSP_AUDIO_IN_Init+0x24c>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	61da      	str	r2, [r3, #28]
     hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c26:	4b35      	ldr	r3, [pc, #212]	; (8000cfc <BSP_AUDIO_IN_Init+0x24c>)
 8000c28:	2204      	movs	r2, #4
 8000c2a:	621a      	str	r2, [r3, #32]
     hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c2c:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <BSP_AUDIO_IN_Init+0x24c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	625a      	str	r2, [r3, #36]	; 0x24
     hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000c32:	4b32      	ldr	r3, [pc, #200]	; (8000cfc <BSP_AUDIO_IN_Init+0x24c>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	629a      	str	r2, [r3, #40]	; 0x28
     hdfsdm1_channel0.Init.Offset = 0;
 8000c38:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <BSP_AUDIO_IN_Init+0x24c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	62da      	str	r2, [r3, #44]	; 0x2c
     hdfsdm1_channel0.Init.RightBitShift = 0x02;
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <BSP_AUDIO_IN_Init+0x24c>)
 8000c40:	2202      	movs	r2, #2
 8000c42:	631a      	str	r2, [r3, #48]	; 0x30
     if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000c44:	482d      	ldr	r0, [pc, #180]	; (8000cfc <BSP_AUDIO_IN_Init+0x24c>)
 8000c46:	f000 fc05 	bl	8001454 <HAL_DFSDM_ChannelInit>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <BSP_AUDIO_IN_Init+0x1a4>
     {
       Error_Handler();
 8000c50:	f7ff fed0 	bl	80009f4 <Error_Handler>
     }
     hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000c54:	4b2b      	ldr	r3, [pc, #172]	; (8000d04 <BSP_AUDIO_IN_Init+0x254>)
 8000c56:	4a2c      	ldr	r2, [pc, #176]	; (8000d08 <BSP_AUDIO_IN_Init+0x258>)
 8000c58:	601a      	str	r2, [r3, #0]
     hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <BSP_AUDIO_IN_Init+0x254>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	711a      	strb	r2, [r3, #4]
     hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <BSP_AUDIO_IN_Init+0x254>)
 8000c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c66:	609a      	str	r2, [r3, #8]
     hdfsdm1_channel1.Init.OutputClock.Divider = 60;
 8000c68:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <BSP_AUDIO_IN_Init+0x254>)
 8000c6a:	223c      	movs	r2, #60	; 0x3c
 8000c6c:	60da      	str	r2, [r3, #12]
     hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <BSP_AUDIO_IN_Init+0x254>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
     hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c74:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <BSP_AUDIO_IN_Init+0x254>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
     hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000c7a:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <BSP_AUDIO_IN_Init+0x254>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
     hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <BSP_AUDIO_IN_Init+0x254>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
     hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c86:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <BSP_AUDIO_IN_Init+0x254>)
 8000c88:	2204      	movs	r2, #4
 8000c8a:	621a      	str	r2, [r3, #32]
     hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <BSP_AUDIO_IN_Init+0x254>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	; 0x24
     hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <BSP_AUDIO_IN_Init+0x254>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
     hdfsdm1_channel1.Init.Offset = 0;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <BSP_AUDIO_IN_Init+0x254>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	62da      	str	r2, [r3, #44]	; 0x2c
     hdfsdm1_channel1.Init.RightBitShift = 0x02;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <BSP_AUDIO_IN_Init+0x254>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	631a      	str	r2, [r3, #48]	; 0x30
     if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000ca4:	4817      	ldr	r0, [pc, #92]	; (8000d04 <BSP_AUDIO_IN_Init+0x254>)
 8000ca6:	f000 fbd5 	bl	8001454 <HAL_DFSDM_ChannelInit>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <BSP_AUDIO_IN_Init+0x204>
     {
       Error_Handler();
 8000cb0:	f7ff fea0 	bl	80009f4 <Error_Handler>
     }
     if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4915      	ldr	r1, [pc, #84]	; (8000d0c <BSP_AUDIO_IN_Init+0x25c>)
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <BSP_AUDIO_IN_Init+0x23c>)
 8000cba:	f000 fdb5 	bl	8001828 <HAL_DFSDM_FilterConfigRegChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <BSP_AUDIO_IN_Init+0x218>
     {
       Error_Handler();
 8000cc4:	f7ff fe96 	bl	80009f4 <Error_Handler>
     }
     if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <BSP_AUDIO_IN_Init+0x244>)
 8000cce:	f000 fdab 	bl	8001828 <HAL_DFSDM_FilterConfigRegChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <BSP_AUDIO_IN_Init+0x22c>
     {
       Error_Handler();
 8000cd8:	f7ff fe8c 	bl	80009f4 <Error_Handler>
     }



  }
  return status;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	20001b20 	.word	0x20001b20
 8000cf0:	40016100 	.word	0x40016100
 8000cf4:	20001c24 	.word	0x20001c24
 8000cf8:	40016180 	.word	0x40016180
 8000cfc:	20001c98 	.word	0x20001c98
 8000d00:	40016000 	.word	0x40016000
 8000d04:	20001ad8 	.word	0x20001ad8
 8000d08:	40016020 	.word	0x40016020
 8000d0c:	00010002 	.word	0x00010002

08000d10 <BSP_AUDIO_IN_Record>:
  * @param  pData Pointer on data buffer.
  * @param  NbrOfBytes Size of buffer in bytes. Maximum size is 65535 bytes.
  * @retval BSP status.
  */
int32_t BSP_AUDIO_IN_Record(uint32_t Instance, uint8_t* pData, uint32_t NbrOfBytes)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  int32_t  status = BSP_ERROR_NONE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]

  if ((Instance >= AUDIO_IN_INSTANCES_NBR) || (pData == NULL) || (NbrOfBytes > 65535U))
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d106      	bne.n	8000d34 <BSP_AUDIO_IN_Record+0x24>
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <BSP_AUDIO_IN_Record+0x24>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d32:	d303      	bcc.n	8000d3c <BSP_AUDIO_IN_Record+0x2c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000d34:	f06f 0301 	mvn.w	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	e084      	b.n	8000e46 <BSP_AUDIO_IN_Record+0x136>
  }
  /* Check the internal buffer size */
  else if ((NbrOfBytes / 2U) > BSP_AUDIO_IN_DEFAULT_BUFFER_SIZE)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f241 0201 	movw	r2, #4097	; 0x1001
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d903      	bls.n	8000d4e <BSP_AUDIO_IN_Record+0x3e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000d46:	f06f 0301 	mvn.w	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e07b      	b.n	8000e46 <BSP_AUDIO_IN_Record+0x136>
  }
  /* Check audio in state */
  else if (Audio_In_Ctx[Instance].State != AUDIO_IN_STATE_STOP)
 8000d4e:	4a40      	ldr	r2, [pc, #256]	; (8000e50 <BSP_AUDIO_IN_Record+0x140>)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	015b      	lsls	r3, r3, #5
 8000d54:	4413      	add	r3, r2
 8000d56:	331c      	adds	r3, #28
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d003      	beq.n	8000d66 <BSP_AUDIO_IN_Record+0x56>
  {
    status = BSP_ERROR_BUSY;
 8000d5e:	f06f 0302 	mvn.w	r3, #2
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	e06f      	b.n	8000e46 <BSP_AUDIO_IN_Record+0x136>
  }
  else
  {
    Audio_In_Ctx[Instance].pBuff = pData;
 8000d66:	4a3a      	ldr	r2, [pc, #232]	; (8000e50 <BSP_AUDIO_IN_Record+0x140>)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	015b      	lsls	r3, r3, #5
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3310      	adds	r3, #16
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].Size  = NbrOfBytes;
 8000d74:	4a36      	ldr	r2, [pc, #216]	; (8000e50 <BSP_AUDIO_IN_Record+0x140>)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	015b      	lsls	r3, r3, #5
 8000d7a:	4413      	add	r3, r2
 8000d7c:	3314      	adds	r3, #20
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	601a      	str	r2, [r3, #0]

    /* Initialise transfer control flag */
    Audio_DmaDigMic1RecHalfBuffCplt = 0;
 8000d82:	4b34      	ldr	r3, [pc, #208]	; (8000e54 <BSP_AUDIO_IN_Record+0x144>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
    Audio_DmaDigMic1RecBuffCplt     = 0;
 8000d88:	4b33      	ldr	r3, [pc, #204]	; (8000e58 <BSP_AUDIO_IN_Record+0x148>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
    Audio_DmaDigMic2RecHalfBuffCplt = 0;
 8000d8e:	4b33      	ldr	r3, [pc, #204]	; (8000e5c <BSP_AUDIO_IN_Record+0x14c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
    Audio_DmaDigMic2RecBuffCplt     = 0;
 8000d94:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <BSP_AUDIO_IN_Record+0x150>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]

    if ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC2) == AUDIO_IN_DIGITAL_MIC2)
 8000d9a:	4a2d      	ldr	r2, [pc, #180]	; (8000e50 <BSP_AUDIO_IN_Record+0x140>)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	015b      	lsls	r3, r3, #5
 8000da0:	4413      	add	r3, r2
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0320 	and.w	r3, r3, #32
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d01c      	beq.n	8000de6 <BSP_AUDIO_IN_Record+0xd6>
    {
      printf("Set up MIC2\n");
 8000dac:	482d      	ldr	r0, [pc, #180]	; (8000e64 <BSP_AUDIO_IN_Record+0x154>)
 8000dae:	f006 f9ad 	bl	800710c <puts>
      /* Call the Media layer start function for MIC2 channel */
      if(HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1,
                                           Audio_DigMic2RecBuff,
                                          (Audio_In_Ctx[Instance].Size / (2U * Audio_In_Ctx[Instance].ChannelsNbr))) != HAL_OK)
 8000db2:	4a27      	ldr	r2, [pc, #156]	; (8000e50 <BSP_AUDIO_IN_Record+0x140>)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	015b      	lsls	r3, r3, #5
 8000db8:	4413      	add	r3, r2
 8000dba:	3314      	adds	r3, #20
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4924      	ldr	r1, [pc, #144]	; (8000e50 <BSP_AUDIO_IN_Record+0x140>)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	015b      	lsls	r3, r3, #5
 8000dc4:	440b      	add	r3, r1
 8000dc6:	330c      	adds	r3, #12
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	005b      	lsls	r3, r3, #1
      if(HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1,
 8000dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4925      	ldr	r1, [pc, #148]	; (8000e68 <BSP_AUDIO_IN_Record+0x158>)
 8000dd4:	4825      	ldr	r0, [pc, #148]	; (8000e6c <BSP_AUDIO_IN_Record+0x15c>)
 8000dd6:	f000 fd6d 	bl	80018b4 <HAL_DFSDM_FilterRegularStart_DMA>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <BSP_AUDIO_IN_Record+0xd6>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8000de0:	f06f 0303 	mvn.w	r3, #3
 8000de4:	617b      	str	r3, [r7, #20]
      }
    }

    if (((Audio_In_Ctx[Instance].Device & AUDIO_IN_DIGITAL_MIC1) == AUDIO_IN_DIGITAL_MIC1) && (status == BSP_ERROR_NONE))
 8000de6:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <BSP_AUDIO_IN_Record+0x140>)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	015b      	lsls	r3, r3, #5
 8000dec:	4413      	add	r3, r2
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0310 	and.w	r3, r3, #16
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d01c      	beq.n	8000e32 <BSP_AUDIO_IN_Record+0x122>
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d119      	bne.n	8000e32 <BSP_AUDIO_IN_Record+0x122>
    {
      // printf("Set up MIC1\n");
      /* Call the Media layer start function for MIC1 channel */
      if(HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0,
                                           Audio_DigMic1RecBuff,
                                          (Audio_In_Ctx[Instance].Size / (2U * Audio_In_Ctx[Instance].ChannelsNbr))) != HAL_OK)
 8000dfe:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <BSP_AUDIO_IN_Record+0x140>)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	015b      	lsls	r3, r3, #5
 8000e04:	4413      	add	r3, r2
 8000e06:	3314      	adds	r3, #20
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4911      	ldr	r1, [pc, #68]	; (8000e50 <BSP_AUDIO_IN_Record+0x140>)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	015b      	lsls	r3, r3, #5
 8000e10:	440b      	add	r3, r1
 8000e12:	330c      	adds	r3, #12
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	005b      	lsls	r3, r3, #1
      if(HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0,
 8000e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4914      	ldr	r1, [pc, #80]	; (8000e70 <BSP_AUDIO_IN_Record+0x160>)
 8000e20:	4814      	ldr	r0, [pc, #80]	; (8000e74 <BSP_AUDIO_IN_Record+0x164>)
 8000e22:	f000 fd47 	bl	80018b4 <HAL_DFSDM_FilterRegularStart_DMA>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d002      	beq.n	8000e32 <BSP_AUDIO_IN_Record+0x122>
      {
        // printf("FAIL HAL_DFSDM_FilterRegularStart_DMA\n");
        status = BSP_ERROR_PERIPH_FAILURE;
 8000e2c:	f06f 0303 	mvn.w	r3, #3
 8000e30:	617b      	str	r3, [r7, #20]
      }
      else {
        // printf("OK HAL_DFSDM_FilterRegularStart_DMA\n");
      }
    }
    if (status == BSP_ERROR_NONE)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d106      	bne.n	8000e46 <BSP_AUDIO_IN_Record+0x136>
    {
      /* Update audio in state */
      Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_RECORDING;
 8000e38:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <BSP_AUDIO_IN_Record+0x140>)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	015b      	lsls	r3, r3, #5
 8000e3e:	4413      	add	r3, r2
 8000e40:	331c      	adds	r3, #28
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 8000e46:	697b      	ldr	r3, [r7, #20]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20003cf8 	.word	0x20003cf8
 8000e58:	20001cec 	.word	0x20001cec
 8000e5c:	20003cf4 	.word	0x20003cf4
 8000e60:	20001cf0 	.word	0x20001cf0
 8000e64:	08007ff0 	.word	0x08007ff0
 8000e68:	20003cfc 	.word	0x20003cfc
 8000e6c:	20001c24 	.word	0x20001c24
 8000e70:	20001cf4 	.word	0x20001cf4
 8000e74:	20001b20 	.word	0x20001b20

08000e78 <BSP_AUDIO_IN_GetState>:
  * @param  Instance Audio in instance.
  * @param  State Pointer to state of the audio in stream.
  * @retval BSP status.
  */
int32_t BSP_AUDIO_IN_GetState(uint32_t Instance, uint32_t *State)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <BSP_AUDIO_IN_GetState+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000e8c:	f06f 0301 	mvn.w	r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	e007      	b.n	8000ea4 <BSP_AUDIO_IN_GetState+0x2c>
  }
  /* Get the current state of audio in stream */
  else
  {
    *State = Audio_In_Ctx[Instance].State;
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <BSP_AUDIO_IN_GetState+0x3c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	015b      	lsls	r3, r3, #5
 8000e9a:	4413      	add	r3, r2
 8000e9c:	331c      	adds	r3, #28
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	601a      	str	r2, [r3, #0]
  }
  return status;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000000 	.word	0x20000000

08000eb8 <DMA1_Channel4_IRQHandler>:
/**
  * @brief This function handles DFSDM Left DMA interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_DFSDM_DMAx_MIC1_IRQHandler(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    HAL_DMA_IRQHandler(hdfsdm1_filter0.hdmaReg);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <DMA1_Channel4_IRQHandler+0x14>)
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 ffa1 	bl	8001e08 <HAL_DMA_IRQHandler>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20001b20 	.word	0x20001b20

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eda:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <HAL_MspInit+0x4c>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_MspInit+0x4c>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_MspInit+0x4c>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	210f      	movs	r1, #15
 8000f0a:	f06f 0001 	mvn.w	r0, #1
 8000f0e:	f000 fa77 	bl	8001400 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	2019      	movs	r0, #25
 8000f36:	f000 fa63 	bl	8001400 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f3a:	2019      	movs	r0, #25
 8000f3c:	f000 fa7c 	bl	8001438 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <HAL_InitTick+0x9c>)
 8000f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f44:	4a1d      	ldr	r2, [pc, #116]	; (8000fbc <HAL_InitTick+0x9c>)
 8000f46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f4a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <HAL_InitTick+0x9c>)
 8000f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f58:	f107 0210 	add.w	r2, r7, #16
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 ffb4 	bl	8002ed0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f68:	f001 ff9c 	bl	8002ea4 <HAL_RCC_GetPCLK2Freq>
 8000f6c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f70:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <HAL_InitTick+0xa0>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	0c9b      	lsrs	r3, r3, #18
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <HAL_InitTick+0xa8>)
 8000f80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f9c:	4809      	ldr	r0, [pc, #36]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000f9e:	f002 fce5 	bl	800396c <HAL_TIM_Base_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d104      	bne.n	8000fb2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000fa8:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <HAL_InitTick+0xa4>)
 8000faa:	f002 fd41 	bl	8003a30 <HAL_TIM_Base_Start_IT>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3730      	adds	r7, #48	; 0x30
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	431bde83 	.word	0x431bde83
 8000fc4:	20005cfc 	.word	0x20005cfc
 8000fc8:	40012c00 	.word	0x40012c00

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <MemManage_Handler+0x4>

08000fde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <DMA1_Channel5_IRQHandler+0x10>)
 8000ffe:	f000 ff03 	bl	8001e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20001b94 	.word	0x20001b94

0800100c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001012:	f002 fd7d 	bl	8003b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20005cfc 	.word	0x20005cfc

08001020 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	e00a      	b.n	8001048 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001032:	f3af 8000 	nop.w
 8001036:	4601      	mov	r1, r0
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	60ba      	str	r2, [r7, #8]
 800103e:	b2ca      	uxtb	r2, r1
 8001040:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbf0      	blt.n	8001032 <_read+0x12>
	}

return len;
 8001050:	687b      	ldr	r3, [r7, #4]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	e009      	b.n	8001080 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	60ba      	str	r2, [r7, #8]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	dbf1      	blt.n	800106c <_write+0x12>
	}
	return len;
 8001088:	687b      	ldr	r3, [r7, #4]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <_close>:

int _close(int file)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
	return -1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ba:	605a      	str	r2, [r3, #4]
	return 0;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <_isatty>:

int _isatty(int file)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
	return 1;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
	return 0;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001104:	4a14      	ldr	r2, [pc, #80]	; (8001158 <_sbrk+0x5c>)
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <_sbrk+0x60>)
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <_sbrk+0x64>)
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <_sbrk+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	429a      	cmp	r2, r3
 800112a:	d207      	bcs.n	800113c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800112c:	f005 fdc6 	bl	8006cbc <__errno>
 8001130:	4603      	mov	r3, r0
 8001132:	220c      	movs	r2, #12
 8001134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	e009      	b.n	8001150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <_sbrk+0x64>)
 800114c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20018000 	.word	0x20018000
 800115c:	00000400 	.word	0x00000400
 8001160:	20000120 	.word	0x20000120
 8001164:	20005da0 	.word	0x20005da0

08001168 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <SystemInit+0x5c>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001172:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <SystemInit+0x5c>)
 8001174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <SystemInit+0x60>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a11      	ldr	r2, [pc, #68]	; (80011c8 <SystemInit+0x60>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <SystemInit+0x60>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <SystemInit+0x60>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <SystemInit+0x60>)
 8001194:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001198:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800119c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <SystemInit+0x60>)
 80011a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011a4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <SystemInit+0x60>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <SystemInit+0x60>)
 80011ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SystemInit+0x60>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	40021000 	.word	0x40021000

080011cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001204 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d0:	f7ff ffca 	bl	8001168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011d6:	e003      	b.n	80011e0 <LoopCopyDataInit>

080011d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011de:	3104      	adds	r1, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011e0:	480a      	ldr	r0, [pc, #40]	; (800120c <LoopForever+0xa>)
	ldr	r3, =_edata
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <LoopForever+0xe>)
	adds	r2, r0, r1
 80011e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011e8:	d3f6      	bcc.n	80011d8 <CopyDataInit>
	ldr	r2, =_sbss
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011ec:	e002      	b.n	80011f4 <LoopFillZerobss>

080011ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011f0:	f842 3b04 	str.w	r3, [r2], #4

080011f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <LoopForever+0x16>)
	cmp	r2, r3
 80011f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011f8:	d3f9      	bcc.n	80011ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fa:	f005 fe5b 	bl	8006eb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011fe:	f7ff fb5f 	bl	80008c0 <main>

08001202 <LoopForever>:

LoopForever:
    b LoopForever
 8001202:	e7fe      	b.n	8001202 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001204:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001208:	08008154 	.word	0x08008154
	ldr	r0, =_sdata
 800120c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001210:	20000094 	.word	0x20000094
	ldr	r2, =_sbss
 8001214:	20000094 	.word	0x20000094
	ldr	r3, = _ebss
 8001218:	20005d9c 	.word	0x20005d9c

0800121c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800121c:	e7fe      	b.n	800121c <ADC1_2_IRQHandler>

0800121e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 f8de 	bl	80013ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800122e:	200f      	movs	r0, #15
 8001230:	f7ff fe76 	bl	8000f20 <HAL_InitTick>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	71fb      	strb	r3, [r7, #7]
 800123e:	e001      	b.n	8001244 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001240:	f7ff fe46 	bl	8000ed0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001244:	79fb      	ldrb	r3, [r7, #7]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000028 	.word	0x20000028
 8001274:	20005d48 	.word	0x20005d48

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20005d48 	.word	0x20005d48

08001290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ac:	4013      	ands	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c2:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	60d3      	str	r3, [r2, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <__NVIC_GetPriorityGrouping+0x18>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	f003 0307 	and.w	r3, r3, #7
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	db0b      	blt.n	800131e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f003 021f 	and.w	r2, r3, #31
 800130c:	4907      	ldr	r1, [pc, #28]	; (800132c <__NVIC_EnableIRQ+0x38>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	2001      	movs	r0, #1
 8001316:	fa00 f202 	lsl.w	r2, r0, r2
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e100 	.word	0xe000e100

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ff4c 	bl	8001290 <__NVIC_SetPriorityGrouping>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
 800140c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001412:	f7ff ff61 	bl	80012d8 <__NVIC_GetPriorityGrouping>
 8001416:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	6978      	ldr	r0, [r7, #20]
 800141e:	f7ff ffb1 	bl	8001384 <NVIC_EncodePriority>
 8001422:	4602      	mov	r2, r0
 8001424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001428:	4611      	mov	r1, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff80 	bl	8001330 <__NVIC_SetPriority>
}
 8001430:	bf00      	nop
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff54 	bl	80012f4 <__NVIC_EnableIRQ>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e0ba      	b.n	80015dc <HAL_DFSDM_ChannelInit+0x188>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fb12 	bl	8001a94 <DFSDM_GetChannelFromInstance>
 8001470:	4603      	mov	r3, r0
 8001472:	4a5c      	ldr	r2, [pc, #368]	; (80015e4 <HAL_DFSDM_ChannelInit+0x190>)
 8001474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0ad      	b.n	80015dc <HAL_DFSDM_ChannelInit+0x188>
  }

#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  /* Reset callback pointers to the weak predefined callbacks */
  hdfsdm_channel->CkabCallback = HAL_DFSDM_ChannelCkabCallback;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a59      	ldr	r2, [pc, #356]	; (80015e8 <HAL_DFSDM_ChannelInit+0x194>)
 8001484:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_channel->ScdCallback  = HAL_DFSDM_ChannelScdCallback;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a58      	ldr	r2, [pc, #352]	; (80015ec <HAL_DFSDM_ChannelInit+0x198>)
 800148a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Call MSP init function */
  if (hdfsdm_channel->MspInitCallback == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <HAL_DFSDM_ChannelInit+0x46>
  {
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a56      	ldr	r2, [pc, #344]	; (80015f0 <HAL_DFSDM_ChannelInit+0x19c>)
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	4798      	blx	r3
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80014a2:	4b54      	ldr	r3, [pc, #336]	; (80015f4 <HAL_DFSDM_ChannelInit+0x1a0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	3301      	adds	r3, #1
 80014a8:	4a52      	ldr	r2, [pc, #328]	; (80015f4 <HAL_DFSDM_ChannelInit+0x1a0>)
 80014aa:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80014ac:	4b51      	ldr	r3, [pc, #324]	; (80015f4 <HAL_DFSDM_ChannelInit+0x1a0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d125      	bne.n	8001500 <HAL_DFSDM_ChannelInit+0xac>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80014b4:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <HAL_DFSDM_ChannelInit+0x1a4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a4f      	ldr	r2, [pc, #316]	; (80015f8 <HAL_DFSDM_ChannelInit+0x1a4>)
 80014ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80014be:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80014c0:	4b4d      	ldr	r3, [pc, #308]	; (80015f8 <HAL_DFSDM_ChannelInit+0x1a4>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	494b      	ldr	r1, [pc, #300]	; (80015f8 <HAL_DFSDM_ChannelInit+0x1a4>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80014ce:	4b4a      	ldr	r3, [pc, #296]	; (80015f8 <HAL_DFSDM_ChannelInit+0x1a4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a49      	ldr	r2, [pc, #292]	; (80015f8 <HAL_DFSDM_ChannelInit+0x1a4>)
 80014d4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80014d8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	791b      	ldrb	r3, [r3, #4]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d108      	bne.n	80014f4 <HAL_DFSDM_ChannelInit+0xa0>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80014e2:	4b45      	ldr	r3, [pc, #276]	; (80015f8 <HAL_DFSDM_ChannelInit+0x1a4>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	041b      	lsls	r3, r3, #16
 80014ee:	4942      	ldr	r1, [pc, #264]	; (80015f8 <HAL_DFSDM_ChannelInit+0x1a4>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80014f4:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <HAL_DFSDM_ChannelInit+0x1a4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a3f      	ldr	r2, [pc, #252]	; (80015f8 <HAL_DFSDM_ChannelInit+0x1a4>)
 80014fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014fe:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800150e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6819      	ldr	r1, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800151e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001524:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 020f 	bic.w	r2, r2, #15
 800153c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6819      	ldr	r1, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001564:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6899      	ldr	r1, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	3b01      	subs	r3, #1
 8001576:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f002 0207 	and.w	r2, r2, #7
 8001590:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6859      	ldr	r1, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015bc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fa62 	bl	8001a94 <DFSDM_GetChannelFromInstance>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4904      	ldr	r1, [pc, #16]	; (80015e4 <HAL_DFSDM_ChannelInit+0x190>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000128 	.word	0x20000128
 80015e8:	080015fd 	.word	0x080015fd
 80015ec:	08001611 	.word	0x08001611
 80015f0:	080004a9 	.word	0x080004a9
 80015f4:	20000124 	.word	0x20000124
 80015f8:	40016000 	.word	0x40016000

080015fc <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0e4      	b.n	8001800 <HAL_DFSDM_FilterInit+0x1dc>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a73      	ldr	r2, [pc, #460]	; (8001808 <HAL_DFSDM_FilterInit+0x1e4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d109      	bne.n	8001654 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001644:	2b01      	cmp	r3, #1
 8001646:	d003      	beq.n	8001650 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0d5      	b.n	8001800 <HAL_DFSDM_FilterInit+0x1dc>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  /* Reset callback pointers to the weak predefined callbacks */
  hdfsdm_filter->AwdCallback             = HAL_DFSDM_FilterAwdCallback;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a67      	ldr	r2, [pc, #412]	; (800180c <HAL_DFSDM_FilterInit+0x1e8>)
 8001670:	655a      	str	r2, [r3, #84]	; 0x54
  hdfsdm_filter->RegConvCpltCallback     = HAL_DFSDM_FilterRegConvCpltCallback;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a66      	ldr	r2, [pc, #408]	; (8001810 <HAL_DFSDM_FilterInit+0x1ec>)
 8001676:	659a      	str	r2, [r3, #88]	; 0x58
  hdfsdm_filter->RegConvHalfCpltCallback = HAL_DFSDM_FilterRegConvHalfCpltCallback;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a66      	ldr	r2, [pc, #408]	; (8001814 <HAL_DFSDM_FilterInit+0x1f0>)
 800167c:	65da      	str	r2, [r3, #92]	; 0x5c
  hdfsdm_filter->InjConvCpltCallback     = HAL_DFSDM_FilterInjConvCpltCallback;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a65      	ldr	r2, [pc, #404]	; (8001818 <HAL_DFSDM_FilterInit+0x1f4>)
 8001682:	661a      	str	r2, [r3, #96]	; 0x60
  hdfsdm_filter->InjConvHalfCpltCallback = HAL_DFSDM_FilterInjConvHalfCpltCallback;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a65      	ldr	r2, [pc, #404]	; (800181c <HAL_DFSDM_FilterInit+0x1f8>)
 8001688:	665a      	str	r2, [r3, #100]	; 0x64
  hdfsdm_filter->ErrorCallback           = HAL_DFSDM_FilterErrorCallback;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a64      	ldr	r2, [pc, #400]	; (8001820 <HAL_DFSDM_FilterInit+0x1fc>)
 800168e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Call MSP init function */
  if (hdfsdm_filter->MspInitCallback == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <HAL_DFSDM_FilterInit+0x7a>
  {
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a62      	ldr	r2, [pc, #392]	; (8001824 <HAL_DFSDM_FilterInit+0x200>)
 800169c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	4798      	blx	r3
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80016b4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7a1b      	ldrb	r3, [r3, #8]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <HAL_DFSDM_FilterInit+0xac>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e007      	b.n	80016e0 <HAL_DFSDM_FilterInit+0xbc>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80016de:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7a5b      	ldrb	r3, [r3, #9]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d108      	bne.n	80016fa <HAL_DFSDM_FilterInit+0xd6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	e007      	b.n	800170a <HAL_DFSDM_FilterInit+0xe6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001718:	f023 0308 	bic.w	r3, r3, #8
 800171c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d108      	bne.n	8001738 <HAL_DFSDM_FilterInit+0x114>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6819      	ldr	r1, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695a      	ldr	r2, [r3, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7c1b      	ldrb	r3, [r3, #16]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d108      	bne.n	8001752 <HAL_DFSDM_FilterInit+0x12e>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0210 	orr.w	r2, r2, #16
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e007      	b.n	8001762 <HAL_DFSDM_FilterInit+0x13e>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0210 	bic.w	r2, r2, #16
 8001760:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7c5b      	ldrb	r3, [r3, #17]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_DFSDM_FilterInit+0x158>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0220 	orr.w	r2, r2, #32
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e007      	b.n	800178c <HAL_DFSDM_FilterInit+0x168>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0220 	bic.w	r2, r2, #32
 800178a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800179a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800179e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6959      	ldr	r1, [r3, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017b2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80017ba:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	7c1a      	ldrb	r2, [r3, #16]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40016100 	.word	0x40016100
 800180c:	08001a09 	.word	0x08001a09
 8001810:	080019b9 	.word	0x080019b9
 8001814:	080019cd 	.word	0x080019cd
 8001818:	080019e1 	.word	0x080019e1
 800181c:	080019f5 	.word	0x080019f5
 8001820:	08001a21 	.word	0x08001a21
 8001824:	08000271 	.word	0x08000271

08001828 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800183e:	2b00      	cmp	r3, #0
 8001840:	d02e      	beq.n	80018a0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001848:	2bff      	cmp	r3, #255	; 0xff
 800184a:	d029      	beq.n	80018a0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800185a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185e:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d10d      	bne.n	8001882 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001874:	431a      	orrs	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e00a      	b.n	8001898 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	631a      	str	r2, [r3, #48]	; 0x30
 800189e:	e001      	b.n	80018a4 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	371c      	adds	r7, #28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	75fb      	strb	r3, [r7, #23]
 80018d4:	e064      	b.n	80019a0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018e4:	d002      	beq.n	80018ec <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	75fb      	strb	r3, [r7, #23]
 80018ea:	e059      	b.n	80019a0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10e      	bne.n	8001912 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10a      	bne.n	8001912 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001902:	2b00      	cmp	r3, #0
 8001904:	d105      	bne.n	8001912 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d002      	beq.n	8001912 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	75fb      	strb	r3, [r7, #23]
 8001910:	e046      	b.n	80019a0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10b      	bne.n	8001932 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800191e:	2b00      	cmp	r3, #0
 8001920:	d107      	bne.n	8001932 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001928:	2b20      	cmp	r3, #32
 800192a:	d102      	bne.n	8001932 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	75fb      	strb	r3, [r7, #23]
 8001930:	e036      	b.n	80019a0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001938:	2b01      	cmp	r3, #1
 800193a:	d004      	beq.n	8001946 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001942:	2b03      	cmp	r3, #3
 8001944:	d12a      	bne.n	800199c <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 800194c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001954:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 800195c:	2b20      	cmp	r3, #32
 800195e:	d101      	bne.n	8001964 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8001960:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001962:	e000      	b.n	8001966 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001964:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	331c      	adds	r3, #28
 8001976:	4619      	mov	r1, r3
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f000 f9e4 	bl	8001d48 <HAL_DMA_Start_IT>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	22ff      	movs	r2, #255	; 0xff
 800198a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001992:	e005      	b.n	80019a0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f8c9 	bl	8001b2c <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800199a:	e001      	b.n	80019a0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	08001a53 	.word	0x08001a53
 80019b0:	08001a71 	.word	0x08001a71
 80019b4:	08001a35 	.word	0x08001a35

080019b8 <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_DFSDM_FilterInjConvHalfCpltCallback>:
  * @brief  Half injected conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvHalfCpltCallback could be implemented in the user file.
   */
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	4798      	blx	r3
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
#endif
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b084      	sub	sp, #16
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	4798      	blx	r3
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
#endif
}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2203      	movs	r2, #3
 8001a82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	4798      	blx	r3
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
#endif
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a1c      	ldr	r2, [pc, #112]	; (8001b10 <DFSDM_GetChannelFromInstance+0x7c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d102      	bne.n	8001aaa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	e02b      	b.n	8001b02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a19      	ldr	r2, [pc, #100]	; (8001b14 <DFSDM_GetChannelFromInstance+0x80>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d102      	bne.n	8001ab8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	e024      	b.n	8001b02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <DFSDM_GetChannelFromInstance+0x84>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d102      	bne.n	8001ac6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e01d      	b.n	8001b02 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <DFSDM_GetChannelFromInstance+0x88>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d102      	bne.n	8001ad4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	e016      	b.n	8001b02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <DFSDM_GetChannelFromInstance+0x8c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d102      	bne.n	8001ae2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001adc:	2305      	movs	r3, #5
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e00f      	b.n	8001b02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <DFSDM_GetChannelFromInstance+0x90>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d102      	bne.n	8001af0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001aea:	2306      	movs	r3, #6
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	e008      	b.n	8001b02 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a0d      	ldr	r2, [pc, #52]	; (8001b28 <DFSDM_GetChannelFromInstance+0x94>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d102      	bne.n	8001afe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001af8:	2307      	movs	r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e001      	b.n	8001b02 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001afe:	2303      	movs	r3, #3
 8001b00:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40016000 	.word	0x40016000
 8001b14:	40016020 	.word	0x40016020
 8001b18:	40016040 	.word	0x40016040
 8001b1c:	40016080 	.word	0x40016080
 8001b20:	400160a0 	.word	0x400160a0
 8001b24:	400160c0 	.word	0x400160c0
 8001b28:	400160e0 	.word	0x400160e0

08001b2c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d108      	bne.n	8001b4e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	e033      	b.n	8001bb6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b6c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 0201 	orr.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d116      	bne.n	8001bb6 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d107      	bne.n	8001ba0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0202 	orr.w	r2, r2, #2
 8001b9e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d102      	bne.n	8001bb0 <DFSDM_RegConvStart+0x84>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	e000      	b.n	8001bb2 <DFSDM_RegConvStart+0x86>
 8001bb0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <DFSDM_RegConvStart+0x98>
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	e000      	b.n	8001bc6 <DFSDM_RegConvStart+0x9a>
 8001bc4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e098      	b.n	8001d1c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4b4d      	ldr	r3, [pc, #308]	; (8001d28 <HAL_DMA_Init+0x150>)
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d80f      	bhi.n	8001c16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b4b      	ldr	r3, [pc, #300]	; (8001d2c <HAL_DMA_Init+0x154>)
 8001bfe:	4413      	add	r3, r2
 8001c00:	4a4b      	ldr	r2, [pc, #300]	; (8001d30 <HAL_DMA_Init+0x158>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	009a      	lsls	r2, r3, #2
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a48      	ldr	r2, [pc, #288]	; (8001d34 <HAL_DMA_Init+0x15c>)
 8001c12:	641a      	str	r2, [r3, #64]	; 0x40
 8001c14:	e00e      	b.n	8001c34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b46      	ldr	r3, [pc, #280]	; (8001d38 <HAL_DMA_Init+0x160>)
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a43      	ldr	r2, [pc, #268]	; (8001d30 <HAL_DMA_Init+0x158>)
 8001c22:	fba2 2303 	umull	r2, r3, r2, r3
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	009a      	lsls	r2, r3, #2
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a42      	ldr	r2, [pc, #264]	; (8001d3c <HAL_DMA_Init+0x164>)
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c8e:	d039      	beq.n	8001d04 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	4a27      	ldr	r2, [pc, #156]	; (8001d34 <HAL_DMA_Init+0x15c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d11a      	bne.n	8001cd0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c9a:	4b29      	ldr	r3, [pc, #164]	; (8001d40 <HAL_DMA_Init+0x168>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f003 031c 	and.w	r3, r3, #28
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	4924      	ldr	r1, [pc, #144]	; (8001d40 <HAL_DMA_Init+0x168>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001cb4:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <HAL_DMA_Init+0x168>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6859      	ldr	r1, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc0:	f003 031c 	and.w	r3, r3, #28
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	491d      	ldr	r1, [pc, #116]	; (8001d40 <HAL_DMA_Init+0x168>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
 8001cce:	e019      	b.n	8001d04 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <HAL_DMA_Init+0x16c>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	f003 031c 	and.w	r3, r3, #28
 8001cdc:	210f      	movs	r1, #15
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	4917      	ldr	r1, [pc, #92]	; (8001d44 <HAL_DMA_Init+0x16c>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <HAL_DMA_Init+0x16c>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6859      	ldr	r1, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f003 031c 	and.w	r3, r3, #28
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	4911      	ldr	r1, [pc, #68]	; (8001d44 <HAL_DMA_Init+0x16c>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	40020407 	.word	0x40020407
 8001d2c:	bffdfff8 	.word	0xbffdfff8
 8001d30:	cccccccd 	.word	0xcccccccd
 8001d34:	40020000 	.word	0x40020000
 8001d38:	bffdfbf8 	.word	0xbffdfbf8
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	400200a8 	.word	0x400200a8
 8001d44:	400204a8 	.word	0x400204a8

08001d48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_DMA_Start_IT+0x20>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e04b      	b.n	8001e00 <HAL_DMA_Start_IT+0xb8>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d13a      	bne.n	8001df2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0201 	bic.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	68b9      	ldr	r1, [r7, #8]
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 f8e0 	bl	8001f66 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d008      	beq.n	8001dc0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 020e 	orr.w	r2, r2, #14
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	e00f      	b.n	8001de0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0204 	bic.w	r2, r2, #4
 8001dce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 020a 	orr.w	r2, r2, #10
 8001dde:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e005      	b.n	8001dfe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	f003 031c 	and.w	r3, r3, #28
 8001e28:	2204      	movs	r2, #4
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d026      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x7a>
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d021      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d107      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0204 	bic.w	r2, r2, #4
 8001e5a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e60:	f003 021c 	and.w	r2, r3, #28
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	2104      	movs	r1, #4
 8001e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d071      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001e80:	e06c      	b.n	8001f5c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f003 031c 	and.w	r3, r3, #28
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d02e      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0xec>
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d029      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10b      	bne.n	8001ec6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 020a 	bic.w	r2, r2, #10
 8001ebc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f003 021c 	and.w	r2, r3, #28
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	2102      	movs	r1, #2
 8001ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d038      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ef2:	e033      	b.n	8001f5c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	f003 031c 	and.w	r3, r3, #28
 8001efc:	2208      	movs	r2, #8
 8001efe:	409a      	lsls	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d02a      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x156>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d025      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 020e 	bic.w	r2, r2, #14
 8001f20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f003 021c 	and.w	r2, r3, #28
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	2101      	movs	r1, #1
 8001f30:	fa01 f202 	lsl.w	r2, r1, r2
 8001f34:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
}
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b085      	sub	sp, #20
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f78:	f003 021c 	and.w	r2, r3, #28
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	2101      	movs	r1, #1
 8001f82:	fa01 f202 	lsl.w	r2, r1, r2
 8001f86:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b10      	cmp	r3, #16
 8001f96:	d108      	bne.n	8001faa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fa8:	e007      	b.n	8001fba <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	60da      	str	r2, [r3, #12]
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd6:	e17f      	b.n	80022d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2101      	movs	r1, #1
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8171 	beq.w	80022d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d00b      	beq.n	8002010 <HAL_GPIO_Init+0x48>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d007      	beq.n	8002010 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002004:	2b11      	cmp	r3, #17
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b12      	cmp	r3, #18
 800200e:	d130      	bne.n	8002072 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002046:	2201      	movs	r2, #1
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	f003 0201 	and.w	r2, r3, #1
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b03      	cmp	r3, #3
 800207c:	d118      	bne.n	80020b0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002084:	2201      	movs	r2, #1
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	08db      	lsrs	r3, r3, #3
 800209a:	f003 0201 	and.w	r2, r3, #1
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x128>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b12      	cmp	r3, #18
 80020ee:	d123      	bne.n	8002138 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	08da      	lsrs	r2, r3, #3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3208      	adds	r2, #8
 80020f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	220f      	movs	r2, #15
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	08da      	lsrs	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3208      	adds	r2, #8
 8002132:	6939      	ldr	r1, [r7, #16]
 8002134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0203 	and.w	r2, r3, #3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80ac 	beq.w	80022d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217a:	4b5f      	ldr	r3, [pc, #380]	; (80022f8 <HAL_GPIO_Init+0x330>)
 800217c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217e:	4a5e      	ldr	r2, [pc, #376]	; (80022f8 <HAL_GPIO_Init+0x330>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6613      	str	r3, [r2, #96]	; 0x60
 8002186:	4b5c      	ldr	r3, [pc, #368]	; (80022f8 <HAL_GPIO_Init+0x330>)
 8002188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002192:	4a5a      	ldr	r2, [pc, #360]	; (80022fc <HAL_GPIO_Init+0x334>)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	3302      	adds	r3, #2
 800219a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	220f      	movs	r2, #15
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021bc:	d025      	beq.n	800220a <HAL_GPIO_Init+0x242>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4f      	ldr	r2, [pc, #316]	; (8002300 <HAL_GPIO_Init+0x338>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01f      	beq.n	8002206 <HAL_GPIO_Init+0x23e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4e      	ldr	r2, [pc, #312]	; (8002304 <HAL_GPIO_Init+0x33c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d019      	beq.n	8002202 <HAL_GPIO_Init+0x23a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4d      	ldr	r2, [pc, #308]	; (8002308 <HAL_GPIO_Init+0x340>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <HAL_GPIO_Init+0x236>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4c      	ldr	r2, [pc, #304]	; (800230c <HAL_GPIO_Init+0x344>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00d      	beq.n	80021fa <HAL_GPIO_Init+0x232>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4b      	ldr	r2, [pc, #300]	; (8002310 <HAL_GPIO_Init+0x348>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d007      	beq.n	80021f6 <HAL_GPIO_Init+0x22e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4a      	ldr	r2, [pc, #296]	; (8002314 <HAL_GPIO_Init+0x34c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d101      	bne.n	80021f2 <HAL_GPIO_Init+0x22a>
 80021ee:	2306      	movs	r3, #6
 80021f0:	e00c      	b.n	800220c <HAL_GPIO_Init+0x244>
 80021f2:	2307      	movs	r3, #7
 80021f4:	e00a      	b.n	800220c <HAL_GPIO_Init+0x244>
 80021f6:	2305      	movs	r3, #5
 80021f8:	e008      	b.n	800220c <HAL_GPIO_Init+0x244>
 80021fa:	2304      	movs	r3, #4
 80021fc:	e006      	b.n	800220c <HAL_GPIO_Init+0x244>
 80021fe:	2303      	movs	r3, #3
 8002200:	e004      	b.n	800220c <HAL_GPIO_Init+0x244>
 8002202:	2302      	movs	r3, #2
 8002204:	e002      	b.n	800220c <HAL_GPIO_Init+0x244>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_GPIO_Init+0x244>
 800220a:	2300      	movs	r3, #0
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	f002 0203 	and.w	r2, r2, #3
 8002212:	0092      	lsls	r2, r2, #2
 8002214:	4093      	lsls	r3, r2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800221c:	4937      	ldr	r1, [pc, #220]	; (80022fc <HAL_GPIO_Init+0x334>)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	3302      	adds	r3, #2
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800222a:	4b3b      	ldr	r3, [pc, #236]	; (8002318 <HAL_GPIO_Init+0x350>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800224e:	4a32      	ldr	r2, [pc, #200]	; (8002318 <HAL_GPIO_Init+0x350>)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002254:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_GPIO_Init+0x350>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	43db      	mvns	r3, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002278:	4a27      	ldr	r2, [pc, #156]	; (8002318 <HAL_GPIO_Init+0x350>)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <HAL_GPIO_Init+0x350>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	43db      	mvns	r3, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4013      	ands	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022a2:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <HAL_GPIO_Init+0x350>)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_GPIO_Init+0x350>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022cc:	4a12      	ldr	r2, [pc, #72]	; (8002318 <HAL_GPIO_Init+0x350>)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3301      	adds	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fa22 f303 	lsr.w	r3, r2, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f47f ae78 	bne.w	8001fd8 <HAL_GPIO_Init+0x10>
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40010000 	.word	0x40010000
 8002300:	48000400 	.word	0x48000400
 8002304:	48000800 	.word	0x48000800
 8002308:	48000c00 	.word	0x48000c00
 800230c:	48001000 	.word	0x48001000
 8002310:	48001400 	.word	0x48001400
 8002314:	48001800 	.word	0x48001800
 8002318:	40010400 	.word	0x40010400

0800231c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <HAL_PWREx_GetVoltageRange+0x18>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40007000 	.word	0x40007000

08002338 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002346:	d130      	bne.n	80023aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002348:	4b23      	ldr	r3, [pc, #140]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002354:	d038      	beq.n	80023c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800235e:	4a1e      	ldr	r2, [pc, #120]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002360:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002364:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2232      	movs	r2, #50	; 0x32
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	4a1b      	ldr	r2, [pc, #108]	; (80023e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0c9b      	lsrs	r3, r3, #18
 8002378:	3301      	adds	r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800237c:	e002      	b.n	8002384 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	3b01      	subs	r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002390:	d102      	bne.n	8002398 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f2      	bne.n	800237e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a4:	d110      	bne.n	80023c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e00f      	b.n	80023ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b6:	d007      	beq.n	80023c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023c0:	4a05      	ldr	r2, [pc, #20]	; (80023d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40007000 	.word	0x40007000
 80023dc:	20000020 	.word	0x20000020
 80023e0:	431bde83 	.word	0x431bde83

080023e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e3d4      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f6:	4ba1      	ldr	r3, [pc, #644]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002400:	4b9e      	ldr	r3, [pc, #632]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80e4 	beq.w	80025e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d007      	beq.n	800242e <HAL_RCC_OscConfig+0x4a>
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	2b0c      	cmp	r3, #12
 8002422:	f040 808b 	bne.w	800253c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b01      	cmp	r3, #1
 800242a:	f040 8087 	bne.w	800253c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800242e:	4b93      	ldr	r3, [pc, #588]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_RCC_OscConfig+0x62>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e3ac      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1a      	ldr	r2, [r3, #32]
 800244a:	4b8c      	ldr	r3, [pc, #560]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d004      	beq.n	8002460 <HAL_RCC_OscConfig+0x7c>
 8002456:	4b89      	ldr	r3, [pc, #548]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800245e:	e005      	b.n	800246c <HAL_RCC_OscConfig+0x88>
 8002460:	4b86      	ldr	r3, [pc, #536]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800246c:	4293      	cmp	r3, r2
 800246e:	d223      	bcs.n	80024b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fd5d 	bl	8002f34 <RCC_SetFlashLatencyFromMSIRange>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e38d      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002484:	4b7d      	ldr	r3, [pc, #500]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a7c      	ldr	r2, [pc, #496]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800248a:	f043 0308 	orr.w	r3, r3, #8
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b7a      	ldr	r3, [pc, #488]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	4977      	ldr	r1, [pc, #476]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024a2:	4b76      	ldr	r3, [pc, #472]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	4972      	ldr	r1, [pc, #456]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
 80024b6:	e025      	b.n	8002504 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024b8:	4b70      	ldr	r3, [pc, #448]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a6f      	ldr	r2, [pc, #444]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024be:	f043 0308 	orr.w	r3, r3, #8
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b6d      	ldr	r3, [pc, #436]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	496a      	ldr	r1, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024d6:	4b69      	ldr	r3, [pc, #420]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	4965      	ldr	r1, [pc, #404]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d109      	bne.n	8002504 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fd1d 	bl	8002f34 <RCC_SetFlashLatencyFromMSIRange>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e34d      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002504:	f000 fc36 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002508:	4602      	mov	r2, r0
 800250a:	4b5c      	ldr	r3, [pc, #368]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	091b      	lsrs	r3, r3, #4
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	495a      	ldr	r1, [pc, #360]	; (8002680 <HAL_RCC_OscConfig+0x29c>)
 8002516:	5ccb      	ldrb	r3, [r1, r3]
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	fa22 f303 	lsr.w	r3, r2, r3
 8002520:	4a58      	ldr	r2, [pc, #352]	; (8002684 <HAL_RCC_OscConfig+0x2a0>)
 8002522:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002524:	4b58      	ldr	r3, [pc, #352]	; (8002688 <HAL_RCC_OscConfig+0x2a4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe fcf9 	bl	8000f20 <HAL_InitTick>
 800252e:	4603      	mov	r3, r0
 8002530:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d052      	beq.n	80025de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	e331      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d032      	beq.n	80025aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002544:	4b4d      	ldr	r3, [pc, #308]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a4c      	ldr	r2, [pc, #304]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002550:	f7fe fe92 	bl	8001278 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002558:	f7fe fe8e 	bl	8001278 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e31a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800256a:	4b44      	ldr	r3, [pc, #272]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002576:	4b41      	ldr	r3, [pc, #260]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a40      	ldr	r2, [pc, #256]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800257c:	f043 0308 	orr.w	r3, r3, #8
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b3e      	ldr	r3, [pc, #248]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	493b      	ldr	r1, [pc, #236]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002594:	4b39      	ldr	r3, [pc, #228]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	4936      	ldr	r1, [pc, #216]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
 80025a8:	e01a      	b.n	80025e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025aa:	4b34      	ldr	r3, [pc, #208]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a33      	ldr	r2, [pc, #204]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80025b0:	f023 0301 	bic.w	r3, r3, #1
 80025b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025b6:	f7fe fe5f 	bl	8001278 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025be:	f7fe fe5b 	bl	8001278 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e2e7      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025d0:	4b2a      	ldr	r3, [pc, #168]	; (800267c <HAL_RCC_OscConfig+0x298>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <HAL_RCC_OscConfig+0x1da>
 80025dc:	e000      	b.n	80025e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d074      	beq.n	80026d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d005      	beq.n	80025fe <HAL_RCC_OscConfig+0x21a>
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	2b0c      	cmp	r3, #12
 80025f6:	d10e      	bne.n	8002616 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d10b      	bne.n	8002616 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fe:	4b1f      	ldr	r3, [pc, #124]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d064      	beq.n	80026d4 <HAL_RCC_OscConfig+0x2f0>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d160      	bne.n	80026d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e2c4      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261e:	d106      	bne.n	800262e <HAL_RCC_OscConfig+0x24a>
 8002620:	4b16      	ldr	r3, [pc, #88]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a15      	ldr	r2, [pc, #84]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	e01d      	b.n	800266a <HAL_RCC_OscConfig+0x286>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002636:	d10c      	bne.n	8002652 <HAL_RCC_OscConfig+0x26e>
 8002638:	4b10      	ldr	r3, [pc, #64]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0f      	ldr	r2, [pc, #60]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800263e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	4b0d      	ldr	r3, [pc, #52]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0c      	ldr	r2, [pc, #48]	; (800267c <HAL_RCC_OscConfig+0x298>)
 800264a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	e00b      	b.n	800266a <HAL_RCC_OscConfig+0x286>
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a09      	ldr	r2, [pc, #36]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a06      	ldr	r2, [pc, #24]	; (800267c <HAL_RCC_OscConfig+0x298>)
 8002664:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002668:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d01c      	beq.n	80026ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002672:	f7fe fe01 	bl	8001278 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002678:	e011      	b.n	800269e <HAL_RCC_OscConfig+0x2ba>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	0800806c 	.word	0x0800806c
 8002684:	20000020 	.word	0x20000020
 8002688:	20000024 	.word	0x20000024
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe fdf4 	bl	8001278 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e280      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800269e:	4baf      	ldr	r3, [pc, #700]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x2a8>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe fde4 	bl	8001278 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7fe fde0 	bl	8001278 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e26c      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026c6:	4ba5      	ldr	r3, [pc, #660]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x2d0>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d060      	beq.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_OscConfig+0x310>
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	d119      	bne.n	8002722 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d116      	bne.n	8002722 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f4:	4b99      	ldr	r3, [pc, #612]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_OscConfig+0x328>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e249      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270c:	4b93      	ldr	r3, [pc, #588]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	061b      	lsls	r3, r3, #24
 800271a:	4990      	ldr	r1, [pc, #576]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002720:	e040      	b.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d023      	beq.n	8002772 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800272a:	4b8c      	ldr	r3, [pc, #560]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a8b      	ldr	r2, [pc, #556]	; (800295c <HAL_RCC_OscConfig+0x578>)
 8002730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7fe fd9f 	bl	8001278 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273e:	f7fe fd9b 	bl	8001278 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e227      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002750:	4b82      	ldr	r3, [pc, #520]	; (800295c <HAL_RCC_OscConfig+0x578>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275c:	4b7f      	ldr	r3, [pc, #508]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	061b      	lsls	r3, r3, #24
 800276a:	497c      	ldr	r1, [pc, #496]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002772:	4b7a      	ldr	r3, [pc, #488]	; (800295c <HAL_RCC_OscConfig+0x578>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a79      	ldr	r2, [pc, #484]	; (800295c <HAL_RCC_OscConfig+0x578>)
 8002778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800277c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7fe fd7b 	bl	8001278 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002786:	f7fe fd77 	bl	8001278 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e203      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002798:	4b70      	ldr	r3, [pc, #448]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f0      	bne.n	8002786 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d03c      	beq.n	800282a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01c      	beq.n	80027f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b8:	4b68      	ldr	r3, [pc, #416]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80027ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027be:	4a67      	ldr	r2, [pc, #412]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c8:	f7fe fd56 	bl	8001278 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d0:	f7fe fd52 	bl	8001278 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e1de      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e2:	4b5e      	ldr	r3, [pc, #376]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80027e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ef      	beq.n	80027d0 <HAL_RCC_OscConfig+0x3ec>
 80027f0:	e01b      	b.n	800282a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f2:	4b5a      	ldr	r3, [pc, #360]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80027f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f8:	4a58      	ldr	r2, [pc, #352]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002802:	f7fe fd39 	bl	8001278 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280a:	f7fe fd35 	bl	8001278 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e1c1      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800281c:	4b4f      	ldr	r3, [pc, #316]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800281e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1ef      	bne.n	800280a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80a6 	beq.w	8002984 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002838:	2300      	movs	r3, #0
 800283a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800283c:	4b47      	ldr	r3, [pc, #284]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800283e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10d      	bne.n	8002864 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002848:	4b44      	ldr	r3, [pc, #272]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800284a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284c:	4a43      	ldr	r2, [pc, #268]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800284e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002852:	6593      	str	r3, [r2, #88]	; 0x58
 8002854:	4b41      	ldr	r3, [pc, #260]	; (800295c <HAL_RCC_OscConfig+0x578>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002860:	2301      	movs	r3, #1
 8002862:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002864:	4b3e      	ldr	r3, [pc, #248]	; (8002960 <HAL_RCC_OscConfig+0x57c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d118      	bne.n	80028a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002870:	4b3b      	ldr	r3, [pc, #236]	; (8002960 <HAL_RCC_OscConfig+0x57c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a3a      	ldr	r2, [pc, #232]	; (8002960 <HAL_RCC_OscConfig+0x57c>)
 8002876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287c:	f7fe fcfc 	bl	8001278 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002884:	f7fe fcf8 	bl	8001278 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e184      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002896:	4b32      	ldr	r3, [pc, #200]	; (8002960 <HAL_RCC_OscConfig+0x57c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d108      	bne.n	80028bc <HAL_RCC_OscConfig+0x4d8>
 80028aa:	4b2c      	ldr	r3, [pc, #176]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	4a2a      	ldr	r2, [pc, #168]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028ba:	e024      	b.n	8002906 <HAL_RCC_OscConfig+0x522>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b05      	cmp	r3, #5
 80028c2:	d110      	bne.n	80028e6 <HAL_RCC_OscConfig+0x502>
 80028c4:	4b25      	ldr	r3, [pc, #148]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	4a24      	ldr	r2, [pc, #144]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028d4:	4b21      	ldr	r3, [pc, #132]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	4a20      	ldr	r2, [pc, #128]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e4:	e00f      	b.n	8002906 <HAL_RCC_OscConfig+0x522>
 80028e6:	4b1d      	ldr	r3, [pc, #116]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ec:	4a1b      	ldr	r2, [pc, #108]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	4a17      	ldr	r2, [pc, #92]	; (800295c <HAL_RCC_OscConfig+0x578>)
 80028fe:	f023 0304 	bic.w	r3, r3, #4
 8002902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d016      	beq.n	800293c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290e:	f7fe fcb3 	bl	8001278 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002914:	e00a      	b.n	800292c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002916:	f7fe fcaf 	bl	8001278 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f241 3288 	movw	r2, #5000	; 0x1388
 8002924:	4293      	cmp	r3, r2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e139      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_RCC_OscConfig+0x578>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0ed      	beq.n	8002916 <HAL_RCC_OscConfig+0x532>
 800293a:	e01a      	b.n	8002972 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7fe fc9c 	bl	8001278 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002942:	e00f      	b.n	8002964 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002944:	f7fe fc98 	bl	8001278 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d906      	bls.n	8002964 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e122      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000
 8002960:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002964:	4b90      	ldr	r3, [pc, #576]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1e8      	bne.n	8002944 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002972:	7ffb      	ldrb	r3, [r7, #31]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d105      	bne.n	8002984 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002978:	4b8b      	ldr	r3, [pc, #556]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	4a8a      	ldr	r2, [pc, #552]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 800297e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002982:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8108 	beq.w	8002b9e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	2b02      	cmp	r3, #2
 8002994:	f040 80d0 	bne.w	8002b38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002998:	4b83      	ldr	r3, [pc, #524]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 0203 	and.w	r2, r3, #3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d130      	bne.n	8002a0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	3b01      	subs	r3, #1
 80029b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d127      	bne.n	8002a0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d11f      	bne.n	8002a0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029d8:	2a07      	cmp	r2, #7
 80029da:	bf14      	ite	ne
 80029dc:	2201      	movne	r2, #1
 80029de:	2200      	moveq	r2, #0
 80029e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d113      	bne.n	8002a0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f0:	085b      	lsrs	r3, r3, #1
 80029f2:	3b01      	subs	r3, #1
 80029f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d109      	bne.n	8002a0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	3b01      	subs	r3, #1
 8002a08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d06e      	beq.n	8002aec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b0c      	cmp	r3, #12
 8002a12:	d069      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a14:	4b64      	ldr	r3, [pc, #400]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d105      	bne.n	8002a2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a20:	4b61      	ldr	r3, [pc, #388]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0b7      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a30:	4b5d      	ldr	r3, [pc, #372]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a5c      	ldr	r2, [pc, #368]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a3c:	f7fe fc1c 	bl	8001278 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fe fc18 	bl	8001278 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e0a4      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a56:	4b54      	ldr	r3, [pc, #336]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a62:	4b51      	ldr	r3, [pc, #324]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	4b51      	ldr	r3, [pc, #324]	; (8002bac <HAL_RCC_OscConfig+0x7c8>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a72:	3a01      	subs	r2, #1
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	4311      	orrs	r1, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a7c:	0212      	lsls	r2, r2, #8
 8002a7e:	4311      	orrs	r1, r2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a84:	0852      	lsrs	r2, r2, #1
 8002a86:	3a01      	subs	r2, #1
 8002a88:	0552      	lsls	r2, r2, #21
 8002a8a:	4311      	orrs	r1, r2
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a90:	0852      	lsrs	r2, r2, #1
 8002a92:	3a01      	subs	r2, #1
 8002a94:	0652      	lsls	r2, r2, #25
 8002a96:	4311      	orrs	r1, r2
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a9c:	0912      	lsrs	r2, r2, #4
 8002a9e:	0452      	lsls	r2, r2, #17
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	4941      	ldr	r1, [pc, #260]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002aa8:	4b3f      	ldr	r3, [pc, #252]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a3e      	ldr	r2, [pc, #248]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab4:	4b3c      	ldr	r3, [pc, #240]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4a3b      	ldr	r2, [pc, #236]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002abe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ac0:	f7fe fbda 	bl	8001278 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7fe fbd6 	bl	8001278 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e062      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ada:	4b33      	ldr	r3, [pc, #204]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae6:	e05a      	b.n	8002b9e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e059      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aec:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d152      	bne.n	8002b9e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002af8:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a2a      	ldr	r2, [pc, #168]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b04:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b10:	f7fe fbb2 	bl	8001278 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe fbae 	bl	8001278 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e03a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x734>
 8002b36:	e032      	b.n	8002b9e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2b0c      	cmp	r3, #12
 8002b3c:	d02d      	beq.n	8002b9a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a19      	ldr	r2, [pc, #100]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002b44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b48:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b4a:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4a13      	ldr	r2, [pc, #76]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002b5c:	f023 0303 	bic.w	r3, r3, #3
 8002b60:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	4a10      	ldr	r2, [pc, #64]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002b68:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b70:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7fe fb81 	bl	8001278 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7fe fb7d 	bl	8001278 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e009      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_RCC_OscConfig+0x7c4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x796>
 8002b98:	e001      	b.n	8002b9e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3720      	adds	r7, #32
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	f99d808c 	.word	0xf99d808c

08002bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0c8      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b66      	ldr	r3, [pc, #408]	; (8002d60 <HAL_RCC_ClockConfig+0x1b0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d910      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <HAL_RCC_ClockConfig+0x1b0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 0207 	bic.w	r2, r3, #7
 8002bda:	4961      	ldr	r1, [pc, #388]	; (8002d60 <HAL_RCC_ClockConfig+0x1b0>)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b5f      	ldr	r3, [pc, #380]	; (8002d60 <HAL_RCC_ClockConfig+0x1b0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0b0      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d04c      	beq.n	8002c9a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d107      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c08:	4b56      	ldr	r3, [pc, #344]	; (8002d64 <HAL_RCC_ClockConfig+0x1b4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d121      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e09e      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c20:	4b50      	ldr	r3, [pc, #320]	; (8002d64 <HAL_RCC_ClockConfig+0x1b4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d115      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e092      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d107      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c38:	4b4a      	ldr	r3, [pc, #296]	; (8002d64 <HAL_RCC_ClockConfig+0x1b4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e086      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c48:	4b46      	ldr	r3, [pc, #280]	; (8002d64 <HAL_RCC_ClockConfig+0x1b4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e07e      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c58:	4b42      	ldr	r3, [pc, #264]	; (8002d64 <HAL_RCC_ClockConfig+0x1b4>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f023 0203 	bic.w	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	493f      	ldr	r1, [pc, #252]	; (8002d64 <HAL_RCC_ClockConfig+0x1b4>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c6a:	f7fe fb05 	bl	8001278 <HAL_GetTick>
 8002c6e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c72:	f7fe fb01 	bl	8001278 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e066      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c88:	4b36      	ldr	r3, [pc, #216]	; (8002d64 <HAL_RCC_ClockConfig+0x1b4>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 020c 	and.w	r2, r3, #12
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d1eb      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca6:	4b2f      	ldr	r3, [pc, #188]	; (8002d64 <HAL_RCC_ClockConfig+0x1b4>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	492c      	ldr	r1, [pc, #176]	; (8002d64 <HAL_RCC_ClockConfig+0x1b4>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <HAL_RCC_ClockConfig+0x1b0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d210      	bcs.n	8002ce8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <HAL_RCC_ClockConfig+0x1b0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 0207 	bic.w	r2, r3, #7
 8002cce:	4924      	ldr	r1, [pc, #144]	; (8002d60 <HAL_RCC_ClockConfig+0x1b0>)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <HAL_RCC_ClockConfig+0x1b0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e036      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <HAL_RCC_ClockConfig+0x1b4>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4918      	ldr	r1, [pc, #96]	; (8002d64 <HAL_RCC_ClockConfig+0x1b4>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d12:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <HAL_RCC_ClockConfig+0x1b4>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4910      	ldr	r1, [pc, #64]	; (8002d64 <HAL_RCC_ClockConfig+0x1b4>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d26:	f000 f825 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <HAL_RCC_ClockConfig+0x1b4>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	490c      	ldr	r1, [pc, #48]	; (8002d68 <HAL_RCC_ClockConfig+0x1b8>)
 8002d38:	5ccb      	ldrb	r3, [r1, r3]
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d42:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d46:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe f8e8 	bl	8000f20 <HAL_InitTick>
 8002d50:	4603      	mov	r3, r0
 8002d52:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d54:	7afb      	ldrb	r3, [r7, #11]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40022000 	.word	0x40022000
 8002d64:	40021000 	.word	0x40021000
 8002d68:	0800806c 	.word	0x0800806c
 8002d6c:	20000020 	.word	0x20000020
 8002d70:	20000024 	.word	0x20000024

08002d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b089      	sub	sp, #36	; 0x24
 8002d78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d82:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d8c:	4b3b      	ldr	r3, [pc, #236]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x34>
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	d121      	bne.n	8002de6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d11e      	bne.n	8002de6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002da8:	4b34      	ldr	r3, [pc, #208]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d107      	bne.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002db4:	4b31      	ldr	r3, [pc, #196]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dba:	0a1b      	lsrs	r3, r3, #8
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	e005      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dc4:	4b2d      	ldr	r3, [pc, #180]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dd0:	4a2b      	ldr	r2, [pc, #172]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10d      	bne.n	8002dfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d102      	bne.n	8002df2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dec:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	e004      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002df8:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	2b0c      	cmp	r3, #12
 8002e00:	d134      	bne.n	8002e6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e02:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d003      	beq.n	8002e1a <HAL_RCC_GetSysClockFreq+0xa6>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d003      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0xac>
 8002e18:	e005      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e1c:	617b      	str	r3, [r7, #20]
      break;
 8002e1e:	e005      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e22:	617b      	str	r3, [r7, #20]
      break;
 8002e24:	e002      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	617b      	str	r3, [r7, #20]
      break;
 8002e2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	3301      	adds	r3, #1
 8002e38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	fb02 f203 	mul.w	r2, r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	0e5b      	lsrs	r3, r3, #25
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e6c:	69bb      	ldr	r3, [r7, #24]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	; 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	08008084 	.word	0x08008084
 8002e84:	00f42400 	.word	0x00f42400
 8002e88:	007a1200 	.word	0x007a1200

08002e8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000020 	.word	0x20000020

08002ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ea8:	f7ff fff0 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	0adb      	lsrs	r3, r3, #11
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	4904      	ldr	r1, [pc, #16]	; (8002ecc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eba:	5ccb      	ldrb	r3, [r1, r3]
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	0800807c 	.word	0x0800807c

08002ed0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	220f      	movs	r2, #15
 8002ede:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002ee0:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_RCC_GetClockConfig+0x5c>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0203 	and.w	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <HAL_RCC_GetClockConfig+0x5c>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <HAL_RCC_GetClockConfig+0x5c>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_RCC_GetClockConfig+0x5c>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	08db      	lsrs	r3, r3, #3
 8002f0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002f12:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <HAL_RCC_GetClockConfig+0x60>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0207 	and.w	r2, r3, #7
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	601a      	str	r2, [r3, #0]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40022000 	.word	0x40022000

08002f34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f40:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f4c:	f7ff f9e6 	bl	800231c <HAL_PWREx_GetVoltageRange>
 8002f50:	6178      	str	r0, [r7, #20]
 8002f52:	e014      	b.n	8002f7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f54:	4b25      	ldr	r3, [pc, #148]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	4a24      	ldr	r2, [pc, #144]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f60:	4b22      	ldr	r3, [pc, #136]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f6c:	f7ff f9d6 	bl	800231c <HAL_PWREx_GetVoltageRange>
 8002f70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f72:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	4a1d      	ldr	r2, [pc, #116]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f84:	d10b      	bne.n	8002f9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b80      	cmp	r3, #128	; 0x80
 8002f8a:	d919      	bls.n	8002fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2ba0      	cmp	r3, #160	; 0xa0
 8002f90:	d902      	bls.n	8002f98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f92:	2302      	movs	r3, #2
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	e013      	b.n	8002fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f98:	2301      	movs	r3, #1
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	e010      	b.n	8002fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b80      	cmp	r3, #128	; 0x80
 8002fa2:	d902      	bls.n	8002faa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	e00a      	b.n	8002fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b80      	cmp	r3, #128	; 0x80
 8002fae:	d102      	bne.n	8002fb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	e004      	b.n	8002fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b70      	cmp	r3, #112	; 0x70
 8002fba:	d101      	bne.n	8002fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 0207 	bic.w	r2, r3, #7
 8002fc8:	4909      	ldr	r1, [pc, #36]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d001      	beq.n	8002fe2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40022000 	.word	0x40022000

08002ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003000:	2300      	movs	r3, #0
 8003002:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300c:	2b00      	cmp	r3, #0
 800300e:	d041      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003014:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003018:	d02a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800301a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800301e:	d824      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003020:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003024:	d008      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003026:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800302a:	d81e      	bhi.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003034:	d010      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003036:	e018      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003038:	4b86      	ldr	r3, [pc, #536]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a85      	ldr	r2, [pc, #532]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003042:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003044:	e015      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3304      	adds	r3, #4
 800304a:	2100      	movs	r1, #0
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fabb 	bl	80035c8 <RCCEx_PLLSAI1_Config>
 8003052:	4603      	mov	r3, r0
 8003054:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003056:	e00c      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3320      	adds	r3, #32
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fba6 	bl	80037b0 <RCCEx_PLLSAI2_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003068:	e003      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	74fb      	strb	r3, [r7, #19]
      break;
 800306e:	e000      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003072:	7cfb      	ldrb	r3, [r7, #19]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10b      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003078:	4b76      	ldr	r3, [pc, #472]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003086:	4973      	ldr	r1, [pc, #460]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800308e:	e001      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d041      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030a8:	d02a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030ae:	d824      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030b4:	d008      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030ba:	d81e      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c4:	d010      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030c6:	e018      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030c8:	4b62      	ldr	r3, [pc, #392]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4a61      	ldr	r2, [pc, #388]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030d4:	e015      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3304      	adds	r3, #4
 80030da:	2100      	movs	r1, #0
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fa73 	bl	80035c8 <RCCEx_PLLSAI1_Config>
 80030e2:	4603      	mov	r3, r0
 80030e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030e6:	e00c      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3320      	adds	r3, #32
 80030ec:	2100      	movs	r1, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fb5e 	bl	80037b0 <RCCEx_PLLSAI2_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030f8:	e003      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	74fb      	strb	r3, [r7, #19]
      break;
 80030fe:	e000      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003102:	7cfb      	ldrb	r3, [r7, #19]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10b      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003108:	4b52      	ldr	r3, [pc, #328]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003116:	494f      	ldr	r1, [pc, #316]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800311e:	e001      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003120:	7cfb      	ldrb	r3, [r7, #19]
 8003122:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 80a0 	beq.w	8003272 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003132:	2300      	movs	r3, #0
 8003134:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003136:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003146:	2300      	movs	r3, #0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00d      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314c:	4b41      	ldr	r3, [pc, #260]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003150:	4a40      	ldr	r2, [pc, #256]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003156:	6593      	str	r3, [r2, #88]	; 0x58
 8003158:	4b3e      	ldr	r3, [pc, #248]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003164:	2301      	movs	r3, #1
 8003166:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003168:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a3a      	ldr	r2, [pc, #232]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800316e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003172:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003174:	f7fe f880 	bl	8001278 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800317a:	e009      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317c:	f7fe f87c 	bl	8001278 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d902      	bls.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	74fb      	strb	r3, [r7, #19]
        break;
 800318e:	e005      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003190:	4b31      	ldr	r3, [pc, #196]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0ef      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800319c:	7cfb      	ldrb	r3, [r7, #19]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d15c      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031a2:	4b2c      	ldr	r3, [pc, #176]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d01f      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d019      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031c0:	4b24      	ldr	r3, [pc, #144]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031cc:	4b21      	ldr	r3, [pc, #132]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	4a20      	ldr	r2, [pc, #128]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031dc:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031ec:	4a19      	ldr	r2, [pc, #100]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7fe f83b 	bl	8001278 <HAL_GetTick>
 8003202:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003204:	e00b      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fe f837 	bl	8001278 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	; 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d902      	bls.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	74fb      	strb	r3, [r7, #19]
            break;
 800321c:	e006      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800321e:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0ec      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10c      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003242:	4904      	ldr	r1, [pc, #16]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800324a:	e009      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800324c:	7cfb      	ldrb	r3, [r7, #19]
 800324e:	74bb      	strb	r3, [r7, #18]
 8003250:	e006      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003252:	bf00      	nop
 8003254:	40021000 	.word	0x40021000
 8003258:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325c:	7cfb      	ldrb	r3, [r7, #19]
 800325e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003260:	7c7b      	ldrb	r3, [r7, #17]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d105      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003266:	4b9e      	ldr	r3, [pc, #632]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326a:	4a9d      	ldr	r2, [pc, #628]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003270:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800327e:	4b98      	ldr	r3, [pc, #608]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003284:	f023 0203 	bic.w	r2, r3, #3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	4994      	ldr	r1, [pc, #592]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032a0:	4b8f      	ldr	r3, [pc, #572]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a6:	f023 020c 	bic.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ae:	498c      	ldr	r1, [pc, #560]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032c2:	4b87      	ldr	r3, [pc, #540]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	4983      	ldr	r1, [pc, #524]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032e4:	4b7e      	ldr	r3, [pc, #504]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	497b      	ldr	r1, [pc, #492]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003306:	4b76      	ldr	r3, [pc, #472]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003314:	4972      	ldr	r1, [pc, #456]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003328:	4b6d      	ldr	r3, [pc, #436]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003336:	496a      	ldr	r1, [pc, #424]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800334a:	4b65      	ldr	r3, [pc, #404]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003358:	4961      	ldr	r1, [pc, #388]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800336c:	4b5c      	ldr	r3, [pc, #368]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003372:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337a:	4959      	ldr	r1, [pc, #356]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800338e:	4b54      	ldr	r3, [pc, #336]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003394:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339c:	4950      	ldr	r1, [pc, #320]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033b0:	4b4b      	ldr	r3, [pc, #300]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033be:	4948      	ldr	r1, [pc, #288]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033d2:	4b43      	ldr	r3, [pc, #268]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	493f      	ldr	r1, [pc, #252]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d028      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033f4:	4b3a      	ldr	r3, [pc, #232]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003402:	4937      	ldr	r1, [pc, #220]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800340e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003412:	d106      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003414:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4a31      	ldr	r2, [pc, #196]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800341e:	60d3      	str	r3, [r2, #12]
 8003420:	e011      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003426:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800342a:	d10c      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3304      	adds	r3, #4
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f8c8 	bl	80035c8 <RCCEx_PLLSAI1_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003442:	7cfb      	ldrb	r3, [r7, #19]
 8003444:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d028      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003452:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	491f      	ldr	r1, [pc, #124]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003470:	d106      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003472:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	4a1a      	ldr	r2, [pc, #104]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800347c:	60d3      	str	r3, [r2, #12]
 800347e:	e011      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003488:	d10c      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3304      	adds	r3, #4
 800348e:	2101      	movs	r1, #1
 8003490:	4618      	mov	r0, r3
 8003492:	f000 f899 	bl	80035c8 <RCCEx_PLLSAI1_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800349a:	7cfb      	ldrb	r3, [r7, #19]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034a0:	7cfb      	ldrb	r3, [r7, #19]
 80034a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d02b      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034be:	4908      	ldr	r1, [pc, #32]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ce:	d109      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d0:	4b03      	ldr	r3, [pc, #12]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4a02      	ldr	r2, [pc, #8]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034da:	60d3      	str	r3, [r2, #12]
 80034dc:	e014      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034ec:	d10c      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3304      	adds	r3, #4
 80034f2:	2101      	movs	r1, #1
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 f867 	bl	80035c8 <RCCEx_PLLSAI1_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034fe:	7cfb      	ldrb	r3, [r7, #19]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d02f      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003514:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003522:	4928      	ldr	r1, [pc, #160]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800352e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003532:	d10d      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3304      	adds	r3, #4
 8003538:	2102      	movs	r1, #2
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f844 	bl	80035c8 <RCCEx_PLLSAI1_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003544:	7cfb      	ldrb	r3, [r7, #19]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d014      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800354a:	7cfb      	ldrb	r3, [r7, #19]
 800354c:	74bb      	strb	r3, [r7, #18]
 800354e:	e011      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003558:	d10c      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3320      	adds	r3, #32
 800355e:	2102      	movs	r1, #2
 8003560:	4618      	mov	r0, r3
 8003562:	f000 f925 	bl	80037b0 <RCCEx_PLLSAI2_Config>
 8003566:	4603      	mov	r3, r0
 8003568:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800356a:	7cfb      	ldrb	r3, [r7, #19]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003570:	7cfb      	ldrb	r3, [r7, #19]
 8003572:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003580:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800358e:	490d      	ldr	r1, [pc, #52]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003590:	4313      	orrs	r3, r2
 8003592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00b      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035a2:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035b2:	4904      	ldr	r1, [pc, #16]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000

080035c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035d6:	4b75      	ldr	r3, [pc, #468]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d018      	beq.n	8003614 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035e2:	4b72      	ldr	r3, [pc, #456]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0203 	and.w	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d10d      	bne.n	800360e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
       ||
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d009      	beq.n	800360e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035fa:	4b6c      	ldr	r3, [pc, #432]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	091b      	lsrs	r3, r3, #4
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
       ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d047      	beq.n	800369e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
 8003612:	e044      	b.n	800369e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b03      	cmp	r3, #3
 800361a:	d018      	beq.n	800364e <RCCEx_PLLSAI1_Config+0x86>
 800361c:	2b03      	cmp	r3, #3
 800361e:	d825      	bhi.n	800366c <RCCEx_PLLSAI1_Config+0xa4>
 8003620:	2b01      	cmp	r3, #1
 8003622:	d002      	beq.n	800362a <RCCEx_PLLSAI1_Config+0x62>
 8003624:	2b02      	cmp	r3, #2
 8003626:	d009      	beq.n	800363c <RCCEx_PLLSAI1_Config+0x74>
 8003628:	e020      	b.n	800366c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800362a:	4b60      	ldr	r3, [pc, #384]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d11d      	bne.n	8003672 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800363a:	e01a      	b.n	8003672 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800363c:	4b5b      	ldr	r3, [pc, #364]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003644:	2b00      	cmp	r3, #0
 8003646:	d116      	bne.n	8003676 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800364c:	e013      	b.n	8003676 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800364e:	4b57      	ldr	r3, [pc, #348]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800365a:	4b54      	ldr	r3, [pc, #336]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d109      	bne.n	800367a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800366a:	e006      	b.n	800367a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
      break;
 8003670:	e004      	b.n	800367c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003672:	bf00      	nop
 8003674:	e002      	b.n	800367c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003676:	bf00      	nop
 8003678:	e000      	b.n	800367c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800367a:	bf00      	nop
    }

    if(status == HAL_OK)
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10d      	bne.n	800369e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003682:	4b4a      	ldr	r3, [pc, #296]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6819      	ldr	r1, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	3b01      	subs	r3, #1
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	430b      	orrs	r3, r1
 8003698:	4944      	ldr	r1, [pc, #272]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d17d      	bne.n	80037a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036a4:	4b41      	ldr	r3, [pc, #260]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a40      	ldr	r2, [pc, #256]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80036aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b0:	f7fd fde2 	bl	8001278 <HAL_GetTick>
 80036b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036b6:	e009      	b.n	80036cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036b8:	f7fd fdde 	bl	8001278 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d902      	bls.n	80036cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	73fb      	strb	r3, [r7, #15]
        break;
 80036ca:	e005      	b.n	80036d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036cc:	4b37      	ldr	r3, [pc, #220]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1ef      	bne.n	80036b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d160      	bne.n	80037a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d111      	bne.n	8003708 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036e4:	4b31      	ldr	r3, [pc, #196]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6892      	ldr	r2, [r2, #8]
 80036f4:	0211      	lsls	r1, r2, #8
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68d2      	ldr	r2, [r2, #12]
 80036fa:	0912      	lsrs	r2, r2, #4
 80036fc:	0452      	lsls	r2, r2, #17
 80036fe:	430a      	orrs	r2, r1
 8003700:	492a      	ldr	r1, [pc, #168]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003702:	4313      	orrs	r3, r2
 8003704:	610b      	str	r3, [r1, #16]
 8003706:	e027      	b.n	8003758 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d112      	bne.n	8003734 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800370e:	4b27      	ldr	r3, [pc, #156]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003716:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6892      	ldr	r2, [r2, #8]
 800371e:	0211      	lsls	r1, r2, #8
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6912      	ldr	r2, [r2, #16]
 8003724:	0852      	lsrs	r2, r2, #1
 8003726:	3a01      	subs	r2, #1
 8003728:	0552      	lsls	r2, r2, #21
 800372a:	430a      	orrs	r2, r1
 800372c:	491f      	ldr	r1, [pc, #124]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800372e:	4313      	orrs	r3, r2
 8003730:	610b      	str	r3, [r1, #16]
 8003732:	e011      	b.n	8003758 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003734:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800373c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6892      	ldr	r2, [r2, #8]
 8003744:	0211      	lsls	r1, r2, #8
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6952      	ldr	r2, [r2, #20]
 800374a:	0852      	lsrs	r2, r2, #1
 800374c:	3a01      	subs	r2, #1
 800374e:	0652      	lsls	r2, r2, #25
 8003750:	430a      	orrs	r2, r1
 8003752:	4916      	ldr	r1, [pc, #88]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003754:	4313      	orrs	r3, r2
 8003756:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003758:	4b14      	ldr	r3, [pc, #80]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a13      	ldr	r2, [pc, #76]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800375e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003762:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003764:	f7fd fd88 	bl	8001278 <HAL_GetTick>
 8003768:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800376a:	e009      	b.n	8003780 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800376c:	f7fd fd84 	bl	8001278 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d902      	bls.n	8003780 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	73fb      	strb	r3, [r7, #15]
          break;
 800377e:	e005      	b.n	800378c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ef      	beq.n	800376c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	4904      	ldr	r1, [pc, #16]	; (80037ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800379c:	4313      	orrs	r3, r2
 800379e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000

080037b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037be:	4b6a      	ldr	r3, [pc, #424]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d018      	beq.n	80037fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037ca:	4b67      	ldr	r3, [pc, #412]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0203 	and.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d10d      	bne.n	80037f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
       ||
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037e2:	4b61      	ldr	r3, [pc, #388]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
       ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d047      	beq.n	8003886 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	73fb      	strb	r3, [r7, #15]
 80037fa:	e044      	b.n	8003886 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b03      	cmp	r3, #3
 8003802:	d018      	beq.n	8003836 <RCCEx_PLLSAI2_Config+0x86>
 8003804:	2b03      	cmp	r3, #3
 8003806:	d825      	bhi.n	8003854 <RCCEx_PLLSAI2_Config+0xa4>
 8003808:	2b01      	cmp	r3, #1
 800380a:	d002      	beq.n	8003812 <RCCEx_PLLSAI2_Config+0x62>
 800380c:	2b02      	cmp	r3, #2
 800380e:	d009      	beq.n	8003824 <RCCEx_PLLSAI2_Config+0x74>
 8003810:	e020      	b.n	8003854 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003812:	4b55      	ldr	r3, [pc, #340]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d11d      	bne.n	800385a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003822:	e01a      	b.n	800385a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003824:	4b50      	ldr	r3, [pc, #320]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d116      	bne.n	800385e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003834:	e013      	b.n	800385e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003836:	4b4c      	ldr	r3, [pc, #304]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10f      	bne.n	8003862 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003842:	4b49      	ldr	r3, [pc, #292]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003852:	e006      	b.n	8003862 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      break;
 8003858:	e004      	b.n	8003864 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800385a:	bf00      	nop
 800385c:	e002      	b.n	8003864 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800385e:	bf00      	nop
 8003860:	e000      	b.n	8003864 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003862:	bf00      	nop
    }

    if(status == HAL_OK)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800386a:	4b3f      	ldr	r3, [pc, #252]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6819      	ldr	r1, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	3b01      	subs	r3, #1
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	430b      	orrs	r3, r1
 8003880:	4939      	ldr	r1, [pc, #228]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003882:	4313      	orrs	r3, r2
 8003884:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d167      	bne.n	800395c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800388c:	4b36      	ldr	r3, [pc, #216]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a35      	ldr	r2, [pc, #212]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003898:	f7fd fcee 	bl	8001278 <HAL_GetTick>
 800389c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800389e:	e009      	b.n	80038b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038a0:	f7fd fcea 	bl	8001278 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d902      	bls.n	80038b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	73fb      	strb	r3, [r7, #15]
        break;
 80038b2:	e005      	b.n	80038c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038b4:	4b2c      	ldr	r3, [pc, #176]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1ef      	bne.n	80038a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d14a      	bne.n	800395c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d111      	bne.n	80038f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038cc:	4b26      	ldr	r3, [pc, #152]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6892      	ldr	r2, [r2, #8]
 80038dc:	0211      	lsls	r1, r2, #8
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68d2      	ldr	r2, [r2, #12]
 80038e2:	0912      	lsrs	r2, r2, #4
 80038e4:	0452      	lsls	r2, r2, #17
 80038e6:	430a      	orrs	r2, r1
 80038e8:	491f      	ldr	r1, [pc, #124]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	614b      	str	r3, [r1, #20]
 80038ee:	e011      	b.n	8003914 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038f0:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6892      	ldr	r2, [r2, #8]
 8003900:	0211      	lsls	r1, r2, #8
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6912      	ldr	r2, [r2, #16]
 8003906:	0852      	lsrs	r2, r2, #1
 8003908:	3a01      	subs	r2, #1
 800390a:	0652      	lsls	r2, r2, #25
 800390c:	430a      	orrs	r2, r1
 800390e:	4916      	ldr	r1, [pc, #88]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003910:	4313      	orrs	r3, r2
 8003912:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003914:	4b14      	ldr	r3, [pc, #80]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a13      	ldr	r2, [pc, #76]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003920:	f7fd fcaa 	bl	8001278 <HAL_GetTick>
 8003924:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003926:	e009      	b.n	800393c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003928:	f7fd fca6 	bl	8001278 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d902      	bls.n	800393c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	73fb      	strb	r3, [r7, #15]
          break;
 800393a:	e005      	b.n	8003948 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0ef      	beq.n	8003928 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	4904      	ldr	r1, [pc, #16]	; (8003968 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003958:	4313      	orrs	r3, r2
 800395a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800395c:	7bfb      	ldrb	r3, [r7, #15]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000

0800396c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e049      	b.n	8003a12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f841 	bl	8003a1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	4610      	mov	r0, r2
 80039ac:	f000 f9f8 	bl	8003da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d001      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e04f      	b.n	8003ae8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a23      	ldr	r2, [pc, #140]	; (8003af4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d01d      	beq.n	8003aa6 <HAL_TIM_Base_Start_IT+0x76>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a72:	d018      	beq.n	8003aa6 <HAL_TIM_Base_Start_IT+0x76>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1f      	ldr	r2, [pc, #124]	; (8003af8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <HAL_TIM_Base_Start_IT+0x76>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1e      	ldr	r2, [pc, #120]	; (8003afc <HAL_TIM_Base_Start_IT+0xcc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00e      	beq.n	8003aa6 <HAL_TIM_Base_Start_IT+0x76>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1c      	ldr	r2, [pc, #112]	; (8003b00 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d009      	beq.n	8003aa6 <HAL_TIM_Base_Start_IT+0x76>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1b      	ldr	r2, [pc, #108]	; (8003b04 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <HAL_TIM_Base_Start_IT+0x76>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a19      	ldr	r2, [pc, #100]	; (8003b08 <HAL_TIM_Base_Start_IT+0xd8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d115      	bne.n	8003ad2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	4b17      	ldr	r3, [pc, #92]	; (8003b0c <HAL_TIM_Base_Start_IT+0xdc>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b06      	cmp	r3, #6
 8003ab6:	d015      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0xb4>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003abe:	d011      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad0:	e008      	b.n	8003ae4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e000      	b.n	8003ae6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800
 8003b00:	40000c00 	.word	0x40000c00
 8003b04:	40013400 	.word	0x40013400
 8003b08:	40014000 	.word	0x40014000
 8003b0c:	00010007 	.word	0x00010007

08003b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d122      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d11b      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0202 	mvn.w	r2, #2
 8003b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f905 	bl	8003d62 <HAL_TIM_IC_CaptureCallback>
 8003b58:	e005      	b.n	8003b66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f8f7 	bl	8003d4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f908 	bl	8003d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d122      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d11b      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0204 	mvn.w	r2, #4
 8003b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8db 	bl	8003d62 <HAL_TIM_IC_CaptureCallback>
 8003bac:	e005      	b.n	8003bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f8cd 	bl	8003d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f8de 	bl	8003d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d122      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d11b      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0208 	mvn.w	r2, #8
 8003be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2204      	movs	r2, #4
 8003bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8b1 	bl	8003d62 <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f8a3 	bl	8003d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f8b4 	bl	8003d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	2b10      	cmp	r3, #16
 8003c20:	d122      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d11b      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0210 	mvn.w	r2, #16
 8003c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f887 	bl	8003d62 <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f879 	bl	8003d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f88a 	bl	8003d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d10e      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d107      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0201 	mvn.w	r2, #1
 8003c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fc fe9e 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9e:	2b80      	cmp	r3, #128	; 0x80
 8003ca0:	d10e      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cac:	2b80      	cmp	r3, #128	; 0x80
 8003cae:	d107      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f914 	bl	8003ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cce:	d10e      	bne.n	8003cee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	2b80      	cmp	r3, #128	; 0x80
 8003cdc:	d107      	bne.n	8003cee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f907 	bl	8003efc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b40      	cmp	r3, #64	; 0x40
 8003cfa:	d10e      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d06:	2b40      	cmp	r3, #64	; 0x40
 8003d08:	d107      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f838 	bl	8003d8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d10e      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d107      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f06f 0220 	mvn.w	r2, #32
 8003d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f8c7 	bl	8003ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a40      	ldr	r2, [pc, #256]	; (8003eb4 <TIM_Base_SetConfig+0x114>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d013      	beq.n	8003de0 <TIM_Base_SetConfig+0x40>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dbe:	d00f      	beq.n	8003de0 <TIM_Base_SetConfig+0x40>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a3d      	ldr	r2, [pc, #244]	; (8003eb8 <TIM_Base_SetConfig+0x118>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00b      	beq.n	8003de0 <TIM_Base_SetConfig+0x40>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a3c      	ldr	r2, [pc, #240]	; (8003ebc <TIM_Base_SetConfig+0x11c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d007      	beq.n	8003de0 <TIM_Base_SetConfig+0x40>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a3b      	ldr	r2, [pc, #236]	; (8003ec0 <TIM_Base_SetConfig+0x120>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d003      	beq.n	8003de0 <TIM_Base_SetConfig+0x40>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a3a      	ldr	r2, [pc, #232]	; (8003ec4 <TIM_Base_SetConfig+0x124>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d108      	bne.n	8003df2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a2f      	ldr	r2, [pc, #188]	; (8003eb4 <TIM_Base_SetConfig+0x114>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d01f      	beq.n	8003e3a <TIM_Base_SetConfig+0x9a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e00:	d01b      	beq.n	8003e3a <TIM_Base_SetConfig+0x9a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a2c      	ldr	r2, [pc, #176]	; (8003eb8 <TIM_Base_SetConfig+0x118>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d017      	beq.n	8003e3a <TIM_Base_SetConfig+0x9a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a2b      	ldr	r2, [pc, #172]	; (8003ebc <TIM_Base_SetConfig+0x11c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <TIM_Base_SetConfig+0x9a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a2a      	ldr	r2, [pc, #168]	; (8003ec0 <TIM_Base_SetConfig+0x120>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00f      	beq.n	8003e3a <TIM_Base_SetConfig+0x9a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a29      	ldr	r2, [pc, #164]	; (8003ec4 <TIM_Base_SetConfig+0x124>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00b      	beq.n	8003e3a <TIM_Base_SetConfig+0x9a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a28      	ldr	r2, [pc, #160]	; (8003ec8 <TIM_Base_SetConfig+0x128>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d007      	beq.n	8003e3a <TIM_Base_SetConfig+0x9a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a27      	ldr	r2, [pc, #156]	; (8003ecc <TIM_Base_SetConfig+0x12c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <TIM_Base_SetConfig+0x9a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <TIM_Base_SetConfig+0x130>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d108      	bne.n	8003e4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a10      	ldr	r2, [pc, #64]	; (8003eb4 <TIM_Base_SetConfig+0x114>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00f      	beq.n	8003e98 <TIM_Base_SetConfig+0xf8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a12      	ldr	r2, [pc, #72]	; (8003ec4 <TIM_Base_SetConfig+0x124>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00b      	beq.n	8003e98 <TIM_Base_SetConfig+0xf8>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a11      	ldr	r2, [pc, #68]	; (8003ec8 <TIM_Base_SetConfig+0x128>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d007      	beq.n	8003e98 <TIM_Base_SetConfig+0xf8>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a10      	ldr	r2, [pc, #64]	; (8003ecc <TIM_Base_SetConfig+0x12c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_Base_SetConfig+0xf8>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a0f      	ldr	r2, [pc, #60]	; (8003ed0 <TIM_Base_SetConfig+0x130>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d103      	bne.n	8003ea0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	615a      	str	r2, [r3, #20]
}
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40000400 	.word	0x40000400
 8003ebc:	40000800 	.word	0x40000800
 8003ec0:	40000c00 	.word	0x40000c00
 8003ec4:	40013400 	.word	0x40013400
 8003ec8:	40014000 	.word	0x40014000
 8003ecc:	40014400 	.word	0x40014400
 8003ed0:	40014800 	.word	0x40014800

08003ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <__NVIC_SetPriority>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	6039      	str	r1, [r7, #0]
 8003f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	db0a      	blt.n	8003f3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	490c      	ldr	r1, [pc, #48]	; (8003f5c <__NVIC_SetPriority+0x4c>)
 8003f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2e:	0112      	lsls	r2, r2, #4
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	440b      	add	r3, r1
 8003f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f38:	e00a      	b.n	8003f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	4908      	ldr	r1, [pc, #32]	; (8003f60 <__NVIC_SetPriority+0x50>)
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	3b04      	subs	r3, #4
 8003f48:	0112      	lsls	r2, r2, #4
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	761a      	strb	r2, [r3, #24]
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	e000e100 	.word	0xe000e100
 8003f60:	e000ed00 	.word	0xe000ed00

08003f64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <SysTick_Handler+0x1c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003f6c:	f001 fe34 	bl	8005bd8 <xTaskGetSchedulerState>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d001      	beq.n	8003f7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003f76:	f002 fc1f 	bl	80067b8 <xPortSysTickHandler>
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	e000e010 	.word	0xe000e010

08003f84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003f88:	2100      	movs	r1, #0
 8003f8a:	f06f 0004 	mvn.w	r0, #4
 8003f8e:	f7ff ffbf 	bl	8003f10 <__NVIC_SetPriority>
#endif
}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f9e:	f3ef 8305 	mrs	r3, IPSR
 8003fa2:	603b      	str	r3, [r7, #0]
  return(result);
 8003fa4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003faa:	f06f 0305 	mvn.w	r3, #5
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	e00c      	b.n	8003fcc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003fb2:	4b0a      	ldr	r3, [pc, #40]	; (8003fdc <osKernelInitialize+0x44>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d105      	bne.n	8003fc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003fba:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <osKernelInitialize+0x44>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	607b      	str	r3, [r7, #4]
 8003fc4:	e002      	b.n	8003fcc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003fcc:	687b      	ldr	r3, [r7, #4]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20000148 	.word	0x20000148

08003fe0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fe6:	f3ef 8305 	mrs	r3, IPSR
 8003fea:	603b      	str	r3, [r7, #0]
  return(result);
 8003fec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <osKernelStart+0x1a>
    stat = osErrorISR;
 8003ff2:	f06f 0305 	mvn.w	r3, #5
 8003ff6:	607b      	str	r3, [r7, #4]
 8003ff8:	e010      	b.n	800401c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <osKernelStart+0x48>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d109      	bne.n	8004016 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004002:	f7ff ffbf 	bl	8003f84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <osKernelStart+0x48>)
 8004008:	2202      	movs	r2, #2
 800400a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800400c:	f001 f988 	bl	8005320 <vTaskStartScheduler>
      stat = osOK;
 8004010:	2300      	movs	r3, #0
 8004012:	607b      	str	r3, [r7, #4]
 8004014:	e002      	b.n	800401c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004016:	f04f 33ff 	mov.w	r3, #4294967295
 800401a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800401c:	687b      	ldr	r3, [r7, #4]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000148 	.word	0x20000148

0800402c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800402c:	b580      	push	{r7, lr}
 800402e:	b08e      	sub	sp, #56	; 0x38
 8004030:	af04      	add	r7, sp, #16
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004038:	2300      	movs	r3, #0
 800403a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800403c:	f3ef 8305 	mrs	r3, IPSR
 8004040:	617b      	str	r3, [r7, #20]
  return(result);
 8004042:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004044:	2b00      	cmp	r3, #0
 8004046:	d17e      	bne.n	8004146 <osThreadNew+0x11a>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d07b      	beq.n	8004146 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004052:	2318      	movs	r3, #24
 8004054:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004056:	2300      	movs	r3, #0
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800405a:	f04f 33ff 	mov.w	r3, #4294967295
 800405e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d045      	beq.n	80040f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <osThreadNew+0x48>
        name = attr->name;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <osThreadNew+0x6e>
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b38      	cmp	r3, #56	; 0x38
 800408c:	d805      	bhi.n	800409a <osThreadNew+0x6e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <osThreadNew+0x72>
        return (NULL);
 800409a:	2300      	movs	r3, #0
 800409c:	e054      	b.n	8004148 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	089b      	lsrs	r3, r3, #2
 80040ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00e      	beq.n	80040d4 <osThreadNew+0xa8>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	2bbb      	cmp	r3, #187	; 0xbb
 80040bc:	d90a      	bls.n	80040d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d006      	beq.n	80040d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <osThreadNew+0xa8>
        mem = 1;
 80040ce:	2301      	movs	r3, #1
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	e010      	b.n	80040f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10c      	bne.n	80040f6 <osThreadNew+0xca>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d108      	bne.n	80040f6 <osThreadNew+0xca>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d104      	bne.n	80040f6 <osThreadNew+0xca>
          mem = 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	e001      	b.n	80040f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d110      	bne.n	800411e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004104:	9202      	str	r2, [sp, #8]
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	6a3a      	ldr	r2, [r7, #32]
 8004110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 ff18 	bl	8004f48 <xTaskCreateStatic>
 8004118:	4603      	mov	r3, r0
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	e013      	b.n	8004146 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d110      	bne.n	8004146 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	b29a      	uxth	r2, r3
 8004128:	f107 0310 	add.w	r3, r7, #16
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 ff63 	bl	8005002 <xTaskCreate>
 800413c:	4603      	mov	r3, r0
 800413e:	2b01      	cmp	r3, #1
 8004140:	d001      	beq.n	8004146 <osThreadNew+0x11a>
            hTask = NULL;
 8004142:	2300      	movs	r3, #0
 8004144:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004146:	693b      	ldr	r3, [r7, #16]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3728      	adds	r7, #40	; 0x28
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004158:	f3ef 8305 	mrs	r3, IPSR
 800415c:	60bb      	str	r3, [r7, #8]
  return(result);
 800415e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <osDelay+0x1c>
    stat = osErrorISR;
 8004164:	f06f 0305 	mvn.w	r3, #5
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e007      	b.n	800417c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f001 f89e 	bl	80052b8 <vTaskDelay>
    }
  }

  return (stat);
 800417c:	68fb      	ldr	r3, [r7, #12]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004186:	b580      	push	{r7, lr}
 8004188:	b088      	sub	sp, #32
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004192:	f3ef 8305 	mrs	r3, IPSR
 8004196:	60bb      	str	r3, [r7, #8]
  return(result);
 8004198:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800419a:	2b00      	cmp	r3, #0
 800419c:	d174      	bne.n	8004288 <osMutexNew+0x102>
    if (attr != NULL) {
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <osMutexNew+0x26>
      type = attr->attr_bits;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	e001      	b.n	80041b0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <osMutexNew+0x3a>
      rmtx = 1U;
 80041ba:	2301      	movs	r3, #1
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	e001      	b.n	80041c4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d15c      	bne.n	8004288 <osMutexNew+0x102>
      mem = -1;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d015      	beq.n	8004206 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d006      	beq.n	80041f0 <osMutexNew+0x6a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b4f      	cmp	r3, #79	; 0x4f
 80041e8:	d902      	bls.n	80041f0 <osMutexNew+0x6a>
          mem = 1;
 80041ea:	2301      	movs	r3, #1
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	e00c      	b.n	800420a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d108      	bne.n	800420a <osMutexNew+0x84>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d104      	bne.n	800420a <osMutexNew+0x84>
            mem = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	e001      	b.n	800420a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d112      	bne.n	8004236 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	4619      	mov	r1, r3
 800421c:	2004      	movs	r0, #4
 800421e:	f000 fa90 	bl	8004742 <xQueueCreateMutexStatic>
 8004222:	61f8      	str	r0, [r7, #28]
 8004224:	e016      	b.n	8004254 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	4619      	mov	r1, r3
 800422c:	2001      	movs	r0, #1
 800422e:	f000 fa88 	bl	8004742 <xQueueCreateMutexStatic>
 8004232:	61f8      	str	r0, [r7, #28]
 8004234:	e00e      	b.n	8004254 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d004      	beq.n	800424c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004242:	2004      	movs	r0, #4
 8004244:	f000 fa65 	bl	8004712 <xQueueCreateMutex>
 8004248:	61f8      	str	r0, [r7, #28]
 800424a:	e003      	b.n	8004254 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800424c:	2001      	movs	r0, #1
 800424e:	f000 fa60 	bl	8004712 <xQueueCreateMutex>
 8004252:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00c      	beq.n	8004274 <osMutexNew+0xee>
        if (attr != NULL) {
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <osMutexNew+0xe2>
          name = attr->name;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	e001      	b.n	800426c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800426c:	68f9      	ldr	r1, [r7, #12]
 800426e:	69f8      	ldr	r0, [r7, #28]
 8004270:	f000 fe0c 	bl	8004e8c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d006      	beq.n	8004288 <osMutexNew+0x102>
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004288:	69fb      	ldr	r3, [r7, #28]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4a07      	ldr	r2, [pc, #28]	; (80042c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80042a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4a06      	ldr	r2, [pc, #24]	; (80042c4 <vApplicationGetIdleTaskMemory+0x30>)
 80042aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2280      	movs	r2, #128	; 0x80
 80042b0:	601a      	str	r2, [r3, #0]
}
 80042b2:	bf00      	nop
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	2000014c 	.word	0x2000014c
 80042c4:	20000208 	.word	0x20000208

080042c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a07      	ldr	r2, [pc, #28]	; (80042f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80042d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4a06      	ldr	r2, [pc, #24]	; (80042f8 <vApplicationGetTimerTaskMemory+0x30>)
 80042de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042e6:	601a      	str	r2, [r3, #0]
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	20000408 	.word	0x20000408
 80042f8:	200004c4 	.word	0x200004c4

080042fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f103 0208 	add.w	r2, r3, #8
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f04f 32ff 	mov.w	r2, #4294967295
 8004314:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f103 0208 	add.w	r2, r3, #8
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f103 0208 	add.w	r2, r3, #8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004356:	b480      	push	{r7}
 8004358:	b085      	sub	sp, #20
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	601a      	str	r2, [r3, #0]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d103      	bne.n	80043be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	e00c      	b.n	80043d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3308      	adds	r3, #8
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	e002      	b.n	80043cc <vListInsert+0x2e>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d2f6      	bcs.n	80043c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	601a      	str	r2, [r3, #0]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6892      	ldr	r2, [r2, #8]
 8004426:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6852      	ldr	r2, [r2, #4]
 8004430:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	429a      	cmp	r2, r3
 800443a:	d103      	bne.n	8004444 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	1e5a      	subs	r2, r3, #1
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10a      	bne.n	800448e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800448e:	f002 f901 	bl	8006694 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449a:	68f9      	ldr	r1, [r7, #12]
 800449c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800449e:	fb01 f303 	mul.w	r3, r1, r3
 80044a2:	441a      	add	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	3b01      	subs	r3, #1
 80044c0:	68f9      	ldr	r1, [r7, #12]
 80044c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	441a      	add	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	22ff      	movs	r2, #255	; 0xff
 80044d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	22ff      	movs	r2, #255	; 0xff
 80044da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d114      	bne.n	800450e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01a      	beq.n	8004522 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3310      	adds	r3, #16
 80044f0:	4618      	mov	r0, r3
 80044f2:	f001 f9af 	bl	8005854 <xTaskRemoveFromEventList>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d012      	beq.n	8004522 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <xQueueGenericReset+0xcc>)
 80044fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	e009      	b.n	8004522 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3310      	adds	r3, #16
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fef2 	bl	80042fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3324      	adds	r3, #36	; 0x24
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff feed 	bl	80042fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004522:	f002 f8e7 	bl	80066f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004526:	2301      	movs	r3, #1
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	e000ed04 	.word	0xe000ed04

08004534 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08e      	sub	sp, #56	; 0x38
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <xQueueGenericCreateStatic+0x52>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <xQueueGenericCreateStatic+0x56>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <xQueueGenericCreateStatic+0x58>
 800458a:	2300      	movs	r3, #0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	623b      	str	r3, [r7, #32]
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <xQueueGenericCreateStatic+0x7e>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <xQueueGenericCreateStatic+0x82>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <xQueueGenericCreateStatic+0x84>
 80045b6:	2300      	movs	r3, #0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	61fb      	str	r3, [r7, #28]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045d2:	2350      	movs	r3, #80	; 0x50
 80045d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b50      	cmp	r3, #80	; 0x50
 80045da:	d00a      	beq.n	80045f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	61bb      	str	r3, [r7, #24]
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00d      	beq.n	800461a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004606:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	4613      	mov	r3, r2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 f83f 	bl	8004698 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800461c:	4618      	mov	r0, r3
 800461e:	3730      	adds	r7, #48	; 0x30
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	; 0x28
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	4613      	mov	r3, r2
 8004630:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463c:	f383 8811 	msr	BASEPRI, r3
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	613b      	str	r3, [r7, #16]
}
 800464a:	bf00      	nop
 800464c:	e7fe      	b.n	800464c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	fb02 f303 	mul.w	r3, r2, r3
 8004656:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	3350      	adds	r3, #80	; 0x50
 800465c:	4618      	mov	r0, r3
 800465e:	f002 f93b 	bl	80068d8 <pvPortMalloc>
 8004662:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d011      	beq.n	800468e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	3350      	adds	r3, #80	; 0x50
 8004672:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800467c:	79fa      	ldrb	r2, [r7, #7]
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	4613      	mov	r3, r2
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f805 	bl	8004698 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800468e:	69bb      	ldr	r3, [r7, #24]
	}
 8004690:	4618      	mov	r0, r3
 8004692:	3720      	adds	r7, #32
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d103      	bne.n	80046b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	e002      	b.n	80046ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046c6:	2101      	movs	r1, #1
 80046c8:	69b8      	ldr	r0, [r7, #24]
 80046ca:	f7ff fecb 	bl	8004464 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	78fa      	ldrb	r2, [r7, #3]
 80046d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00e      	beq.n	800470a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80046fe:	2300      	movs	r3, #0
 8004700:	2200      	movs	r2, #0
 8004702:	2100      	movs	r1, #0
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f837 	bl	8004778 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004712:	b580      	push	{r7, lr}
 8004714:	b086      	sub	sp, #24
 8004716:	af00      	add	r7, sp, #0
 8004718:	4603      	mov	r3, r0
 800471a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800471c:	2301      	movs	r3, #1
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	2300      	movs	r3, #0
 8004722:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	461a      	mov	r2, r3
 8004728:	6939      	ldr	r1, [r7, #16]
 800472a:	6978      	ldr	r0, [r7, #20]
 800472c:	f7ff ff7a 	bl	8004624 <xQueueGenericCreate>
 8004730:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7ff ffd3 	bl	80046de <prvInitialiseMutex>

		return xNewQueue;
 8004738:	68fb      	ldr	r3, [r7, #12]
	}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004742:	b580      	push	{r7, lr}
 8004744:	b088      	sub	sp, #32
 8004746:	af02      	add	r7, sp, #8
 8004748:	4603      	mov	r3, r0
 800474a:	6039      	str	r1, [r7, #0]
 800474c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800474e:	2301      	movs	r3, #1
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2200      	movs	r2, #0
 800475e:	6939      	ldr	r1, [r7, #16]
 8004760:	6978      	ldr	r0, [r7, #20]
 8004762:	f7ff fee7 	bl	8004534 <xQueueGenericCreateStatic>
 8004766:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7ff ffb8 	bl	80046de <prvInitialiseMutex>

		return xNewQueue;
 800476e:	68fb      	ldr	r3, [r7, #12]
	}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08e      	sub	sp, #56	; 0x38
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004786:	2300      	movs	r3, #0
 8004788:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <xQueueGenericSend+0x32>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047a6:	bf00      	nop
 80047a8:	e7fe      	b.n	80047a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d103      	bne.n	80047b8 <xQueueGenericSend+0x40>
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <xQueueGenericSend+0x44>
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <xQueueGenericSend+0x46>
 80047bc:	2300      	movs	r3, #0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10a      	bne.n	80047d8 <xQueueGenericSend+0x60>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047d4:	bf00      	nop
 80047d6:	e7fe      	b.n	80047d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d103      	bne.n	80047e6 <xQueueGenericSend+0x6e>
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <xQueueGenericSend+0x72>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <xQueueGenericSend+0x74>
 80047ea:	2300      	movs	r3, #0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <xQueueGenericSend+0x8e>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	623b      	str	r3, [r7, #32]
}
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004806:	f001 f9e7 	bl	8005bd8 <xTaskGetSchedulerState>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <xQueueGenericSend+0x9e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <xQueueGenericSend+0xa2>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <xQueueGenericSend+0xa4>
 800481a:	2300      	movs	r3, #0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <xQueueGenericSend+0xbe>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	61fb      	str	r3, [r7, #28]
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004836:	f001 ff2d 	bl	8006694 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004842:	429a      	cmp	r2, r3
 8004844:	d302      	bcc.n	800484c <xQueueGenericSend+0xd4>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b02      	cmp	r3, #2
 800484a:	d129      	bne.n	80048a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	68b9      	ldr	r1, [r7, #8]
 8004850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004852:	f000 fa0b 	bl	8004c6c <prvCopyDataToQueue>
 8004856:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	2b00      	cmp	r3, #0
 800485e:	d010      	beq.n	8004882 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004862:	3324      	adds	r3, #36	; 0x24
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fff5 	bl	8005854 <xTaskRemoveFromEventList>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d013      	beq.n	8004898 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004870:	4b3f      	ldr	r3, [pc, #252]	; (8004970 <xQueueGenericSend+0x1f8>)
 8004872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	e00a      	b.n	8004898 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d007      	beq.n	8004898 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004888:	4b39      	ldr	r3, [pc, #228]	; (8004970 <xQueueGenericSend+0x1f8>)
 800488a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004898:	f001 ff2c 	bl	80066f4 <vPortExitCritical>
				return pdPASS;
 800489c:	2301      	movs	r3, #1
 800489e:	e063      	b.n	8004968 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d103      	bne.n	80048ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048a6:	f001 ff25 	bl	80066f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e05c      	b.n	8004968 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d106      	bne.n	80048c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048b4:	f107 0314 	add.w	r3, r7, #20
 80048b8:	4618      	mov	r0, r3
 80048ba:	f001 f82f 	bl	800591c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048be:	2301      	movs	r3, #1
 80048c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048c2:	f001 ff17 	bl	80066f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048c6:	f000 fd9b 	bl	8005400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048ca:	f001 fee3 	bl	8006694 <vPortEnterCritical>
 80048ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048d4:	b25b      	sxtb	r3, r3
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048da:	d103      	bne.n	80048e4 <xQueueGenericSend+0x16c>
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048ea:	b25b      	sxtb	r3, r3
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d103      	bne.n	80048fa <xQueueGenericSend+0x182>
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048fa:	f001 fefb 	bl	80066f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048fe:	1d3a      	adds	r2, r7, #4
 8004900:	f107 0314 	add.w	r3, r7, #20
 8004904:	4611      	mov	r1, r2
 8004906:	4618      	mov	r0, r3
 8004908:	f001 f81e 	bl	8005948 <xTaskCheckForTimeOut>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d124      	bne.n	800495c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004914:	f000 faa2 	bl	8004e5c <prvIsQueueFull>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d018      	beq.n	8004950 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	3310      	adds	r3, #16
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f000 ff44 	bl	80057b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800492c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800492e:	f000 fa2d 	bl	8004d8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004932:	f000 fd73 	bl	800541c <xTaskResumeAll>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	f47f af7c 	bne.w	8004836 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800493e:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <xQueueGenericSend+0x1f8>)
 8004940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	e772      	b.n	8004836 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004952:	f000 fa1b 	bl	8004d8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004956:	f000 fd61 	bl	800541c <xTaskResumeAll>
 800495a:	e76c      	b.n	8004836 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800495c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800495e:	f000 fa15 	bl	8004d8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004962:	f000 fd5b 	bl	800541c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004966:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004968:	4618      	mov	r0, r3
 800496a:	3738      	adds	r7, #56	; 0x38
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	e000ed04 	.word	0xe000ed04

08004974 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b090      	sub	sp, #64	; 0x40
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d103      	bne.n	80049b0 <xQueueGenericSendFromISR+0x3c>
 80049a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <xQueueGenericSendFromISR+0x40>
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <xQueueGenericSendFromISR+0x42>
 80049b4:	2300      	movs	r3, #0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049cc:	bf00      	nop
 80049ce:	e7fe      	b.n	80049ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d103      	bne.n	80049de <xQueueGenericSendFromISR+0x6a>
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <xQueueGenericSendFromISR+0x6e>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <xQueueGenericSendFromISR+0x70>
 80049e2:	2300      	movs	r3, #0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	623b      	str	r3, [r7, #32]
}
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049fe:	f001 ff2b 	bl	8006858 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a02:	f3ef 8211 	mrs	r2, BASEPRI
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	61fa      	str	r2, [r7, #28]
 8004a18:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a1a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d302      	bcc.n	8004a30 <xQueueGenericSendFromISR+0xbc>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d12f      	bne.n	8004a90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a46:	f000 f911 	bl	8004c6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a52:	d112      	bne.n	8004a7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d016      	beq.n	8004a8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5e:	3324      	adds	r3, #36	; 0x24
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 fef7 	bl	8005854 <xTaskRemoveFromEventList>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00e      	beq.n	8004a8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	e007      	b.n	8004a8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a7e:	3301      	adds	r3, #1
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	b25a      	sxtb	r2, r3
 8004a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004a8e:	e001      	b.n	8004a94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a96:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004a9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3740      	adds	r7, #64	; 0x40
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08c      	sub	sp, #48	; 0x30
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <xQueueReceive+0x30>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	623b      	str	r3, [r7, #32]
}
 8004ad8:	bf00      	nop
 8004ada:	e7fe      	b.n	8004ada <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d103      	bne.n	8004aea <xQueueReceive+0x3e>
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <xQueueReceive+0x42>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <xQueueReceive+0x44>
 8004aee:	2300      	movs	r3, #0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <xQueueReceive+0x5e>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	61fb      	str	r3, [r7, #28]
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b0a:	f001 f865 	bl	8005bd8 <xTaskGetSchedulerState>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <xQueueReceive+0x6e>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <xQueueReceive+0x72>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <xQueueReceive+0x74>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <xQueueReceive+0x8e>
	__asm volatile
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	61bb      	str	r3, [r7, #24]
}
 8004b36:	bf00      	nop
 8004b38:	e7fe      	b.n	8004b38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b3a:	f001 fdab 	bl	8006694 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01f      	beq.n	8004b8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b4e:	f000 f8f7 	bl	8004d40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	1e5a      	subs	r2, r3, #1
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00f      	beq.n	8004b82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	3310      	adds	r3, #16
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fe74 	bl	8005854 <xTaskRemoveFromEventList>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b72:	4b3d      	ldr	r3, [pc, #244]	; (8004c68 <xQueueReceive+0x1bc>)
 8004b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b82:	f001 fdb7 	bl	80066f4 <vPortExitCritical>
				return pdPASS;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e069      	b.n	8004c5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d103      	bne.n	8004b98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b90:	f001 fdb0 	bl	80066f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b94:	2300      	movs	r3, #0
 8004b96:	e062      	b.n	8004c5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b9e:	f107 0310 	add.w	r3, r7, #16
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 feba 	bl	800591c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bac:	f001 fda2 	bl	80066f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bb0:	f000 fc26 	bl	8005400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bb4:	f001 fd6e 	bl	8006694 <vPortEnterCritical>
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bbe:	b25b      	sxtb	r3, r3
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc4:	d103      	bne.n	8004bce <xQueueReceive+0x122>
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bd4:	b25b      	sxtb	r3, r3
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	d103      	bne.n	8004be4 <xQueueReceive+0x138>
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004be4:	f001 fd86 	bl	80066f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004be8:	1d3a      	adds	r2, r7, #4
 8004bea:	f107 0310 	add.w	r3, r7, #16
 8004bee:	4611      	mov	r1, r2
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fea9 	bl	8005948 <xTaskCheckForTimeOut>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d123      	bne.n	8004c44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bfe:	f000 f917 	bl	8004e30 <prvIsQueueEmpty>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d017      	beq.n	8004c38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	3324      	adds	r3, #36	; 0x24
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	4611      	mov	r1, r2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fdcf 	bl	80057b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c18:	f000 f8b8 	bl	8004d8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c1c:	f000 fbfe 	bl	800541c <xTaskResumeAll>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d189      	bne.n	8004b3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004c26:	4b10      	ldr	r3, [pc, #64]	; (8004c68 <xQueueReceive+0x1bc>)
 8004c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	e780      	b.n	8004b3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c3a:	f000 f8a7 	bl	8004d8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c3e:	f000 fbed 	bl	800541c <xTaskResumeAll>
 8004c42:	e77a      	b.n	8004b3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c46:	f000 f8a1 	bl	8004d8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c4a:	f000 fbe7 	bl	800541c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c50:	f000 f8ee 	bl	8004e30 <prvIsQueueEmpty>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f43f af6f 	beq.w	8004b3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3730      	adds	r7, #48	; 0x30
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	e000ed04 	.word	0xe000ed04

08004c6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10d      	bne.n	8004ca6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d14d      	bne.n	8004d2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 ffbc 	bl	8005c14 <xTaskPriorityDisinherit>
 8004c9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	609a      	str	r2, [r3, #8]
 8004ca4:	e043      	b.n	8004d2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d119      	bne.n	8004ce0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6858      	ldr	r0, [r3, #4]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	f002 f923 	bl	8006f02 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	441a      	add	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d32b      	bcc.n	8004d2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	605a      	str	r2, [r3, #4]
 8004cde:	e026      	b.n	8004d2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	68d8      	ldr	r0, [r3, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	461a      	mov	r2, r3
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	f002 f909 	bl	8006f02 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	425b      	negs	r3, r3
 8004cfa:	441a      	add	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	68da      	ldr	r2, [r3, #12]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d207      	bcs.n	8004d1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	425b      	negs	r3, r3
 8004d16:	441a      	add	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d105      	bne.n	8004d2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d36:	697b      	ldr	r3, [r7, #20]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d018      	beq.n	8004d84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	441a      	add	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d303      	bcc.n	8004d74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68d9      	ldr	r1, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	6838      	ldr	r0, [r7, #0]
 8004d80:	f002 f8bf 	bl	8006f02 <memcpy>
	}
}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d94:	f001 fc7e 	bl	8006694 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004da0:	e011      	b.n	8004dc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d012      	beq.n	8004dd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3324      	adds	r3, #36	; 0x24
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fd50 	bl	8005854 <xTaskRemoveFromEventList>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004dba:	f000 fe27 	bl	8005a0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	dce9      	bgt.n	8004da2 <prvUnlockQueue+0x16>
 8004dce:	e000      	b.n	8004dd2 <prvUnlockQueue+0x46>
					break;
 8004dd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	22ff      	movs	r2, #255	; 0xff
 8004dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004dda:	f001 fc8b 	bl	80066f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004dde:	f001 fc59 	bl	8006694 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004de8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dea:	e011      	b.n	8004e10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d012      	beq.n	8004e1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3310      	adds	r3, #16
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fd2b 	bl	8005854 <xTaskRemoveFromEventList>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e04:	f000 fe02 	bl	8005a0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e08:	7bbb      	ldrb	r3, [r7, #14]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	dce9      	bgt.n	8004dec <prvUnlockQueue+0x60>
 8004e18:	e000      	b.n	8004e1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	22ff      	movs	r2, #255	; 0xff
 8004e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e24:	f001 fc66 	bl	80066f4 <vPortExitCritical>
}
 8004e28:	bf00      	nop
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e38:	f001 fc2c 	bl	8006694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d102      	bne.n	8004e4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e44:	2301      	movs	r3, #1
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	e001      	b.n	8004e4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e4e:	f001 fc51 	bl	80066f4 <vPortExitCritical>

	return xReturn;
 8004e52:	68fb      	ldr	r3, [r7, #12]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e64:	f001 fc16 	bl	8006694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d102      	bne.n	8004e7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e74:	2301      	movs	r3, #1
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	e001      	b.n	8004e7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e7e:	f001 fc39 	bl	80066f4 <vPortExitCritical>

	return xReturn;
 8004e82:	68fb      	ldr	r3, [r7, #12]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	e014      	b.n	8004ec6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e9c:	4a0f      	ldr	r2, [pc, #60]	; (8004edc <vQueueAddToRegistry+0x50>)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10b      	bne.n	8004ec0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ea8:	490c      	ldr	r1, [pc, #48]	; (8004edc <vQueueAddToRegistry+0x50>)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004eb2:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <vQueueAddToRegistry+0x50>)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	4413      	add	r3, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ebe:	e006      	b.n	8004ece <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b07      	cmp	r3, #7
 8004eca:	d9e7      	bls.n	8004e9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20005d4c 	.word	0x20005d4c

08004ee0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004ef0:	f001 fbd0 	bl	8006694 <vPortEnterCritical>
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004efa:	b25b      	sxtb	r3, r3
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d103      	bne.n	8004f0a <vQueueWaitForMessageRestricted+0x2a>
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f10:	b25b      	sxtb	r3, r3
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f16:	d103      	bne.n	8004f20 <vQueueWaitForMessageRestricted+0x40>
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f20:	f001 fbe8 	bl	80066f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	3324      	adds	r3, #36	; 0x24
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 fc61 	bl	80057fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f3a:	6978      	ldr	r0, [r7, #20]
 8004f3c:	f7ff ff26 	bl	8004d8c <prvUnlockQueue>
	}
 8004f40:	bf00      	nop
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08e      	sub	sp, #56	; 0x38
 8004f4c:	af04      	add	r7, sp, #16
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	623b      	str	r3, [r7, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <xTaskCreateStatic+0x46>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	61fb      	str	r3, [r7, #28]
}
 8004f8a:	bf00      	nop
 8004f8c:	e7fe      	b.n	8004f8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f8e:	23bc      	movs	r3, #188	; 0xbc
 8004f90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2bbc      	cmp	r3, #188	; 0xbc
 8004f96:	d00a      	beq.n	8004fae <xTaskCreateStatic+0x66>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	61bb      	str	r3, [r7, #24]
}
 8004faa:	bf00      	nop
 8004fac:	e7fe      	b.n	8004fac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004fae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d01e      	beq.n	8004ff4 <xTaskCreateStatic+0xac>
 8004fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01b      	beq.n	8004ff4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	2202      	movs	r2, #2
 8004fca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004fce:	2300      	movs	r3, #0
 8004fd0:	9303      	str	r3, [sp, #12]
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	9302      	str	r3, [sp, #8]
 8004fd6:	f107 0314 	add.w	r3, r7, #20
 8004fda:	9301      	str	r3, [sp, #4]
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f850 	bl	800508c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fee:	f000 f8f3 	bl	80051d8 <prvAddNewTaskToReadyList>
 8004ff2:	e001      	b.n	8004ff8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ff8:	697b      	ldr	r3, [r7, #20]
	}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3728      	adds	r7, #40	; 0x28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005002:	b580      	push	{r7, lr}
 8005004:	b08c      	sub	sp, #48	; 0x30
 8005006:	af04      	add	r7, sp, #16
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	603b      	str	r3, [r7, #0]
 800500e:	4613      	mov	r3, r2
 8005010:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005012:	88fb      	ldrh	r3, [r7, #6]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4618      	mov	r0, r3
 8005018:	f001 fc5e 	bl	80068d8 <pvPortMalloc>
 800501c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00e      	beq.n	8005042 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005024:	20bc      	movs	r0, #188	; 0xbc
 8005026:	f001 fc57 	bl	80068d8 <pvPortMalloc>
 800502a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
 8005038:	e005      	b.n	8005046 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800503a:	6978      	ldr	r0, [r7, #20]
 800503c:	f001 fd18 	bl	8006a70 <vPortFree>
 8005040:	e001      	b.n	8005046 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d017      	beq.n	800507c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005054:	88fa      	ldrh	r2, [r7, #6]
 8005056:	2300      	movs	r3, #0
 8005058:	9303      	str	r3, [sp, #12]
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	9302      	str	r3, [sp, #8]
 800505e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f80e 	bl	800508c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005070:	69f8      	ldr	r0, [r7, #28]
 8005072:	f000 f8b1 	bl	80051d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005076:	2301      	movs	r3, #1
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	e002      	b.n	8005082 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800507c:	f04f 33ff 	mov.w	r3, #4294967295
 8005080:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005082:	69bb      	ldr	r3, [r7, #24]
	}
 8005084:	4618      	mov	r0, r3
 8005086:	3720      	adds	r7, #32
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	461a      	mov	r2, r3
 80050a4:	21a5      	movs	r1, #165	; 0xa5
 80050a6:	f001 ff3a 	bl	8006f1e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050b4:	3b01      	subs	r3, #1
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	f023 0307 	bic.w	r3, r3, #7
 80050c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	617b      	str	r3, [r7, #20]
}
 80050e0:	bf00      	nop
 80050e2:	e7fe      	b.n	80050e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d01f      	beq.n	800512a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050ea:	2300      	movs	r3, #0
 80050ec:	61fb      	str	r3, [r7, #28]
 80050ee:	e012      	b.n	8005116 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	4413      	add	r3, r2
 80050f6:	7819      	ldrb	r1, [r3, #0]
 80050f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	4413      	add	r3, r2
 80050fe:	3334      	adds	r3, #52	; 0x34
 8005100:	460a      	mov	r2, r1
 8005102:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	4413      	add	r3, r2
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d006      	beq.n	800511e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	3301      	adds	r3, #1
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	2b0f      	cmp	r3, #15
 800511a:	d9e9      	bls.n	80050f0 <prvInitialiseNewTask+0x64>
 800511c:	e000      	b.n	8005120 <prvInitialiseNewTask+0x94>
			{
				break;
 800511e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005128:	e003      	b.n	8005132 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	2b37      	cmp	r3, #55	; 0x37
 8005136:	d901      	bls.n	800513c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005138:	2337      	movs	r3, #55	; 0x37
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005140:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005146:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	2200      	movs	r2, #0
 800514c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	3304      	adds	r3, #4
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff f8f2 	bl	800433c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	3318      	adds	r3, #24
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff f8ed 	bl	800433c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005166:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005176:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	2200      	movs	r2, #0
 800517c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005182:	2200      	movs	r2, #0
 8005184:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	3354      	adds	r3, #84	; 0x54
 800518c:	2260      	movs	r2, #96	; 0x60
 800518e:	2100      	movs	r1, #0
 8005190:	4618      	mov	r0, r3
 8005192:	f001 fec4 	bl	8006f1e <memset>
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	4a0c      	ldr	r2, [pc, #48]	; (80051cc <prvInitialiseNewTask+0x140>)
 800519a:	659a      	str	r2, [r3, #88]	; 0x58
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	4a0c      	ldr	r2, [pc, #48]	; (80051d0 <prvInitialiseNewTask+0x144>)
 80051a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	4a0b      	ldr	r2, [pc, #44]	; (80051d4 <prvInitialiseNewTask+0x148>)
 80051a6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	68f9      	ldr	r1, [r7, #12]
 80051ac:	69b8      	ldr	r0, [r7, #24]
 80051ae:	f001 f941 	bl	8006434 <pxPortInitialiseStack>
 80051b2:	4602      	mov	r2, r0
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80051b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051c4:	bf00      	nop
 80051c6:	3720      	adds	r7, #32
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	080080d4 	.word	0x080080d4
 80051d0:	080080f4 	.word	0x080080f4
 80051d4:	080080b4 	.word	0x080080b4

080051d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051e0:	f001 fa58 	bl	8006694 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051e4:	4b2d      	ldr	r3, [pc, #180]	; (800529c <prvAddNewTaskToReadyList+0xc4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	4a2c      	ldr	r2, [pc, #176]	; (800529c <prvAddNewTaskToReadyList+0xc4>)
 80051ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051ee:	4b2c      	ldr	r3, [pc, #176]	; (80052a0 <prvAddNewTaskToReadyList+0xc8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051f6:	4a2a      	ldr	r2, [pc, #168]	; (80052a0 <prvAddNewTaskToReadyList+0xc8>)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051fc:	4b27      	ldr	r3, [pc, #156]	; (800529c <prvAddNewTaskToReadyList+0xc4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d110      	bne.n	8005226 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005204:	f000 fc26 	bl	8005a54 <prvInitialiseTaskLists>
 8005208:	e00d      	b.n	8005226 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800520a:	4b26      	ldr	r3, [pc, #152]	; (80052a4 <prvAddNewTaskToReadyList+0xcc>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d109      	bne.n	8005226 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005212:	4b23      	ldr	r3, [pc, #140]	; (80052a0 <prvAddNewTaskToReadyList+0xc8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	429a      	cmp	r2, r3
 800521e:	d802      	bhi.n	8005226 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005220:	4a1f      	ldr	r2, [pc, #124]	; (80052a0 <prvAddNewTaskToReadyList+0xc8>)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005226:	4b20      	ldr	r3, [pc, #128]	; (80052a8 <prvAddNewTaskToReadyList+0xd0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	3301      	adds	r3, #1
 800522c:	4a1e      	ldr	r2, [pc, #120]	; (80052a8 <prvAddNewTaskToReadyList+0xd0>)
 800522e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005230:	4b1d      	ldr	r3, [pc, #116]	; (80052a8 <prvAddNewTaskToReadyList+0xd0>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523c:	4b1b      	ldr	r3, [pc, #108]	; (80052ac <prvAddNewTaskToReadyList+0xd4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	429a      	cmp	r2, r3
 8005242:	d903      	bls.n	800524c <prvAddNewTaskToReadyList+0x74>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005248:	4a18      	ldr	r2, [pc, #96]	; (80052ac <prvAddNewTaskToReadyList+0xd4>)
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4a15      	ldr	r2, [pc, #84]	; (80052b0 <prvAddNewTaskToReadyList+0xd8>)
 800525a:	441a      	add	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3304      	adds	r3, #4
 8005260:	4619      	mov	r1, r3
 8005262:	4610      	mov	r0, r2
 8005264:	f7ff f877 	bl	8004356 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005268:	f001 fa44 	bl	80066f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800526c:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <prvAddNewTaskToReadyList+0xcc>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00e      	beq.n	8005292 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005274:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <prvAddNewTaskToReadyList+0xc8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	429a      	cmp	r2, r3
 8005280:	d207      	bcs.n	8005292 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005282:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <prvAddNewTaskToReadyList+0xdc>)
 8005284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000d98 	.word	0x20000d98
 80052a0:	200008c4 	.word	0x200008c4
 80052a4:	20000da4 	.word	0x20000da4
 80052a8:	20000db4 	.word	0x20000db4
 80052ac:	20000da0 	.word	0x20000da0
 80052b0:	200008c8 	.word	0x200008c8
 80052b4:	e000ed04 	.word	0xe000ed04

080052b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052c0:	2300      	movs	r3, #0
 80052c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d017      	beq.n	80052fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052ca:	4b13      	ldr	r3, [pc, #76]	; (8005318 <vTaskDelay+0x60>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <vTaskDelay+0x30>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	60bb      	str	r3, [r7, #8]
}
 80052e4:	bf00      	nop
 80052e6:	e7fe      	b.n	80052e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80052e8:	f000 f88a 	bl	8005400 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80052ec:	2100      	movs	r1, #0
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fcfe 	bl	8005cf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052f4:	f000 f892 	bl	800541c <xTaskResumeAll>
 80052f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d107      	bne.n	8005310 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005300:	4b06      	ldr	r3, [pc, #24]	; (800531c <vTaskDelay+0x64>)
 8005302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	20000dc0 	.word	0x20000dc0
 800531c:	e000ed04 	.word	0xe000ed04

08005320 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08a      	sub	sp, #40	; 0x28
 8005324:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005326:	2300      	movs	r3, #0
 8005328:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800532a:	2300      	movs	r3, #0
 800532c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800532e:	463a      	mov	r2, r7
 8005330:	1d39      	adds	r1, r7, #4
 8005332:	f107 0308 	add.w	r3, r7, #8
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe ffac 	bl	8004294 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800533c:	6839      	ldr	r1, [r7, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	9202      	str	r2, [sp, #8]
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	2300      	movs	r3, #0
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	2300      	movs	r3, #0
 800534c:	460a      	mov	r2, r1
 800534e:	4924      	ldr	r1, [pc, #144]	; (80053e0 <vTaskStartScheduler+0xc0>)
 8005350:	4824      	ldr	r0, [pc, #144]	; (80053e4 <vTaskStartScheduler+0xc4>)
 8005352:	f7ff fdf9 	bl	8004f48 <xTaskCreateStatic>
 8005356:	4603      	mov	r3, r0
 8005358:	4a23      	ldr	r2, [pc, #140]	; (80053e8 <vTaskStartScheduler+0xc8>)
 800535a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800535c:	4b22      	ldr	r3, [pc, #136]	; (80053e8 <vTaskStartScheduler+0xc8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005364:	2301      	movs	r3, #1
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	e001      	b.n	800536e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d102      	bne.n	800537a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005374:	f000 fd10 	bl	8005d98 <xTimerCreateTimerTask>
 8005378:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d11b      	bne.n	80053b8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	613b      	str	r3, [r7, #16]
}
 8005392:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005394:	4b15      	ldr	r3, [pc, #84]	; (80053ec <vTaskStartScheduler+0xcc>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3354      	adds	r3, #84	; 0x54
 800539a:	4a15      	ldr	r2, [pc, #84]	; (80053f0 <vTaskStartScheduler+0xd0>)
 800539c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800539e:	4b15      	ldr	r3, [pc, #84]	; (80053f4 <vTaskStartScheduler+0xd4>)
 80053a0:	f04f 32ff 	mov.w	r2, #4294967295
 80053a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053a6:	4b14      	ldr	r3, [pc, #80]	; (80053f8 <vTaskStartScheduler+0xd8>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053ac:	4b13      	ldr	r3, [pc, #76]	; (80053fc <vTaskStartScheduler+0xdc>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053b2:	f001 f8cd 	bl	8006550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053b6:	e00e      	b.n	80053d6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053be:	d10a      	bne.n	80053d6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	60fb      	str	r3, [r7, #12]
}
 80053d2:	bf00      	nop
 80053d4:	e7fe      	b.n	80053d4 <vTaskStartScheduler+0xb4>
}
 80053d6:	bf00      	nop
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	08007ffc 	.word	0x08007ffc
 80053e4:	08005a25 	.word	0x08005a25
 80053e8:	20000dbc 	.word	0x20000dbc
 80053ec:	200008c4 	.word	0x200008c4
 80053f0:	20000030 	.word	0x20000030
 80053f4:	20000db8 	.word	0x20000db8
 80053f8:	20000da4 	.word	0x20000da4
 80053fc:	20000d9c 	.word	0x20000d9c

08005400 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005404:	4b04      	ldr	r3, [pc, #16]	; (8005418 <vTaskSuspendAll+0x18>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3301      	adds	r3, #1
 800540a:	4a03      	ldr	r2, [pc, #12]	; (8005418 <vTaskSuspendAll+0x18>)
 800540c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800540e:	bf00      	nop
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	20000dc0 	.word	0x20000dc0

0800541c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005426:	2300      	movs	r3, #0
 8005428:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800542a:	4b42      	ldr	r3, [pc, #264]	; (8005534 <xTaskResumeAll+0x118>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10a      	bne.n	8005448 <xTaskResumeAll+0x2c>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	603b      	str	r3, [r7, #0]
}
 8005444:	bf00      	nop
 8005446:	e7fe      	b.n	8005446 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005448:	f001 f924 	bl	8006694 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800544c:	4b39      	ldr	r3, [pc, #228]	; (8005534 <xTaskResumeAll+0x118>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3b01      	subs	r3, #1
 8005452:	4a38      	ldr	r2, [pc, #224]	; (8005534 <xTaskResumeAll+0x118>)
 8005454:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005456:	4b37      	ldr	r3, [pc, #220]	; (8005534 <xTaskResumeAll+0x118>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d162      	bne.n	8005524 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800545e:	4b36      	ldr	r3, [pc, #216]	; (8005538 <xTaskResumeAll+0x11c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d05e      	beq.n	8005524 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005466:	e02f      	b.n	80054c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005468:	4b34      	ldr	r3, [pc, #208]	; (800553c <xTaskResumeAll+0x120>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3318      	adds	r3, #24
 8005474:	4618      	mov	r0, r3
 8005476:	f7fe ffcb 	bl	8004410 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3304      	adds	r3, #4
 800547e:	4618      	mov	r0, r3
 8005480:	f7fe ffc6 	bl	8004410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005488:	4b2d      	ldr	r3, [pc, #180]	; (8005540 <xTaskResumeAll+0x124>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d903      	bls.n	8005498 <xTaskResumeAll+0x7c>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	4a2a      	ldr	r2, [pc, #168]	; (8005540 <xTaskResumeAll+0x124>)
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4a27      	ldr	r2, [pc, #156]	; (8005544 <xTaskResumeAll+0x128>)
 80054a6:	441a      	add	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4619      	mov	r1, r3
 80054ae:	4610      	mov	r0, r2
 80054b0:	f7fe ff51 	bl	8004356 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b8:	4b23      	ldr	r3, [pc, #140]	; (8005548 <xTaskResumeAll+0x12c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	429a      	cmp	r2, r3
 80054c0:	d302      	bcc.n	80054c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80054c2:	4b22      	ldr	r3, [pc, #136]	; (800554c <xTaskResumeAll+0x130>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054c8:	4b1c      	ldr	r3, [pc, #112]	; (800553c <xTaskResumeAll+0x120>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1cb      	bne.n	8005468 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80054d6:	f000 fb5f 	bl	8005b98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80054da:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <xTaskResumeAll+0x134>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d010      	beq.n	8005508 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054e6:	f000 f847 	bl	8005578 <xTaskIncrementTick>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80054f0:	4b16      	ldr	r3, [pc, #88]	; (800554c <xTaskResumeAll+0x130>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f1      	bne.n	80054e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005502:	4b13      	ldr	r3, [pc, #76]	; (8005550 <xTaskResumeAll+0x134>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005508:	4b10      	ldr	r3, [pc, #64]	; (800554c <xTaskResumeAll+0x130>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005510:	2301      	movs	r3, #1
 8005512:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005514:	4b0f      	ldr	r3, [pc, #60]	; (8005554 <xTaskResumeAll+0x138>)
 8005516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005524:	f001 f8e6 	bl	80066f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005528:	68bb      	ldr	r3, [r7, #8]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000dc0 	.word	0x20000dc0
 8005538:	20000d98 	.word	0x20000d98
 800553c:	20000d58 	.word	0x20000d58
 8005540:	20000da0 	.word	0x20000da0
 8005544:	200008c8 	.word	0x200008c8
 8005548:	200008c4 	.word	0x200008c4
 800554c:	20000dac 	.word	0x20000dac
 8005550:	20000da8 	.word	0x20000da8
 8005554:	e000ed04 	.word	0xe000ed04

08005558 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800555e:	4b05      	ldr	r3, [pc, #20]	; (8005574 <xTaskGetTickCount+0x1c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005564:	687b      	ldr	r3, [r7, #4]
}
 8005566:	4618      	mov	r0, r3
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	20000d9c 	.word	0x20000d9c

08005578 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005582:	4b4f      	ldr	r3, [pc, #316]	; (80056c0 <xTaskIncrementTick+0x148>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f040 808f 	bne.w	80056aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800558c:	4b4d      	ldr	r3, [pc, #308]	; (80056c4 <xTaskIncrementTick+0x14c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3301      	adds	r3, #1
 8005592:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005594:	4a4b      	ldr	r2, [pc, #300]	; (80056c4 <xTaskIncrementTick+0x14c>)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d120      	bne.n	80055e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80055a0:	4b49      	ldr	r3, [pc, #292]	; (80056c8 <xTaskIncrementTick+0x150>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	603b      	str	r3, [r7, #0]
}
 80055bc:	bf00      	nop
 80055be:	e7fe      	b.n	80055be <xTaskIncrementTick+0x46>
 80055c0:	4b41      	ldr	r3, [pc, #260]	; (80056c8 <xTaskIncrementTick+0x150>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	4b41      	ldr	r3, [pc, #260]	; (80056cc <xTaskIncrementTick+0x154>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a3f      	ldr	r2, [pc, #252]	; (80056c8 <xTaskIncrementTick+0x150>)
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	4a3f      	ldr	r2, [pc, #252]	; (80056cc <xTaskIncrementTick+0x154>)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	4b3e      	ldr	r3, [pc, #248]	; (80056d0 <xTaskIncrementTick+0x158>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	4a3d      	ldr	r2, [pc, #244]	; (80056d0 <xTaskIncrementTick+0x158>)
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	f000 fadb 	bl	8005b98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055e2:	4b3c      	ldr	r3, [pc, #240]	; (80056d4 <xTaskIncrementTick+0x15c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d349      	bcc.n	8005680 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055ec:	4b36      	ldr	r3, [pc, #216]	; (80056c8 <xTaskIncrementTick+0x150>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d104      	bne.n	8005600 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055f6:	4b37      	ldr	r3, [pc, #220]	; (80056d4 <xTaskIncrementTick+0x15c>)
 80055f8:	f04f 32ff 	mov.w	r2, #4294967295
 80055fc:	601a      	str	r2, [r3, #0]
					break;
 80055fe:	e03f      	b.n	8005680 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005600:	4b31      	ldr	r3, [pc, #196]	; (80056c8 <xTaskIncrementTick+0x150>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	429a      	cmp	r2, r3
 8005616:	d203      	bcs.n	8005620 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005618:	4a2e      	ldr	r2, [pc, #184]	; (80056d4 <xTaskIncrementTick+0x15c>)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800561e:	e02f      	b.n	8005680 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	3304      	adds	r3, #4
 8005624:	4618      	mov	r0, r3
 8005626:	f7fe fef3 	bl	8004410 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	2b00      	cmp	r3, #0
 8005630:	d004      	beq.n	800563c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	3318      	adds	r3, #24
 8005636:	4618      	mov	r0, r3
 8005638:	f7fe feea 	bl	8004410 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005640:	4b25      	ldr	r3, [pc, #148]	; (80056d8 <xTaskIncrementTick+0x160>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d903      	bls.n	8005650 <xTaskIncrementTick+0xd8>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	4a22      	ldr	r2, [pc, #136]	; (80056d8 <xTaskIncrementTick+0x160>)
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4a1f      	ldr	r2, [pc, #124]	; (80056dc <xTaskIncrementTick+0x164>)
 800565e:	441a      	add	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	3304      	adds	r3, #4
 8005664:	4619      	mov	r1, r3
 8005666:	4610      	mov	r0, r2
 8005668:	f7fe fe75 	bl	8004356 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	4b1b      	ldr	r3, [pc, #108]	; (80056e0 <xTaskIncrementTick+0x168>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	429a      	cmp	r2, r3
 8005678:	d3b8      	bcc.n	80055ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800567a:	2301      	movs	r3, #1
 800567c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800567e:	e7b5      	b.n	80055ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005680:	4b17      	ldr	r3, [pc, #92]	; (80056e0 <xTaskIncrementTick+0x168>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005686:	4915      	ldr	r1, [pc, #84]	; (80056dc <xTaskIncrementTick+0x164>)
 8005688:	4613      	mov	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d901      	bls.n	800569c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005698:	2301      	movs	r3, #1
 800569a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800569c:	4b11      	ldr	r3, [pc, #68]	; (80056e4 <xTaskIncrementTick+0x16c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d007      	beq.n	80056b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80056a4:	2301      	movs	r3, #1
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	e004      	b.n	80056b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80056aa:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <xTaskIncrementTick+0x170>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3301      	adds	r3, #1
 80056b0:	4a0d      	ldr	r2, [pc, #52]	; (80056e8 <xTaskIncrementTick+0x170>)
 80056b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80056b4:	697b      	ldr	r3, [r7, #20]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000dc0 	.word	0x20000dc0
 80056c4:	20000d9c 	.word	0x20000d9c
 80056c8:	20000d50 	.word	0x20000d50
 80056cc:	20000d54 	.word	0x20000d54
 80056d0:	20000db0 	.word	0x20000db0
 80056d4:	20000db8 	.word	0x20000db8
 80056d8:	20000da0 	.word	0x20000da0
 80056dc:	200008c8 	.word	0x200008c8
 80056e0:	200008c4 	.word	0x200008c4
 80056e4:	20000dac 	.word	0x20000dac
 80056e8:	20000da8 	.word	0x20000da8

080056ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056f2:	4b2a      	ldr	r3, [pc, #168]	; (800579c <vTaskSwitchContext+0xb0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056fa:	4b29      	ldr	r3, [pc, #164]	; (80057a0 <vTaskSwitchContext+0xb4>)
 80056fc:	2201      	movs	r2, #1
 80056fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005700:	e046      	b.n	8005790 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005702:	4b27      	ldr	r3, [pc, #156]	; (80057a0 <vTaskSwitchContext+0xb4>)
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005708:	4b26      	ldr	r3, [pc, #152]	; (80057a4 <vTaskSwitchContext+0xb8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	e010      	b.n	8005732 <vTaskSwitchContext+0x46>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10a      	bne.n	800572c <vTaskSwitchContext+0x40>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	607b      	str	r3, [r7, #4]
}
 8005728:	bf00      	nop
 800572a:	e7fe      	b.n	800572a <vTaskSwitchContext+0x3e>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3b01      	subs	r3, #1
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	491d      	ldr	r1, [pc, #116]	; (80057a8 <vTaskSwitchContext+0xbc>)
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0e4      	beq.n	8005710 <vTaskSwitchContext+0x24>
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <vTaskSwitchContext+0xbc>)
 8005752:	4413      	add	r3, r2
 8005754:	60bb      	str	r3, [r7, #8]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	605a      	str	r2, [r3, #4]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	3308      	adds	r3, #8
 8005768:	429a      	cmp	r2, r3
 800576a:	d104      	bne.n	8005776 <vTaskSwitchContext+0x8a>
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	605a      	str	r2, [r3, #4]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4a0b      	ldr	r2, [pc, #44]	; (80057ac <vTaskSwitchContext+0xc0>)
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	4a08      	ldr	r2, [pc, #32]	; (80057a4 <vTaskSwitchContext+0xb8>)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005786:	4b09      	ldr	r3, [pc, #36]	; (80057ac <vTaskSwitchContext+0xc0>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3354      	adds	r3, #84	; 0x54
 800578c:	4a08      	ldr	r2, [pc, #32]	; (80057b0 <vTaskSwitchContext+0xc4>)
 800578e:	6013      	str	r3, [r2, #0]
}
 8005790:	bf00      	nop
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	20000dc0 	.word	0x20000dc0
 80057a0:	20000dac 	.word	0x20000dac
 80057a4:	20000da0 	.word	0x20000da0
 80057a8:	200008c8 	.word	0x200008c8
 80057ac:	200008c4 	.word	0x200008c4
 80057b0:	20000030 	.word	0x20000030

080057b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	60fb      	str	r3, [r7, #12]
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057da:	4b07      	ldr	r3, [pc, #28]	; (80057f8 <vTaskPlaceOnEventList+0x44>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3318      	adds	r3, #24
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fe fddb 	bl	800439e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057e8:	2101      	movs	r1, #1
 80057ea:	6838      	ldr	r0, [r7, #0]
 80057ec:	f000 fa80 	bl	8005cf0 <prvAddCurrentTaskToDelayedList>
}
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	200008c4 	.word	0x200008c4

080057fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10a      	bne.n	8005824 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	617b      	str	r3, [r7, #20]
}
 8005820:	bf00      	nop
 8005822:	e7fe      	b.n	8005822 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005824:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <vTaskPlaceOnEventListRestricted+0x54>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3318      	adds	r3, #24
 800582a:	4619      	mov	r1, r3
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f7fe fd92 	bl	8004356 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005838:	f04f 33ff 	mov.w	r3, #4294967295
 800583c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	68b8      	ldr	r0, [r7, #8]
 8005842:	f000 fa55 	bl	8005cf0 <prvAddCurrentTaskToDelayedList>
	}
 8005846:	bf00      	nop
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	200008c4 	.word	0x200008c4

08005854 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	60fb      	str	r3, [r7, #12]
}
 800587c:	bf00      	nop
 800587e:	e7fe      	b.n	800587e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	3318      	adds	r3, #24
 8005884:	4618      	mov	r0, r3
 8005886:	f7fe fdc3 	bl	8004410 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800588a:	4b1e      	ldr	r3, [pc, #120]	; (8005904 <xTaskRemoveFromEventList+0xb0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d11d      	bne.n	80058ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	3304      	adds	r3, #4
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe fdba 	bl	8004410 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a0:	4b19      	ldr	r3, [pc, #100]	; (8005908 <xTaskRemoveFromEventList+0xb4>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d903      	bls.n	80058b0 <xTaskRemoveFromEventList+0x5c>
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	4a16      	ldr	r2, [pc, #88]	; (8005908 <xTaskRemoveFromEventList+0xb4>)
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4a13      	ldr	r2, [pc, #76]	; (800590c <xTaskRemoveFromEventList+0xb8>)
 80058be:	441a      	add	r2, r3
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f7fe fd45 	bl	8004356 <vListInsertEnd>
 80058cc:	e005      	b.n	80058da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	3318      	adds	r3, #24
 80058d2:	4619      	mov	r1, r3
 80058d4:	480e      	ldr	r0, [pc, #56]	; (8005910 <xTaskRemoveFromEventList+0xbc>)
 80058d6:	f7fe fd3e 	bl	8004356 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058de:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <xTaskRemoveFromEventList+0xc0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d905      	bls.n	80058f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058e8:	2301      	movs	r3, #1
 80058ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058ec:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <xTaskRemoveFromEventList+0xc4>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e001      	b.n	80058f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80058f4:	2300      	movs	r3, #0
 80058f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80058f8:	697b      	ldr	r3, [r7, #20]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000dc0 	.word	0x20000dc0
 8005908:	20000da0 	.word	0x20000da0
 800590c:	200008c8 	.word	0x200008c8
 8005910:	20000d58 	.word	0x20000d58
 8005914:	200008c4 	.word	0x200008c4
 8005918:	20000dac 	.word	0x20000dac

0800591c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005924:	4b06      	ldr	r3, [pc, #24]	; (8005940 <vTaskInternalSetTimeOutState+0x24>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800592c:	4b05      	ldr	r3, [pc, #20]	; (8005944 <vTaskInternalSetTimeOutState+0x28>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	605a      	str	r2, [r3, #4]
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	20000db0 	.word	0x20000db0
 8005944:	20000d9c 	.word	0x20000d9c

08005948 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	613b      	str	r3, [r7, #16]
}
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10a      	bne.n	800598a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	60fb      	str	r3, [r7, #12]
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800598a:	f000 fe83 	bl	8006694 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800598e:	4b1d      	ldr	r3, [pc, #116]	; (8005a04 <xTaskCheckForTimeOut+0xbc>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a6:	d102      	bne.n	80059ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61fb      	str	r3, [r7, #28]
 80059ac:	e023      	b.n	80059f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <xTaskCheckForTimeOut+0xc0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d007      	beq.n	80059ca <xTaskCheckForTimeOut+0x82>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d302      	bcc.n	80059ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80059c4:	2301      	movs	r3, #1
 80059c6:	61fb      	str	r3, [r7, #28]
 80059c8:	e015      	b.n	80059f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d20b      	bcs.n	80059ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	1ad2      	subs	r2, r2, r3
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7ff ff9b 	bl	800591c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	e004      	b.n	80059f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059f2:	2301      	movs	r3, #1
 80059f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059f6:	f000 fe7d 	bl	80066f4 <vPortExitCritical>

	return xReturn;
 80059fa:	69fb      	ldr	r3, [r7, #28]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3720      	adds	r7, #32
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20000d9c 	.word	0x20000d9c
 8005a08:	20000db0 	.word	0x20000db0

08005a0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a10:	4b03      	ldr	r3, [pc, #12]	; (8005a20 <vTaskMissedYield+0x14>)
 8005a12:	2201      	movs	r2, #1
 8005a14:	601a      	str	r2, [r3, #0]
}
 8005a16:	bf00      	nop
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	20000dac 	.word	0x20000dac

08005a24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a2c:	f000 f852 	bl	8005ad4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <prvIdleTask+0x28>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d9f9      	bls.n	8005a2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a38:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <prvIdleTask+0x2c>)
 8005a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a48:	e7f0      	b.n	8005a2c <prvIdleTask+0x8>
 8005a4a:	bf00      	nop
 8005a4c:	200008c8 	.word	0x200008c8
 8005a50:	e000ed04 	.word	0xe000ed04

08005a54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	607b      	str	r3, [r7, #4]
 8005a5e:	e00c      	b.n	8005a7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4a12      	ldr	r2, [pc, #72]	; (8005ab4 <prvInitialiseTaskLists+0x60>)
 8005a6c:	4413      	add	r3, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe fc44 	bl	80042fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3301      	adds	r3, #1
 8005a78:	607b      	str	r3, [r7, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b37      	cmp	r3, #55	; 0x37
 8005a7e:	d9ef      	bls.n	8005a60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a80:	480d      	ldr	r0, [pc, #52]	; (8005ab8 <prvInitialiseTaskLists+0x64>)
 8005a82:	f7fe fc3b 	bl	80042fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a86:	480d      	ldr	r0, [pc, #52]	; (8005abc <prvInitialiseTaskLists+0x68>)
 8005a88:	f7fe fc38 	bl	80042fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a8c:	480c      	ldr	r0, [pc, #48]	; (8005ac0 <prvInitialiseTaskLists+0x6c>)
 8005a8e:	f7fe fc35 	bl	80042fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a92:	480c      	ldr	r0, [pc, #48]	; (8005ac4 <prvInitialiseTaskLists+0x70>)
 8005a94:	f7fe fc32 	bl	80042fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a98:	480b      	ldr	r0, [pc, #44]	; (8005ac8 <prvInitialiseTaskLists+0x74>)
 8005a9a:	f7fe fc2f 	bl	80042fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a9e:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <prvInitialiseTaskLists+0x78>)
 8005aa0:	4a05      	ldr	r2, [pc, #20]	; (8005ab8 <prvInitialiseTaskLists+0x64>)
 8005aa2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <prvInitialiseTaskLists+0x7c>)
 8005aa6:	4a05      	ldr	r2, [pc, #20]	; (8005abc <prvInitialiseTaskLists+0x68>)
 8005aa8:	601a      	str	r2, [r3, #0]
}
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200008c8 	.word	0x200008c8
 8005ab8:	20000d28 	.word	0x20000d28
 8005abc:	20000d3c 	.word	0x20000d3c
 8005ac0:	20000d58 	.word	0x20000d58
 8005ac4:	20000d6c 	.word	0x20000d6c
 8005ac8:	20000d84 	.word	0x20000d84
 8005acc:	20000d50 	.word	0x20000d50
 8005ad0:	20000d54 	.word	0x20000d54

08005ad4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ada:	e019      	b.n	8005b10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005adc:	f000 fdda 	bl	8006694 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae0:	4b10      	ldr	r3, [pc, #64]	; (8005b24 <prvCheckTasksWaitingTermination+0x50>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fe fc8f 	bl	8004410 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005af2:	4b0d      	ldr	r3, [pc, #52]	; (8005b28 <prvCheckTasksWaitingTermination+0x54>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	4a0b      	ldr	r2, [pc, #44]	; (8005b28 <prvCheckTasksWaitingTermination+0x54>)
 8005afa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005afc:	4b0b      	ldr	r3, [pc, #44]	; (8005b2c <prvCheckTasksWaitingTermination+0x58>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	4a0a      	ldr	r2, [pc, #40]	; (8005b2c <prvCheckTasksWaitingTermination+0x58>)
 8005b04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b06:	f000 fdf5 	bl	80066f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f810 	bl	8005b30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b10:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <prvCheckTasksWaitingTermination+0x58>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e1      	bne.n	8005adc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000d6c 	.word	0x20000d6c
 8005b28:	20000d98 	.word	0x20000d98
 8005b2c:	20000d80 	.word	0x20000d80

08005b30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	3354      	adds	r3, #84	; 0x54
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f001 fafb 	bl	8007138 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d108      	bne.n	8005b5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 ff8d 	bl	8006a70 <vPortFree>
				vPortFree( pxTCB );
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 ff8a 	bl	8006a70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b5c:	e018      	b.n	8005b90 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d103      	bne.n	8005b70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 ff81 	bl	8006a70 <vPortFree>
	}
 8005b6e:	e00f      	b.n	8005b90 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d00a      	beq.n	8005b90 <prvDeleteTCB+0x60>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	60fb      	str	r3, [r7, #12]
}
 8005b8c:	bf00      	nop
 8005b8e:	e7fe      	b.n	8005b8e <prvDeleteTCB+0x5e>
	}
 8005b90:	bf00      	nop
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b9e:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <prvResetNextTaskUnblockTime+0x38>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d104      	bne.n	8005bb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ba8:	4b0a      	ldr	r3, [pc, #40]	; (8005bd4 <prvResetNextTaskUnblockTime+0x3c>)
 8005baa:	f04f 32ff 	mov.w	r2, #4294967295
 8005bae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005bb0:	e008      	b.n	8005bc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bb2:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <prvResetNextTaskUnblockTime+0x38>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	4a04      	ldr	r2, [pc, #16]	; (8005bd4 <prvResetNextTaskUnblockTime+0x3c>)
 8005bc2:	6013      	str	r3, [r2, #0]
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	20000d50 	.word	0x20000d50
 8005bd4:	20000db8 	.word	0x20000db8

08005bd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005bde:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <xTaskGetSchedulerState+0x34>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d102      	bne.n	8005bec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005be6:	2301      	movs	r3, #1
 8005be8:	607b      	str	r3, [r7, #4]
 8005bea:	e008      	b.n	8005bfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bec:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <xTaskGetSchedulerState+0x38>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d102      	bne.n	8005bfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	607b      	str	r3, [r7, #4]
 8005bf8:	e001      	b.n	8005bfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bfe:	687b      	ldr	r3, [r7, #4]
	}
 8005c00:	4618      	mov	r0, r3
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	20000da4 	.word	0x20000da4
 8005c10:	20000dc0 	.word	0x20000dc0

08005c14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d056      	beq.n	8005cd8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c2a:	4b2e      	ldr	r3, [pc, #184]	; (8005ce4 <xTaskPriorityDisinherit+0xd0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d00a      	beq.n	8005c4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	60fb      	str	r3, [r7, #12]
}
 8005c46:	bf00      	nop
 8005c48:	e7fe      	b.n	8005c48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10a      	bne.n	8005c68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	60bb      	str	r3, [r7, #8]
}
 8005c64:	bf00      	nop
 8005c66:	e7fe      	b.n	8005c66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c6c:	1e5a      	subs	r2, r3, #1
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d02c      	beq.n	8005cd8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d128      	bne.n	8005cd8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe fbc0 	bl	8004410 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca8:	4b0f      	ldr	r3, [pc, #60]	; (8005ce8 <xTaskPriorityDisinherit+0xd4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d903      	bls.n	8005cb8 <xTaskPriorityDisinherit+0xa4>
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	4a0c      	ldr	r2, [pc, #48]	; (8005ce8 <xTaskPriorityDisinherit+0xd4>)
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4a09      	ldr	r2, [pc, #36]	; (8005cec <xTaskPriorityDisinherit+0xd8>)
 8005cc6:	441a      	add	r2, r3
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f7fe fb41 	bl	8004356 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cd8:	697b      	ldr	r3, [r7, #20]
	}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	200008c4 	.word	0x200008c4
 8005ce8:	20000da0 	.word	0x20000da0
 8005cec:	200008c8 	.word	0x200008c8

08005cf0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005cfa:	4b21      	ldr	r3, [pc, #132]	; (8005d80 <prvAddCurrentTaskToDelayedList+0x90>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d00:	4b20      	ldr	r3, [pc, #128]	; (8005d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe fb82 	bl	8004410 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d12:	d10a      	bne.n	8005d2a <prvAddCurrentTaskToDelayedList+0x3a>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d007      	beq.n	8005d2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d1a:	4b1a      	ldr	r3, [pc, #104]	; (8005d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	4619      	mov	r1, r3
 8005d22:	4819      	ldr	r0, [pc, #100]	; (8005d88 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d24:	f7fe fb17 	bl	8004356 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d28:	e026      	b.n	8005d78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4413      	add	r3, r2
 8005d30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d32:	4b14      	ldr	r3, [pc, #80]	; (8005d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d209      	bcs.n	8005d56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d42:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4b0f      	ldr	r3, [pc, #60]	; (8005d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	f7fe fb25 	bl	800439e <vListInsert>
}
 8005d54:	e010      	b.n	8005d78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d56:	4b0e      	ldr	r3, [pc, #56]	; (8005d90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	4619      	mov	r1, r3
 8005d62:	4610      	mov	r0, r2
 8005d64:	f7fe fb1b 	bl	800439e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d68:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d202      	bcs.n	8005d78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d72:	4a08      	ldr	r2, [pc, #32]	; (8005d94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	6013      	str	r3, [r2, #0]
}
 8005d78:	bf00      	nop
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20000d9c 	.word	0x20000d9c
 8005d84:	200008c4 	.word	0x200008c4
 8005d88:	20000d84 	.word	0x20000d84
 8005d8c:	20000d54 	.word	0x20000d54
 8005d90:	20000d50 	.word	0x20000d50
 8005d94:	20000db8 	.word	0x20000db8

08005d98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08a      	sub	sp, #40	; 0x28
 8005d9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005da2:	f000 fb07 	bl	80063b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005da6:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <xTimerCreateTimerTask+0x80>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d021      	beq.n	8005df2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005db6:	1d3a      	adds	r2, r7, #4
 8005db8:	f107 0108 	add.w	r1, r7, #8
 8005dbc:	f107 030c 	add.w	r3, r7, #12
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fe fa81 	bl	80042c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	9202      	str	r2, [sp, #8]
 8005dce:	9301      	str	r3, [sp, #4]
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	460a      	mov	r2, r1
 8005dd8:	4910      	ldr	r1, [pc, #64]	; (8005e1c <xTimerCreateTimerTask+0x84>)
 8005dda:	4811      	ldr	r0, [pc, #68]	; (8005e20 <xTimerCreateTimerTask+0x88>)
 8005ddc:	f7ff f8b4 	bl	8004f48 <xTaskCreateStatic>
 8005de0:	4603      	mov	r3, r0
 8005de2:	4a10      	ldr	r2, [pc, #64]	; (8005e24 <xTimerCreateTimerTask+0x8c>)
 8005de4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005de6:	4b0f      	ldr	r3, [pc, #60]	; (8005e24 <xTimerCreateTimerTask+0x8c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005dee:	2301      	movs	r3, #1
 8005df0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	613b      	str	r3, [r7, #16]
}
 8005e0a:	bf00      	nop
 8005e0c:	e7fe      	b.n	8005e0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e0e:	697b      	ldr	r3, [r7, #20]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20000df4 	.word	0x20000df4
 8005e1c:	08008004 	.word	0x08008004
 8005e20:	08005f5d 	.word	0x08005f5d
 8005e24:	20000df8 	.word	0x20000df8

08005e28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10a      	bne.n	8005e56 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	623b      	str	r3, [r7, #32]
}
 8005e52:	bf00      	nop
 8005e54:	e7fe      	b.n	8005e54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e56:	4b1a      	ldr	r3, [pc, #104]	; (8005ec0 <xTimerGenericCommand+0x98>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d02a      	beq.n	8005eb4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b05      	cmp	r3, #5
 8005e6e:	dc18      	bgt.n	8005ea2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e70:	f7ff feb2 	bl	8005bd8 <xTaskGetSchedulerState>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d109      	bne.n	8005e8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e7a:	4b11      	ldr	r3, [pc, #68]	; (8005ec0 <xTimerGenericCommand+0x98>)
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	f107 0110 	add.w	r1, r7, #16
 8005e82:	2300      	movs	r3, #0
 8005e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e86:	f7fe fc77 	bl	8004778 <xQueueGenericSend>
 8005e8a:	6278      	str	r0, [r7, #36]	; 0x24
 8005e8c:	e012      	b.n	8005eb4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <xTimerGenericCommand+0x98>)
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	f107 0110 	add.w	r1, r7, #16
 8005e96:	2300      	movs	r3, #0
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f7fe fc6d 	bl	8004778 <xQueueGenericSend>
 8005e9e:	6278      	str	r0, [r7, #36]	; 0x24
 8005ea0:	e008      	b.n	8005eb4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ea2:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <xTimerGenericCommand+0x98>)
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	f107 0110 	add.w	r1, r7, #16
 8005eaa:	2300      	movs	r3, #0
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	f7fe fd61 	bl	8004974 <xQueueGenericSendFromISR>
 8005eb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3728      	adds	r7, #40	; 0x28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000df4 	.word	0x20000df4

08005ec4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b088      	sub	sp, #32
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ece:	4b22      	ldr	r3, [pc, #136]	; (8005f58 <prvProcessExpiredTimer+0x94>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	3304      	adds	r3, #4
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe fa97 	bl	8004410 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d022      	beq.n	8005f36 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	699a      	ldr	r2, [r3, #24]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	18d1      	adds	r1, r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	6978      	ldr	r0, [r7, #20]
 8005efe:	f000 f8d1 	bl	80060a4 <prvInsertTimerInActiveList>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01f      	beq.n	8005f48 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f08:	2300      	movs	r3, #0
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	2100      	movs	r1, #0
 8005f12:	6978      	ldr	r0, [r7, #20]
 8005f14:	f7ff ff88 	bl	8005e28 <xTimerGenericCommand>
 8005f18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d113      	bne.n	8005f48 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	60fb      	str	r3, [r7, #12]
}
 8005f32:	bf00      	nop
 8005f34:	e7fe      	b.n	8005f34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f3c:	f023 0301 	bic.w	r3, r3, #1
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	6978      	ldr	r0, [r7, #20]
 8005f4e:	4798      	blx	r3
}
 8005f50:	bf00      	nop
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	20000dec 	.word	0x20000dec

08005f5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f64:	f107 0308 	add.w	r3, r7, #8
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 f857 	bl	800601c <prvGetNextExpireTime>
 8005f6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4619      	mov	r1, r3
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f803 	bl	8005f80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f7a:	f000 f8d5 	bl	8006128 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f7e:	e7f1      	b.n	8005f64 <prvTimerTask+0x8>

08005f80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f8a:	f7ff fa39 	bl	8005400 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f8e:	f107 0308 	add.w	r3, r7, #8
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 f866 	bl	8006064 <prvSampleTimeNow>
 8005f98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d130      	bne.n	8006002 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10a      	bne.n	8005fbc <prvProcessTimerOrBlockTask+0x3c>
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d806      	bhi.n	8005fbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005fae:	f7ff fa35 	bl	800541c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005fb2:	68f9      	ldr	r1, [r7, #12]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff ff85 	bl	8005ec4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005fba:	e024      	b.n	8006006 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d008      	beq.n	8005fd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005fc2:	4b13      	ldr	r3, [pc, #76]	; (8006010 <prvProcessTimerOrBlockTask+0x90>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <prvProcessTimerOrBlockTask+0x50>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e000      	b.n	8005fd2 <prvProcessTimerOrBlockTask+0x52>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005fd4:	4b0f      	ldr	r3, [pc, #60]	; (8006014 <prvProcessTimerOrBlockTask+0x94>)
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	f7fe ff7d 	bl	8004ee0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005fe6:	f7ff fa19 	bl	800541c <xTaskResumeAll>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10a      	bne.n	8006006 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ff0:	4b09      	ldr	r3, [pc, #36]	; (8006018 <prvProcessTimerOrBlockTask+0x98>)
 8005ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	f3bf 8f6f 	isb	sy
}
 8006000:	e001      	b.n	8006006 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006002:	f7ff fa0b 	bl	800541c <xTaskResumeAll>
}
 8006006:	bf00      	nop
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20000df0 	.word	0x20000df0
 8006014:	20000df4 	.word	0x20000df4
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006024:	4b0e      	ldr	r3, [pc, #56]	; (8006060 <prvGetNextExpireTime+0x44>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <prvGetNextExpireTime+0x16>
 800602e:	2201      	movs	r2, #1
 8006030:	e000      	b.n	8006034 <prvGetNextExpireTime+0x18>
 8006032:	2200      	movs	r2, #0
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d105      	bne.n	800604c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006040:	4b07      	ldr	r3, [pc, #28]	; (8006060 <prvGetNextExpireTime+0x44>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	e001      	b.n	8006050 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006050:	68fb      	ldr	r3, [r7, #12]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	20000dec 	.word	0x20000dec

08006064 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800606c:	f7ff fa74 	bl	8005558 <xTaskGetTickCount>
 8006070:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006072:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <prvSampleTimeNow+0x3c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	429a      	cmp	r2, r3
 800607a:	d205      	bcs.n	8006088 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800607c:	f000 f936 	bl	80062ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	e002      	b.n	800608e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800608e:	4a04      	ldr	r2, [pc, #16]	; (80060a0 <prvSampleTimeNow+0x3c>)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006094:	68fb      	ldr	r3, [r7, #12]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20000dfc 	.word	0x20000dfc

080060a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d812      	bhi.n	80060f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	1ad2      	subs	r2, r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d302      	bcc.n	80060de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80060d8:	2301      	movs	r3, #1
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	e01b      	b.n	8006116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060de:	4b10      	ldr	r3, [pc, #64]	; (8006120 <prvInsertTimerInActiveList+0x7c>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	3304      	adds	r3, #4
 80060e6:	4619      	mov	r1, r3
 80060e8:	4610      	mov	r0, r2
 80060ea:	f7fe f958 	bl	800439e <vListInsert>
 80060ee:	e012      	b.n	8006116 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d206      	bcs.n	8006106 <prvInsertTimerInActiveList+0x62>
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d302      	bcc.n	8006106 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006100:	2301      	movs	r3, #1
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	e007      	b.n	8006116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006106:	4b07      	ldr	r3, [pc, #28]	; (8006124 <prvInsertTimerInActiveList+0x80>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3304      	adds	r3, #4
 800610e:	4619      	mov	r1, r3
 8006110:	4610      	mov	r0, r2
 8006112:	f7fe f944 	bl	800439e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006116:	697b      	ldr	r3, [r7, #20]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20000df0 	.word	0x20000df0
 8006124:	20000dec 	.word	0x20000dec

08006128 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08e      	sub	sp, #56	; 0x38
 800612c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800612e:	e0ca      	b.n	80062c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	da18      	bge.n	8006168 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006136:	1d3b      	adds	r3, r7, #4
 8006138:	3304      	adds	r3, #4
 800613a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	61fb      	str	r3, [r7, #28]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800615e:	6850      	ldr	r0, [r2, #4]
 8006160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006162:	6892      	ldr	r2, [r2, #8]
 8006164:	4611      	mov	r1, r2
 8006166:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	f2c0 80aa 	blt.w	80062c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d004      	beq.n	8006186 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	3304      	adds	r3, #4
 8006180:	4618      	mov	r0, r3
 8006182:	f7fe f945 	bl	8004410 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006186:	463b      	mov	r3, r7
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff ff6b 	bl	8006064 <prvSampleTimeNow>
 800618e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b09      	cmp	r3, #9
 8006194:	f200 8097 	bhi.w	80062c6 <prvProcessReceivedCommands+0x19e>
 8006198:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <prvProcessReceivedCommands+0x78>)
 800619a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619e:	bf00      	nop
 80061a0:	080061c9 	.word	0x080061c9
 80061a4:	080061c9 	.word	0x080061c9
 80061a8:	080061c9 	.word	0x080061c9
 80061ac:	0800623d 	.word	0x0800623d
 80061b0:	08006251 	.word	0x08006251
 80061b4:	0800629b 	.word	0x0800629b
 80061b8:	080061c9 	.word	0x080061c9
 80061bc:	080061c9 	.word	0x080061c9
 80061c0:	0800623d 	.word	0x0800623d
 80061c4:	08006251 	.word	0x08006251
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ce:	f043 0301 	orr.w	r3, r3, #1
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	18d1      	adds	r1, r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e8:	f7ff ff5c 	bl	80060a4 <prvInsertTimerInActiveList>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d069      	beq.n	80062c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d05e      	beq.n	80062c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	441a      	add	r2, r3
 8006210:	2300      	movs	r3, #0
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	2300      	movs	r3, #0
 8006216:	2100      	movs	r1, #0
 8006218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800621a:	f7ff fe05 	bl	8005e28 <xTimerGenericCommand>
 800621e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d14f      	bne.n	80062c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	61bb      	str	r3, [r7, #24]
}
 8006238:	bf00      	nop
 800623a:	e7fe      	b.n	800623a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006242:	f023 0301 	bic.w	r3, r3, #1
 8006246:	b2da      	uxtb	r2, r3
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800624e:	e03a      	b.n	80062c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006256:	f043 0301 	orr.w	r3, r3, #1
 800625a:	b2da      	uxtb	r2, r3
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006266:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	617b      	str	r3, [r7, #20]
}
 8006282:	bf00      	nop
 8006284:	e7fe      	b.n	8006284 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	18d1      	adds	r1, r2, r3
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006294:	f7ff ff06 	bl	80060a4 <prvInsertTimerInActiveList>
					break;
 8006298:	e015      	b.n	80062c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d103      	bne.n	80062b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80062a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062aa:	f000 fbe1 	bl	8006a70 <vPortFree>
 80062ae:	e00a      	b.n	80062c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062b6:	f023 0301 	bic.w	r3, r3, #1
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062c2:	e000      	b.n	80062c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80062c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062c6:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <prvProcessReceivedCommands+0x1c0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	1d39      	adds	r1, r7, #4
 80062cc:	2200      	movs	r2, #0
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fe fbec 	bl	8004aac <xQueueReceive>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f47f af2a 	bne.w	8006130 <prvProcessReceivedCommands+0x8>
	}
}
 80062dc:	bf00      	nop
 80062de:	bf00      	nop
 80062e0:	3730      	adds	r7, #48	; 0x30
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20000df4 	.word	0x20000df4

080062ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062f2:	e048      	b.n	8006386 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062f4:	4b2d      	ldr	r3, [pc, #180]	; (80063ac <prvSwitchTimerLists+0xc0>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062fe:	4b2b      	ldr	r3, [pc, #172]	; (80063ac <prvSwitchTimerLists+0xc0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3304      	adds	r3, #4
 800630c:	4618      	mov	r0, r3
 800630e:	f7fe f87f 	bl	8004410 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b00      	cmp	r3, #0
 8006326:	d02e      	beq.n	8006386 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4413      	add	r3, r2
 8006330:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	429a      	cmp	r2, r3
 8006338:	d90e      	bls.n	8006358 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006346:	4b19      	ldr	r3, [pc, #100]	; (80063ac <prvSwitchTimerLists+0xc0>)
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3304      	adds	r3, #4
 800634e:	4619      	mov	r1, r3
 8006350:	4610      	mov	r0, r2
 8006352:	f7fe f824 	bl	800439e <vListInsert>
 8006356:	e016      	b.n	8006386 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006358:	2300      	movs	r3, #0
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	2300      	movs	r3, #0
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	2100      	movs	r1, #0
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f7ff fd60 	bl	8005e28 <xTimerGenericCommand>
 8006368:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	603b      	str	r3, [r7, #0]
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006386:	4b09      	ldr	r3, [pc, #36]	; (80063ac <prvSwitchTimerLists+0xc0>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1b1      	bne.n	80062f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006390:	4b06      	ldr	r3, [pc, #24]	; (80063ac <prvSwitchTimerLists+0xc0>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006396:	4b06      	ldr	r3, [pc, #24]	; (80063b0 <prvSwitchTimerLists+0xc4>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a04      	ldr	r2, [pc, #16]	; (80063ac <prvSwitchTimerLists+0xc0>)
 800639c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800639e:	4a04      	ldr	r2, [pc, #16]	; (80063b0 <prvSwitchTimerLists+0xc4>)
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	6013      	str	r3, [r2, #0]
}
 80063a4:	bf00      	nop
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20000dec 	.word	0x20000dec
 80063b0:	20000df0 	.word	0x20000df0

080063b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063ba:	f000 f96b 	bl	8006694 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063be:	4b15      	ldr	r3, [pc, #84]	; (8006414 <prvCheckForValidListAndQueue+0x60>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d120      	bne.n	8006408 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063c6:	4814      	ldr	r0, [pc, #80]	; (8006418 <prvCheckForValidListAndQueue+0x64>)
 80063c8:	f7fd ff98 	bl	80042fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80063cc:	4813      	ldr	r0, [pc, #76]	; (800641c <prvCheckForValidListAndQueue+0x68>)
 80063ce:	f7fd ff95 	bl	80042fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80063d2:	4b13      	ldr	r3, [pc, #76]	; (8006420 <prvCheckForValidListAndQueue+0x6c>)
 80063d4:	4a10      	ldr	r2, [pc, #64]	; (8006418 <prvCheckForValidListAndQueue+0x64>)
 80063d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80063d8:	4b12      	ldr	r3, [pc, #72]	; (8006424 <prvCheckForValidListAndQueue+0x70>)
 80063da:	4a10      	ldr	r2, [pc, #64]	; (800641c <prvCheckForValidListAndQueue+0x68>)
 80063dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80063de:	2300      	movs	r3, #0
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	4b11      	ldr	r3, [pc, #68]	; (8006428 <prvCheckForValidListAndQueue+0x74>)
 80063e4:	4a11      	ldr	r2, [pc, #68]	; (800642c <prvCheckForValidListAndQueue+0x78>)
 80063e6:	2110      	movs	r1, #16
 80063e8:	200a      	movs	r0, #10
 80063ea:	f7fe f8a3 	bl	8004534 <xQueueGenericCreateStatic>
 80063ee:	4603      	mov	r3, r0
 80063f0:	4a08      	ldr	r2, [pc, #32]	; (8006414 <prvCheckForValidListAndQueue+0x60>)
 80063f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80063f4:	4b07      	ldr	r3, [pc, #28]	; (8006414 <prvCheckForValidListAndQueue+0x60>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d005      	beq.n	8006408 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80063fc:	4b05      	ldr	r3, [pc, #20]	; (8006414 <prvCheckForValidListAndQueue+0x60>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	490b      	ldr	r1, [pc, #44]	; (8006430 <prvCheckForValidListAndQueue+0x7c>)
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fd42 	bl	8004e8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006408:	f000 f974 	bl	80066f4 <vPortExitCritical>
}
 800640c:	bf00      	nop
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20000df4 	.word	0x20000df4
 8006418:	20000dc4 	.word	0x20000dc4
 800641c:	20000dd8 	.word	0x20000dd8
 8006420:	20000dec 	.word	0x20000dec
 8006424:	20000df0 	.word	0x20000df0
 8006428:	20000ea0 	.word	0x20000ea0
 800642c:	20000e00 	.word	0x20000e00
 8006430:	0800800c 	.word	0x0800800c

08006434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3b04      	subs	r3, #4
 8006444:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800644c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3b04      	subs	r3, #4
 8006452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f023 0201 	bic.w	r2, r3, #1
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3b04      	subs	r3, #4
 8006462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006464:	4a0c      	ldr	r2, [pc, #48]	; (8006498 <pxPortInitialiseStack+0x64>)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3b14      	subs	r3, #20
 800646e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3b04      	subs	r3, #4
 800647a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f06f 0202 	mvn.w	r2, #2
 8006482:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	3b20      	subs	r3, #32
 8006488:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800648a:	68fb      	ldr	r3, [r7, #12]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	0800649d 	.word	0x0800649d

0800649c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064a6:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <prvTaskExitError+0x54>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ae:	d00a      	beq.n	80064c6 <prvTaskExitError+0x2a>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	60fb      	str	r3, [r7, #12]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <prvTaskExitError+0x28>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	60bb      	str	r3, [r7, #8]
}
 80064d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80064da:	bf00      	nop
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0fc      	beq.n	80064dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80064e2:	bf00      	nop
 80064e4:	bf00      	nop
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	2000002c 	.word	0x2000002c
	...

08006500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006500:	4b07      	ldr	r3, [pc, #28]	; (8006520 <pxCurrentTCBConst2>)
 8006502:	6819      	ldr	r1, [r3, #0]
 8006504:	6808      	ldr	r0, [r1, #0]
 8006506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650a:	f380 8809 	msr	PSP, r0
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f04f 0000 	mov.w	r0, #0
 8006516:	f380 8811 	msr	BASEPRI, r0
 800651a:	4770      	bx	lr
 800651c:	f3af 8000 	nop.w

08006520 <pxCurrentTCBConst2>:
 8006520:	200008c4 	.word	0x200008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop

08006528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006528:	4808      	ldr	r0, [pc, #32]	; (800654c <prvPortStartFirstTask+0x24>)
 800652a:	6800      	ldr	r0, [r0, #0]
 800652c:	6800      	ldr	r0, [r0, #0]
 800652e:	f380 8808 	msr	MSP, r0
 8006532:	f04f 0000 	mov.w	r0, #0
 8006536:	f380 8814 	msr	CONTROL, r0
 800653a:	b662      	cpsie	i
 800653c:	b661      	cpsie	f
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	df00      	svc	0
 8006548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800654a:	bf00      	nop
 800654c:	e000ed08 	.word	0xe000ed08

08006550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006556:	4b46      	ldr	r3, [pc, #280]	; (8006670 <xPortStartScheduler+0x120>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a46      	ldr	r2, [pc, #280]	; (8006674 <xPortStartScheduler+0x124>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10a      	bne.n	8006576 <xPortStartScheduler+0x26>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	613b      	str	r3, [r7, #16]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006576:	4b3e      	ldr	r3, [pc, #248]	; (8006670 <xPortStartScheduler+0x120>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a3f      	ldr	r2, [pc, #252]	; (8006678 <xPortStartScheduler+0x128>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d10a      	bne.n	8006596 <xPortStartScheduler+0x46>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	60fb      	str	r3, [r7, #12]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006596:	4b39      	ldr	r3, [pc, #228]	; (800667c <xPortStartScheduler+0x12c>)
 8006598:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	22ff      	movs	r2, #255	; 0xff
 80065a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	4b31      	ldr	r3, [pc, #196]	; (8006680 <xPortStartScheduler+0x130>)
 80065bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065be:	4b31      	ldr	r3, [pc, #196]	; (8006684 <xPortStartScheduler+0x134>)
 80065c0:	2207      	movs	r2, #7
 80065c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065c4:	e009      	b.n	80065da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80065c6:	4b2f      	ldr	r3, [pc, #188]	; (8006684 <xPortStartScheduler+0x134>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	4a2d      	ldr	r2, [pc, #180]	; (8006684 <xPortStartScheduler+0x134>)
 80065ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e2:	2b80      	cmp	r3, #128	; 0x80
 80065e4:	d0ef      	beq.n	80065c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80065e6:	4b27      	ldr	r3, [pc, #156]	; (8006684 <xPortStartScheduler+0x134>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f1c3 0307 	rsb	r3, r3, #7
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d00a      	beq.n	8006608 <xPortStartScheduler+0xb8>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	60bb      	str	r3, [r7, #8]
}
 8006604:	bf00      	nop
 8006606:	e7fe      	b.n	8006606 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006608:	4b1e      	ldr	r3, [pc, #120]	; (8006684 <xPortStartScheduler+0x134>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	021b      	lsls	r3, r3, #8
 800660e:	4a1d      	ldr	r2, [pc, #116]	; (8006684 <xPortStartScheduler+0x134>)
 8006610:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006612:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <xPortStartScheduler+0x134>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800661a:	4a1a      	ldr	r2, [pc, #104]	; (8006684 <xPortStartScheduler+0x134>)
 800661c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	b2da      	uxtb	r2, r3
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006626:	4b18      	ldr	r3, [pc, #96]	; (8006688 <xPortStartScheduler+0x138>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a17      	ldr	r2, [pc, #92]	; (8006688 <xPortStartScheduler+0x138>)
 800662c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006632:	4b15      	ldr	r3, [pc, #84]	; (8006688 <xPortStartScheduler+0x138>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a14      	ldr	r2, [pc, #80]	; (8006688 <xPortStartScheduler+0x138>)
 8006638:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800663c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800663e:	f000 f8dd 	bl	80067fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006642:	4b12      	ldr	r3, [pc, #72]	; (800668c <xPortStartScheduler+0x13c>)
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006648:	f000 f8fc 	bl	8006844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800664c:	4b10      	ldr	r3, [pc, #64]	; (8006690 <xPortStartScheduler+0x140>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a0f      	ldr	r2, [pc, #60]	; (8006690 <xPortStartScheduler+0x140>)
 8006652:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006656:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006658:	f7ff ff66 	bl	8006528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800665c:	f7ff f846 	bl	80056ec <vTaskSwitchContext>
	prvTaskExitError();
 8006660:	f7ff ff1c 	bl	800649c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	e000ed00 	.word	0xe000ed00
 8006674:	410fc271 	.word	0x410fc271
 8006678:	410fc270 	.word	0x410fc270
 800667c:	e000e400 	.word	0xe000e400
 8006680:	20000ef0 	.word	0x20000ef0
 8006684:	20000ef4 	.word	0x20000ef4
 8006688:	e000ed20 	.word	0xe000ed20
 800668c:	2000002c 	.word	0x2000002c
 8006690:	e000ef34 	.word	0xe000ef34

08006694 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	607b      	str	r3, [r7, #4]
}
 80066ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066ae:	4b0f      	ldr	r3, [pc, #60]	; (80066ec <vPortEnterCritical+0x58>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3301      	adds	r3, #1
 80066b4:	4a0d      	ldr	r2, [pc, #52]	; (80066ec <vPortEnterCritical+0x58>)
 80066b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066b8:	4b0c      	ldr	r3, [pc, #48]	; (80066ec <vPortEnterCritical+0x58>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d10f      	bne.n	80066e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066c0:	4b0b      	ldr	r3, [pc, #44]	; (80066f0 <vPortEnterCritical+0x5c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	603b      	str	r3, [r7, #0]
}
 80066dc:	bf00      	nop
 80066de:	e7fe      	b.n	80066de <vPortEnterCritical+0x4a>
	}
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	2000002c 	.word	0x2000002c
 80066f0:	e000ed04 	.word	0xe000ed04

080066f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066fa:	4b12      	ldr	r3, [pc, #72]	; (8006744 <vPortExitCritical+0x50>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10a      	bne.n	8006718 <vPortExitCritical+0x24>
	__asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	607b      	str	r3, [r7, #4]
}
 8006714:	bf00      	nop
 8006716:	e7fe      	b.n	8006716 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006718:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <vPortExitCritical+0x50>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3b01      	subs	r3, #1
 800671e:	4a09      	ldr	r2, [pc, #36]	; (8006744 <vPortExitCritical+0x50>)
 8006720:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006722:	4b08      	ldr	r3, [pc, #32]	; (8006744 <vPortExitCritical+0x50>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d105      	bne.n	8006736 <vPortExitCritical+0x42>
 800672a:	2300      	movs	r3, #0
 800672c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	f383 8811 	msr	BASEPRI, r3
}
 8006734:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	2000002c 	.word	0x2000002c
	...

08006750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006750:	f3ef 8009 	mrs	r0, PSP
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <pxCurrentTCBConst>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	f01e 0f10 	tst.w	lr, #16
 8006760:	bf08      	it	eq
 8006762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800676a:	6010      	str	r0, [r2, #0]
 800676c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006774:	f380 8811 	msr	BASEPRI, r0
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f7fe ffb4 	bl	80056ec <vTaskSwitchContext>
 8006784:	f04f 0000 	mov.w	r0, #0
 8006788:	f380 8811 	msr	BASEPRI, r0
 800678c:	bc09      	pop	{r0, r3}
 800678e:	6819      	ldr	r1, [r3, #0]
 8006790:	6808      	ldr	r0, [r1, #0]
 8006792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006796:	f01e 0f10 	tst.w	lr, #16
 800679a:	bf08      	it	eq
 800679c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067a0:	f380 8809 	msr	PSP, r0
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	f3af 8000 	nop.w

080067b0 <pxCurrentTCBConst>:
 80067b0:	200008c4 	.word	0x200008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop

080067b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	607b      	str	r3, [r7, #4]
}
 80067d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067d2:	f7fe fed1 	bl	8005578 <xTaskIncrementTick>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067dc:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <xPortSysTickHandler+0x40>)
 80067de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	2300      	movs	r3, #0
 80067e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	f383 8811 	msr	BASEPRI, r3
}
 80067ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80067f0:	bf00      	nop
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	e000ed04 	.word	0xe000ed04

080067fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006800:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <vPortSetupTimerInterrupt+0x34>)
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006806:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <vPortSetupTimerInterrupt+0x38>)
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800680c:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <vPortSetupTimerInterrupt+0x3c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a0a      	ldr	r2, [pc, #40]	; (800683c <vPortSetupTimerInterrupt+0x40>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	099b      	lsrs	r3, r3, #6
 8006818:	4a09      	ldr	r2, [pc, #36]	; (8006840 <vPortSetupTimerInterrupt+0x44>)
 800681a:	3b01      	subs	r3, #1
 800681c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800681e:	4b04      	ldr	r3, [pc, #16]	; (8006830 <vPortSetupTimerInterrupt+0x34>)
 8006820:	2207      	movs	r2, #7
 8006822:	601a      	str	r2, [r3, #0]
}
 8006824:	bf00      	nop
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	e000e010 	.word	0xe000e010
 8006834:	e000e018 	.word	0xe000e018
 8006838:	20000020 	.word	0x20000020
 800683c:	10624dd3 	.word	0x10624dd3
 8006840:	e000e014 	.word	0xe000e014

08006844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006854 <vPortEnableVFP+0x10>
 8006848:	6801      	ldr	r1, [r0, #0]
 800684a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800684e:	6001      	str	r1, [r0, #0]
 8006850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006852:	bf00      	nop
 8006854:	e000ed88 	.word	0xe000ed88

08006858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800685e:	f3ef 8305 	mrs	r3, IPSR
 8006862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b0f      	cmp	r3, #15
 8006868:	d914      	bls.n	8006894 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800686a:	4a17      	ldr	r2, [pc, #92]	; (80068c8 <vPortValidateInterruptPriority+0x70>)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4413      	add	r3, r2
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006874:	4b15      	ldr	r3, [pc, #84]	; (80068cc <vPortValidateInterruptPriority+0x74>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	7afa      	ldrb	r2, [r7, #11]
 800687a:	429a      	cmp	r2, r3
 800687c:	d20a      	bcs.n	8006894 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	607b      	str	r3, [r7, #4]
}
 8006890:	bf00      	nop
 8006892:	e7fe      	b.n	8006892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006894:	4b0e      	ldr	r3, [pc, #56]	; (80068d0 <vPortValidateInterruptPriority+0x78>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800689c:	4b0d      	ldr	r3, [pc, #52]	; (80068d4 <vPortValidateInterruptPriority+0x7c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d90a      	bls.n	80068ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	603b      	str	r3, [r7, #0]
}
 80068b6:	bf00      	nop
 80068b8:	e7fe      	b.n	80068b8 <vPortValidateInterruptPriority+0x60>
	}
 80068ba:	bf00      	nop
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	e000e3f0 	.word	0xe000e3f0
 80068cc:	20000ef0 	.word	0x20000ef0
 80068d0:	e000ed0c 	.word	0xe000ed0c
 80068d4:	20000ef4 	.word	0x20000ef4

080068d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08a      	sub	sp, #40	; 0x28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80068e4:	f7fe fd8c 	bl	8005400 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80068e8:	4b5b      	ldr	r3, [pc, #364]	; (8006a58 <pvPortMalloc+0x180>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80068f0:	f000 f920 	bl	8006b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068f4:	4b59      	ldr	r3, [pc, #356]	; (8006a5c <pvPortMalloc+0x184>)
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4013      	ands	r3, r2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f040 8093 	bne.w	8006a28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01d      	beq.n	8006944 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006908:	2208      	movs	r2, #8
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4413      	add	r3, r2
 800690e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	2b00      	cmp	r3, #0
 8006918:	d014      	beq.n	8006944 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f023 0307 	bic.w	r3, r3, #7
 8006920:	3308      	adds	r3, #8
 8006922:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <pvPortMalloc+0x6c>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	617b      	str	r3, [r7, #20]
}
 8006940:	bf00      	nop
 8006942:	e7fe      	b.n	8006942 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d06e      	beq.n	8006a28 <pvPortMalloc+0x150>
 800694a:	4b45      	ldr	r3, [pc, #276]	; (8006a60 <pvPortMalloc+0x188>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	429a      	cmp	r2, r3
 8006952:	d869      	bhi.n	8006a28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006954:	4b43      	ldr	r3, [pc, #268]	; (8006a64 <pvPortMalloc+0x18c>)
 8006956:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006958:	4b42      	ldr	r3, [pc, #264]	; (8006a64 <pvPortMalloc+0x18c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800695e:	e004      	b.n	800696a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	429a      	cmp	r2, r3
 8006972:	d903      	bls.n	800697c <pvPortMalloc+0xa4>
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f1      	bne.n	8006960 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800697c:	4b36      	ldr	r3, [pc, #216]	; (8006a58 <pvPortMalloc+0x180>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006982:	429a      	cmp	r2, r3
 8006984:	d050      	beq.n	8006a28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2208      	movs	r2, #8
 800698c:	4413      	add	r3, r2
 800698e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	2308      	movs	r3, #8
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d91f      	bls.n	80069e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4413      	add	r3, r2
 80069ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <pvPortMalloc+0xf8>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	613b      	str	r3, [r7, #16]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	1ad2      	subs	r2, r2, r3
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069e2:	69b8      	ldr	r0, [r7, #24]
 80069e4:	f000 f908 	bl	8006bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069e8:	4b1d      	ldr	r3, [pc, #116]	; (8006a60 <pvPortMalloc+0x188>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	4a1b      	ldr	r2, [pc, #108]	; (8006a60 <pvPortMalloc+0x188>)
 80069f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069f6:	4b1a      	ldr	r3, [pc, #104]	; (8006a60 <pvPortMalloc+0x188>)
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	4b1b      	ldr	r3, [pc, #108]	; (8006a68 <pvPortMalloc+0x190>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d203      	bcs.n	8006a0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a02:	4b17      	ldr	r3, [pc, #92]	; (8006a60 <pvPortMalloc+0x188>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a18      	ldr	r2, [pc, #96]	; (8006a68 <pvPortMalloc+0x190>)
 8006a08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	4b13      	ldr	r3, [pc, #76]	; (8006a5c <pvPortMalloc+0x184>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a1e:	4b13      	ldr	r3, [pc, #76]	; (8006a6c <pvPortMalloc+0x194>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3301      	adds	r3, #1
 8006a24:	4a11      	ldr	r2, [pc, #68]	; (8006a6c <pvPortMalloc+0x194>)
 8006a26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a28:	f7fe fcf8 	bl	800541c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <pvPortMalloc+0x174>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	60fb      	str	r3, [r7, #12]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <pvPortMalloc+0x172>
	return pvReturn;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3728      	adds	r7, #40	; 0x28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20001ab8 	.word	0x20001ab8
 8006a5c:	20001acc 	.word	0x20001acc
 8006a60:	20001abc 	.word	0x20001abc
 8006a64:	20001ab0 	.word	0x20001ab0
 8006a68:	20001ac0 	.word	0x20001ac0
 8006a6c:	20001ac4 	.word	0x20001ac4

08006a70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d04d      	beq.n	8006b1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a82:	2308      	movs	r3, #8
 8006a84:	425b      	negs	r3, r3
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4413      	add	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	4b24      	ldr	r3, [pc, #144]	; (8006b28 <vPortFree+0xb8>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4013      	ands	r3, r2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10a      	bne.n	8006ab4 <vPortFree+0x44>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	60fb      	str	r3, [r7, #12]
}
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00a      	beq.n	8006ad2 <vPortFree+0x62>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	60bb      	str	r3, [r7, #8]
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	4b14      	ldr	r3, [pc, #80]	; (8006b28 <vPortFree+0xb8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4013      	ands	r3, r2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01e      	beq.n	8006b1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d11a      	bne.n	8006b1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	4b0e      	ldr	r3, [pc, #56]	; (8006b28 <vPortFree+0xb8>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	43db      	mvns	r3, r3
 8006af2:	401a      	ands	r2, r3
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006af8:	f7fe fc82 	bl	8005400 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <vPortFree+0xbc>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4413      	add	r3, r2
 8006b06:	4a09      	ldr	r2, [pc, #36]	; (8006b2c <vPortFree+0xbc>)
 8006b08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b0a:	6938      	ldr	r0, [r7, #16]
 8006b0c:	f000 f874 	bl	8006bf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <vPortFree+0xc0>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3301      	adds	r3, #1
 8006b16:	4a06      	ldr	r2, [pc, #24]	; (8006b30 <vPortFree+0xc0>)
 8006b18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b1a:	f7fe fc7f 	bl	800541c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b1e:	bf00      	nop
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20001acc 	.word	0x20001acc
 8006b2c:	20001abc 	.word	0x20001abc
 8006b30:	20001ac8 	.word	0x20001ac8

08006b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b3a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b40:	4b27      	ldr	r3, [pc, #156]	; (8006be0 <prvHeapInit+0xac>)
 8006b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00c      	beq.n	8006b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3307      	adds	r3, #7
 8006b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0307 	bic.w	r3, r3, #7
 8006b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	4a1f      	ldr	r2, [pc, #124]	; (8006be0 <prvHeapInit+0xac>)
 8006b64:	4413      	add	r3, r2
 8006b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b6c:	4a1d      	ldr	r2, [pc, #116]	; (8006be4 <prvHeapInit+0xb0>)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b72:	4b1c      	ldr	r3, [pc, #112]	; (8006be4 <prvHeapInit+0xb0>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b80:	2208      	movs	r2, #8
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 0307 	bic.w	r3, r3, #7
 8006b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4a15      	ldr	r2, [pc, #84]	; (8006be8 <prvHeapInit+0xb4>)
 8006b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b96:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <prvHeapInit+0xb4>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b9e:	4b12      	ldr	r3, [pc, #72]	; (8006be8 <prvHeapInit+0xb4>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <prvHeapInit+0xb4>)
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	4a0a      	ldr	r2, [pc, #40]	; (8006bec <prvHeapInit+0xb8>)
 8006bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	4a09      	ldr	r2, [pc, #36]	; (8006bf0 <prvHeapInit+0xbc>)
 8006bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bcc:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <prvHeapInit+0xc0>)
 8006bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006bd2:	601a      	str	r2, [r3, #0]
}
 8006bd4:	bf00      	nop
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	20000ef8 	.word	0x20000ef8
 8006be4:	20001ab0 	.word	0x20001ab0
 8006be8:	20001ab8 	.word	0x20001ab8
 8006bec:	20001ac0 	.word	0x20001ac0
 8006bf0:	20001abc 	.word	0x20001abc
 8006bf4:	20001acc 	.word	0x20001acc

08006bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c00:	4b28      	ldr	r3, [pc, #160]	; (8006ca4 <prvInsertBlockIntoFreeList+0xac>)
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	e002      	b.n	8006c0c <prvInsertBlockIntoFreeList+0x14>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d8f7      	bhi.n	8006c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	4413      	add	r3, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d108      	bne.n	8006c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	441a      	add	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	441a      	add	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d118      	bne.n	8006c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b15      	ldr	r3, [pc, #84]	; (8006ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d00d      	beq.n	8006c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	441a      	add	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	e008      	b.n	8006c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c76:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	e003      	b.n	8006c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d002      	beq.n	8006c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	20001ab0 	.word	0x20001ab0
 8006ca8:	20001ab8 	.word	0x20001ab8

08006cac <calloc>:
 8006cac:	4b02      	ldr	r3, [pc, #8]	; (8006cb8 <calloc+0xc>)
 8006cae:	460a      	mov	r2, r1
 8006cb0:	4601      	mov	r1, r0
 8006cb2:	6818      	ldr	r0, [r3, #0]
 8006cb4:	f000 b93b 	b.w	8006f2e <_calloc_r>
 8006cb8:	20000030 	.word	0x20000030

08006cbc <__errno>:
 8006cbc:	4b01      	ldr	r3, [pc, #4]	; (8006cc4 <__errno+0x8>)
 8006cbe:	6818      	ldr	r0, [r3, #0]
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	20000030 	.word	0x20000030

08006cc8 <std>:
 8006cc8:	2300      	movs	r3, #0
 8006cca:	b510      	push	{r4, lr}
 8006ccc:	4604      	mov	r4, r0
 8006cce:	e9c0 3300 	strd	r3, r3, [r0]
 8006cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cd6:	6083      	str	r3, [r0, #8]
 8006cd8:	8181      	strh	r1, [r0, #12]
 8006cda:	6643      	str	r3, [r0, #100]	; 0x64
 8006cdc:	81c2      	strh	r2, [r0, #14]
 8006cde:	6183      	str	r3, [r0, #24]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	2208      	movs	r2, #8
 8006ce4:	305c      	adds	r0, #92	; 0x5c
 8006ce6:	f000 f91a 	bl	8006f1e <memset>
 8006cea:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <std+0x38>)
 8006cec:	6263      	str	r3, [r4, #36]	; 0x24
 8006cee:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <std+0x3c>)
 8006cf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cf2:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <std+0x40>)
 8006cf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cf6:	4b05      	ldr	r3, [pc, #20]	; (8006d0c <std+0x44>)
 8006cf8:	6224      	str	r4, [r4, #32]
 8006cfa:	6323      	str	r3, [r4, #48]	; 0x30
 8006cfc:	bd10      	pop	{r4, pc}
 8006cfe:	bf00      	nop
 8006d00:	08007211 	.word	0x08007211
 8006d04:	08007233 	.word	0x08007233
 8006d08:	0800726b 	.word	0x0800726b
 8006d0c:	0800728f 	.word	0x0800728f

08006d10 <_cleanup_r>:
 8006d10:	4901      	ldr	r1, [pc, #4]	; (8006d18 <_cleanup_r+0x8>)
 8006d12:	f000 b8af 	b.w	8006e74 <_fwalk_reent>
 8006d16:	bf00      	nop
 8006d18:	08007569 	.word	0x08007569

08006d1c <__sfmoreglue>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	1e4a      	subs	r2, r1, #1
 8006d20:	2568      	movs	r5, #104	; 0x68
 8006d22:	4355      	muls	r5, r2
 8006d24:	460e      	mov	r6, r1
 8006d26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d2a:	f000 f90f 	bl	8006f4c <_malloc_r>
 8006d2e:	4604      	mov	r4, r0
 8006d30:	b140      	cbz	r0, 8006d44 <__sfmoreglue+0x28>
 8006d32:	2100      	movs	r1, #0
 8006d34:	e9c0 1600 	strd	r1, r6, [r0]
 8006d38:	300c      	adds	r0, #12
 8006d3a:	60a0      	str	r0, [r4, #8]
 8006d3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d40:	f000 f8ed 	bl	8006f1e <memset>
 8006d44:	4620      	mov	r0, r4
 8006d46:	bd70      	pop	{r4, r5, r6, pc}

08006d48 <__sfp_lock_acquire>:
 8006d48:	4801      	ldr	r0, [pc, #4]	; (8006d50 <__sfp_lock_acquire+0x8>)
 8006d4a:	f000 b8d8 	b.w	8006efe <__retarget_lock_acquire_recursive>
 8006d4e:	bf00      	nop
 8006d50:	20005d94 	.word	0x20005d94

08006d54 <__sfp_lock_release>:
 8006d54:	4801      	ldr	r0, [pc, #4]	; (8006d5c <__sfp_lock_release+0x8>)
 8006d56:	f000 b8d3 	b.w	8006f00 <__retarget_lock_release_recursive>
 8006d5a:	bf00      	nop
 8006d5c:	20005d94 	.word	0x20005d94

08006d60 <__sinit_lock_acquire>:
 8006d60:	4801      	ldr	r0, [pc, #4]	; (8006d68 <__sinit_lock_acquire+0x8>)
 8006d62:	f000 b8cc 	b.w	8006efe <__retarget_lock_acquire_recursive>
 8006d66:	bf00      	nop
 8006d68:	20005d8f 	.word	0x20005d8f

08006d6c <__sinit_lock_release>:
 8006d6c:	4801      	ldr	r0, [pc, #4]	; (8006d74 <__sinit_lock_release+0x8>)
 8006d6e:	f000 b8c7 	b.w	8006f00 <__retarget_lock_release_recursive>
 8006d72:	bf00      	nop
 8006d74:	20005d8f 	.word	0x20005d8f

08006d78 <__sinit>:
 8006d78:	b510      	push	{r4, lr}
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	f7ff fff0 	bl	8006d60 <__sinit_lock_acquire>
 8006d80:	69a3      	ldr	r3, [r4, #24]
 8006d82:	b11b      	cbz	r3, 8006d8c <__sinit+0x14>
 8006d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d88:	f7ff bff0 	b.w	8006d6c <__sinit_lock_release>
 8006d8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d90:	6523      	str	r3, [r4, #80]	; 0x50
 8006d92:	4b13      	ldr	r3, [pc, #76]	; (8006de0 <__sinit+0x68>)
 8006d94:	4a13      	ldr	r2, [pc, #76]	; (8006de4 <__sinit+0x6c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d9a:	42a3      	cmp	r3, r4
 8006d9c:	bf04      	itt	eq
 8006d9e:	2301      	moveq	r3, #1
 8006da0:	61a3      	streq	r3, [r4, #24]
 8006da2:	4620      	mov	r0, r4
 8006da4:	f000 f820 	bl	8006de8 <__sfp>
 8006da8:	6060      	str	r0, [r4, #4]
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 f81c 	bl	8006de8 <__sfp>
 8006db0:	60a0      	str	r0, [r4, #8]
 8006db2:	4620      	mov	r0, r4
 8006db4:	f000 f818 	bl	8006de8 <__sfp>
 8006db8:	2200      	movs	r2, #0
 8006dba:	60e0      	str	r0, [r4, #12]
 8006dbc:	2104      	movs	r1, #4
 8006dbe:	6860      	ldr	r0, [r4, #4]
 8006dc0:	f7ff ff82 	bl	8006cc8 <std>
 8006dc4:	68a0      	ldr	r0, [r4, #8]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	2109      	movs	r1, #9
 8006dca:	f7ff ff7d 	bl	8006cc8 <std>
 8006dce:	68e0      	ldr	r0, [r4, #12]
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	2112      	movs	r1, #18
 8006dd4:	f7ff ff78 	bl	8006cc8 <std>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	61a3      	str	r3, [r4, #24]
 8006ddc:	e7d2      	b.n	8006d84 <__sinit+0xc>
 8006dde:	bf00      	nop
 8006de0:	08008114 	.word	0x08008114
 8006de4:	08006d11 	.word	0x08006d11

08006de8 <__sfp>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	4607      	mov	r7, r0
 8006dec:	f7ff ffac 	bl	8006d48 <__sfp_lock_acquire>
 8006df0:	4b1e      	ldr	r3, [pc, #120]	; (8006e6c <__sfp+0x84>)
 8006df2:	681e      	ldr	r6, [r3, #0]
 8006df4:	69b3      	ldr	r3, [r6, #24]
 8006df6:	b913      	cbnz	r3, 8006dfe <__sfp+0x16>
 8006df8:	4630      	mov	r0, r6
 8006dfa:	f7ff ffbd 	bl	8006d78 <__sinit>
 8006dfe:	3648      	adds	r6, #72	; 0x48
 8006e00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	d503      	bpl.n	8006e10 <__sfp+0x28>
 8006e08:	6833      	ldr	r3, [r6, #0]
 8006e0a:	b30b      	cbz	r3, 8006e50 <__sfp+0x68>
 8006e0c:	6836      	ldr	r6, [r6, #0]
 8006e0e:	e7f7      	b.n	8006e00 <__sfp+0x18>
 8006e10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e14:	b9d5      	cbnz	r5, 8006e4c <__sfp+0x64>
 8006e16:	4b16      	ldr	r3, [pc, #88]	; (8006e70 <__sfp+0x88>)
 8006e18:	60e3      	str	r3, [r4, #12]
 8006e1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e1e:	6665      	str	r5, [r4, #100]	; 0x64
 8006e20:	f000 f86c 	bl	8006efc <__retarget_lock_init_recursive>
 8006e24:	f7ff ff96 	bl	8006d54 <__sfp_lock_release>
 8006e28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e30:	6025      	str	r5, [r4, #0]
 8006e32:	61a5      	str	r5, [r4, #24]
 8006e34:	2208      	movs	r2, #8
 8006e36:	4629      	mov	r1, r5
 8006e38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e3c:	f000 f86f 	bl	8006f1e <memset>
 8006e40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e48:	4620      	mov	r0, r4
 8006e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e4c:	3468      	adds	r4, #104	; 0x68
 8006e4e:	e7d9      	b.n	8006e04 <__sfp+0x1c>
 8006e50:	2104      	movs	r1, #4
 8006e52:	4638      	mov	r0, r7
 8006e54:	f7ff ff62 	bl	8006d1c <__sfmoreglue>
 8006e58:	4604      	mov	r4, r0
 8006e5a:	6030      	str	r0, [r6, #0]
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d1d5      	bne.n	8006e0c <__sfp+0x24>
 8006e60:	f7ff ff78 	bl	8006d54 <__sfp_lock_release>
 8006e64:	230c      	movs	r3, #12
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	e7ee      	b.n	8006e48 <__sfp+0x60>
 8006e6a:	bf00      	nop
 8006e6c:	08008114 	.word	0x08008114
 8006e70:	ffff0001 	.word	0xffff0001

08006e74 <_fwalk_reent>:
 8006e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e78:	4606      	mov	r6, r0
 8006e7a:	4688      	mov	r8, r1
 8006e7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e80:	2700      	movs	r7, #0
 8006e82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e86:	f1b9 0901 	subs.w	r9, r9, #1
 8006e8a:	d505      	bpl.n	8006e98 <_fwalk_reent+0x24>
 8006e8c:	6824      	ldr	r4, [r4, #0]
 8006e8e:	2c00      	cmp	r4, #0
 8006e90:	d1f7      	bne.n	8006e82 <_fwalk_reent+0xe>
 8006e92:	4638      	mov	r0, r7
 8006e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e98:	89ab      	ldrh	r3, [r5, #12]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d907      	bls.n	8006eae <_fwalk_reent+0x3a>
 8006e9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	d003      	beq.n	8006eae <_fwalk_reent+0x3a>
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	47c0      	blx	r8
 8006eac:	4307      	orrs	r7, r0
 8006eae:	3568      	adds	r5, #104	; 0x68
 8006eb0:	e7e9      	b.n	8006e86 <_fwalk_reent+0x12>
	...

08006eb4 <__libc_init_array>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	4d0d      	ldr	r5, [pc, #52]	; (8006eec <__libc_init_array+0x38>)
 8006eb8:	4c0d      	ldr	r4, [pc, #52]	; (8006ef0 <__libc_init_array+0x3c>)
 8006eba:	1b64      	subs	r4, r4, r5
 8006ebc:	10a4      	asrs	r4, r4, #2
 8006ebe:	2600      	movs	r6, #0
 8006ec0:	42a6      	cmp	r6, r4
 8006ec2:	d109      	bne.n	8006ed8 <__libc_init_array+0x24>
 8006ec4:	4d0b      	ldr	r5, [pc, #44]	; (8006ef4 <__libc_init_array+0x40>)
 8006ec6:	4c0c      	ldr	r4, [pc, #48]	; (8006ef8 <__libc_init_array+0x44>)
 8006ec8:	f000 ff7e 	bl	8007dc8 <_init>
 8006ecc:	1b64      	subs	r4, r4, r5
 8006ece:	10a4      	asrs	r4, r4, #2
 8006ed0:	2600      	movs	r6, #0
 8006ed2:	42a6      	cmp	r6, r4
 8006ed4:	d105      	bne.n	8006ee2 <__libc_init_array+0x2e>
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006edc:	4798      	blx	r3
 8006ede:	3601      	adds	r6, #1
 8006ee0:	e7ee      	b.n	8006ec0 <__libc_init_array+0xc>
 8006ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee6:	4798      	blx	r3
 8006ee8:	3601      	adds	r6, #1
 8006eea:	e7f2      	b.n	8006ed2 <__libc_init_array+0x1e>
 8006eec:	0800814c 	.word	0x0800814c
 8006ef0:	0800814c 	.word	0x0800814c
 8006ef4:	0800814c 	.word	0x0800814c
 8006ef8:	08008150 	.word	0x08008150

08006efc <__retarget_lock_init_recursive>:
 8006efc:	4770      	bx	lr

08006efe <__retarget_lock_acquire_recursive>:
 8006efe:	4770      	bx	lr

08006f00 <__retarget_lock_release_recursive>:
 8006f00:	4770      	bx	lr

08006f02 <memcpy>:
 8006f02:	440a      	add	r2, r1
 8006f04:	4291      	cmp	r1, r2
 8006f06:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f0a:	d100      	bne.n	8006f0e <memcpy+0xc>
 8006f0c:	4770      	bx	lr
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f18:	4291      	cmp	r1, r2
 8006f1a:	d1f9      	bne.n	8006f10 <memcpy+0xe>
 8006f1c:	bd10      	pop	{r4, pc}

08006f1e <memset>:
 8006f1e:	4402      	add	r2, r0
 8006f20:	4603      	mov	r3, r0
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d100      	bne.n	8006f28 <memset+0xa>
 8006f26:	4770      	bx	lr
 8006f28:	f803 1b01 	strb.w	r1, [r3], #1
 8006f2c:	e7f9      	b.n	8006f22 <memset+0x4>

08006f2e <_calloc_r>:
 8006f2e:	b513      	push	{r0, r1, r4, lr}
 8006f30:	434a      	muls	r2, r1
 8006f32:	4611      	mov	r1, r2
 8006f34:	9201      	str	r2, [sp, #4]
 8006f36:	f000 f809 	bl	8006f4c <_malloc_r>
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	b118      	cbz	r0, 8006f46 <_calloc_r+0x18>
 8006f3e:	9a01      	ldr	r2, [sp, #4]
 8006f40:	2100      	movs	r1, #0
 8006f42:	f7ff ffec 	bl	8006f1e <memset>
 8006f46:	4620      	mov	r0, r4
 8006f48:	b002      	add	sp, #8
 8006f4a:	bd10      	pop	{r4, pc}

08006f4c <_malloc_r>:
 8006f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4e:	1ccd      	adds	r5, r1, #3
 8006f50:	f025 0503 	bic.w	r5, r5, #3
 8006f54:	3508      	adds	r5, #8
 8006f56:	2d0c      	cmp	r5, #12
 8006f58:	bf38      	it	cc
 8006f5a:	250c      	movcc	r5, #12
 8006f5c:	2d00      	cmp	r5, #0
 8006f5e:	4606      	mov	r6, r0
 8006f60:	db01      	blt.n	8006f66 <_malloc_r+0x1a>
 8006f62:	42a9      	cmp	r1, r5
 8006f64:	d903      	bls.n	8006f6e <_malloc_r+0x22>
 8006f66:	230c      	movs	r3, #12
 8006f68:	6033      	str	r3, [r6, #0]
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f6e:	f000 fbad 	bl	80076cc <__malloc_lock>
 8006f72:	4921      	ldr	r1, [pc, #132]	; (8006ff8 <_malloc_r+0xac>)
 8006f74:	680a      	ldr	r2, [r1, #0]
 8006f76:	4614      	mov	r4, r2
 8006f78:	b99c      	cbnz	r4, 8006fa2 <_malloc_r+0x56>
 8006f7a:	4f20      	ldr	r7, [pc, #128]	; (8006ffc <_malloc_r+0xb0>)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	b923      	cbnz	r3, 8006f8a <_malloc_r+0x3e>
 8006f80:	4621      	mov	r1, r4
 8006f82:	4630      	mov	r0, r6
 8006f84:	f000 f934 	bl	80071f0 <_sbrk_r>
 8006f88:	6038      	str	r0, [r7, #0]
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f000 f92f 	bl	80071f0 <_sbrk_r>
 8006f92:	1c43      	adds	r3, r0, #1
 8006f94:	d123      	bne.n	8006fde <_malloc_r+0x92>
 8006f96:	230c      	movs	r3, #12
 8006f98:	6033      	str	r3, [r6, #0]
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f000 fb9c 	bl	80076d8 <__malloc_unlock>
 8006fa0:	e7e3      	b.n	8006f6a <_malloc_r+0x1e>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	1b5b      	subs	r3, r3, r5
 8006fa6:	d417      	bmi.n	8006fd8 <_malloc_r+0x8c>
 8006fa8:	2b0b      	cmp	r3, #11
 8006faa:	d903      	bls.n	8006fb4 <_malloc_r+0x68>
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	441c      	add	r4, r3
 8006fb0:	6025      	str	r5, [r4, #0]
 8006fb2:	e004      	b.n	8006fbe <_malloc_r+0x72>
 8006fb4:	6863      	ldr	r3, [r4, #4]
 8006fb6:	42a2      	cmp	r2, r4
 8006fb8:	bf0c      	ite	eq
 8006fba:	600b      	streq	r3, [r1, #0]
 8006fbc:	6053      	strne	r3, [r2, #4]
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	f000 fb8a 	bl	80076d8 <__malloc_unlock>
 8006fc4:	f104 000b 	add.w	r0, r4, #11
 8006fc8:	1d23      	adds	r3, r4, #4
 8006fca:	f020 0007 	bic.w	r0, r0, #7
 8006fce:	1ac2      	subs	r2, r0, r3
 8006fd0:	d0cc      	beq.n	8006f6c <_malloc_r+0x20>
 8006fd2:	1a1b      	subs	r3, r3, r0
 8006fd4:	50a3      	str	r3, [r4, r2]
 8006fd6:	e7c9      	b.n	8006f6c <_malloc_r+0x20>
 8006fd8:	4622      	mov	r2, r4
 8006fda:	6864      	ldr	r4, [r4, #4]
 8006fdc:	e7cc      	b.n	8006f78 <_malloc_r+0x2c>
 8006fde:	1cc4      	adds	r4, r0, #3
 8006fe0:	f024 0403 	bic.w	r4, r4, #3
 8006fe4:	42a0      	cmp	r0, r4
 8006fe6:	d0e3      	beq.n	8006fb0 <_malloc_r+0x64>
 8006fe8:	1a21      	subs	r1, r4, r0
 8006fea:	4630      	mov	r0, r6
 8006fec:	f000 f900 	bl	80071f0 <_sbrk_r>
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d1dd      	bne.n	8006fb0 <_malloc_r+0x64>
 8006ff4:	e7cf      	b.n	8006f96 <_malloc_r+0x4a>
 8006ff6:	bf00      	nop
 8006ff8:	20001ad0 	.word	0x20001ad0
 8006ffc:	20001ad4 	.word	0x20001ad4

08007000 <iprintf>:
 8007000:	b40f      	push	{r0, r1, r2, r3}
 8007002:	4b0a      	ldr	r3, [pc, #40]	; (800702c <iprintf+0x2c>)
 8007004:	b513      	push	{r0, r1, r4, lr}
 8007006:	681c      	ldr	r4, [r3, #0]
 8007008:	b124      	cbz	r4, 8007014 <iprintf+0x14>
 800700a:	69a3      	ldr	r3, [r4, #24]
 800700c:	b913      	cbnz	r3, 8007014 <iprintf+0x14>
 800700e:	4620      	mov	r0, r4
 8007010:	f7ff feb2 	bl	8006d78 <__sinit>
 8007014:	ab05      	add	r3, sp, #20
 8007016:	9a04      	ldr	r2, [sp, #16]
 8007018:	68a1      	ldr	r1, [r4, #8]
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	4620      	mov	r0, r4
 800701e:	f000 fbdb 	bl	80077d8 <_vfiprintf_r>
 8007022:	b002      	add	sp, #8
 8007024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007028:	b004      	add	sp, #16
 800702a:	4770      	bx	lr
 800702c:	20000030 	.word	0x20000030

08007030 <_puts_r>:
 8007030:	b570      	push	{r4, r5, r6, lr}
 8007032:	460e      	mov	r6, r1
 8007034:	4605      	mov	r5, r0
 8007036:	b118      	cbz	r0, 8007040 <_puts_r+0x10>
 8007038:	6983      	ldr	r3, [r0, #24]
 800703a:	b90b      	cbnz	r3, 8007040 <_puts_r+0x10>
 800703c:	f7ff fe9c 	bl	8006d78 <__sinit>
 8007040:	69ab      	ldr	r3, [r5, #24]
 8007042:	68ac      	ldr	r4, [r5, #8]
 8007044:	b913      	cbnz	r3, 800704c <_puts_r+0x1c>
 8007046:	4628      	mov	r0, r5
 8007048:	f7ff fe96 	bl	8006d78 <__sinit>
 800704c:	4b2c      	ldr	r3, [pc, #176]	; (8007100 <_puts_r+0xd0>)
 800704e:	429c      	cmp	r4, r3
 8007050:	d120      	bne.n	8007094 <_puts_r+0x64>
 8007052:	686c      	ldr	r4, [r5, #4]
 8007054:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007056:	07db      	lsls	r3, r3, #31
 8007058:	d405      	bmi.n	8007066 <_puts_r+0x36>
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	0598      	lsls	r0, r3, #22
 800705e:	d402      	bmi.n	8007066 <_puts_r+0x36>
 8007060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007062:	f7ff ff4c 	bl	8006efe <__retarget_lock_acquire_recursive>
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	0719      	lsls	r1, r3, #28
 800706a:	d51d      	bpl.n	80070a8 <_puts_r+0x78>
 800706c:	6923      	ldr	r3, [r4, #16]
 800706e:	b1db      	cbz	r3, 80070a8 <_puts_r+0x78>
 8007070:	3e01      	subs	r6, #1
 8007072:	68a3      	ldr	r3, [r4, #8]
 8007074:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007078:	3b01      	subs	r3, #1
 800707a:	60a3      	str	r3, [r4, #8]
 800707c:	bb39      	cbnz	r1, 80070ce <_puts_r+0x9e>
 800707e:	2b00      	cmp	r3, #0
 8007080:	da38      	bge.n	80070f4 <_puts_r+0xc4>
 8007082:	4622      	mov	r2, r4
 8007084:	210a      	movs	r1, #10
 8007086:	4628      	mov	r0, r5
 8007088:	f000 f906 	bl	8007298 <__swbuf_r>
 800708c:	3001      	adds	r0, #1
 800708e:	d011      	beq.n	80070b4 <_puts_r+0x84>
 8007090:	250a      	movs	r5, #10
 8007092:	e011      	b.n	80070b8 <_puts_r+0x88>
 8007094:	4b1b      	ldr	r3, [pc, #108]	; (8007104 <_puts_r+0xd4>)
 8007096:	429c      	cmp	r4, r3
 8007098:	d101      	bne.n	800709e <_puts_r+0x6e>
 800709a:	68ac      	ldr	r4, [r5, #8]
 800709c:	e7da      	b.n	8007054 <_puts_r+0x24>
 800709e:	4b1a      	ldr	r3, [pc, #104]	; (8007108 <_puts_r+0xd8>)
 80070a0:	429c      	cmp	r4, r3
 80070a2:	bf08      	it	eq
 80070a4:	68ec      	ldreq	r4, [r5, #12]
 80070a6:	e7d5      	b.n	8007054 <_puts_r+0x24>
 80070a8:	4621      	mov	r1, r4
 80070aa:	4628      	mov	r0, r5
 80070ac:	f000 f958 	bl	8007360 <__swsetup_r>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d0dd      	beq.n	8007070 <_puts_r+0x40>
 80070b4:	f04f 35ff 	mov.w	r5, #4294967295
 80070b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070ba:	07da      	lsls	r2, r3, #31
 80070bc:	d405      	bmi.n	80070ca <_puts_r+0x9a>
 80070be:	89a3      	ldrh	r3, [r4, #12]
 80070c0:	059b      	lsls	r3, r3, #22
 80070c2:	d402      	bmi.n	80070ca <_puts_r+0x9a>
 80070c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070c6:	f7ff ff1b 	bl	8006f00 <__retarget_lock_release_recursive>
 80070ca:	4628      	mov	r0, r5
 80070cc:	bd70      	pop	{r4, r5, r6, pc}
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	da04      	bge.n	80070dc <_puts_r+0xac>
 80070d2:	69a2      	ldr	r2, [r4, #24]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	dc06      	bgt.n	80070e6 <_puts_r+0xb6>
 80070d8:	290a      	cmp	r1, #10
 80070da:	d004      	beq.n	80070e6 <_puts_r+0xb6>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	6022      	str	r2, [r4, #0]
 80070e2:	7019      	strb	r1, [r3, #0]
 80070e4:	e7c5      	b.n	8007072 <_puts_r+0x42>
 80070e6:	4622      	mov	r2, r4
 80070e8:	4628      	mov	r0, r5
 80070ea:	f000 f8d5 	bl	8007298 <__swbuf_r>
 80070ee:	3001      	adds	r0, #1
 80070f0:	d1bf      	bne.n	8007072 <_puts_r+0x42>
 80070f2:	e7df      	b.n	80070b4 <_puts_r+0x84>
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	250a      	movs	r5, #10
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	6022      	str	r2, [r4, #0]
 80070fc:	701d      	strb	r5, [r3, #0]
 80070fe:	e7db      	b.n	80070b8 <_puts_r+0x88>
 8007100:	080080d4 	.word	0x080080d4
 8007104:	080080f4 	.word	0x080080f4
 8007108:	080080b4 	.word	0x080080b4

0800710c <puts>:
 800710c:	4b02      	ldr	r3, [pc, #8]	; (8007118 <puts+0xc>)
 800710e:	4601      	mov	r1, r0
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	f7ff bf8d 	b.w	8007030 <_puts_r>
 8007116:	bf00      	nop
 8007118:	20000030 	.word	0x20000030

0800711c <cleanup_glue>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	460c      	mov	r4, r1
 8007120:	6809      	ldr	r1, [r1, #0]
 8007122:	4605      	mov	r5, r0
 8007124:	b109      	cbz	r1, 800712a <cleanup_glue+0xe>
 8007126:	f7ff fff9 	bl	800711c <cleanup_glue>
 800712a:	4621      	mov	r1, r4
 800712c:	4628      	mov	r0, r5
 800712e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007132:	f000 bad7 	b.w	80076e4 <_free_r>
	...

08007138 <_reclaim_reent>:
 8007138:	4b2c      	ldr	r3, [pc, #176]	; (80071ec <_reclaim_reent+0xb4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4283      	cmp	r3, r0
 800713e:	b570      	push	{r4, r5, r6, lr}
 8007140:	4604      	mov	r4, r0
 8007142:	d051      	beq.n	80071e8 <_reclaim_reent+0xb0>
 8007144:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007146:	b143      	cbz	r3, 800715a <_reclaim_reent+0x22>
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d14a      	bne.n	80071e4 <_reclaim_reent+0xac>
 800714e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007150:	6819      	ldr	r1, [r3, #0]
 8007152:	b111      	cbz	r1, 800715a <_reclaim_reent+0x22>
 8007154:	4620      	mov	r0, r4
 8007156:	f000 fac5 	bl	80076e4 <_free_r>
 800715a:	6961      	ldr	r1, [r4, #20]
 800715c:	b111      	cbz	r1, 8007164 <_reclaim_reent+0x2c>
 800715e:	4620      	mov	r0, r4
 8007160:	f000 fac0 	bl	80076e4 <_free_r>
 8007164:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007166:	b111      	cbz	r1, 800716e <_reclaim_reent+0x36>
 8007168:	4620      	mov	r0, r4
 800716a:	f000 fabb 	bl	80076e4 <_free_r>
 800716e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007170:	b111      	cbz	r1, 8007178 <_reclaim_reent+0x40>
 8007172:	4620      	mov	r0, r4
 8007174:	f000 fab6 	bl	80076e4 <_free_r>
 8007178:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800717a:	b111      	cbz	r1, 8007182 <_reclaim_reent+0x4a>
 800717c:	4620      	mov	r0, r4
 800717e:	f000 fab1 	bl	80076e4 <_free_r>
 8007182:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007184:	b111      	cbz	r1, 800718c <_reclaim_reent+0x54>
 8007186:	4620      	mov	r0, r4
 8007188:	f000 faac 	bl	80076e4 <_free_r>
 800718c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800718e:	b111      	cbz	r1, 8007196 <_reclaim_reent+0x5e>
 8007190:	4620      	mov	r0, r4
 8007192:	f000 faa7 	bl	80076e4 <_free_r>
 8007196:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007198:	b111      	cbz	r1, 80071a0 <_reclaim_reent+0x68>
 800719a:	4620      	mov	r0, r4
 800719c:	f000 faa2 	bl	80076e4 <_free_r>
 80071a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071a2:	b111      	cbz	r1, 80071aa <_reclaim_reent+0x72>
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 fa9d 	bl	80076e4 <_free_r>
 80071aa:	69a3      	ldr	r3, [r4, #24]
 80071ac:	b1e3      	cbz	r3, 80071e8 <_reclaim_reent+0xb0>
 80071ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80071b0:	4620      	mov	r0, r4
 80071b2:	4798      	blx	r3
 80071b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80071b6:	b1b9      	cbz	r1, 80071e8 <_reclaim_reent+0xb0>
 80071b8:	4620      	mov	r0, r4
 80071ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80071be:	f7ff bfad 	b.w	800711c <cleanup_glue>
 80071c2:	5949      	ldr	r1, [r1, r5]
 80071c4:	b941      	cbnz	r1, 80071d8 <_reclaim_reent+0xa0>
 80071c6:	3504      	adds	r5, #4
 80071c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ca:	2d80      	cmp	r5, #128	; 0x80
 80071cc:	68d9      	ldr	r1, [r3, #12]
 80071ce:	d1f8      	bne.n	80071c2 <_reclaim_reent+0x8a>
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 fa87 	bl	80076e4 <_free_r>
 80071d6:	e7ba      	b.n	800714e <_reclaim_reent+0x16>
 80071d8:	680e      	ldr	r6, [r1, #0]
 80071da:	4620      	mov	r0, r4
 80071dc:	f000 fa82 	bl	80076e4 <_free_r>
 80071e0:	4631      	mov	r1, r6
 80071e2:	e7ef      	b.n	80071c4 <_reclaim_reent+0x8c>
 80071e4:	2500      	movs	r5, #0
 80071e6:	e7ef      	b.n	80071c8 <_reclaim_reent+0x90>
 80071e8:	bd70      	pop	{r4, r5, r6, pc}
 80071ea:	bf00      	nop
 80071ec:	20000030 	.word	0x20000030

080071f0 <_sbrk_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4d06      	ldr	r5, [pc, #24]	; (800720c <_sbrk_r+0x1c>)
 80071f4:	2300      	movs	r3, #0
 80071f6:	4604      	mov	r4, r0
 80071f8:	4608      	mov	r0, r1
 80071fa:	602b      	str	r3, [r5, #0]
 80071fc:	f7f9 ff7e 	bl	80010fc <_sbrk>
 8007200:	1c43      	adds	r3, r0, #1
 8007202:	d102      	bne.n	800720a <_sbrk_r+0x1a>
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	b103      	cbz	r3, 800720a <_sbrk_r+0x1a>
 8007208:	6023      	str	r3, [r4, #0]
 800720a:	bd38      	pop	{r3, r4, r5, pc}
 800720c:	20005d98 	.word	0x20005d98

08007210 <__sread>:
 8007210:	b510      	push	{r4, lr}
 8007212:	460c      	mov	r4, r1
 8007214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007218:	f000 fda2 	bl	8007d60 <_read_r>
 800721c:	2800      	cmp	r0, #0
 800721e:	bfab      	itete	ge
 8007220:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007222:	89a3      	ldrhlt	r3, [r4, #12]
 8007224:	181b      	addge	r3, r3, r0
 8007226:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800722a:	bfac      	ite	ge
 800722c:	6563      	strge	r3, [r4, #84]	; 0x54
 800722e:	81a3      	strhlt	r3, [r4, #12]
 8007230:	bd10      	pop	{r4, pc}

08007232 <__swrite>:
 8007232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007236:	461f      	mov	r7, r3
 8007238:	898b      	ldrh	r3, [r1, #12]
 800723a:	05db      	lsls	r3, r3, #23
 800723c:	4605      	mov	r5, r0
 800723e:	460c      	mov	r4, r1
 8007240:	4616      	mov	r6, r2
 8007242:	d505      	bpl.n	8007250 <__swrite+0x1e>
 8007244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007248:	2302      	movs	r3, #2
 800724a:	2200      	movs	r2, #0
 800724c:	f000 f9c8 	bl	80075e0 <_lseek_r>
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800725a:	81a3      	strh	r3, [r4, #12]
 800725c:	4632      	mov	r2, r6
 800725e:	463b      	mov	r3, r7
 8007260:	4628      	mov	r0, r5
 8007262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007266:	f000 b869 	b.w	800733c <_write_r>

0800726a <__sseek>:
 800726a:	b510      	push	{r4, lr}
 800726c:	460c      	mov	r4, r1
 800726e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007272:	f000 f9b5 	bl	80075e0 <_lseek_r>
 8007276:	1c43      	adds	r3, r0, #1
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	bf15      	itete	ne
 800727c:	6560      	strne	r0, [r4, #84]	; 0x54
 800727e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007282:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007286:	81a3      	strheq	r3, [r4, #12]
 8007288:	bf18      	it	ne
 800728a:	81a3      	strhne	r3, [r4, #12]
 800728c:	bd10      	pop	{r4, pc}

0800728e <__sclose>:
 800728e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007292:	f000 b8d3 	b.w	800743c <_close_r>
	...

08007298 <__swbuf_r>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	460e      	mov	r6, r1
 800729c:	4614      	mov	r4, r2
 800729e:	4605      	mov	r5, r0
 80072a0:	b118      	cbz	r0, 80072aa <__swbuf_r+0x12>
 80072a2:	6983      	ldr	r3, [r0, #24]
 80072a4:	b90b      	cbnz	r3, 80072aa <__swbuf_r+0x12>
 80072a6:	f7ff fd67 	bl	8006d78 <__sinit>
 80072aa:	4b21      	ldr	r3, [pc, #132]	; (8007330 <__swbuf_r+0x98>)
 80072ac:	429c      	cmp	r4, r3
 80072ae:	d12b      	bne.n	8007308 <__swbuf_r+0x70>
 80072b0:	686c      	ldr	r4, [r5, #4]
 80072b2:	69a3      	ldr	r3, [r4, #24]
 80072b4:	60a3      	str	r3, [r4, #8]
 80072b6:	89a3      	ldrh	r3, [r4, #12]
 80072b8:	071a      	lsls	r2, r3, #28
 80072ba:	d52f      	bpl.n	800731c <__swbuf_r+0x84>
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	b36b      	cbz	r3, 800731c <__swbuf_r+0x84>
 80072c0:	6923      	ldr	r3, [r4, #16]
 80072c2:	6820      	ldr	r0, [r4, #0]
 80072c4:	1ac0      	subs	r0, r0, r3
 80072c6:	6963      	ldr	r3, [r4, #20]
 80072c8:	b2f6      	uxtb	r6, r6
 80072ca:	4283      	cmp	r3, r0
 80072cc:	4637      	mov	r7, r6
 80072ce:	dc04      	bgt.n	80072da <__swbuf_r+0x42>
 80072d0:	4621      	mov	r1, r4
 80072d2:	4628      	mov	r0, r5
 80072d4:	f000 f948 	bl	8007568 <_fflush_r>
 80072d8:	bb30      	cbnz	r0, 8007328 <__swbuf_r+0x90>
 80072da:	68a3      	ldr	r3, [r4, #8]
 80072dc:	3b01      	subs	r3, #1
 80072de:	60a3      	str	r3, [r4, #8]
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	6022      	str	r2, [r4, #0]
 80072e6:	701e      	strb	r6, [r3, #0]
 80072e8:	6963      	ldr	r3, [r4, #20]
 80072ea:	3001      	adds	r0, #1
 80072ec:	4283      	cmp	r3, r0
 80072ee:	d004      	beq.n	80072fa <__swbuf_r+0x62>
 80072f0:	89a3      	ldrh	r3, [r4, #12]
 80072f2:	07db      	lsls	r3, r3, #31
 80072f4:	d506      	bpl.n	8007304 <__swbuf_r+0x6c>
 80072f6:	2e0a      	cmp	r6, #10
 80072f8:	d104      	bne.n	8007304 <__swbuf_r+0x6c>
 80072fa:	4621      	mov	r1, r4
 80072fc:	4628      	mov	r0, r5
 80072fe:	f000 f933 	bl	8007568 <_fflush_r>
 8007302:	b988      	cbnz	r0, 8007328 <__swbuf_r+0x90>
 8007304:	4638      	mov	r0, r7
 8007306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007308:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <__swbuf_r+0x9c>)
 800730a:	429c      	cmp	r4, r3
 800730c:	d101      	bne.n	8007312 <__swbuf_r+0x7a>
 800730e:	68ac      	ldr	r4, [r5, #8]
 8007310:	e7cf      	b.n	80072b2 <__swbuf_r+0x1a>
 8007312:	4b09      	ldr	r3, [pc, #36]	; (8007338 <__swbuf_r+0xa0>)
 8007314:	429c      	cmp	r4, r3
 8007316:	bf08      	it	eq
 8007318:	68ec      	ldreq	r4, [r5, #12]
 800731a:	e7ca      	b.n	80072b2 <__swbuf_r+0x1a>
 800731c:	4621      	mov	r1, r4
 800731e:	4628      	mov	r0, r5
 8007320:	f000 f81e 	bl	8007360 <__swsetup_r>
 8007324:	2800      	cmp	r0, #0
 8007326:	d0cb      	beq.n	80072c0 <__swbuf_r+0x28>
 8007328:	f04f 37ff 	mov.w	r7, #4294967295
 800732c:	e7ea      	b.n	8007304 <__swbuf_r+0x6c>
 800732e:	bf00      	nop
 8007330:	080080d4 	.word	0x080080d4
 8007334:	080080f4 	.word	0x080080f4
 8007338:	080080b4 	.word	0x080080b4

0800733c <_write_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	4d07      	ldr	r5, [pc, #28]	; (800735c <_write_r+0x20>)
 8007340:	4604      	mov	r4, r0
 8007342:	4608      	mov	r0, r1
 8007344:	4611      	mov	r1, r2
 8007346:	2200      	movs	r2, #0
 8007348:	602a      	str	r2, [r5, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	f7f9 fe85 	bl	800105a <_write>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_write_r+0x1e>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	b103      	cbz	r3, 800735a <_write_r+0x1e>
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	20005d98 	.word	0x20005d98

08007360 <__swsetup_r>:
 8007360:	4b32      	ldr	r3, [pc, #200]	; (800742c <__swsetup_r+0xcc>)
 8007362:	b570      	push	{r4, r5, r6, lr}
 8007364:	681d      	ldr	r5, [r3, #0]
 8007366:	4606      	mov	r6, r0
 8007368:	460c      	mov	r4, r1
 800736a:	b125      	cbz	r5, 8007376 <__swsetup_r+0x16>
 800736c:	69ab      	ldr	r3, [r5, #24]
 800736e:	b913      	cbnz	r3, 8007376 <__swsetup_r+0x16>
 8007370:	4628      	mov	r0, r5
 8007372:	f7ff fd01 	bl	8006d78 <__sinit>
 8007376:	4b2e      	ldr	r3, [pc, #184]	; (8007430 <__swsetup_r+0xd0>)
 8007378:	429c      	cmp	r4, r3
 800737a:	d10f      	bne.n	800739c <__swsetup_r+0x3c>
 800737c:	686c      	ldr	r4, [r5, #4]
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007384:	0719      	lsls	r1, r3, #28
 8007386:	d42c      	bmi.n	80073e2 <__swsetup_r+0x82>
 8007388:	06dd      	lsls	r5, r3, #27
 800738a:	d411      	bmi.n	80073b0 <__swsetup_r+0x50>
 800738c:	2309      	movs	r3, #9
 800738e:	6033      	str	r3, [r6, #0]
 8007390:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007394:	81a3      	strh	r3, [r4, #12]
 8007396:	f04f 30ff 	mov.w	r0, #4294967295
 800739a:	e03e      	b.n	800741a <__swsetup_r+0xba>
 800739c:	4b25      	ldr	r3, [pc, #148]	; (8007434 <__swsetup_r+0xd4>)
 800739e:	429c      	cmp	r4, r3
 80073a0:	d101      	bne.n	80073a6 <__swsetup_r+0x46>
 80073a2:	68ac      	ldr	r4, [r5, #8]
 80073a4:	e7eb      	b.n	800737e <__swsetup_r+0x1e>
 80073a6:	4b24      	ldr	r3, [pc, #144]	; (8007438 <__swsetup_r+0xd8>)
 80073a8:	429c      	cmp	r4, r3
 80073aa:	bf08      	it	eq
 80073ac:	68ec      	ldreq	r4, [r5, #12]
 80073ae:	e7e6      	b.n	800737e <__swsetup_r+0x1e>
 80073b0:	0758      	lsls	r0, r3, #29
 80073b2:	d512      	bpl.n	80073da <__swsetup_r+0x7a>
 80073b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073b6:	b141      	cbz	r1, 80073ca <__swsetup_r+0x6a>
 80073b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073bc:	4299      	cmp	r1, r3
 80073be:	d002      	beq.n	80073c6 <__swsetup_r+0x66>
 80073c0:	4630      	mov	r0, r6
 80073c2:	f000 f98f 	bl	80076e4 <_free_r>
 80073c6:	2300      	movs	r3, #0
 80073c8:	6363      	str	r3, [r4, #52]	; 0x34
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073d0:	81a3      	strh	r3, [r4, #12]
 80073d2:	2300      	movs	r3, #0
 80073d4:	6063      	str	r3, [r4, #4]
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	6023      	str	r3, [r4, #0]
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	f043 0308 	orr.w	r3, r3, #8
 80073e0:	81a3      	strh	r3, [r4, #12]
 80073e2:	6923      	ldr	r3, [r4, #16]
 80073e4:	b94b      	cbnz	r3, 80073fa <__swsetup_r+0x9a>
 80073e6:	89a3      	ldrh	r3, [r4, #12]
 80073e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f0:	d003      	beq.n	80073fa <__swsetup_r+0x9a>
 80073f2:	4621      	mov	r1, r4
 80073f4:	4630      	mov	r0, r6
 80073f6:	f000 f929 	bl	800764c <__smakebuf_r>
 80073fa:	89a0      	ldrh	r0, [r4, #12]
 80073fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007400:	f010 0301 	ands.w	r3, r0, #1
 8007404:	d00a      	beq.n	800741c <__swsetup_r+0xbc>
 8007406:	2300      	movs	r3, #0
 8007408:	60a3      	str	r3, [r4, #8]
 800740a:	6963      	ldr	r3, [r4, #20]
 800740c:	425b      	negs	r3, r3
 800740e:	61a3      	str	r3, [r4, #24]
 8007410:	6923      	ldr	r3, [r4, #16]
 8007412:	b943      	cbnz	r3, 8007426 <__swsetup_r+0xc6>
 8007414:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007418:	d1ba      	bne.n	8007390 <__swsetup_r+0x30>
 800741a:	bd70      	pop	{r4, r5, r6, pc}
 800741c:	0781      	lsls	r1, r0, #30
 800741e:	bf58      	it	pl
 8007420:	6963      	ldrpl	r3, [r4, #20]
 8007422:	60a3      	str	r3, [r4, #8]
 8007424:	e7f4      	b.n	8007410 <__swsetup_r+0xb0>
 8007426:	2000      	movs	r0, #0
 8007428:	e7f7      	b.n	800741a <__swsetup_r+0xba>
 800742a:	bf00      	nop
 800742c:	20000030 	.word	0x20000030
 8007430:	080080d4 	.word	0x080080d4
 8007434:	080080f4 	.word	0x080080f4
 8007438:	080080b4 	.word	0x080080b4

0800743c <_close_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4d06      	ldr	r5, [pc, #24]	; (8007458 <_close_r+0x1c>)
 8007440:	2300      	movs	r3, #0
 8007442:	4604      	mov	r4, r0
 8007444:	4608      	mov	r0, r1
 8007446:	602b      	str	r3, [r5, #0]
 8007448:	f7f9 fe23 	bl	8001092 <_close>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_close_r+0x1a>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b103      	cbz	r3, 8007456 <_close_r+0x1a>
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	20005d98 	.word	0x20005d98

0800745c <__sflush_r>:
 800745c:	898a      	ldrh	r2, [r1, #12]
 800745e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007462:	4605      	mov	r5, r0
 8007464:	0710      	lsls	r0, r2, #28
 8007466:	460c      	mov	r4, r1
 8007468:	d458      	bmi.n	800751c <__sflush_r+0xc0>
 800746a:	684b      	ldr	r3, [r1, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	dc05      	bgt.n	800747c <__sflush_r+0x20>
 8007470:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007472:	2b00      	cmp	r3, #0
 8007474:	dc02      	bgt.n	800747c <__sflush_r+0x20>
 8007476:	2000      	movs	r0, #0
 8007478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800747c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800747e:	2e00      	cmp	r6, #0
 8007480:	d0f9      	beq.n	8007476 <__sflush_r+0x1a>
 8007482:	2300      	movs	r3, #0
 8007484:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007488:	682f      	ldr	r7, [r5, #0]
 800748a:	602b      	str	r3, [r5, #0]
 800748c:	d032      	beq.n	80074f4 <__sflush_r+0x98>
 800748e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007490:	89a3      	ldrh	r3, [r4, #12]
 8007492:	075a      	lsls	r2, r3, #29
 8007494:	d505      	bpl.n	80074a2 <__sflush_r+0x46>
 8007496:	6863      	ldr	r3, [r4, #4]
 8007498:	1ac0      	subs	r0, r0, r3
 800749a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800749c:	b10b      	cbz	r3, 80074a2 <__sflush_r+0x46>
 800749e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074a0:	1ac0      	subs	r0, r0, r3
 80074a2:	2300      	movs	r3, #0
 80074a4:	4602      	mov	r2, r0
 80074a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074a8:	6a21      	ldr	r1, [r4, #32]
 80074aa:	4628      	mov	r0, r5
 80074ac:	47b0      	blx	r6
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	d106      	bne.n	80074c2 <__sflush_r+0x66>
 80074b4:	6829      	ldr	r1, [r5, #0]
 80074b6:	291d      	cmp	r1, #29
 80074b8:	d82c      	bhi.n	8007514 <__sflush_r+0xb8>
 80074ba:	4a2a      	ldr	r2, [pc, #168]	; (8007564 <__sflush_r+0x108>)
 80074bc:	40ca      	lsrs	r2, r1
 80074be:	07d6      	lsls	r6, r2, #31
 80074c0:	d528      	bpl.n	8007514 <__sflush_r+0xb8>
 80074c2:	2200      	movs	r2, #0
 80074c4:	6062      	str	r2, [r4, #4]
 80074c6:	04d9      	lsls	r1, r3, #19
 80074c8:	6922      	ldr	r2, [r4, #16]
 80074ca:	6022      	str	r2, [r4, #0]
 80074cc:	d504      	bpl.n	80074d8 <__sflush_r+0x7c>
 80074ce:	1c42      	adds	r2, r0, #1
 80074d0:	d101      	bne.n	80074d6 <__sflush_r+0x7a>
 80074d2:	682b      	ldr	r3, [r5, #0]
 80074d4:	b903      	cbnz	r3, 80074d8 <__sflush_r+0x7c>
 80074d6:	6560      	str	r0, [r4, #84]	; 0x54
 80074d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074da:	602f      	str	r7, [r5, #0]
 80074dc:	2900      	cmp	r1, #0
 80074de:	d0ca      	beq.n	8007476 <__sflush_r+0x1a>
 80074e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074e4:	4299      	cmp	r1, r3
 80074e6:	d002      	beq.n	80074ee <__sflush_r+0x92>
 80074e8:	4628      	mov	r0, r5
 80074ea:	f000 f8fb 	bl	80076e4 <_free_r>
 80074ee:	2000      	movs	r0, #0
 80074f0:	6360      	str	r0, [r4, #52]	; 0x34
 80074f2:	e7c1      	b.n	8007478 <__sflush_r+0x1c>
 80074f4:	6a21      	ldr	r1, [r4, #32]
 80074f6:	2301      	movs	r3, #1
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b0      	blx	r6
 80074fc:	1c41      	adds	r1, r0, #1
 80074fe:	d1c7      	bne.n	8007490 <__sflush_r+0x34>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0c4      	beq.n	8007490 <__sflush_r+0x34>
 8007506:	2b1d      	cmp	r3, #29
 8007508:	d001      	beq.n	800750e <__sflush_r+0xb2>
 800750a:	2b16      	cmp	r3, #22
 800750c:	d101      	bne.n	8007512 <__sflush_r+0xb6>
 800750e:	602f      	str	r7, [r5, #0]
 8007510:	e7b1      	b.n	8007476 <__sflush_r+0x1a>
 8007512:	89a3      	ldrh	r3, [r4, #12]
 8007514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007518:	81a3      	strh	r3, [r4, #12]
 800751a:	e7ad      	b.n	8007478 <__sflush_r+0x1c>
 800751c:	690f      	ldr	r7, [r1, #16]
 800751e:	2f00      	cmp	r7, #0
 8007520:	d0a9      	beq.n	8007476 <__sflush_r+0x1a>
 8007522:	0793      	lsls	r3, r2, #30
 8007524:	680e      	ldr	r6, [r1, #0]
 8007526:	bf08      	it	eq
 8007528:	694b      	ldreq	r3, [r1, #20]
 800752a:	600f      	str	r7, [r1, #0]
 800752c:	bf18      	it	ne
 800752e:	2300      	movne	r3, #0
 8007530:	eba6 0807 	sub.w	r8, r6, r7
 8007534:	608b      	str	r3, [r1, #8]
 8007536:	f1b8 0f00 	cmp.w	r8, #0
 800753a:	dd9c      	ble.n	8007476 <__sflush_r+0x1a>
 800753c:	6a21      	ldr	r1, [r4, #32]
 800753e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007540:	4643      	mov	r3, r8
 8007542:	463a      	mov	r2, r7
 8007544:	4628      	mov	r0, r5
 8007546:	47b0      	blx	r6
 8007548:	2800      	cmp	r0, #0
 800754a:	dc06      	bgt.n	800755a <__sflush_r+0xfe>
 800754c:	89a3      	ldrh	r3, [r4, #12]
 800754e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007552:	81a3      	strh	r3, [r4, #12]
 8007554:	f04f 30ff 	mov.w	r0, #4294967295
 8007558:	e78e      	b.n	8007478 <__sflush_r+0x1c>
 800755a:	4407      	add	r7, r0
 800755c:	eba8 0800 	sub.w	r8, r8, r0
 8007560:	e7e9      	b.n	8007536 <__sflush_r+0xda>
 8007562:	bf00      	nop
 8007564:	20400001 	.word	0x20400001

08007568 <_fflush_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	690b      	ldr	r3, [r1, #16]
 800756c:	4605      	mov	r5, r0
 800756e:	460c      	mov	r4, r1
 8007570:	b913      	cbnz	r3, 8007578 <_fflush_r+0x10>
 8007572:	2500      	movs	r5, #0
 8007574:	4628      	mov	r0, r5
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	b118      	cbz	r0, 8007582 <_fflush_r+0x1a>
 800757a:	6983      	ldr	r3, [r0, #24]
 800757c:	b90b      	cbnz	r3, 8007582 <_fflush_r+0x1a>
 800757e:	f7ff fbfb 	bl	8006d78 <__sinit>
 8007582:	4b14      	ldr	r3, [pc, #80]	; (80075d4 <_fflush_r+0x6c>)
 8007584:	429c      	cmp	r4, r3
 8007586:	d11b      	bne.n	80075c0 <_fflush_r+0x58>
 8007588:	686c      	ldr	r4, [r5, #4]
 800758a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d0ef      	beq.n	8007572 <_fflush_r+0xa>
 8007592:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007594:	07d0      	lsls	r0, r2, #31
 8007596:	d404      	bmi.n	80075a2 <_fflush_r+0x3a>
 8007598:	0599      	lsls	r1, r3, #22
 800759a:	d402      	bmi.n	80075a2 <_fflush_r+0x3a>
 800759c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800759e:	f7ff fcae 	bl	8006efe <__retarget_lock_acquire_recursive>
 80075a2:	4628      	mov	r0, r5
 80075a4:	4621      	mov	r1, r4
 80075a6:	f7ff ff59 	bl	800745c <__sflush_r>
 80075aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075ac:	07da      	lsls	r2, r3, #31
 80075ae:	4605      	mov	r5, r0
 80075b0:	d4e0      	bmi.n	8007574 <_fflush_r+0xc>
 80075b2:	89a3      	ldrh	r3, [r4, #12]
 80075b4:	059b      	lsls	r3, r3, #22
 80075b6:	d4dd      	bmi.n	8007574 <_fflush_r+0xc>
 80075b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ba:	f7ff fca1 	bl	8006f00 <__retarget_lock_release_recursive>
 80075be:	e7d9      	b.n	8007574 <_fflush_r+0xc>
 80075c0:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <_fflush_r+0x70>)
 80075c2:	429c      	cmp	r4, r3
 80075c4:	d101      	bne.n	80075ca <_fflush_r+0x62>
 80075c6:	68ac      	ldr	r4, [r5, #8]
 80075c8:	e7df      	b.n	800758a <_fflush_r+0x22>
 80075ca:	4b04      	ldr	r3, [pc, #16]	; (80075dc <_fflush_r+0x74>)
 80075cc:	429c      	cmp	r4, r3
 80075ce:	bf08      	it	eq
 80075d0:	68ec      	ldreq	r4, [r5, #12]
 80075d2:	e7da      	b.n	800758a <_fflush_r+0x22>
 80075d4:	080080d4 	.word	0x080080d4
 80075d8:	080080f4 	.word	0x080080f4
 80075dc:	080080b4 	.word	0x080080b4

080075e0 <_lseek_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	4d07      	ldr	r5, [pc, #28]	; (8007600 <_lseek_r+0x20>)
 80075e4:	4604      	mov	r4, r0
 80075e6:	4608      	mov	r0, r1
 80075e8:	4611      	mov	r1, r2
 80075ea:	2200      	movs	r2, #0
 80075ec:	602a      	str	r2, [r5, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	f7f9 fd76 	bl	80010e0 <_lseek>
 80075f4:	1c43      	adds	r3, r0, #1
 80075f6:	d102      	bne.n	80075fe <_lseek_r+0x1e>
 80075f8:	682b      	ldr	r3, [r5, #0]
 80075fa:	b103      	cbz	r3, 80075fe <_lseek_r+0x1e>
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	bd38      	pop	{r3, r4, r5, pc}
 8007600:	20005d98 	.word	0x20005d98

08007604 <__swhatbuf_r>:
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	460e      	mov	r6, r1
 8007608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800760c:	2900      	cmp	r1, #0
 800760e:	b096      	sub	sp, #88	; 0x58
 8007610:	4614      	mov	r4, r2
 8007612:	461d      	mov	r5, r3
 8007614:	da07      	bge.n	8007626 <__swhatbuf_r+0x22>
 8007616:	2300      	movs	r3, #0
 8007618:	602b      	str	r3, [r5, #0]
 800761a:	89b3      	ldrh	r3, [r6, #12]
 800761c:	061a      	lsls	r2, r3, #24
 800761e:	d410      	bmi.n	8007642 <__swhatbuf_r+0x3e>
 8007620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007624:	e00e      	b.n	8007644 <__swhatbuf_r+0x40>
 8007626:	466a      	mov	r2, sp
 8007628:	f000 fbac 	bl	8007d84 <_fstat_r>
 800762c:	2800      	cmp	r0, #0
 800762e:	dbf2      	blt.n	8007616 <__swhatbuf_r+0x12>
 8007630:	9a01      	ldr	r2, [sp, #4]
 8007632:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007636:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800763a:	425a      	negs	r2, r3
 800763c:	415a      	adcs	r2, r3
 800763e:	602a      	str	r2, [r5, #0]
 8007640:	e7ee      	b.n	8007620 <__swhatbuf_r+0x1c>
 8007642:	2340      	movs	r3, #64	; 0x40
 8007644:	2000      	movs	r0, #0
 8007646:	6023      	str	r3, [r4, #0]
 8007648:	b016      	add	sp, #88	; 0x58
 800764a:	bd70      	pop	{r4, r5, r6, pc}

0800764c <__smakebuf_r>:
 800764c:	898b      	ldrh	r3, [r1, #12]
 800764e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007650:	079d      	lsls	r5, r3, #30
 8007652:	4606      	mov	r6, r0
 8007654:	460c      	mov	r4, r1
 8007656:	d507      	bpl.n	8007668 <__smakebuf_r+0x1c>
 8007658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	6123      	str	r3, [r4, #16]
 8007660:	2301      	movs	r3, #1
 8007662:	6163      	str	r3, [r4, #20]
 8007664:	b002      	add	sp, #8
 8007666:	bd70      	pop	{r4, r5, r6, pc}
 8007668:	ab01      	add	r3, sp, #4
 800766a:	466a      	mov	r2, sp
 800766c:	f7ff ffca 	bl	8007604 <__swhatbuf_r>
 8007670:	9900      	ldr	r1, [sp, #0]
 8007672:	4605      	mov	r5, r0
 8007674:	4630      	mov	r0, r6
 8007676:	f7ff fc69 	bl	8006f4c <_malloc_r>
 800767a:	b948      	cbnz	r0, 8007690 <__smakebuf_r+0x44>
 800767c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007680:	059a      	lsls	r2, r3, #22
 8007682:	d4ef      	bmi.n	8007664 <__smakebuf_r+0x18>
 8007684:	f023 0303 	bic.w	r3, r3, #3
 8007688:	f043 0302 	orr.w	r3, r3, #2
 800768c:	81a3      	strh	r3, [r4, #12]
 800768e:	e7e3      	b.n	8007658 <__smakebuf_r+0xc>
 8007690:	4b0d      	ldr	r3, [pc, #52]	; (80076c8 <__smakebuf_r+0x7c>)
 8007692:	62b3      	str	r3, [r6, #40]	; 0x28
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	6020      	str	r0, [r4, #0]
 8007698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800769c:	81a3      	strh	r3, [r4, #12]
 800769e:	9b00      	ldr	r3, [sp, #0]
 80076a0:	6163      	str	r3, [r4, #20]
 80076a2:	9b01      	ldr	r3, [sp, #4]
 80076a4:	6120      	str	r0, [r4, #16]
 80076a6:	b15b      	cbz	r3, 80076c0 <__smakebuf_r+0x74>
 80076a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ac:	4630      	mov	r0, r6
 80076ae:	f000 fb7b 	bl	8007da8 <_isatty_r>
 80076b2:	b128      	cbz	r0, 80076c0 <__smakebuf_r+0x74>
 80076b4:	89a3      	ldrh	r3, [r4, #12]
 80076b6:	f023 0303 	bic.w	r3, r3, #3
 80076ba:	f043 0301 	orr.w	r3, r3, #1
 80076be:	81a3      	strh	r3, [r4, #12]
 80076c0:	89a0      	ldrh	r0, [r4, #12]
 80076c2:	4305      	orrs	r5, r0
 80076c4:	81a5      	strh	r5, [r4, #12]
 80076c6:	e7cd      	b.n	8007664 <__smakebuf_r+0x18>
 80076c8:	08006d11 	.word	0x08006d11

080076cc <__malloc_lock>:
 80076cc:	4801      	ldr	r0, [pc, #4]	; (80076d4 <__malloc_lock+0x8>)
 80076ce:	f7ff bc16 	b.w	8006efe <__retarget_lock_acquire_recursive>
 80076d2:	bf00      	nop
 80076d4:	20005d90 	.word	0x20005d90

080076d8 <__malloc_unlock>:
 80076d8:	4801      	ldr	r0, [pc, #4]	; (80076e0 <__malloc_unlock+0x8>)
 80076da:	f7ff bc11 	b.w	8006f00 <__retarget_lock_release_recursive>
 80076de:	bf00      	nop
 80076e0:	20005d90 	.word	0x20005d90

080076e4 <_free_r>:
 80076e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076e6:	2900      	cmp	r1, #0
 80076e8:	d048      	beq.n	800777c <_free_r+0x98>
 80076ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ee:	9001      	str	r0, [sp, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f1a1 0404 	sub.w	r4, r1, #4
 80076f6:	bfb8      	it	lt
 80076f8:	18e4      	addlt	r4, r4, r3
 80076fa:	f7ff ffe7 	bl	80076cc <__malloc_lock>
 80076fe:	4a20      	ldr	r2, [pc, #128]	; (8007780 <_free_r+0x9c>)
 8007700:	9801      	ldr	r0, [sp, #4]
 8007702:	6813      	ldr	r3, [r2, #0]
 8007704:	4615      	mov	r5, r2
 8007706:	b933      	cbnz	r3, 8007716 <_free_r+0x32>
 8007708:	6063      	str	r3, [r4, #4]
 800770a:	6014      	str	r4, [r2, #0]
 800770c:	b003      	add	sp, #12
 800770e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007712:	f7ff bfe1 	b.w	80076d8 <__malloc_unlock>
 8007716:	42a3      	cmp	r3, r4
 8007718:	d90b      	bls.n	8007732 <_free_r+0x4e>
 800771a:	6821      	ldr	r1, [r4, #0]
 800771c:	1862      	adds	r2, r4, r1
 800771e:	4293      	cmp	r3, r2
 8007720:	bf04      	itt	eq
 8007722:	681a      	ldreq	r2, [r3, #0]
 8007724:	685b      	ldreq	r3, [r3, #4]
 8007726:	6063      	str	r3, [r4, #4]
 8007728:	bf04      	itt	eq
 800772a:	1852      	addeq	r2, r2, r1
 800772c:	6022      	streq	r2, [r4, #0]
 800772e:	602c      	str	r4, [r5, #0]
 8007730:	e7ec      	b.n	800770c <_free_r+0x28>
 8007732:	461a      	mov	r2, r3
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	b10b      	cbz	r3, 800773c <_free_r+0x58>
 8007738:	42a3      	cmp	r3, r4
 800773a:	d9fa      	bls.n	8007732 <_free_r+0x4e>
 800773c:	6811      	ldr	r1, [r2, #0]
 800773e:	1855      	adds	r5, r2, r1
 8007740:	42a5      	cmp	r5, r4
 8007742:	d10b      	bne.n	800775c <_free_r+0x78>
 8007744:	6824      	ldr	r4, [r4, #0]
 8007746:	4421      	add	r1, r4
 8007748:	1854      	adds	r4, r2, r1
 800774a:	42a3      	cmp	r3, r4
 800774c:	6011      	str	r1, [r2, #0]
 800774e:	d1dd      	bne.n	800770c <_free_r+0x28>
 8007750:	681c      	ldr	r4, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	6053      	str	r3, [r2, #4]
 8007756:	4421      	add	r1, r4
 8007758:	6011      	str	r1, [r2, #0]
 800775a:	e7d7      	b.n	800770c <_free_r+0x28>
 800775c:	d902      	bls.n	8007764 <_free_r+0x80>
 800775e:	230c      	movs	r3, #12
 8007760:	6003      	str	r3, [r0, #0]
 8007762:	e7d3      	b.n	800770c <_free_r+0x28>
 8007764:	6825      	ldr	r5, [r4, #0]
 8007766:	1961      	adds	r1, r4, r5
 8007768:	428b      	cmp	r3, r1
 800776a:	bf04      	itt	eq
 800776c:	6819      	ldreq	r1, [r3, #0]
 800776e:	685b      	ldreq	r3, [r3, #4]
 8007770:	6063      	str	r3, [r4, #4]
 8007772:	bf04      	itt	eq
 8007774:	1949      	addeq	r1, r1, r5
 8007776:	6021      	streq	r1, [r4, #0]
 8007778:	6054      	str	r4, [r2, #4]
 800777a:	e7c7      	b.n	800770c <_free_r+0x28>
 800777c:	b003      	add	sp, #12
 800777e:	bd30      	pop	{r4, r5, pc}
 8007780:	20001ad0 	.word	0x20001ad0

08007784 <__sfputc_r>:
 8007784:	6893      	ldr	r3, [r2, #8]
 8007786:	3b01      	subs	r3, #1
 8007788:	2b00      	cmp	r3, #0
 800778a:	b410      	push	{r4}
 800778c:	6093      	str	r3, [r2, #8]
 800778e:	da08      	bge.n	80077a2 <__sfputc_r+0x1e>
 8007790:	6994      	ldr	r4, [r2, #24]
 8007792:	42a3      	cmp	r3, r4
 8007794:	db01      	blt.n	800779a <__sfputc_r+0x16>
 8007796:	290a      	cmp	r1, #10
 8007798:	d103      	bne.n	80077a2 <__sfputc_r+0x1e>
 800779a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800779e:	f7ff bd7b 	b.w	8007298 <__swbuf_r>
 80077a2:	6813      	ldr	r3, [r2, #0]
 80077a4:	1c58      	adds	r0, r3, #1
 80077a6:	6010      	str	r0, [r2, #0]
 80077a8:	7019      	strb	r1, [r3, #0]
 80077aa:	4608      	mov	r0, r1
 80077ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <__sfputs_r>:
 80077b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b4:	4606      	mov	r6, r0
 80077b6:	460f      	mov	r7, r1
 80077b8:	4614      	mov	r4, r2
 80077ba:	18d5      	adds	r5, r2, r3
 80077bc:	42ac      	cmp	r4, r5
 80077be:	d101      	bne.n	80077c4 <__sfputs_r+0x12>
 80077c0:	2000      	movs	r0, #0
 80077c2:	e007      	b.n	80077d4 <__sfputs_r+0x22>
 80077c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c8:	463a      	mov	r2, r7
 80077ca:	4630      	mov	r0, r6
 80077cc:	f7ff ffda 	bl	8007784 <__sfputc_r>
 80077d0:	1c43      	adds	r3, r0, #1
 80077d2:	d1f3      	bne.n	80077bc <__sfputs_r+0xa>
 80077d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077d8 <_vfiprintf_r>:
 80077d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	460d      	mov	r5, r1
 80077de:	b09d      	sub	sp, #116	; 0x74
 80077e0:	4614      	mov	r4, r2
 80077e2:	4698      	mov	r8, r3
 80077e4:	4606      	mov	r6, r0
 80077e6:	b118      	cbz	r0, 80077f0 <_vfiprintf_r+0x18>
 80077e8:	6983      	ldr	r3, [r0, #24]
 80077ea:	b90b      	cbnz	r3, 80077f0 <_vfiprintf_r+0x18>
 80077ec:	f7ff fac4 	bl	8006d78 <__sinit>
 80077f0:	4b89      	ldr	r3, [pc, #548]	; (8007a18 <_vfiprintf_r+0x240>)
 80077f2:	429d      	cmp	r5, r3
 80077f4:	d11b      	bne.n	800782e <_vfiprintf_r+0x56>
 80077f6:	6875      	ldr	r5, [r6, #4]
 80077f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077fa:	07d9      	lsls	r1, r3, #31
 80077fc:	d405      	bmi.n	800780a <_vfiprintf_r+0x32>
 80077fe:	89ab      	ldrh	r3, [r5, #12]
 8007800:	059a      	lsls	r2, r3, #22
 8007802:	d402      	bmi.n	800780a <_vfiprintf_r+0x32>
 8007804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007806:	f7ff fb7a 	bl	8006efe <__retarget_lock_acquire_recursive>
 800780a:	89ab      	ldrh	r3, [r5, #12]
 800780c:	071b      	lsls	r3, r3, #28
 800780e:	d501      	bpl.n	8007814 <_vfiprintf_r+0x3c>
 8007810:	692b      	ldr	r3, [r5, #16]
 8007812:	b9eb      	cbnz	r3, 8007850 <_vfiprintf_r+0x78>
 8007814:	4629      	mov	r1, r5
 8007816:	4630      	mov	r0, r6
 8007818:	f7ff fda2 	bl	8007360 <__swsetup_r>
 800781c:	b1c0      	cbz	r0, 8007850 <_vfiprintf_r+0x78>
 800781e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007820:	07dc      	lsls	r4, r3, #31
 8007822:	d50e      	bpl.n	8007842 <_vfiprintf_r+0x6a>
 8007824:	f04f 30ff 	mov.w	r0, #4294967295
 8007828:	b01d      	add	sp, #116	; 0x74
 800782a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782e:	4b7b      	ldr	r3, [pc, #492]	; (8007a1c <_vfiprintf_r+0x244>)
 8007830:	429d      	cmp	r5, r3
 8007832:	d101      	bne.n	8007838 <_vfiprintf_r+0x60>
 8007834:	68b5      	ldr	r5, [r6, #8]
 8007836:	e7df      	b.n	80077f8 <_vfiprintf_r+0x20>
 8007838:	4b79      	ldr	r3, [pc, #484]	; (8007a20 <_vfiprintf_r+0x248>)
 800783a:	429d      	cmp	r5, r3
 800783c:	bf08      	it	eq
 800783e:	68f5      	ldreq	r5, [r6, #12]
 8007840:	e7da      	b.n	80077f8 <_vfiprintf_r+0x20>
 8007842:	89ab      	ldrh	r3, [r5, #12]
 8007844:	0598      	lsls	r0, r3, #22
 8007846:	d4ed      	bmi.n	8007824 <_vfiprintf_r+0x4c>
 8007848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800784a:	f7ff fb59 	bl	8006f00 <__retarget_lock_release_recursive>
 800784e:	e7e9      	b.n	8007824 <_vfiprintf_r+0x4c>
 8007850:	2300      	movs	r3, #0
 8007852:	9309      	str	r3, [sp, #36]	; 0x24
 8007854:	2320      	movs	r3, #32
 8007856:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800785a:	f8cd 800c 	str.w	r8, [sp, #12]
 800785e:	2330      	movs	r3, #48	; 0x30
 8007860:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a24 <_vfiprintf_r+0x24c>
 8007864:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007868:	f04f 0901 	mov.w	r9, #1
 800786c:	4623      	mov	r3, r4
 800786e:	469a      	mov	sl, r3
 8007870:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007874:	b10a      	cbz	r2, 800787a <_vfiprintf_r+0xa2>
 8007876:	2a25      	cmp	r2, #37	; 0x25
 8007878:	d1f9      	bne.n	800786e <_vfiprintf_r+0x96>
 800787a:	ebba 0b04 	subs.w	fp, sl, r4
 800787e:	d00b      	beq.n	8007898 <_vfiprintf_r+0xc0>
 8007880:	465b      	mov	r3, fp
 8007882:	4622      	mov	r2, r4
 8007884:	4629      	mov	r1, r5
 8007886:	4630      	mov	r0, r6
 8007888:	f7ff ff93 	bl	80077b2 <__sfputs_r>
 800788c:	3001      	adds	r0, #1
 800788e:	f000 80aa 	beq.w	80079e6 <_vfiprintf_r+0x20e>
 8007892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007894:	445a      	add	r2, fp
 8007896:	9209      	str	r2, [sp, #36]	; 0x24
 8007898:	f89a 3000 	ldrb.w	r3, [sl]
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 80a2 	beq.w	80079e6 <_vfiprintf_r+0x20e>
 80078a2:	2300      	movs	r3, #0
 80078a4:	f04f 32ff 	mov.w	r2, #4294967295
 80078a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078ac:	f10a 0a01 	add.w	sl, sl, #1
 80078b0:	9304      	str	r3, [sp, #16]
 80078b2:	9307      	str	r3, [sp, #28]
 80078b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078b8:	931a      	str	r3, [sp, #104]	; 0x68
 80078ba:	4654      	mov	r4, sl
 80078bc:	2205      	movs	r2, #5
 80078be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c2:	4858      	ldr	r0, [pc, #352]	; (8007a24 <_vfiprintf_r+0x24c>)
 80078c4:	f7f8 fc84 	bl	80001d0 <memchr>
 80078c8:	9a04      	ldr	r2, [sp, #16]
 80078ca:	b9d8      	cbnz	r0, 8007904 <_vfiprintf_r+0x12c>
 80078cc:	06d1      	lsls	r1, r2, #27
 80078ce:	bf44      	itt	mi
 80078d0:	2320      	movmi	r3, #32
 80078d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078d6:	0713      	lsls	r3, r2, #28
 80078d8:	bf44      	itt	mi
 80078da:	232b      	movmi	r3, #43	; 0x2b
 80078dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078e0:	f89a 3000 	ldrb.w	r3, [sl]
 80078e4:	2b2a      	cmp	r3, #42	; 0x2a
 80078e6:	d015      	beq.n	8007914 <_vfiprintf_r+0x13c>
 80078e8:	9a07      	ldr	r2, [sp, #28]
 80078ea:	4654      	mov	r4, sl
 80078ec:	2000      	movs	r0, #0
 80078ee:	f04f 0c0a 	mov.w	ip, #10
 80078f2:	4621      	mov	r1, r4
 80078f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078f8:	3b30      	subs	r3, #48	; 0x30
 80078fa:	2b09      	cmp	r3, #9
 80078fc:	d94e      	bls.n	800799c <_vfiprintf_r+0x1c4>
 80078fe:	b1b0      	cbz	r0, 800792e <_vfiprintf_r+0x156>
 8007900:	9207      	str	r2, [sp, #28]
 8007902:	e014      	b.n	800792e <_vfiprintf_r+0x156>
 8007904:	eba0 0308 	sub.w	r3, r0, r8
 8007908:	fa09 f303 	lsl.w	r3, r9, r3
 800790c:	4313      	orrs	r3, r2
 800790e:	9304      	str	r3, [sp, #16]
 8007910:	46a2      	mov	sl, r4
 8007912:	e7d2      	b.n	80078ba <_vfiprintf_r+0xe2>
 8007914:	9b03      	ldr	r3, [sp, #12]
 8007916:	1d19      	adds	r1, r3, #4
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	9103      	str	r1, [sp, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	bfbb      	ittet	lt
 8007920:	425b      	neglt	r3, r3
 8007922:	f042 0202 	orrlt.w	r2, r2, #2
 8007926:	9307      	strge	r3, [sp, #28]
 8007928:	9307      	strlt	r3, [sp, #28]
 800792a:	bfb8      	it	lt
 800792c:	9204      	strlt	r2, [sp, #16]
 800792e:	7823      	ldrb	r3, [r4, #0]
 8007930:	2b2e      	cmp	r3, #46	; 0x2e
 8007932:	d10c      	bne.n	800794e <_vfiprintf_r+0x176>
 8007934:	7863      	ldrb	r3, [r4, #1]
 8007936:	2b2a      	cmp	r3, #42	; 0x2a
 8007938:	d135      	bne.n	80079a6 <_vfiprintf_r+0x1ce>
 800793a:	9b03      	ldr	r3, [sp, #12]
 800793c:	1d1a      	adds	r2, r3, #4
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	9203      	str	r2, [sp, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	bfb8      	it	lt
 8007946:	f04f 33ff 	movlt.w	r3, #4294967295
 800794a:	3402      	adds	r4, #2
 800794c:	9305      	str	r3, [sp, #20]
 800794e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a34 <_vfiprintf_r+0x25c>
 8007952:	7821      	ldrb	r1, [r4, #0]
 8007954:	2203      	movs	r2, #3
 8007956:	4650      	mov	r0, sl
 8007958:	f7f8 fc3a 	bl	80001d0 <memchr>
 800795c:	b140      	cbz	r0, 8007970 <_vfiprintf_r+0x198>
 800795e:	2340      	movs	r3, #64	; 0x40
 8007960:	eba0 000a 	sub.w	r0, r0, sl
 8007964:	fa03 f000 	lsl.w	r0, r3, r0
 8007968:	9b04      	ldr	r3, [sp, #16]
 800796a:	4303      	orrs	r3, r0
 800796c:	3401      	adds	r4, #1
 800796e:	9304      	str	r3, [sp, #16]
 8007970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007974:	482c      	ldr	r0, [pc, #176]	; (8007a28 <_vfiprintf_r+0x250>)
 8007976:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800797a:	2206      	movs	r2, #6
 800797c:	f7f8 fc28 	bl	80001d0 <memchr>
 8007980:	2800      	cmp	r0, #0
 8007982:	d03f      	beq.n	8007a04 <_vfiprintf_r+0x22c>
 8007984:	4b29      	ldr	r3, [pc, #164]	; (8007a2c <_vfiprintf_r+0x254>)
 8007986:	bb1b      	cbnz	r3, 80079d0 <_vfiprintf_r+0x1f8>
 8007988:	9b03      	ldr	r3, [sp, #12]
 800798a:	3307      	adds	r3, #7
 800798c:	f023 0307 	bic.w	r3, r3, #7
 8007990:	3308      	adds	r3, #8
 8007992:	9303      	str	r3, [sp, #12]
 8007994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007996:	443b      	add	r3, r7
 8007998:	9309      	str	r3, [sp, #36]	; 0x24
 800799a:	e767      	b.n	800786c <_vfiprintf_r+0x94>
 800799c:	fb0c 3202 	mla	r2, ip, r2, r3
 80079a0:	460c      	mov	r4, r1
 80079a2:	2001      	movs	r0, #1
 80079a4:	e7a5      	b.n	80078f2 <_vfiprintf_r+0x11a>
 80079a6:	2300      	movs	r3, #0
 80079a8:	3401      	adds	r4, #1
 80079aa:	9305      	str	r3, [sp, #20]
 80079ac:	4619      	mov	r1, r3
 80079ae:	f04f 0c0a 	mov.w	ip, #10
 80079b2:	4620      	mov	r0, r4
 80079b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079b8:	3a30      	subs	r2, #48	; 0x30
 80079ba:	2a09      	cmp	r2, #9
 80079bc:	d903      	bls.n	80079c6 <_vfiprintf_r+0x1ee>
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d0c5      	beq.n	800794e <_vfiprintf_r+0x176>
 80079c2:	9105      	str	r1, [sp, #20]
 80079c4:	e7c3      	b.n	800794e <_vfiprintf_r+0x176>
 80079c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80079ca:	4604      	mov	r4, r0
 80079cc:	2301      	movs	r3, #1
 80079ce:	e7f0      	b.n	80079b2 <_vfiprintf_r+0x1da>
 80079d0:	ab03      	add	r3, sp, #12
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	462a      	mov	r2, r5
 80079d6:	4b16      	ldr	r3, [pc, #88]	; (8007a30 <_vfiprintf_r+0x258>)
 80079d8:	a904      	add	r1, sp, #16
 80079da:	4630      	mov	r0, r6
 80079dc:	f3af 8000 	nop.w
 80079e0:	4607      	mov	r7, r0
 80079e2:	1c78      	adds	r0, r7, #1
 80079e4:	d1d6      	bne.n	8007994 <_vfiprintf_r+0x1bc>
 80079e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079e8:	07d9      	lsls	r1, r3, #31
 80079ea:	d405      	bmi.n	80079f8 <_vfiprintf_r+0x220>
 80079ec:	89ab      	ldrh	r3, [r5, #12]
 80079ee:	059a      	lsls	r2, r3, #22
 80079f0:	d402      	bmi.n	80079f8 <_vfiprintf_r+0x220>
 80079f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079f4:	f7ff fa84 	bl	8006f00 <__retarget_lock_release_recursive>
 80079f8:	89ab      	ldrh	r3, [r5, #12]
 80079fa:	065b      	lsls	r3, r3, #25
 80079fc:	f53f af12 	bmi.w	8007824 <_vfiprintf_r+0x4c>
 8007a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a02:	e711      	b.n	8007828 <_vfiprintf_r+0x50>
 8007a04:	ab03      	add	r3, sp, #12
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	462a      	mov	r2, r5
 8007a0a:	4b09      	ldr	r3, [pc, #36]	; (8007a30 <_vfiprintf_r+0x258>)
 8007a0c:	a904      	add	r1, sp, #16
 8007a0e:	4630      	mov	r0, r6
 8007a10:	f000 f880 	bl	8007b14 <_printf_i>
 8007a14:	e7e4      	b.n	80079e0 <_vfiprintf_r+0x208>
 8007a16:	bf00      	nop
 8007a18:	080080d4 	.word	0x080080d4
 8007a1c:	080080f4 	.word	0x080080f4
 8007a20:	080080b4 	.word	0x080080b4
 8007a24:	08008118 	.word	0x08008118
 8007a28:	08008122 	.word	0x08008122
 8007a2c:	00000000 	.word	0x00000000
 8007a30:	080077b3 	.word	0x080077b3
 8007a34:	0800811e 	.word	0x0800811e

08007a38 <_printf_common>:
 8007a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a3c:	4616      	mov	r6, r2
 8007a3e:	4699      	mov	r9, r3
 8007a40:	688a      	ldr	r2, [r1, #8]
 8007a42:	690b      	ldr	r3, [r1, #16]
 8007a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	bfb8      	it	lt
 8007a4c:	4613      	movlt	r3, r2
 8007a4e:	6033      	str	r3, [r6, #0]
 8007a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a54:	4607      	mov	r7, r0
 8007a56:	460c      	mov	r4, r1
 8007a58:	b10a      	cbz	r2, 8007a5e <_printf_common+0x26>
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	6033      	str	r3, [r6, #0]
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	0699      	lsls	r1, r3, #26
 8007a62:	bf42      	ittt	mi
 8007a64:	6833      	ldrmi	r3, [r6, #0]
 8007a66:	3302      	addmi	r3, #2
 8007a68:	6033      	strmi	r3, [r6, #0]
 8007a6a:	6825      	ldr	r5, [r4, #0]
 8007a6c:	f015 0506 	ands.w	r5, r5, #6
 8007a70:	d106      	bne.n	8007a80 <_printf_common+0x48>
 8007a72:	f104 0a19 	add.w	sl, r4, #25
 8007a76:	68e3      	ldr	r3, [r4, #12]
 8007a78:	6832      	ldr	r2, [r6, #0]
 8007a7a:	1a9b      	subs	r3, r3, r2
 8007a7c:	42ab      	cmp	r3, r5
 8007a7e:	dc26      	bgt.n	8007ace <_printf_common+0x96>
 8007a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a84:	1e13      	subs	r3, r2, #0
 8007a86:	6822      	ldr	r2, [r4, #0]
 8007a88:	bf18      	it	ne
 8007a8a:	2301      	movne	r3, #1
 8007a8c:	0692      	lsls	r2, r2, #26
 8007a8e:	d42b      	bmi.n	8007ae8 <_printf_common+0xb0>
 8007a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a94:	4649      	mov	r1, r9
 8007a96:	4638      	mov	r0, r7
 8007a98:	47c0      	blx	r8
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	d01e      	beq.n	8007adc <_printf_common+0xa4>
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	68e5      	ldr	r5, [r4, #12]
 8007aa2:	6832      	ldr	r2, [r6, #0]
 8007aa4:	f003 0306 	and.w	r3, r3, #6
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	bf08      	it	eq
 8007aac:	1aad      	subeq	r5, r5, r2
 8007aae:	68a3      	ldr	r3, [r4, #8]
 8007ab0:	6922      	ldr	r2, [r4, #16]
 8007ab2:	bf0c      	ite	eq
 8007ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ab8:	2500      	movne	r5, #0
 8007aba:	4293      	cmp	r3, r2
 8007abc:	bfc4      	itt	gt
 8007abe:	1a9b      	subgt	r3, r3, r2
 8007ac0:	18ed      	addgt	r5, r5, r3
 8007ac2:	2600      	movs	r6, #0
 8007ac4:	341a      	adds	r4, #26
 8007ac6:	42b5      	cmp	r5, r6
 8007ac8:	d11a      	bne.n	8007b00 <_printf_common+0xc8>
 8007aca:	2000      	movs	r0, #0
 8007acc:	e008      	b.n	8007ae0 <_printf_common+0xa8>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	4652      	mov	r2, sl
 8007ad2:	4649      	mov	r1, r9
 8007ad4:	4638      	mov	r0, r7
 8007ad6:	47c0      	blx	r8
 8007ad8:	3001      	adds	r0, #1
 8007ada:	d103      	bne.n	8007ae4 <_printf_common+0xac>
 8007adc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae4:	3501      	adds	r5, #1
 8007ae6:	e7c6      	b.n	8007a76 <_printf_common+0x3e>
 8007ae8:	18e1      	adds	r1, r4, r3
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	2030      	movs	r0, #48	; 0x30
 8007aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007af2:	4422      	add	r2, r4
 8007af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007afc:	3302      	adds	r3, #2
 8007afe:	e7c7      	b.n	8007a90 <_printf_common+0x58>
 8007b00:	2301      	movs	r3, #1
 8007b02:	4622      	mov	r2, r4
 8007b04:	4649      	mov	r1, r9
 8007b06:	4638      	mov	r0, r7
 8007b08:	47c0      	blx	r8
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	d0e6      	beq.n	8007adc <_printf_common+0xa4>
 8007b0e:	3601      	adds	r6, #1
 8007b10:	e7d9      	b.n	8007ac6 <_printf_common+0x8e>
	...

08007b14 <_printf_i>:
 8007b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b18:	460c      	mov	r4, r1
 8007b1a:	4691      	mov	r9, r2
 8007b1c:	7e27      	ldrb	r7, [r4, #24]
 8007b1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b20:	2f78      	cmp	r7, #120	; 0x78
 8007b22:	4680      	mov	r8, r0
 8007b24:	469a      	mov	sl, r3
 8007b26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b2a:	d807      	bhi.n	8007b3c <_printf_i+0x28>
 8007b2c:	2f62      	cmp	r7, #98	; 0x62
 8007b2e:	d80a      	bhi.n	8007b46 <_printf_i+0x32>
 8007b30:	2f00      	cmp	r7, #0
 8007b32:	f000 80d8 	beq.w	8007ce6 <_printf_i+0x1d2>
 8007b36:	2f58      	cmp	r7, #88	; 0x58
 8007b38:	f000 80a3 	beq.w	8007c82 <_printf_i+0x16e>
 8007b3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b44:	e03a      	b.n	8007bbc <_printf_i+0xa8>
 8007b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b4a:	2b15      	cmp	r3, #21
 8007b4c:	d8f6      	bhi.n	8007b3c <_printf_i+0x28>
 8007b4e:	a001      	add	r0, pc, #4	; (adr r0, 8007b54 <_printf_i+0x40>)
 8007b50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b54:	08007bad 	.word	0x08007bad
 8007b58:	08007bc1 	.word	0x08007bc1
 8007b5c:	08007b3d 	.word	0x08007b3d
 8007b60:	08007b3d 	.word	0x08007b3d
 8007b64:	08007b3d 	.word	0x08007b3d
 8007b68:	08007b3d 	.word	0x08007b3d
 8007b6c:	08007bc1 	.word	0x08007bc1
 8007b70:	08007b3d 	.word	0x08007b3d
 8007b74:	08007b3d 	.word	0x08007b3d
 8007b78:	08007b3d 	.word	0x08007b3d
 8007b7c:	08007b3d 	.word	0x08007b3d
 8007b80:	08007ccd 	.word	0x08007ccd
 8007b84:	08007bf1 	.word	0x08007bf1
 8007b88:	08007caf 	.word	0x08007caf
 8007b8c:	08007b3d 	.word	0x08007b3d
 8007b90:	08007b3d 	.word	0x08007b3d
 8007b94:	08007cef 	.word	0x08007cef
 8007b98:	08007b3d 	.word	0x08007b3d
 8007b9c:	08007bf1 	.word	0x08007bf1
 8007ba0:	08007b3d 	.word	0x08007b3d
 8007ba4:	08007b3d 	.word	0x08007b3d
 8007ba8:	08007cb7 	.word	0x08007cb7
 8007bac:	680b      	ldr	r3, [r1, #0]
 8007bae:	1d1a      	adds	r2, r3, #4
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	600a      	str	r2, [r1, #0]
 8007bb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e0a3      	b.n	8007d08 <_printf_i+0x1f4>
 8007bc0:	6825      	ldr	r5, [r4, #0]
 8007bc2:	6808      	ldr	r0, [r1, #0]
 8007bc4:	062e      	lsls	r6, r5, #24
 8007bc6:	f100 0304 	add.w	r3, r0, #4
 8007bca:	d50a      	bpl.n	8007be2 <_printf_i+0xce>
 8007bcc:	6805      	ldr	r5, [r0, #0]
 8007bce:	600b      	str	r3, [r1, #0]
 8007bd0:	2d00      	cmp	r5, #0
 8007bd2:	da03      	bge.n	8007bdc <_printf_i+0xc8>
 8007bd4:	232d      	movs	r3, #45	; 0x2d
 8007bd6:	426d      	negs	r5, r5
 8007bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bdc:	485e      	ldr	r0, [pc, #376]	; (8007d58 <_printf_i+0x244>)
 8007bde:	230a      	movs	r3, #10
 8007be0:	e019      	b.n	8007c16 <_printf_i+0x102>
 8007be2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007be6:	6805      	ldr	r5, [r0, #0]
 8007be8:	600b      	str	r3, [r1, #0]
 8007bea:	bf18      	it	ne
 8007bec:	b22d      	sxthne	r5, r5
 8007bee:	e7ef      	b.n	8007bd0 <_printf_i+0xbc>
 8007bf0:	680b      	ldr	r3, [r1, #0]
 8007bf2:	6825      	ldr	r5, [r4, #0]
 8007bf4:	1d18      	adds	r0, r3, #4
 8007bf6:	6008      	str	r0, [r1, #0]
 8007bf8:	0628      	lsls	r0, r5, #24
 8007bfa:	d501      	bpl.n	8007c00 <_printf_i+0xec>
 8007bfc:	681d      	ldr	r5, [r3, #0]
 8007bfe:	e002      	b.n	8007c06 <_printf_i+0xf2>
 8007c00:	0669      	lsls	r1, r5, #25
 8007c02:	d5fb      	bpl.n	8007bfc <_printf_i+0xe8>
 8007c04:	881d      	ldrh	r5, [r3, #0]
 8007c06:	4854      	ldr	r0, [pc, #336]	; (8007d58 <_printf_i+0x244>)
 8007c08:	2f6f      	cmp	r7, #111	; 0x6f
 8007c0a:	bf0c      	ite	eq
 8007c0c:	2308      	moveq	r3, #8
 8007c0e:	230a      	movne	r3, #10
 8007c10:	2100      	movs	r1, #0
 8007c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c16:	6866      	ldr	r6, [r4, #4]
 8007c18:	60a6      	str	r6, [r4, #8]
 8007c1a:	2e00      	cmp	r6, #0
 8007c1c:	bfa2      	ittt	ge
 8007c1e:	6821      	ldrge	r1, [r4, #0]
 8007c20:	f021 0104 	bicge.w	r1, r1, #4
 8007c24:	6021      	strge	r1, [r4, #0]
 8007c26:	b90d      	cbnz	r5, 8007c2c <_printf_i+0x118>
 8007c28:	2e00      	cmp	r6, #0
 8007c2a:	d04d      	beq.n	8007cc8 <_printf_i+0x1b4>
 8007c2c:	4616      	mov	r6, r2
 8007c2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c32:	fb03 5711 	mls	r7, r3, r1, r5
 8007c36:	5dc7      	ldrb	r7, [r0, r7]
 8007c38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c3c:	462f      	mov	r7, r5
 8007c3e:	42bb      	cmp	r3, r7
 8007c40:	460d      	mov	r5, r1
 8007c42:	d9f4      	bls.n	8007c2e <_printf_i+0x11a>
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d10b      	bne.n	8007c60 <_printf_i+0x14c>
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	07df      	lsls	r7, r3, #31
 8007c4c:	d508      	bpl.n	8007c60 <_printf_i+0x14c>
 8007c4e:	6923      	ldr	r3, [r4, #16]
 8007c50:	6861      	ldr	r1, [r4, #4]
 8007c52:	4299      	cmp	r1, r3
 8007c54:	bfde      	ittt	le
 8007c56:	2330      	movle	r3, #48	; 0x30
 8007c58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c60:	1b92      	subs	r2, r2, r6
 8007c62:	6122      	str	r2, [r4, #16]
 8007c64:	f8cd a000 	str.w	sl, [sp]
 8007c68:	464b      	mov	r3, r9
 8007c6a:	aa03      	add	r2, sp, #12
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	4640      	mov	r0, r8
 8007c70:	f7ff fee2 	bl	8007a38 <_printf_common>
 8007c74:	3001      	adds	r0, #1
 8007c76:	d14c      	bne.n	8007d12 <_printf_i+0x1fe>
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7c:	b004      	add	sp, #16
 8007c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c82:	4835      	ldr	r0, [pc, #212]	; (8007d58 <_printf_i+0x244>)
 8007c84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	680e      	ldr	r6, [r1, #0]
 8007c8c:	061f      	lsls	r7, r3, #24
 8007c8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c92:	600e      	str	r6, [r1, #0]
 8007c94:	d514      	bpl.n	8007cc0 <_printf_i+0x1ac>
 8007c96:	07d9      	lsls	r1, r3, #31
 8007c98:	bf44      	itt	mi
 8007c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8007c9e:	6023      	strmi	r3, [r4, #0]
 8007ca0:	b91d      	cbnz	r5, 8007caa <_printf_i+0x196>
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	f023 0320 	bic.w	r3, r3, #32
 8007ca8:	6023      	str	r3, [r4, #0]
 8007caa:	2310      	movs	r3, #16
 8007cac:	e7b0      	b.n	8007c10 <_printf_i+0xfc>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	f043 0320 	orr.w	r3, r3, #32
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	2378      	movs	r3, #120	; 0x78
 8007cb8:	4828      	ldr	r0, [pc, #160]	; (8007d5c <_printf_i+0x248>)
 8007cba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cbe:	e7e3      	b.n	8007c88 <_printf_i+0x174>
 8007cc0:	065e      	lsls	r6, r3, #25
 8007cc2:	bf48      	it	mi
 8007cc4:	b2ad      	uxthmi	r5, r5
 8007cc6:	e7e6      	b.n	8007c96 <_printf_i+0x182>
 8007cc8:	4616      	mov	r6, r2
 8007cca:	e7bb      	b.n	8007c44 <_printf_i+0x130>
 8007ccc:	680b      	ldr	r3, [r1, #0]
 8007cce:	6826      	ldr	r6, [r4, #0]
 8007cd0:	6960      	ldr	r0, [r4, #20]
 8007cd2:	1d1d      	adds	r5, r3, #4
 8007cd4:	600d      	str	r5, [r1, #0]
 8007cd6:	0635      	lsls	r5, r6, #24
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	d501      	bpl.n	8007ce0 <_printf_i+0x1cc>
 8007cdc:	6018      	str	r0, [r3, #0]
 8007cde:	e002      	b.n	8007ce6 <_printf_i+0x1d2>
 8007ce0:	0671      	lsls	r1, r6, #25
 8007ce2:	d5fb      	bpl.n	8007cdc <_printf_i+0x1c8>
 8007ce4:	8018      	strh	r0, [r3, #0]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	6123      	str	r3, [r4, #16]
 8007cea:	4616      	mov	r6, r2
 8007cec:	e7ba      	b.n	8007c64 <_printf_i+0x150>
 8007cee:	680b      	ldr	r3, [r1, #0]
 8007cf0:	1d1a      	adds	r2, r3, #4
 8007cf2:	600a      	str	r2, [r1, #0]
 8007cf4:	681e      	ldr	r6, [r3, #0]
 8007cf6:	6862      	ldr	r2, [r4, #4]
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f7f8 fa68 	bl	80001d0 <memchr>
 8007d00:	b108      	cbz	r0, 8007d06 <_printf_i+0x1f2>
 8007d02:	1b80      	subs	r0, r0, r6
 8007d04:	6060      	str	r0, [r4, #4]
 8007d06:	6863      	ldr	r3, [r4, #4]
 8007d08:	6123      	str	r3, [r4, #16]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d10:	e7a8      	b.n	8007c64 <_printf_i+0x150>
 8007d12:	6923      	ldr	r3, [r4, #16]
 8007d14:	4632      	mov	r2, r6
 8007d16:	4649      	mov	r1, r9
 8007d18:	4640      	mov	r0, r8
 8007d1a:	47d0      	blx	sl
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d0ab      	beq.n	8007c78 <_printf_i+0x164>
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	079b      	lsls	r3, r3, #30
 8007d24:	d413      	bmi.n	8007d4e <_printf_i+0x23a>
 8007d26:	68e0      	ldr	r0, [r4, #12]
 8007d28:	9b03      	ldr	r3, [sp, #12]
 8007d2a:	4298      	cmp	r0, r3
 8007d2c:	bfb8      	it	lt
 8007d2e:	4618      	movlt	r0, r3
 8007d30:	e7a4      	b.n	8007c7c <_printf_i+0x168>
 8007d32:	2301      	movs	r3, #1
 8007d34:	4632      	mov	r2, r6
 8007d36:	4649      	mov	r1, r9
 8007d38:	4640      	mov	r0, r8
 8007d3a:	47d0      	blx	sl
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d09b      	beq.n	8007c78 <_printf_i+0x164>
 8007d40:	3501      	adds	r5, #1
 8007d42:	68e3      	ldr	r3, [r4, #12]
 8007d44:	9903      	ldr	r1, [sp, #12]
 8007d46:	1a5b      	subs	r3, r3, r1
 8007d48:	42ab      	cmp	r3, r5
 8007d4a:	dcf2      	bgt.n	8007d32 <_printf_i+0x21e>
 8007d4c:	e7eb      	b.n	8007d26 <_printf_i+0x212>
 8007d4e:	2500      	movs	r5, #0
 8007d50:	f104 0619 	add.w	r6, r4, #25
 8007d54:	e7f5      	b.n	8007d42 <_printf_i+0x22e>
 8007d56:	bf00      	nop
 8007d58:	08008129 	.word	0x08008129
 8007d5c:	0800813a 	.word	0x0800813a

08007d60 <_read_r>:
 8007d60:	b538      	push	{r3, r4, r5, lr}
 8007d62:	4d07      	ldr	r5, [pc, #28]	; (8007d80 <_read_r+0x20>)
 8007d64:	4604      	mov	r4, r0
 8007d66:	4608      	mov	r0, r1
 8007d68:	4611      	mov	r1, r2
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	602a      	str	r2, [r5, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f7f9 f956 	bl	8001020 <_read>
 8007d74:	1c43      	adds	r3, r0, #1
 8007d76:	d102      	bne.n	8007d7e <_read_r+0x1e>
 8007d78:	682b      	ldr	r3, [r5, #0]
 8007d7a:	b103      	cbz	r3, 8007d7e <_read_r+0x1e>
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}
 8007d80:	20005d98 	.word	0x20005d98

08007d84 <_fstat_r>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	4d07      	ldr	r5, [pc, #28]	; (8007da4 <_fstat_r+0x20>)
 8007d88:	2300      	movs	r3, #0
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	4611      	mov	r1, r2
 8007d90:	602b      	str	r3, [r5, #0]
 8007d92:	f7f9 f98a 	bl	80010aa <_fstat>
 8007d96:	1c43      	adds	r3, r0, #1
 8007d98:	d102      	bne.n	8007da0 <_fstat_r+0x1c>
 8007d9a:	682b      	ldr	r3, [r5, #0]
 8007d9c:	b103      	cbz	r3, 8007da0 <_fstat_r+0x1c>
 8007d9e:	6023      	str	r3, [r4, #0]
 8007da0:	bd38      	pop	{r3, r4, r5, pc}
 8007da2:	bf00      	nop
 8007da4:	20005d98 	.word	0x20005d98

08007da8 <_isatty_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4d06      	ldr	r5, [pc, #24]	; (8007dc4 <_isatty_r+0x1c>)
 8007dac:	2300      	movs	r3, #0
 8007dae:	4604      	mov	r4, r0
 8007db0:	4608      	mov	r0, r1
 8007db2:	602b      	str	r3, [r5, #0]
 8007db4:	f7f9 f989 	bl	80010ca <_isatty>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_isatty_r+0x1a>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_isatty_r+0x1a>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	20005d98 	.word	0x20005d98

08007dc8 <_init>:
 8007dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dca:	bf00      	nop
 8007dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dce:	bc08      	pop	{r3}
 8007dd0:	469e      	mov	lr, r3
 8007dd2:	4770      	bx	lr

08007dd4 <_fini>:
 8007dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd6:	bf00      	nop
 8007dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dda:	bc08      	pop	{r3}
 8007ddc:	469e      	mov	lr, r3
 8007dde:	4770      	bx	lr
